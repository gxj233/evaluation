[
  {
    "table_paths": [
      "datasets/BIRD_dev-california_schools/frpm.csv",
      "datasets/BIRD_dev-california_schools/satscores.csv"
    ],
    "query": "How many schools in Contra Costa (directly funded) have number of test takers not more than 250?",
    "cot": "\nWe need to join df1 and df2 on the CDSCode column. Then, we need to filter the data for schools in Contra Costa (directly funded) and have number of test takers not more than 250.\n",
    "code": "import numpy as np\nimport pandas as pd\n\n# Load the data\n\n\n\n# Join the dataframes on CDSCode\ndf = pd.merge(df1, df2, on='CDSCode')\n\n# Filter the data for schools in Contra Costa (directly funded) and have number of test takers not more than 250\nfinal_df = df[(df['Charter School (Y/N)'] == 1) & (df['Charter Funding Type'] == 'Directly funded') & (df['NumTstTakr'] <= 250)]\n\n# Print the number of schools that meet the criteria\nprint(len(final_df))",
    "observation": "KeyError: 'CDSCode'",
    "true_result": "[(0,)]",
    "table_infos": "df1:\n|    |        CDSCode | Academic Year   |   County Code |   District Code |   School Code | County Name   | District Name                      | School Name                                   | District Type                    | School Type           | Educational Option Type   | NSLP Provision Status   |   Charter School (Y/N) |   Charter School Number | Charter Funding Type   |   IRC | Low Grade   |   High Grade |   Enrollment (K-12) |   Free Meal Count (K-12) |   Percent (%) Eligible Free (K-12) |   FRPM Count (K-12) |   Percent (%) Eligible FRPM (K-12) |   Enrollment (Ages 5-17) |   Free Meal Count (Ages 5-17) |   Percent (%) Eligible Free (Ages 5-17) |   FRPM Count (Ages 5-17) |   Percent (%) Eligible FRPM (Ages 5-17) |   2013-14 CALPADS Fall 1 Certification Status |\n|---:|---------------:|:----------------|--------------:|----------------:|--------------:|:--------------|:-----------------------------------|:----------------------------------------------|:---------------------------------|:----------------------|:--------------------------|:------------------------|-----------------------:|------------------------:|:-----------------------|------:|:------------|-------------:|--------------------:|-------------------------:|-----------------------------------:|--------------------:|-----------------------------------:|-------------------------:|------------------------------:|----------------------------------------:|-------------------------:|----------------------------------------:|----------------------------------------------:|\n|  0 | 01100170109835 | 2014-2015       |            01 |           10017 |       0109835 | Alameda       | Alameda County Office of Education | FAME Public Charter                           | County Office of Education (COE) | K-12 Schools (Public) | Traditional               |                         |                      1 |                    0728 | Directly funded        |     1 | K           |           12 |                1087 |                      565 |                           0.519779 |                 715 |                           0.657774 |                     1070 |                           553 |                                0.516822 |                      702 |                                0.656075 |                                             1 |\n|  1 | 01100170112607 | 2014-2015       |            01 |           10017 |       0112607 | Alameda       | Alameda County Office of Education | Envision Academy for Arts & Technology        | County Office of Education (COE) | High Schools (Public) | Traditional               |                         |                      1 |                    0811 | Directly funded        |     1 | 9           |           12 |                 395 |                      186 |                           0.470886 |                 186 |                           0.470886 |                      376 |                           182 |                                0.484043 |                      182 |                                0.484043 |                                             1 |\n|  2 | 01100170118489 | 2014-2015       |            01 |           10017 |       0118489 | Alameda       | Alameda County Office of Education | Aspire California College Preparatory Academy | County Office of Education (COE) | High Schools (Public) | Traditional               |                         |                      1 |                    1049 | Directly funded        |     1 | 9           |           12 |                 244 |                      134 |                           0.54918  |                 175 |                           0.717213 |                      230 |                           128 |                                0.556522 |                      168 |                                0.730435 |                                             1 |\ndf2:\n|    |           cds | rtype   | sname                                  | dname                              | cname   |   enroll12 |   NumTstTakr |   AvgScrRead |   AvgScrMath |   AvgScrWrite |   NumGE1500 |\n|---:|--------------:|:--------|:---------------------------------------|:-----------------------------------|:--------|-----------:|-------------:|-------------:|-------------:|--------------:|------------:|\n|  0 | 1100170000000 | D       |                                        | Alameda County Office of Education | Alameda |        398 |           88 |          418 |          418 |           417 |          14 |\n|  1 | 1100170109835 | S       | FAME Public Charter                    | Alameda County Office of Education | Alameda |         62 |           17 |          503 |          546 |           505 |           9 |\n|  2 | 1100170112607 | S       | Envision Academy for Arts & Technology | Alameda County Office of Education | Alameda |         75 |           71 |          397 |          387 |           395 |           5 |\nForeign keys:\n\n"
  },
  {
    "table_paths": ["datasets/BIRD_dev-california_schools/satscores.csv"],
    "query": "Which school in Contra Costa has the highest number of test takers?",
    "cot": "",
    "code": "import numpy as np\nimport pandas as pd\n\n# Assuming df is your DataFrame and it is already loaded\n\n# Data Preparation: This may include creating new columns, converting test_data types, etc.\n\n# Data Processing: This may include grouping, filtering, etc.\ndf_contra_costa = df[df['dname'] == 'Contra Costa']\ndf_contra_costa = df_contra_costa.sort_values(by='NumTstTakr', ascending=False)\n\n# Declare `final_df` Variable: Assign the prepared and processed test_data to `final_df`.\nfinal_df = df_contra_costa\n\n# Print the final result based on the question\nprint(\"The school with the highest number of test takers in Contra Costa is: \", final_df.iloc[0]['sname'])",
    "observation": "IndexError: single positional indexer is out-of-bounds",
    "true_result": "[('Dougherty Valley High',)]",
    "table_infos": "df:\n|    |           cds | rtype   | sname   | dname                              | cname   |   enroll12 |   NumTstTakr |   AvgScrRead |   AvgScrMath |   AvgScrWrite |   NumGE1500 |\n|---:|--------------:|:--------|:--------|:-----------------------------------|:--------|-----------:|-------------:|-------------:|-------------:|--------------:|------------:|\n|  0 | 1100170000000 | D       |         | Alameda County Office of Education | Alameda |        398 |           88 |          418 |          418 |           417 |          14 |\n"
  },
  {
    "table_paths": [
      "datasets/BIRD_dev-financial/client.csv",
      "datasets/BIRD_dev-financial/district.csv"
    ],
    "query": "List out the no. of districts that have female average salary is more than 6000 but less than 10000?",
    "cot": "\nTo solve this problem, we need to join df1 and df2 on district_id, then group by gender and calculate the average salary for each group. Finally, we can filter the groups based on the average salary.\n",
    "code": "import numpy as np\nimport pandas as pd\n\n# Assuming df3 is the dataframe that contains the salary information\n# df3:\n# |    |   client_id | salary   |\n# |---:|------------:|:---------|\n# |  0 |           1 | 7000     |\n# |  1 |           2 | 8000     |\n# |  2 |           3 | 9000     |\n\n# Join df1 and df2 on district_id\ndf = pd.merge(df1, df2, on='district_id')\n\n# Join df and df3 on client_id\ndf = pd.merge(df, df3, on='client_id')\n\n# Group by gender and calculate the average salary for each group\naverage_salary = df.groupby('gender')['salary'].mean()\n\n# Filter the groups based on the average salary\nfemale_average_salary = average_salary['F']\n\n# Check if the average salary is more than 6000 but less than 10000\nif 6000 < female_average_salary < 10000:\n    print(\"The number of districts that have female average salary is more than 6000 but less than 10000 is: \", len(df['district_id'].unique()))\nelse:\n    print(\"No districts meet the condition.\")",
    "observation": "NameError: name 'df3' is not defined",
    "true_result": "[(18,), (5,), (51,), (57,), (54,), (76,), (21,), (12,), (43,), (30,), (73,), (7,), (36,), (38,), (19,), (72,), (45,), (16,), (50,), (29,), (22,), (64,), (37,), (33,), (44,), (68,), (2,), (55,), (41,), (35,), (63,), (53,), (6,), (31,), (13,), (52,), (40,), (34,), (24,), (46,), (28,), (17,), (4,), (59,), (66,), (60,), (47,), (48,), (69,), (67,), (61,), (27,), (15,), (65,), (71,), (25,), (49,), (42,), (11,), (77,), (32,), (75,), (3,), (58,), (23,), (56,), (62,), (20,), (9,)]",
    "table_infos": "df1:\n|    |   client_id | gender   | birth_date   |   district_id |\n|---:|------------:|:---------|:-------------|--------------:|\n|  0 |           1 | F        | 1970-12-13   |            18 |\n|  1 |           2 | M        | 1945-02-04   |             1 |\n|  2 |           3 | F        | 1940-10-09   |             1 |\ndf2:\n|    |   district_id | A2          | A3              |      A4 |   A5 |   A6 |   A7 |   A8 |   A9 |   A10 |   A11 |   A12 |   A13 |   A14 |   A15 |   A16 |\n|---:|--------------:|:------------|:----------------|--------:|-----:|-----:|-----:|-----:|-----:|------:|------:|------:|------:|------:|------:|------:|\n|  0 |             1 | Hl.m. Praha | Prague          | 1204953 |    0 |    0 |    0 |    1 |    1 | 100   | 12541 |   0.2 |  0.43 |   167 | 85677 | 99107 |\n|  1 |             2 | Benesov     | central Bohemia |   88884 |   80 |   26 |    6 |    2 |    5 |  46.7 |  8507 |   1.6 |  1.85 |   132 |  2159 |  2674 |\n|  2 |             3 | Beroun      | central Bohemia |   75232 |   55 |   26 |    4 |    1 |    5 |  41.7 |  8980 |   1.9 |  2.21 |   111 |  2824 |  2813 |\nForeign keys:\ndf1.district_id = df2.district_id\n"
  },
  {
    "table_paths": [
      "datasets/BIRD_dev-financial/client.csv",
      "datasets/BIRD_dev-financial/district.csv"
    ],
    "query": "How many male customers who are living in North Bohemia have average salary greater than 8000?",
    "cot": "To solve this problem, we need to join df1 and df2 on district_id, filter out the male customers living in North Bohemia, and then count the number of customers with an average salary greater than 8000.\n",
    "code": "import numpy as np\nimport pandas as pd\n\n# Assuming df1 and df2 are the dataframes given in the question\n# Assuming df1 has a column 'salary' which represents the salary of the customers\n\n# Join df1 and df2 on district_id\ndf = pd.merge(df1, df2, on='district_id')\n\n# Filter out the male customers living in North Bohemia\ndf = df[(df['gender'] == 'M') & (df['A3'] == 'central Bohemia')]\n\n# Calculate the average salary\ndf['avg_salary'] = df['salary'].mean()\n\n# Count the number of customers with an average salary greater than 8000\ncount = df[df['avg_salary'] > 8000].shape[0]\n\nprint(count)",
    "observation": "KeyError: 'salary'",
    "true_result": "[(0,)]",
    "table_infos": "df1:\n|    |   client_id | gender   | birth_date   |   district_id |\n|---:|------------:|:---------|:-------------|--------------:|\n|  0 |           1 | F        | 1970-12-13   |            18 |\n|  1 |           2 | M        | 1945-02-04   |             1 |\n|  2 |           3 | F        | 1940-10-09   |             1 |\ndf2:\n|    |   district_id | A2          | A3              |      A4 |   A5 |   A6 |   A7 |   A8 |   A9 |   A10 |   A11 |   A12 |   A13 |   A14 |   A15 |   A16 |\n|---:|--------------:|:------------|:----------------|--------:|-----:|-----:|-----:|-----:|-----:|------:|------:|------:|------:|------:|------:|------:|\n|  0 |             1 | Hl.m. Praha | Prague          | 1204953 |    0 |    0 |    0 |    1 |    1 | 100   | 12541 |   0.2 |  0.43 |   167 | 85677 | 99107 |\n|  1 |             2 | Benesov     | central Bohemia |   88884 |   80 |   26 |    6 |    2 |    5 |  46.7 |  8507 |   1.6 |  1.85 |   132 |  2159 |  2674 |\n|  2 |             3 | Beroun      | central Bohemia |   75232 |   55 |   26 |    4 |    1 |    5 |  41.7 |  8980 |   1.9 |  2.21 |   111 |  2824 |  2813 |\nForeign keys:\ndf1.district_id = df2.district_id\n"
  },
  {
    "table_paths": [
      "datasets/BIRD_dev-financial/loan.csv",
      "datasets/BIRD_dev-financial/account.csv"
    ],
    "query": "Among the accounts who have approved loan date in 1997, list out the accounts that have the lowest approved amount and choose weekly issuance statement.",
    "cot": "\nTo solve this problem, we need to filter the data in df1 for the year 1997 and status 'A'. Then, we need to group by account_id and calculate the sum of the amount. After that, we need to join this data with df2 to get the district_id and frequency. Finally, we need to sort the data by the sum of the amount in ascending order and select the first row.\n",
    "code": "import numpy as np\nimport pandas as pd\n\n# Filter the data for the year 1997 and status 'A'\ndf1_filtered = df1[(df1['date'].dt.year == 1997) & (df1['status'] == 'A')]\n\n# Group by account_id and calculate the sum of the amount\ndf1_grouped = df1_filtered.groupby('account_id')['amount'].sum().reset_index()\n\n# Join with df2 to get the district_id and frequency\nfinal_df = pd.merge(df1_grouped, df2, on='account_id', how='left')\n\n# Sort the data by the sum of the amount in ascending order and select the first row\nfinal_df = final_df.sort_values('amount').iloc[0]\n\n# Print the final result\nprint(final_df)",
    "observation": "AttributeError: Can only use .dt accessor with datetimelike values",
    "true_result": "[(176,)]",
    "table_infos": "df1:\n|    |   loan_id |   account_id | date       |   amount |   duration |   payments | status   |\n|---:|----------:|-------------:|:-----------|---------:|-----------:|-----------:|:---------|\n|  0 |      4959 |            2 | 1994-01-05 |    80952 |         24 |       3373 | A        |\n|  1 |      4961 |           19 | 1996-04-29 |    30276 |         12 |       2523 | B        |\n|  2 |      4962 |           25 | 1997-12-08 |    30276 |         12 |       2523 | A        |\ndf2:\n|    |   account_id |   district_id | frequency        | date       |\n|---:|-------------:|--------------:|:-----------------|:-----------|\n|  0 |            1 |            18 | POPLATEK MESICNE | 1995-03-24 |\n|  1 |            2 |             1 | POPLATEK MESICNE | 1993-02-26 |\n|  2 |            3 |             5 | POPLATEK MESICNE | 1997-07-07 |\nForeign keys:\ndf1.account_id = df2.account_id\n"
  },
  {
    "table_paths": [
      "datasets/BIRD_dev-financial/account.csv",
      "datasets/BIRD_dev-financial/loan.csv"
    ],
    "query": "There was a loan approved in 1994/8/25, where was that account opened, give the district Id of the branch.",
    "cot": "",
    "code": "import numpy as np\nimport pandas as pd\n\n# Assuming df1 and df2 are the dataframes given in the question\n\n# Join df1 and df2 on account_id\ndf = pd.merge(df1, df2, on='account_id', how='inner')\n\n# Filter the dataframe where the date of the loan is 1994-08-25\ndf = df[df['date'] == '1994-08-25']\n\n# Get the district_id of the branch where the loan was approved\ndistrict_id = df['district_id'].values[0]\n\nprint(\"The district Id of the branch where the loan was approved is: \", district_id)",
    "observation": "KeyError: 'date'",
    "true_result": "[(31,)]",
    "table_infos": "df1:\n|    |   account_id |   district_id | frequency        | date       |\n|---:|-------------:|--------------:|:-----------------|:-----------|\n|  0 |            1 |            18 | POPLATEK MESICNE | 1995-03-24 |\n|  1 |            2 |             1 | POPLATEK MESICNE | 1993-02-26 |\n|  2 |            3 |             5 | POPLATEK MESICNE | 1997-07-07 |\ndf2:\n|    |   loan_id |   account_id | date       |   amount |   duration |   payments | status   |\n|---:|----------:|-------------:|:-----------|---------:|-----------:|-----------:|:---------|\n|  0 |      4959 |            2 | 1994-01-05 |    80952 |         24 |       3373 | A        |\n|  1 |      4961 |           19 | 1996-04-29 |    30276 |         12 |       2523 | B        |\n|  2 |      4962 |           25 | 1997-12-08 |    30276 |         12 |       2523 | A        |\nForeign keys:\ndf2.account_id = df1.account_id\n"
  },
  {
    "table_paths": [
      "datasets/BIRD_dev-financial/district.csv",
      "datasets/BIRD_dev-financial/client.csv"
    ],
    "query": "What is the gender of the oldest client who opened his/her account in the highest average salary branch?",
    "cot": "\nTo solve this problem, we need to join df1 and df2 on district_id, then group by gender and find the oldest client's gender in each group.\n",
    "code": "import numpy as np\nimport pandas as pd\n\n# Merge df1 and df2 on district_id\ndf = pd.merge(df1, df2, on='district_id')\n\n# Convert birth_date to datetime\ndf['birth_date'] = pd.to_datetime(df['birth_date'])\n\n# Find the oldest client in each group\noldest_clients = df.groupby('gender').apply(lambda x: x.loc[x['birth_date'].idxmin()])\n\n# Find the highest average salary branch\nhighest_avg_salary_branch = df.groupby('district_id')['A2'].mean().idxmax()\n\n# Find the gender of the oldest client in the highest average salary branch\noldest_client_gender = oldest_clients.loc[highest_avg_salary_branch, 'gender']\n\n# Print the gender of the oldest client in the highest average salary branch\nprint(oldest_client_gender)",
    "observation": "TypeError: agg function failed [how->mean,dtype->object]",
    "true_result": "[('M',)]",
    "table_infos": "df1:\n|    |   district_id | A2          | A3              |      A4 |   A5 |   A6 |   A7 |   A8 |   A9 |   A10 |   A11 |   A12 |   A13 |   A14 |   A15 |   A16 |\n|---:|--------------:|:------------|:----------------|--------:|-----:|-----:|-----:|-----:|-----:|------:|------:|------:|------:|------:|------:|------:|\n|  0 |             1 | Hl.m. Praha | Prague          | 1204953 |    0 |    0 |    0 |    1 |    1 | 100   | 12541 |   0.2 |  0.43 |   167 | 85677 | 99107 |\n|  1 |             2 | Benesov     | central Bohemia |   88884 |   80 |   26 |    6 |    2 |    5 |  46.7 |  8507 |   1.6 |  1.85 |   132 |  2159 |  2674 |\n|  2 |             3 | Beroun      | central Bohemia |   75232 |   55 |   26 |    4 |    1 |    5 |  41.7 |  8980 |   1.9 |  2.21 |   111 |  2824 |  2813 |\ndf2:\n|    |   client_id | gender   | birth_date   |   district_id |\n|---:|------------:|:---------|:-------------|--------------:|\n|  0 |           1 | F        | 1970-12-13   |            18 |\n|  1 |           2 | M        | 1945-02-04   |             1 |\n|  2 |           3 | F        | 1940-10-09   |             1 |\nForeign keys:\ndf2.district_id = df1.district_id\n"
  },
  {
    "table_paths": [
      "datasets/BIRD_dev-financial/loan.csv",
      "datasets/BIRD_dev-financial/account.csv",
      "datasets/BIRD_dev-financial/client.csv"
    ],
    "query": "For the client who applied 98832 USD loan in 1996/1/3, when was his/her birthday?",
    "cot": "\nTo solve this problem, we need to join df1, df2 and df3 based on account_id and date. Then, we can filter the dataframe based on the amount and date.\n",
    "code": "import numpy as np\nimport pandas as pd\n\n# Assuming df1, df2 and df3 are the dataframes given in the question\n\n# Join df1, df2 and df3 based on account_id and date\ndf = pd.merge(df1, df2, on=['account_id', 'date'], how='inner')\ndf = pd.merge(df, df3, on=['account_id'], how='inner')\n\n# Filter the dataframe based on the amount and date\ndf = df[(df['amount'] == 98832) & (df['date_x'].dt.year == 1996)]\n\n# Get the birth_date of the client\nbirth_date = df['birth_date'].values[0]\n\nprint(f\"The birthday of the client who applied 98832 USD loan in 1996/1/3 is {birth_date}\")",
    "observation": "KeyError: 'account_id'",
    "true_result": "[('1920-12-08',), ('1921-10-06',), ('1922-05-24',), ('1926-02-12',), ('1928-04-20',), ('1930-05-05',), ('1930-11-10',), ('1931-12-05',), ('1933-04-18',), ('1937-06-05',), ('1939-12-06',), ('1940-08-16',), ('1943-03-02',), ('1943-04-15',), ('1943-05-02',), ('1943-07-30',), ('1944-03-08',), ('1944-06-19',), ('1945-05-24',), ('1946-05-17',), ('1946-08-21',), ('1947-07-13',), ('1947-07-18',), ('1947-12-13',), ('1950-09-08',), ('1952-11-01',), ('1953-05-02',), ('1953-07-07',), ('1954-06-13',), ('1955-05-13',), ('1957-04-06',), ('1957-05-31',), ('1957-07-09',), ('1960-02-27',), ('1961-09-16',), ('1962-01-17',), ('1962-04-20',), ('1962-10-15',), ('1963-09-23',), ('1963-12-21',), ('1964-10-19',), ('1965-03-22',), ('1966-03-26',), ('1967-04-20',), ('1968-12-30',), ('1969-03-29',), ('1969-07-02',), ('1970-09-10',), ('1971-04-07',), ('1971-06-24',), ('1971-07-29',), ('1973-05-26',), ('1975-07-25',), ('1975-08-07',), ('1977-04-03',), ('1978-04-18',), ('1978-08-30',), ('1980-06-16',), ('1987-09-27',)]",
    "table_infos": "df1:\n|    |   loan_id |   account_id | date       |   amount |   duration |   payments | status   |\n|---:|----------:|-------------:|:-----------|---------:|-----------:|-----------:|:---------|\n|  0 |      4959 |            2 | 1994-01-05 |    80952 |         24 |       3373 | A        |\n|  1 |      4961 |           19 | 1996-04-29 |    30276 |         12 |       2523 | B        |\n|  2 |      4962 |           25 | 1997-12-08 |    30276 |         12 |       2523 | A        |\ndf2:\n|    |   account_id |   district_id | frequency        | date       |\n|---:|-------------:|--------------:|:-----------------|:-----------|\n|  0 |            1 |            18 | POPLATEK MESICNE | 1995-03-24 |\n|  1 |            2 |             1 | POPLATEK MESICNE | 1993-02-26 |\n|  2 |            3 |             5 | POPLATEK MESICNE | 1997-07-07 |\ndf3:\n|    |   client_id | gender   | birth_date   |   district_id |\n|---:|------------:|:---------|:-------------|--------------:|\n|  0 |           1 | F        | 1970-12-13   |            18 |\n|  1 |           2 | M        | 1945-02-04   |             1 |\n|  2 |           3 | F        | 1940-10-09   |             1 |\nForeign keys:\ndf1.account_id = df2.account_id\n"
  },
  {
    "table_paths": [
      "datasets/BIRD_dev-financial/account.csv",
      "datasets/BIRD_dev-financial/district.csv"
    ],
    "query": "For the first client who opened his/her account in Prague, what is his/her account ID?",
    "cot": "\nWe need to join df1 and df2 on district_id and then filter the dataframe to get the first client who opened his/her account in Prague.\n",
    "code": "import numpy as np\nimport pandas as pd\n\n# Assuming df1 and df2 are the dataframes\nmerged_df = pd.merge(df1, df2, on='district_id')\n\n# Filter the dataframe to get the first client who opened his/her account in Prague\nfiltered_df = merged_df[merged_df['A2'] == 'Prague']\n\n# Get the account_id of the first client\naccount_id = filtered_df.iloc[0]['account_id']\n\nprint(account_id)",
    "observation": "IndexError: single positional indexer is out-of-bounds",
    "true_result": "[(1539,)]",
    "table_infos": "df1:\n|    |   account_id |   district_id | frequency        | date       |\n|---:|-------------:|--------------:|:-----------------|:-----------|\n|  0 |            1 |            18 | POPLATEK MESICNE | 1995-03-24 |\n|  1 |            2 |             1 | POPLATEK MESICNE | 1993-02-26 |\n|  2 |            3 |             5 | POPLATEK MESICNE | 1997-07-07 |\ndf2:\n|    |   district_id | A2          | A3              |      A4 |   A5 |   A6 |   A7 |   A8 |   A9 |   A10 |   A11 |   A12 |   A13 |   A14 |   A15 |   A16 |\n|---:|--------------:|:------------|:----------------|--------:|-----:|-----:|-----:|-----:|-----:|------:|------:|------:|------:|------:|------:|------:|\n|  0 |             1 | Hl.m. Praha | Prague          | 1204953 |    0 |    0 |    0 |    1 |    1 | 100   | 12541 |   0.2 |  0.43 |   167 | 85677 | 99107 |\n|  1 |             2 | Benesov     | central Bohemia |   88884 |   80 |   26 |    6 |    2 |    5 |  46.7 |  8507 |   1.6 |  1.85 |   132 |  2159 |  2674 |\n|  2 |             3 | Beroun      | central Bohemia |   75232 |   55 |   26 |    4 |    1 |    5 |  41.7 |  8980 |   1.9 |  2.21 |   111 |  2824 |  2813 |\nForeign keys:\ndf1.district_id = df2.district_id\n"
  },
  {
    "table_paths": [
      "datasets/BIRD_dev-financial/client.csv",
      "datasets/BIRD_dev-financial/district.csv"
    ],
    "query": "For the branch which located in the south Bohemia with biggest number of inhabitants, what is the percentage of the male clients?",
    "cot": "To solve this problem, we need to join df1 and df2 on district_id, filter the data for south Bohemia, group by gender to count the number of clients, and calculate the percentage of male clients.\n",
    "code": "import numpy as np\nimport pandas as pd\n\n# Assuming df1 and df2 are the dataframes given in the question\n\n# Join df1 and df2 on district_id\ndf = pd.merge(df1, df2, on='district_id')\n\n# Filter the data for south Bohemia\ndf = df[df['A2'] == 'south Bohemia']\n\n# Group by gender and count the number of clients\ngender_counts = df.groupby('gender')['client_id'].count()\n\n# Calculate the percentage of male clients\nmale_percentage = (gender_counts['M'] / (gender_counts['M'] + gender_counts['F'])) * 100\n\n# Print the result\nprint(f\"The percentage of male clients in the south Bohemia branch is {male_percentage}%\")",
    "observation": "KeyError: 'M'",
    "true_result": "[(44.26229508196721,)]",
    "table_infos": "df1:\n|    |   client_id | gender   | birth_date   |   district_id |\n|---:|------------:|:---------|:-------------|--------------:|\n|  0 |           1 | F        | 1970-12-13   |            18 |\n|  1 |           2 | M        | 1945-02-04   |             1 |\n|  2 |           3 | F        | 1940-10-09   |             1 |\ndf2:\n|    |   district_id | A2          | A3              |      A4 |   A5 |   A6 |   A7 |   A8 |   A9 |   A10 |   A11 |   A12 |   A13 |   A14 |   A15 |   A16 |\n|---:|--------------:|:------------|:----------------|--------:|-----:|-----:|-----:|-----:|-----:|------:|------:|------:|------:|------:|------:|------:|\n|  0 |             1 | Hl.m. Praha | Prague          | 1204953 |    0 |    0 |    0 |    1 |    1 | 100   | 12541 |   0.2 |  0.43 |   167 | 85677 | 99107 |\n|  1 |             2 | Benesov     | central Bohemia |   88884 |   80 |   26 |    6 |    2 |    5 |  46.7 |  8507 |   1.6 |  1.85 |   132 |  2159 |  2674 |\n|  2 |             3 | Beroun      | central Bohemia |   75232 |   55 |   26 |    4 |    1 |    5 |  41.7 |  8980 |   1.9 |  2.21 |   111 |  2824 |  2813 |\nForeign keys:\ndf1.district_id = df2.district_id\n"
  },
  {
    "table_paths": [
      "datasets/BIRD_dev-financial/account.csv",
      "datasets/BIRD_dev-financial/district.csv"
    ],
    "query": "From Year 1995 to 2000, who are the accounts holders from 'east Bohemia'. State the account ID the frequency of statement issuance.",
    "cot": "\nTo solve this problem, we need to filter the data based on the year range (1995-2000) and the district name ('east Bohemia'). Then, we need to count the frequency of statement issuance for each account.\n",
    "code": "import numpy as np\nimport pandas as pd\n\n# Assuming df1 and df2 are the dataframes\n\n# Filter the data based on the year range and the district name\ndf_filtered = df1[(df1['date'].dt.year >= 1995) & (df1['date'].dt.year <= 2000) & (df2['A2'] == 'east Bohemia')]\n\n# Count the frequency of statement issuance for each account\ndf_result = df_filtered.groupby('account_id')['frequency'].count().reset_index(name='frequency_count')\n\n# Print the result\nprint(df_result)",
    "observation": "AttributeError: Can only use .dt accessor with datetimelike values",
    "true_result": "[(14, 'POPLATEK MESICNE'), (76, 'POPLATEK MESICNE'), (80, 'POPLATEK MESICNE'), (84, 'POPLATEK PO OBRATU'), (103, 'POPLATEK MESICNE'), (131, 'POPLATEK MESICNE'), (149, 'POPLATEK MESICNE'), (171, 'POPLATEK MESICNE'), (174, 'POPLATEK MESICNE'), (182, 'POPLATEK MESICNE'), (194, 'POPLATEK MESICNE'), (210, 'POPLATEK MESICNE'), (232, 'POPLATEK MESICNE'), (253, 'POPLATEK MESICNE'), (283, 'POPLATEK MESICNE'), (292, 'POPLATEK MESICNE'), (296, 'POPLATEK MESICNE'), (311, 'POPLATEK MESICNE'), (315, 'POPLATEK MESICNE'), (319, 'POPLATEK TYDNE'), (320, 'POPLATEK MESICNE'), (323, 'POPLATEK MESICNE'), (330, 'POPLATEK MESICNE'), (338, 'POPLATEK MESICNE'), (339, 'POPLATEK TYDNE'), (350, 'POPLATEK MESICNE'), (351, 'POPLATEK MESICNE'), (390, 'POPLATEK MESICNE'), (393, 'POPLATEK MESICNE'), (410, 'POPLATEK MESICNE'), (463, 'POPLATEK MESICNE'), (464, 'POPLATEK MESICNE'), (468, 'POPLATEK MESICNE'), (471, 'POPLATEK MESICNE'), (490, 'POPLATEK MESICNE'), (491, 'POPLATEK MESICNE'), (507, 'POPLATEK MESICNE'), (590, 'POPLATEK MESICNE'), (593, 'POPLATEK MESICNE'), (600, 'POPLATEK MESICNE'), (602, 'POPLATEK MESICNE'), (611, 'POPLATEK MESICNE'), (621, 'POPLATEK MESICNE'), (637, 'POPLATEK MESICNE'), (646, 'POPLATEK MESICNE'), (674, 'POPLATEK MESICNE'), (684, 'POPLATEK MESICNE'), (706, 'POPLATEK MESICNE'), (733, 'POPLATEK TYDNE'), (745, 'POPLATEK MESICNE'), (758, 'POPLATEK MESICNE'), (782, 'POPLATEK MESICNE'), (791, 'POPLATEK MESICNE'), (810, 'POPLATEK MESICNE'), (826, 'POPLATEK MESICNE'), (831, 'POPLATEK MESICNE'), (832, 'POPLATEK MESICNE'), (836, 'POPLATEK MESICNE'), (858, 'POPLATEK MESICNE'), (878, 'POPLATEK MESICNE'), (889, 'POPLATEK MESICNE'), (894, 'POPLATEK MESICNE'), (937, 'POPLATEK MESICNE'), (972, 'POPLATEK MESICNE'), (996, 'POPLATEK MESICNE'), (1002, 'POPLATEK MESICNE'), (1021, 'POPLATEK MESICNE'), (1058, 'POPLATEK MESICNE'), (1061, 'POPLATEK MESICNE'), (1068, 'POPLATEK MESICNE'), (1083, 'POPLATEK MESICNE'), (1085, 'POPLATEK MESICNE'), (1112, 'POPLATEK MESICNE'), (1140, 'POPLATEK MESICNE'), (1155, 'POPLATEK MESICNE'), (1165, 'POPLATEK MESICNE'), (1190, 'POPLATEK MESICNE'), (1195, 'POPLATEK MESICNE'), (1199, 'POPLATEK MESICNE'), (1211, 'POPLATEK MESICNE'), (1221, 'POPLATEK MESICNE'), (1229, 'POPLATEK MESICNE'), (1232, 'POPLATEK MESICNE'), (1261, 'POPLATEK MESICNE'), (1265, 'POPLATEK MESICNE'), (1267, 'POPLATEK MESICNE'), (1296, 'POPLATEK MESICNE'), (1313, 'POPLATEK MESICNE'), (1316, 'POPLATEK MESICNE'), (1323, 'POPLATEK MESICNE'), (1324, 'POPLATEK MESICNE'), (1326, 'POPLATEK MESICNE'), (1340, 'POPLATEK MESICNE'), (1361, 'POPLATEK MESICNE'), (1365, 'POPLATEK MESICNE'), (1370, 'POPLATEK MESICNE'), (1379, 'POPLATEK MESICNE'), (1396, 'POPLATEK MESICNE'), (1399, 'POPLATEK MESICNE'), (1437, 'POPLATEK MESICNE'), (1452, 'POPLATEK MESICNE'), (1454, 'POPLATEK MESICNE'), (1491, 'POPLATEK MESICNE'), (1500, 'POPLATEK MESICNE'), (1501, 'POPLATEK MESICNE'), (1506, 'POPLATEK MESICNE'), (1520, 'POPLATEK MESICNE'), (1522, 'POPLATEK MESICNE'), (1523, 'POPLATEK PO OBRATU'), (1526, 'POPLATEK MESICNE'), (1528, 'POPLATEK MESICNE'), (1548, 'POPLATEK MESICNE'), (1563, 'POPLATEK MESICNE'), (1564, 'POPLATEK MESICNE'), (1585, 'POPLATEK MESICNE'), (1633, 'POPLATEK MESICNE'), (1641, 'POPLATEK MESICNE'), (1645, 'POPLATEK MESICNE'), (1656, 'POPLATEK MESICNE'), (1659, 'POPLATEK MESICNE'), (1682, 'POPLATEK MESICNE'), (1691, 'POPLATEK MESICNE'), (1696, 'POPLATEK MESICNE'), (1712, 'POPLATEK MESICNE'), (1716, 'POPLATEK MESICNE'), (1724, 'POPLATEK MESICNE'), (1732, 'POPLATEK MESICNE'), (1735, 'POPLATEK MESICNE'), (1754, 'POPLATEK MESICNE'), (1785, 'POPLATEK MESICNE'), (1798, 'POPLATEK MESICNE'), (1800, 'POPLATEK MESICNE'), (1810, 'POPLATEK MESICNE'), (1836, 'POPLATEK MESICNE'), (1845, 'POPLATEK MESICNE'), (1847, 'POPLATEK MESICNE'), (1859, 'POPLATEK MESICNE'), (1867, 'POPLATEK MESICNE'), (1885, 'POPLATEK MESICNE'), (1893, 'POPLATEK MESICNE'), (1913, 'POPLATEK MESICNE'), (1921, 'POPLATEK MESICNE'), (1927, 'POPLATEK MESICNE'), (1946, 'POPLATEK MESICNE'), (1955, 'POPLATEK MESICNE'), (1963, 'POPLATEK MESICNE'), (1974, 'POPLATEK MESICNE'), (1980, 'POPLATEK MESICNE'), (1986, 'POPLATEK MESICNE'), (1992, 'POPLATEK MESICNE'), (1994, 'POPLATEK MESICNE'), (2004, 'POPLATEK MESICNE'), (2007, 'POPLATEK MESICNE'), (2018, 'POPLATEK MESICNE'), (2041, 'POPLATEK MESICNE'), (2043, 'POPLATEK MESICNE'), (2084, 'POPLATEK MESICNE'), (2097, 'POPLATEK MESICNE'), (2103, 'POPLATEK MESICNE'), (2104, 'POPLATEK MESICNE'), (2111, 'POPLATEK TYDNE'), (2112, 'POPLATEK MESICNE'), (2117, 'POPLATEK MESICNE'), (2118, 'POPLATEK MESICNE'), (2125, 'POPLATEK TYDNE'), (2130, 'POPLATEK MESICNE'), (2134, 'POPLATEK MESICNE'), (2135, 'POPLATEK MESICNE'), (2142, 'POPLATEK MESICNE'), (2162, 'POPLATEK MESICNE'), (2165, 'POPLATEK MESICNE'), (2193, 'POPLATEK MESICNE'), (2197, 'POPLATEK MESICNE'), (2203, 'POPLATEK MESICNE'), (2205, 'POPLATEK MESICNE'), (2206, 'POPLATEK MESICNE'), (2214, 'POPLATEK MESICNE'), (2215, 'POPLATEK MESICNE'), (2223, 'POPLATEK MESICNE'), (2224, 'POPLATEK PO OBRATU'), (2233, 'POPLATEK MESICNE'), (2235, 'POPLATEK MESICNE'), (2244, 'POPLATEK MESICNE'), (2255, 'POPLATEK MESICNE'), (2266, 'POPLATEK MESICNE'), (2272, 'POPLATEK MESICNE'), (2291, 'POPLATEK MESICNE'), (2294, 'POPLATEK MESICNE'), (2297, 'POPLATEK MESICNE'), (2304, 'POPLATEK MESICNE'), (2334, 'POPLATEK MESICNE'), (2353, 'POPLATEK MESICNE'), (2369, 'POPLATEK MESICNE'), (2370, 'POPLATEK MESICNE'), (2380, 'POPLATEK MESICNE'), (2441, 'POPLATEK MESICNE'), (2443, 'POPLATEK MESICNE'), (2445, 'POPLATEK MESICNE'), (2450, 'POPLATEK MESICNE'), (2487, 'POPLATEK MESICNE'), (2509, 'POPLATEK MESICNE'), (2525, 'POPLATEK MESICNE'), (2531, 'POPLATEK MESICNE'), (2533, 'POPLATEK MESICNE'), (2556, 'POPLATEK MESICNE'), (2558, 'POPLATEK MESICNE'), (2563, 'POPLATEK MESICNE'), (2590, 'POPLATEK MESICNE'), (2602, 'POPLATEK MESICNE'), (2614, 'POPLATEK MESICNE'), (2625, 'POPLATEK TYDNE'), (2634, 'POPLATEK MESICNE'), (2674, 'POPLATEK MESICNE'), (2680, 'POPLATEK MESICNE'), (2698, 'POPLATEK MESICNE'), (2706, 'POPLATEK MESICNE'), (2715, 'POPLATEK MESICNE'), (2725, 'POPLATEK MESICNE'), (2728, 'POPLATEK TYDNE'), (2743, 'POPLATEK MESICNE'), (2759, 'POPLATEK MESICNE'), (2774, 'POPLATEK MESICNE'), (2783, 'POPLATEK MESICNE'), (2807, 'POPLATEK MESICNE'), (2836, 'POPLATEK MESICNE'), (2837, 'POPLATEK MESICNE'), (2844, 'POPLATEK MESICNE'), (2866, 'POPLATEK MESICNE'), (2871, 'POPLATEK MESICNE'), (2882, 'POPLATEK MESICNE'), (2891, 'POPLATEK MESICNE'), (2897, 'POPLATEK MESICNE'), (2906, 'POPLATEK MESICNE'), (2923, 'POPLATEK MESICNE'), (2929, 'POPLATEK MESICNE'), (2942, 'POPLATEK MESICNE'), (2981, 'POPLATEK MESICNE'), (2983, 'POPLATEK MESICNE'), (2992, 'POPLATEK MESICNE'), (2995, 'POPLATEK MESICNE'), (3005, 'POPLATEK PO OBRATU'), (3010, 'POPLATEK MESICNE'), (3012, 'POPLATEK MESICNE'), (3029, 'POPLATEK MESICNE'), (3031, 'POPLATEK MESICNE'), (3052, 'POPLATEK MESICNE'), (3067, 'POPLATEK MESICNE'), (3092, 'POPLATEK MESICNE'), (3110, 'POPLATEK MESICNE'), (3118, 'POPLATEK MESICNE'), (3121, 'POPLATEK MESICNE'), (3161, 'POPLATEK MESICNE'), (3175, 'POPLATEK MESICNE'), (3185, 'POPLATEK MESICNE'), (3209, 'POPLATEK MESICNE'), (3236, 'POPLATEK MESICNE'), (3238, 'POPLATEK MESICNE'), (3245, 'POPLATEK MESICNE'), (3263, 'POPLATEK MESICNE'), (3265, 'POPLATEK PO OBRATU'), (3285, 'POPLATEK MESICNE'), (3291, 'POPLATEK MESICNE'), (3333, 'POPLATEK MESICNE'), (3349, 'POPLATEK MESICNE'), (3358, 'POPLATEK MESICNE'), (3397, 'POPLATEK MESICNE'), (3398, 'POPLATEK MESICNE'), (3417, 'POPLATEK MESICNE'), (3418, 'POPLATEK PO OBRATU'), (3443, 'POPLATEK MESICNE'), (3451, 'POPLATEK MESICNE'), (3462, 'POPLATEK MESICNE'), (3490, 'POPLATEK MESICNE'), (3491, 'POPLATEK MESICNE'), (3496, 'POPLATEK MESICNE'), (3499, 'POPLATEK MESICNE'), (3508, 'POPLATEK MESICNE'), (3512, 'POPLATEK MESICNE'), (3519, 'POPLATEK MESICNE'), (3527, 'POPLATEK MESICNE'), (3537, 'POPLATEK MESICNE'), (3562, 'POPLATEK MESICNE'), (3615, 'POPLATEK MESICNE'), (3616, 'POPLATEK MESICNE'), (3626, 'POPLATEK MESICNE'), (3638, 'POPLATEK PO OBRATU'), (3661, 'POPLATEK MESICNE'), (3768, 'POPLATEK MESICNE'), (3780, 'POPLATEK MESICNE'), (3802, 'POPLATEK MESICNE'), (3810, 'POPLATEK MESICNE'), (3828, 'POPLATEK MESICNE'), (3832, 'POPLATEK MESICNE'), (3845, 'POPLATEK MESICNE'), (3856, 'POPLATEK MESICNE'), (3865, 'POPLATEK MESICNE'), (3874, 'POPLATEK MESICNE'), (3875, 'POPLATEK MESICNE'), (3885, 'POPLATEK MESICNE'), (3890, 'POPLATEK MESICNE'), (3893, 'POPLATEK MESICNE'), (3894, 'POPLATEK MESICNE'), (3896, 'POPLATEK MESICNE'), (3906, 'POPLATEK MESICNE'), (3945, 'POPLATEK MESICNE'), (3950, 'POPLATEK MESICNE'), (3961, 'POPLATEK MESICNE'), (3966, 'POPLATEK MESICNE'), (3984, 'POPLATEK MESICNE'), (3992, 'POPLATEK MESICNE'), (4047, 'POPLATEK TYDNE'), (4088, 'POPLATEK MESICNE'), (4127, 'POPLATEK MESICNE'), (4156, 'POPLATEK MESICNE'), (4253, 'POPLATEK MESICNE'), (4258, 'POPLATEK MESICNE'), (4286, 'POPLATEK MESICNE'), (4330, 'POPLATEK MESICNE'), (4379, 'POPLATEK MESICNE'), (4386, 'POPLATEK TYDNE'), (4424, 'POPLATEK MESICNE'), (4438, 'POPLATEK MESICNE'), (4445, 'POPLATEK MESICNE'), (4473, 'POPLATEK MESICNE'), (4503, 'POPLATEK MESICNE'), (4784, 'POPLATEK MESICNE'), (4851, 'POPLATEK MESICNE'), (4852, 'POPLATEK MESICNE'), (4948, 'POPLATEK MESICNE'), (5063, 'POPLATEK MESICNE'), (5269, 'POPLATEK MESICNE'), (5305, 'POPLATEK MESICNE'), (5395, 'POPLATEK MESICNE'), (5541, 'POPLATEK MESICNE'), (5735, 'POPLATEK MESICNE'), (5758, 'POPLATEK MESICNE'), (5912, 'POPLATEK MESICNE'), (6064, 'POPLATEK MESICNE'), (6397, 'POPLATEK MESICNE'), (6461, 'POPLATEK MESICNE'), (6856, 'POPLATEK MESICNE'), (7045, 'POPLATEK MESICNE'), (7637, 'POPLATEK MESICNE'), (7713, 'POPLATEK TYDNE'), (7859, 'POPLATEK MESICNE'), (7957, 'POPLATEK MESICNE'), (8038, 'POPLATEK MESICNE'), (8158, 'POPLATEK TYDNE'), (8225, 'POPLATEK MESICNE'), (8320, 'POPLATEK MESICNE'), (8533, 'POPLATEK MESICNE'), (8639, 'POPLATEK MESICNE'), (9031, 'POPLATEK MESICNE'), (9052, 'POPLATEK PO OBRATU'), (9227, 'POPLATEK MESICNE'), (9790, 'POPLATEK MESICNE'), (10220, 'POPLATEK MESICNE'), (10243, 'POPLATEK MESICNE'), (10562, 'POPLATEK MESICNE'), (10607, 'POPLATEK MESICNE'), (10774, 'POPLATEK MESICNE'), (10857, 'POPLATEK MESICNE'), (11053, 'POPLATEK MESICNE'), (11317, 'POPLATEK MESICNE')]",
    "table_infos": "df1:\n|    |   account_id |   district_id | frequency        | date       |\n|---:|-------------:|--------------:|:-----------------|:-----------|\n|  0 |            1 |            18 | POPLATEK MESICNE | 1995-03-24 |\n|  1 |            2 |             1 | POPLATEK MESICNE | 1993-02-26 |\n|  2 |            3 |             5 | POPLATEK MESICNE | 1997-07-07 |\ndf2:\n|    |   district_id | A2          | A3              |      A4 |   A5 |   A6 |   A7 |   A8 |   A9 |   A10 |   A11 |   A12 |   A13 |   A14 |   A15 |   A16 |\n|---:|--------------:|:------------|:----------------|--------:|-----:|-----:|-----:|-----:|-----:|------:|------:|------:|------:|------:|------:|------:|\n|  0 |             1 | Hl.m. Praha | Prague          | 1204953 |    0 |    0 |    0 |    1 |    1 | 100   | 12541 |   0.2 |  0.43 |   167 | 85677 | 99107 |\n|  1 |             2 | Benesov     | central Bohemia |   88884 |   80 |   26 |    6 |    2 |    5 |  46.7 |  8507 |   1.6 |  1.85 |   132 |  2159 |  2674 |\n|  2 |             3 | Beroun      | central Bohemia |   75232 |   55 |   26 |    4 |    1 |    5 |  41.7 |  8980 |   1.9 |  2.21 |   111 |  2824 |  2813 |\nForeign keys:\ndf1.district_id = df2.district_id\n"
  },
  {
    "table_paths": [
      "datasets/BIRD_dev-financial/loan.csv",
      "datasets/BIRD_dev-financial/account.csv",
      "datasets/BIRD_dev-financial/district.csv"
    ],
    "query": "For loans contracts which are still running where client are in debt, list the district of the and the state the percentage unemployment rate increment from year 1995 to 1996.",
    "cot": "\nTo solve this problem, we need to join df1, df2 and df3 on the account_id and district_id. Then, we need to filter the data to only include loans that are still running (status is 'A'). We also need to calculate the percentage unemployment rate increment from year 1995 to 1996.\n",
    "code": "import numpy as np\nimport pandas as pd\n\n# Assuming df1, df2 and df3 are the dataframes given in the question\n\n# Join df1, df2 and df3 on account_id and district_id\ndf = pd.merge(df1, df2, on='account_id')\ndf = pd.merge(df, df3, on='district_id')\n\n# Filter the data to only include loans that are still running\ndf = df[df['status'] == 'A']\n\n# Calculate the percentage unemployment rate increment from year 1995 to 1996\ndf['unemployment_increment'] = ((df['A15_1996'] - df['A15_1995']) / df['A15_1995']) * 100\n\n# Group by district and calculate the average unemployment rate increment\ndf_final = df.groupby('district_id')['unemployment_increment'].mean().reset_index()\n\n# Print the final result\nprint(df_final)",
    "observation": "KeyError: 'A15_1996'",
    "true_result": "[(40.0,), (39.25925925925924,), (115.0,), (22.49999999999999,), (20.0,), (None,), (11.666666666666677,), (None,), (44.375,), (13.333333333333346,), (17.42424242424243,), (39.25925925925924,), (8.4375,), (-5.593220338983052,), (28.571428571428584,), (115.0,), (16.315789473684216,), (42.4,), (22.49999999999999,), (13.541666666666673,), (16.315789473684216,), (26.052631578947377,), (14.91228070175438,), (40.0,), (115.0,), (9.782608695652177,), (22.5,), (39.60000000000001,), (28.387096774193544,), (38.620689655172406,), (14.91228070175438,), (43.529411764705884,), (35.00000000000001,), (22.49999999999999,), (13.333333333333346,), (13.541666666666673,), (22.14285714285715,), (17.42424242424243,), (47.05882352941177,), (18.846153846153836,), (17.42424242424243,), (15.744680851063835,), (13.636363636363628,), (115.0,), (13.541666666666673,)]",
    "table_infos": "df1:\n|    |   loan_id |   account_id | date       |   amount |   duration |   payments | status   |\n|---:|----------:|-------------:|:-----------|---------:|-----------:|-----------:|:---------|\n|  0 |      4959 |            2 | 1994-01-05 |    80952 |         24 |       3373 | A        |\n|  1 |      4961 |           19 | 1996-04-29 |    30276 |         12 |       2523 | B        |\n|  2 |      4962 |           25 | 1997-12-08 |    30276 |         12 |       2523 | A        |\ndf2:\n|    |   account_id |   district_id | frequency        | date       |\n|---:|-------------:|--------------:|:-----------------|:-----------|\n|  0 |            1 |            18 | POPLATEK MESICNE | 1995-03-24 |\n|  1 |            2 |             1 | POPLATEK MESICNE | 1993-02-26 |\n|  2 |            3 |             5 | POPLATEK MESICNE | 1997-07-07 |\ndf3:\n|    |   district_id | A2          | A3              |      A4 |   A5 |   A6 |   A7 |   A8 |   A9 |   A10 |   A11 |   A12 |   A13 |   A14 |   A15 |   A16 |\n|---:|--------------:|:------------|:----------------|--------:|-----:|-----:|-----:|-----:|-----:|------:|------:|------:|------:|------:|------:|------:|\n|  0 |             1 | Hl.m. Praha | Prague          | 1204953 |    0 |    0 |    0 |    1 |    1 | 100   | 12541 |   0.2 |  0.43 |   167 | 85677 | 99107 |\n|  1 |             2 | Benesov     | central Bohemia |   88884 |   80 |   26 |    6 |    2 |    5 |  46.7 |  8507 |   1.6 |  1.85 |   132 |  2159 |  2674 |\n|  2 |             3 | Beroun      | central Bohemia |   75232 |   55 |   26 |    4 |    1 |    5 |  41.7 |  8980 |   1.9 |  2.21 |   111 |  2824 |  2813 |\nForeign keys:\ndf1.account_id = df2.account_id,df2.district_id = df3.district_id\n"
  },
  {
    "table_paths": [
      "datasets/BIRD_dev-financial/client.csv",
      "datasets/BIRD_dev-financial/account.csv",
      "datasets/BIRD_dev-financial/loan.csv"
    ],
    "query": "What is the average loan amount by male borrowers?",
    "cot": "\nTo solve this problem, we need to join df1 (client_id, gender, birth_date, district_id) and df3 (loan_id, account_id, date, amount, duration, payments, status) on account_id. Then, we need to filter the data to include only loans made by male clients. Finally, we calculate the average loan amount.\n",
    "code": "import numpy as np\nimport pandas as pd\n\n# Join df1 and df3 on account_id\ndf = pd.merge(df1, df3, on='account_id')\n\n# Filter the data to include only loans made by male clients\ndf = df[df['gender'] == 'M']\n\n# Calculate the average loan amount\naverage_loan_amount = df['amount'].mean()\n\nprint('The average loan amount by male borrowers is:', average_loan_amount)",
    "observation": "KeyError: 'account_id'",
    "true_result": "[(153372.27532642506,)]",
    "table_infos": "df1:\n|    |   client_id | gender   | birth_date   |   district_id |\n|---:|------------:|:---------|:-------------|--------------:|\n|  0 |           1 | F        | 1970-12-13   |            18 |\n|  1 |           2 | M        | 1945-02-04   |             1 |\n|  2 |           3 | F        | 1940-10-09   |             1 |\ndf2:\n|    |   account_id |   district_id | frequency        | date       |\n|---:|-------------:|--------------:|:-----------------|:-----------|\n|  0 |            1 |            18 | POPLATEK MESICNE | 1995-03-24 |\n|  1 |            2 |             1 | POPLATEK MESICNE | 1993-02-26 |\n|  2 |            3 |             5 | POPLATEK MESICNE | 1997-07-07 |\ndf3:\n|    |   loan_id |   account_id | date       |   amount |   duration |   payments | status   |\n|---:|----------:|-------------:|:-----------|---------:|-----------:|-----------:|:---------|\n|  0 |      4959 |            2 | 1994-01-05 |    80952 |         24 |       3373 | A        |\n|  1 |      4961 |           19 | 1996-04-29 |    30276 |         12 |       2523 | B        |\n|  2 |      4962 |           25 | 1997-12-08 |    30276 |         12 |       2523 | A        |\nForeign keys:\ndf3.account_id = df2.account_id\n"
  },
  {
    "table_paths": [
      "datasets/BIRD_dev-financial/client.csv",
      "datasets/BIRD_dev-financial/district.csv"
    ],
    "query": "In the branch where the second-highest number of crimes were committed in 1995 occurred, how many male clients are there?",
    "cot": "",
    "code": "import numpy as np\nimport pandas as pd\n\n# Assuming df1 and df2 are your dataframes\n\n# Merge df1 and df2 on district_id\ndf = pd.merge(df1, df2, on='district_id')\n\n# Filter for the year 1995\ndf = df[df['A4'] == 1995]\n\n# Get the second highest number of crimes\nsecond_highest_crime = df['A4'].nlargest(2).iloc[-1]\n\n# Filter df for the second highest number of crimes\ndf = df[df['A4'] == second_highest_crime]\n\n# Count the number of male clients\nmale_clients = df[df['gender'] == 'M']['client_id'].count()\n\nprint(male_clients)",
    "observation": "IndexError: single positional indexer is out-of-bounds",
    "true_result": "[(96,)]",
    "table_infos": "df1:\n|    |   client_id | gender   | birth_date   |   district_id |\n|---:|------------:|:---------|:-------------|--------------:|\n|  0 |           1 | F        | 1970-12-13   |            18 |\n|  1 |           2 | M        | 1945-02-04   |             1 |\n|  2 |           3 | F        | 1940-10-09   |             1 |\ndf2:\n|    |   district_id | A2          | A3              |      A4 |   A5 |   A6 |   A7 |   A8 |   A9 |   A10 |   A11 |   A12 |   A13 |   A14 |   A15 |   A16 |\n|---:|--------------:|:------------|:----------------|--------:|-----:|-----:|-----:|-----:|-----:|------:|------:|------:|------:|------:|------:|------:|\n|  0 |             1 | Hl.m. Praha | Prague          | 1204953 |    0 |    0 |    0 |    1 |    1 | 100   | 12541 |   0.2 |  0.43 |   167 | 85677 | 99107 |\n|  1 |             2 | Benesov     | central Bohemia |   88884 |   80 |   26 |    6 |    2 |    5 |  46.7 |  8507 |   1.6 |  1.85 |   132 |  2159 |  2674 |\n|  2 |             3 | Beroun      | central Bohemia |   75232 |   55 |   26 |    4 |    1 |    5 |  41.7 |  8980 |   1.9 |  2.21 |   111 |  2824 |  2813 |\nForeign keys:\ndf1.district_id = df2.district_id\n"
  },
  {
    "table_paths": [
      "datasets/BIRD_dev-financial/card.csv",
      "datasets/BIRD_dev-financial/disp.csv"
    ],
    "query": "What are the accounts that have both gold and junior credit cards?",
    "cot": "\nTo find the accounts that have both gold and junior credit cards, we need to join df1 and df2 on 'disp_id' and then group by 'account_id'. We will then filter the groups that have both 'gold' and 'classic' types.\n",
    "code": "import numpy as np\nimport pandas as pd\n\n# Load data\n\n# Join df1 and df2 on 'disp_id'\ndf = pd.merge(df1, df2, on='disp_id')\n\n# Group by 'account_id' and 'type'\ngrouped = df.groupby(['account_id', 'type'])\n\n# Filter the groups that have both 'gold' and 'classic' types\ngold_and_classic = grouped.filter(lambda x: ('gold' in x['type'].values) and ('classic' in x['type'].values))\n\n# Get the unique account_ids\naccount_ids = gold_and_classic['account_id'].unique()\n\n# Print the account_ids\nprint(account_ids)",
    "observation": "KeyError: 'type'",
    "true_result": "[(7,), (33,), (43,), (51,), (68,), (71,), (128,), (139,), (144,), (181,), (219,), (223,), (270,), (311,), (351,), (371,), (418,), (431,), (441,), (456,), (468,), (486,), (521,), (523,), (539,), (553,), (554,), (577,), (610,), (655,), (689,), (738,), (750,), (756,), (776,), (807,), (828,), (862,), (886,), (904,), (940,), (969,), (978,), (998,), (1007,), (1016,), (1032,), (1039,), (1074,), (1092,), (1149,), (1154,), (1156,), (1194,), (1203,), (1204,), (1243,), (1273,), (1305,), (1345,), (1360,), (1378,), (1397,), (1408,), (1417,), (1431,), (1446,), (1466,), (1485,), (1494,), (1495,), (1500,), (1511,), (1519,), (1547,), (1592,), (1606,), (1649,), (1654,), (1678,), (1695,), (1700,), (1749,), (1750,), (1753,), (1764,), (1779,), (1867,), (1876,), (1885,), (1910,), (1914,), (1963,), (1996,), (2013,), (2039,), (2050,), (2051,), (2059,), (2095,), (2097,), (2143,), (2189,), (2200,), (2219,), (2242,), (2328,), (2332,), (2392,), (2410,), (2441,), (2444,), (2450,), (2466,), (2540,), (2547,), (2552,), (2571,), (2573,), (2592,), (2598,), (2600,), (2637,), (2675,), (2678,), (2681,), (2695,), (2699,), (2726,), (2749,), (2773,), (2796,), (2824,), (2836,), (2854,), (2867,), (2966,), (2982,), (3003,), (3010,), (3014,), (3035,), (3051,), (3103,), (3112,), (3114,), (3127,), (3131,), (3138,), (3153,), (3163,), (3181,), (3255,), (3260,), (3279,), (3290,), (3294,), (3324,), (3359,), (3375,), (3383,), (3386,), (3391,), (3449,), (3476,), (3516,), (3534,), (3586,), (3609,), (3633,), (3654,), (3727,), (3749,), (3757,), (3776,), (3781,), (3788,), (3806,), (3807,), (3848,), (3858,), (3877,), (3883,), (3899,), (3909,), (3931,), (3949,), (3988,), (4000,), (4034,), (4102,), (4105,), (4132,), (4159,), (4245,), (4255,), (4264,), (4361,), (4416,), (4503,), (4863,), (4949,), (5442,), (5622,), (5891,), (6030,), (6363,), (6592,), (6806,), (6910,), (6924,), (7049,), (7637,), (7795,), (7859,), (8173,), (8260,), (8327,), (8759,), (8856,), (9203,), (9265,), (9491,), (9814,), (9869,), (10411,), (10439,), (10520,), (10644,), (10650,), (10906,), (11013,), (11186,)]",
    "table_infos": "df1:\n|    |   card_id |   disp_id | type    | issued     |\n|---:|----------:|----------:|:--------|:-----------|\n|  0 |         1 |         9 | gold    | 1998-10-16 |\n|  1 |         2 |        19 | classic | 1998-03-13 |\n|  2 |         3 |        41 | gold    | 1995-09-03 |\ndf2:\n|    |   disp_id |   client_id |   account_id | type      |\n|---:|----------:|------------:|-------------:|:----------|\n|  0 |         1 |           1 |            1 | OWNER     |\n|  1 |         2 |           2 |            2 | OWNER     |\n|  2 |         3 |           3 |            2 | DISPONENT |\nForeign keys:\ndf1.disp_id = df2.disp_id\n"
  },
  {
    "table_paths": [
      "datasets/BIRD_dev-financial/district.csv",
      "datasets/BIRD_dev-financial/account.csv",
      "datasets/BIRD_dev-financial/disp.csv"
    ],
    "query": "Please list the account types that are not eligible for loans, and the average income of residents in the district where the account is located exceeds $8000 but is no more than $9000.",
    "cot": "\nTo solve this problem, we need to join the three tables on the appropriate keys. Then, we need to filter the data to only include accounts that are not eligible for loans (i.e., type = 'OWNER'). We also need to calculate the average income of residents in each district. Finally, we need to filter the districts based on the income range.\n",
    "code": "# Data Preparation\ndf1['Average_income'] = df1.iloc[:, 4:-1].mean(axis=1)\n\n# Data Processing\nmerged_df = pd.merge(df1, df2, on='district_id', how='inner')\nmerged_df = pd.merge(merged_df, df3, on='account_id', how='inner')\n\n# Filter for non-eligible accounts\nmerged_df = merged_df[merged_df['type'] == 'OWNER']\n\n# Filter for districts with income between 8000 and 9000\nmerged_df = merged_df[merged_df['Average_income'] > 8000]\nmerged_df = merged_df[merged_df['Average_income'] <= 9000]\n\n# Declare `final_df` Variable\nfinal_df = merged_df\n\n# Print the final result\nprint(final_df)",
    "observation": "TypeError: can only concatenate str (not \"int\") to str",
    "true_result
    "table_infos": "df1:\n|    |   district_id | A2          | A3              |      A4 |   A5 |   A6 |   A7 |   A8 |   A9 |   A10 |   A11 |   A12 |   A13 |   A14 |   A15 |   A16 |\n|---:|--------------:|:------------|:----------------|--------:|-----:|-----:|-----:|-----:|-----:|------:|------:|------:|------:|------:|------:|------:|\n|  0 |             1 | Hl.m. Praha | Prague          | 1204953 |    0 |    0 |    0 |    1 |    1 | 100   | 12541 |   0.2 |  0.43 |   167 | 85677 | 99107 |\n|  1 |             2 | Benesov     | central Bohemia |   88884 |   80 |   26 |    6 |    2 |    5 |  46.7 |  8507 |   1.6 |  1.85 |   132 |  2159 |  2674 |\n|  2 |             3 | Beroun      | central Bohemia |   75232 |   55 |   26 |    4 |    1 |    5 |  41.7 |  8980 |   1.9 |  2.21 |   111 |  2824 |  2813 |\ndf2:\n|    |   account_id |   district_id | frequency        | date       |\n|---:|-------------:|--------------:|:-----------------|:-----------|\n|  0 |            1 |            18 | POPLATEK MESICNE | 1995-03-24 |\n|  1 |            2 |             1 | POPLATEK MESICNE | 1993-02-26 |\n|  2 |            3 |             5 | POPLATEK MESICNE | 1997-07-07 |\ndf3:\n|    |   disp_id |   client_id |   account_id | type      |\n|---:|----------:|------------:|-------------:|:----------|\n|  0 |         1 |           1 |            1 | OWNER     |\n|  1 |         2 |           2 |            2 | OWNER     |\n|  2 |         3 |           3 |            2 | DISPONENT |\nForeign keys:\ndf2.district_id = df1.district_id,df3.account_id = df2.account_id\n"
  },
  {
    "table_paths": [
      "datasets/BIRD_dev-financial/district.csv",
      "datasets/BIRD_dev-financial/account.csv"
    ],
    "query": "What is the average number of crimes committed in 1995 in regions where the number exceeds 4000 and the region has accounts that are opened starting from the year 1997?",
    "cot": "\nTo solve this problem, we need to join df1 and df2 on district_id, filter the data for the year 1995, and then calculate the average number of crimes committed in regions where the number exceeds 4000 and the region has accounts that are opened starting from the year 1997.\n",
    "code": "import numpy as np\nimport pandas as pd\n\n# Assuming df1 and df2 are the dataframes\n\n# Join df1 and df2 on district_id\ndf = pd.merge(df1, df2, on='district_id', how='inner')\n\n# Filter the data for the year 1995\ndf = df[df['date'].dt.year == 1995]\n\n# Filter the data for regions where the number exceeds 4000\ndf = df[df['A2'] > 4000]\n\n# Filter the data for regions where the region has accounts that are opened starting from the year 1997\ndf = df[df['date_y'].dt.year >= 1997]\n\n# Calculate the average number of crimes committed\naverage_crimes = df['A2'].mean()\n\nprint(average_crimes)",
    "observation": "AttributeError: Can only use .dt accessor with datetimelike values",
    "true_result": "[(29670.44951923077,)]",
    "table_infos": "df1:\n|    |   district_id | A2          | A3              |      A4 |   A5 |   A6 |   A7 |   A8 |   A9 |   A10 |   A11 |   A12 |   A13 |   A14 |   A15 |   A16 |\n|---:|--------------:|:------------|:----------------|--------:|-----:|-----:|-----:|-----:|-----:|------:|------:|------:|------:|------:|------:|------:|\n|  0 |             1 | Hl.m. Praha | Prague          | 1204953 |    0 |    0 |    0 |    1 |    1 | 100   | 12541 |   0.2 |  0.43 |   167 | 85677 | 99107 |\n|  1 |             2 | Benesov     | central Bohemia |   88884 |   80 |   26 |    6 |    2 |    5 |  46.7 |  8507 |   1.6 |  1.85 |   132 |  2159 |  2674 |\n|  2 |             3 | Beroun      | central Bohemia |   75232 |   55 |   26 |    4 |    1 |    5 |  41.7 |  8980 |   1.9 |  2.21 |   111 |  2824 |  2813 |\ndf2:\n|    |   account_id |   district_id | frequency        | date       |\n|---:|-------------:|--------------:|:-----------------|:-----------|\n|  0 |            1 |            18 | POPLATEK MESICNE | 1995-03-24 |\n|  1 |            2 |             1 | POPLATEK MESICNE | 1993-02-26 |\n|  2 |            3 |             5 | POPLATEK MESICNE | 1997-07-07 |\nForeign keys:\ndf2.district_id = df1.district_id\n"
  },
  {
    "table_paths": [
      "datasets/BIRD_dev-financial/disp.csv",
      "datasets/BIRD_dev-financial/client.csv",
      "datasets/BIRD_dev-financial/card.csv"
    ],
    "query": "What type of credit card does the client with the id 13539 own?",
    "cot": "To answer this question, we need to join the three dataframes based on the client_id and disp_id. Then, we can filter the dataframe to get the credit card type of the client with the id 13539.\n",
    "code": "import numpy as np\nimport pandas as pd\n\n# Assuming df1, df2, df3 are the dataframes\n\n# Join df1 and df2 on client_id\ndf = pd.merge(df1, df2, on='client_id')\n\n# Join df3 on disp_id\ndf = pd.merge(df, df3, on='disp_id')\n\n# Filter the dataframe to get the credit card type of the client with the id 13539\ncard_type = df[df['client_id'] == 13539]['type'].values[0]\n\nprint(f\"The client with the id 13539 owns a {card_type} credit card.\")",
    "observation": "KeyError: 'type'",
    "true_result": "[('junior',)]",
    "table_infos": "df1:\n|    |   disp_id |   client_id |   account_id | type      |\n|---:|----------:|------------:|-------------:|:----------|\n|  0 |         1 |           1 |            1 | OWNER     |\n|  1 |         2 |           2 |            2 | OWNER     |\n|  2 |         3 |           3 |            2 | DISPONENT |\ndf2:\n|    |   client_id | gender   | birth_date   |   district_id |\n|---:|------------:|:---------|:-------------|--------------:|\n|  0 |           1 | F        | 1970-12-13   |            18 |\n|  1 |           2 | M        | 1945-02-04   |             1 |\n|  2 |           3 | F        | 1940-10-09   |             1 |\ndf3:\n|    |   card_id |   disp_id | type    | issued     |\n|---:|----------:|----------:|:--------|:-----------|\n|  0 |         1 |         9 | gold    | 1998-10-16 |\n|  1 |         2 |        19 | classic | 1998-03-13 |\n|  2 |         3 |        41 | gold    | 1995-09-03 |\nForeign keys:\ndf1.client_id = df2.client_id,df3.disp_id = df1.disp_id\n"
  },
  {
    "table_paths": [
      "datasets/BIRD_dev-financial/card.csv",
      "datasets/BIRD_dev-financial/disp.csv"
    ],
    "query": "List all the clients' IDs whose junior credit cards were issued after 1996.",
    "cot": "\nTo solve this problem, we need to join df1 and df2 on the 'disp_id' column, filter the data to include only rows where the 'issued' date is after 1996, and then select the 'client_id' column from the resulting dataframe.\n",
    "code": "import numpy as np\nimport pandas as pd\n\n# Assuming df1 and df2 are the dataframes given in the question\n\n# Merge df1 and df2 on 'disp_id'\nmerged_df = pd.merge(df1, df2, on='disp_id')\n\n# Filter the data to include only rows where 'issued' is after 1996\nfiltered_df = merged_df[merged_df['issued'].dt.year > 1996]\n\n# Select the 'client_id' column from the filtered dataframe\nfinal_df = filtered_df[['client_id']]\n\n# Print the final result\nprint(final_df)",
    "observation": "AttributeError: Can only use .dt accessor with datetimelike values",
    "true_result": "[(60,), (167,), (174,), (221,), (264,), (378,), (429,), (451,), (504,), (519,), (626,), (667,), (731,), (786,), (826,), (900,), (906,), (996,), (1168,), (1211,), (1382,), (1390,), (1440,), (1500,), (1736,), (1819,), (1947,), (2005,), (2038,), (2065,), (2121,), (2138,), (2277,), (2287,), (2425,), (2488,), (2538,), (2540,), (2592,), (2662,), (2888,), (2948,), (3066,), (3102,), (3104,), (3183,), (3233,), (3257,), (3319,), (3348,), (3627,), (3636,), (3640,), (3689,), (3766,), (3787,), (3813,), (3846,), (3938,), (3981,), (3985,), (4018,), (4061,), (4081,), (4091,), (4094,), (4171,), (4246,), (4265,), (4382,), (4495,), (4533,), (4587,), (4639,), (4651,), (4674,), (4740,), (4764,), (4808,), (4823,), (4941,), (4944,), (4976,), (5013,), (6567,), (6789,), (7959,), (8217,), (8359,), (8506,), (9457,), (10798,), (11683,), (13089,), (13406,), (13750,)]",
    "table_infos": "df1:\n|    |   card_id |   disp_id | type    | issued     |\n|---:|----------:|----------:|:--------|:-----------|\n|  0 |         1 |         9 | gold    | 1998-10-16 |\n|  1 |         2 |        19 | classic | 1998-03-13 |\n|  2 |         3 |        41 | gold    | 1995-09-03 |\ndf2:\n|    |   disp_id |   client_id |   account_id | type      |\n|---:|----------:|------------:|-------------:|:----------|\n|  0 |         1 |           1 |            1 | OWNER     |\n|  1 |         2 |           2 |            2 | OWNER     |\n|  2 |         3 |           3 |            2 | DISPONENT |\nForeign keys:\ndf1.disp_id = df2.disp_id\n"
  },
  {
    "table_paths": ["datasets/BIRD_dev-financial/district.csv"],
    "query": "What was the difference in the number of crimes committed in East and North Bohemia in 1996?",
    "cot": "",
    "code": "import numpy as np\nimport pandas as pd\n\n# Assuming df is the DataFrame and it has been loaded with the given data\n\n# Filter the data for East and North Bohemia districts in 1996\neast_bohemia = df[(df['district_id'] == 1) & (df['A14'] == 1996)]['A15'].values[0]\nnorth_bohemia = df[(df['district_id'] == 2) & (df['A14'] == 1996)]['A15'].values[0]\n\n# Calculate the difference in the number of crimes committed\ndifference = east_bohemia - north_bohemia\n\n# Print the result\nprint(f\"The difference in the number of crimes committed in East and North Bohemia in 1996 was {difference}.\")",
    "observation": "IndexError: index 0 is out of bounds for axis 0 with size 0",
    "true_result": "[(0,)]",
    "table_infos": "df:\n|    |   district_id | A2          | A3     |      A4 |   A5 |   A6 |   A7 |   A8 |   A9 |   A10 |   A11 |   A12 |   A13 |   A14 |   A15 |   A16 |\n|---:|--------------:|:------------|:-------|--------:|-----:|-----:|-----:|-----:|-----:|------:|------:|------:|------:|------:|------:|------:|\n|  0 |             1 | Hl.m. Praha | Prague | 1204953 |    0 |    0 |    0 |    1 |    1 |   100 | 12541 |   0.2 |  0.43 |   167 | 85677 | 99107 |\n"
  },
  {
    "table_paths": [
      "datasets/BIRD_dev-financial/client.csv",
      "datasets/BIRD_dev-financial/account.csv",
      "datasets/BIRD_dev-financial/loan.csv"
    ],
    "query": "What is the amount of debt that client number 992 has, and how is this client doing with payments?",
    "cot": "To solve this problem, we need to join df1, df2 and df3 based on the common column 'account_id'. Then, we can filter the data for client_id 992 and calculate the total amount of debt and the average payments.\n",
    "code": "import numpy as np\nimport pandas as pd\n\n# Assuming df1, df2 and df3 are the dataframes given in the question\n\n# Join df1, df2 and df3 based on 'account_id'\ndf = pd.merge(df1, df2, on='account_id')\ndf = pd.merge(df, df3, on='account_id')\n\n# Filter the data for client_id 992\ndf = df[df['client_id'] == 992]\n\n# Calculate the total amount of debt and the average payments\ntotal_debt = df['amount'].sum()\navg_payments = df['payments'].mean()\n\nprint(f\"The total amount of debt for client number 992 is {total_debt}\")\nprint(f\"The average payments for client number 992 is {avg_payments}\")",
    "observation": "KeyError: 'account_id'",
    "true_result": "[(110736, 'C'), (53076, 'A'), (45336, 'A'), (125472, 'C'), (396120, 'C'), (182040, 'C'), (111384, 'A'), (41256, 'C'), (177504, 'C'), (407952, 'D'), (110736, 'C'), (140064, 'C'), (189696, 'A'), (265320, 'A')]",
    "table_infos": "df1:\n|    |   client_id | gender   | birth_date   |   district_id |\n|---:|------------:|:---------|:-------------|--------------:|\n|  0 |           1 | F        | 1970-12-13   |            18 |\n|  1 |           2 | M        | 1945-02-04   |             1 |\n|  2 |           3 | F        | 1940-10-09   |             1 |\ndf2:\n|    |   account_id |   district_id | frequency        | date       |\n|---:|-------------:|--------------:|:-----------------|:-----------|\n|  0 |            1 |            18 | POPLATEK MESICNE | 1995-03-24 |\n|  1 |            2 |             1 | POPLATEK MESICNE | 1993-02-26 |\n|  2 |            3 |             5 | POPLATEK MESICNE | 1997-07-07 |\ndf3:\n|    |   loan_id |   account_id | date       |   amount |   duration |   payments | status   |\n|---:|----------:|-------------:|:-----------|---------:|-----------:|-----------:|:---------|\n|  0 |      4959 |            2 | 1994-01-05 |    80952 |         24 |       3373 | A        |\n|  1 |      4961 |           19 | 1996-04-29 |    30276 |         12 |       2523 | B        |\n|  2 |      4962 |           25 | 1997-12-08 |    30276 |         12 |       2523 | A        |\nForeign keys:\ndf3.account_id = df2.account_id\n"
  },
  {
    "table_paths": [
      "datasets/BIRD_dev-financial/client.csv",
      "datasets/BIRD_dev-financial/disp.csv",
      "datasets/BIRD_dev-financial/card.csv"
    ],
    "query": "Which kind of credit card does client number 9 possess?",
    "cot": "To find out which kind of credit card does client number 9 possess, we need to join df3 and df2 on 'disp_id' and then filter the result by 'client_id' equals to 9.\n",
    "code": "import numpy as np\nimport pandas as pd\n\n# Assuming df1, df2 and df3 are the dataframes given in the question\n\n# Join df3 and df2 on 'disp_id'\ndf4 = pd.merge(df3, df2, on='disp_id')\n\n# Filter the result by 'client_id' equals to 9\ndf5 = df4[df4['client_id'] == 9]\n\n# Get the type of the credit card\ncard_type = df5['type'].values[0]\n\nprint(f\"Client number 9 possesses a {card_type} credit card.\")",
    "observation": "KeyError: 'type'",
    "true_result": "[('gold',)]",
    "table_infos": "df1:\n|    |   client_id | gender   | birth_date   |   district_id |\n|---:|------------:|:---------|:-------------|--------------:|\n|  0 |           1 | F        | 1970-12-13   |            18 |\n|  1 |           2 | M        | 1945-02-04   |             1 |\n|  2 |           3 | F        | 1940-10-09   |             1 |\ndf2:\n|    |   disp_id |   client_id |   account_id | type      |\n|---:|----------:|------------:|-------------:|:----------|\n|  0 |         1 |           1 |            1 | OWNER     |\n|  1 |         2 |           2 |            2 | OWNER     |\n|  2 |         3 |           3 |            2 | DISPONENT |\ndf3:\n|    |   card_id |   disp_id | type    | issued     |\n|---:|----------:|----------:|:--------|:-----------|\n|  0 |         1 |         9 | gold    | 1998-10-16 |\n|  1 |         2 |        19 | classic | 1998-03-13 |\n|  2 |         3 |        41 | gold    | 1995-09-03 |\nForeign keys:\ndf2.client_id = df1.client_id,df3.disp_id = df2.disp_id\n"
  },
  {
    "table_paths": [
      "datasets/BIRD_dev-financial/client.csv",
      "datasets/BIRD_dev-financial/district.csv",
      "datasets/BIRD_dev-financial/account.csv"
    ],
    "query": "Please provide a list of clients who were born between 1983 and 1987 and whose account branch is in East Bohemia, along with their IDs.",
    "cot": "\nTo solve this problem, we need to join df1, df2 and df3 on district_id. Then, we need to filter the data based on the birth_date and A2 column (which represents the branch name).\n",
    "code": "import numpy as np\nimport pandas as pd\n\n# Merge df1, df2 and df3 on district_id\ndf = pd.merge(df1, df2, on='district_id')\ndf = pd.merge(df, df3, on='district_id')\n\n# Filter the data based on the birth_date and A2 column\ndf = df[(df['birth_date'].dt.year >= 1983) & (df['birth_date'].dt.year <= 1987) & (df['A2'] == 'central Bohemia')]\n\n# Assign the prepared and processed data to final_df\nfinal_df = df[['client_id', 'birth_date', 'A2']]\n\n# Print the final result\nprint(final_df)",
    "observation": "AttributeError: Can only use .dt accessor with datetimelike values",
    "true_result": "[(379, 56), (379, 237), (379, 311), (379, 351), (379, 446), (379, 562), (379, 590), (379, 757), (379, 1002), (379, 1158), (379, 1199), (379, 1296), (379, 1406), (379, 1437), (379, 1441), (379, 1501), (379, 1528), (379, 1641), (379, 1645), (379, 1810), (379, 1859), (379, 1902), (379, 2162), (379, 2266), (379, 2334), (379, 2584), (379, 2674), (379, 2926), (379, 3175), (379, 3562), (379, 3616), (379, 3661), (379, 3691), (379, 3699), (379, 3835), (379, 3865), (379, 3890), (379, 3945), (379, 4127), (379, 4240), (379, 4503), (379, 5952), (379, 6461), (379, 7713), (379, 8225), (379, 10857), (379, 10940), (379, 11317), (734, 154), (734, 171), (734, 253), (734, 339), (734, 393), (734, 432), (734, 559), (734, 600), (734, 611), (734, 810), (734, 836), (734, 837), (734, 894), (734, 972), (734, 1047), (734, 1229), (734, 1361), (734, 1396), (734, 1454), (734, 1535), (734, 1649), (734, 1659), (734, 1716), (734, 1789), (734, 1798), (734, 1801), (734, 1934), (734, 1946), (734, 1986), (734, 2043), (734, 2097), (734, 2130), (734, 2197), (734, 2224), (734, 2244), (734, 2294), (734, 2297), (734, 2380), (734, 2443), (734, 2556), (734, 2558), (734, 2602), (734, 2680), (734, 2759), (734, 2837), (734, 2981), (734, 3010), (734, 3067), (734, 3092), (734, 3121), (734, 3279), (734, 3505), (734, 3512), (734, 3615), (734, 4784), (734, 7637), (734, 8639), (734, 10774), (734, 11053), (3428, 330), (3428, 744), (3428, 782), (3428, 832), (3428, 1021), (3428, 1085), (3428, 1107), (3428, 1195), (3428, 1316), (3428, 1324), (3428, 1365), (3428, 1585), (3428, 1735), (3428, 1836), (3428, 1921), (3428, 1927), (3428, 1963), (3428, 1974), (3428, 1994), (3428, 2004), (3428, 2018), (3428, 2038), (3428, 2111), (3428, 2118), (3428, 2142), (3428, 2365), (3428, 2487), (3428, 2538), (3428, 2715), (3428, 2770), (3428, 2774), (3428, 2807), (3428, 2836), (3428, 2891), (3428, 2983), (3428, 3005), (3428, 3029), (3428, 3181), (3428, 3352), (3428, 3418), (3428, 3496), (3428, 3508), (3428, 3539), (3428, 3893), (3428, 3966), (3428, 4156), (3428, 4907), (3428, 5700)]",
    "table_infos": "df1:\n|    |   client_id | gender   | birth_date   |   district_id |\n|---:|------------:|:---------|:-------------|--------------:|\n|  0 |           1 | F        | 1970-12-13   |            18 |\n|  1 |           2 | M        | 1945-02-04   |             1 |\n|  2 |           3 | F        | 1940-10-09   |             1 |\ndf2:\n|    |   district_id | A2          | A3              |      A4 |   A5 |   A6 |   A7 |   A8 |   A9 |   A10 |   A11 |   A12 |   A13 |   A14 |   A15 |   A16 |\n|---:|--------------:|:------------|:----------------|--------:|-----:|-----:|-----:|-----:|-----:|------:|------:|------:|------:|------:|------:|------:|\n|  0 |             1 | Hl.m. Praha | Prague          | 1204953 |    0 |    0 |    0 |    1 |    1 | 100   | 12541 |   0.2 |  0.43 |   167 | 85677 | 99107 |\n|  1 |             2 | Benesov     | central Bohemia |   88884 |   80 |   26 |    6 |    2 |    5 |  46.7 |  8507 |   1.6 |  1.85 |   132 |  2159 |  2674 |\n|  2 |             3 | Beroun      | central Bohemia |   75232 |   55 |   26 |    4 |    1 |    5 |  41.7 |  8980 |   1.9 |  2.21 |   111 |  2824 |  2813 |\ndf3:\n|    |   account_id |   district_id | frequency        | date       |\n|---:|-------------:|--------------:|:-----------------|:-----------|\n|  0 |            1 |            18 | POPLATEK MESICNE | 1995-03-24 |\n|  1 |            2 |             1 | POPLATEK MESICNE | 1993-02-26 |\n|  2 |            3 |             5 | POPLATEK MESICNE | 1997-07-07 |\nForeign keys:\ndf1.district_id = df2.district_id,df3.district_id = df2.district_id\n"
  },
  {
    "table_paths": [
      "datasets/BIRD_dev-financial/client.csv",
      "datasets/BIRD_dev-financial/disp.csv",
      "datasets/BIRD_dev-financial/card.csv"
    ],
    "query": "How many female customers have a junior credit card?",
    "cot": "To solve this problem, we need to join the three dataframes on the appropriate keys and then filter the data based on the conditions.\n",
    "code": "import numpy as np\nimport pandas as pd\n\n# Assuming df1, df2, df3 are the dataframes\n\n# Join df1 and df2 on client_id\ndf = pd.merge(df1, df2, on='client_id', how='inner')\n\n# Join df with df3 on disp_id\ndf = pd.merge(df, df3, on='disp_id', how='inner')\n\n# Filter the data to get only female customers with junior credit cards\ndf_filtered = df[(df['gender'] == 'F') & (df['type_x'] == 'OWNER') & (df['type'] == 'gold')]\n\n# Count the number of such customers\ncount = df_filtered['client_id'].nunique()\n\nprint(count)",
    "observation": "KeyError: 'type'",
    "true_result": "[(71,)]",
    "table_infos": "df1:\n|    |   client_id | gender   | birth_date   |   district_id |\n|---:|------------:|:---------|:-------------|--------------:|\n|  0 |           1 | F        | 1970-12-13   |            18 |\n|  1 |           2 | M        | 1945-02-04   |             1 |\n|  2 |           3 | F        | 1940-10-09   |             1 |\ndf2:\n|    |   disp_id |   client_id |   account_id | type      |\n|---:|----------:|------------:|-------------:|:----------|\n|  0 |         1 |           1 |            1 | OWNER     |\n|  1 |         2 |           2 |            2 | OWNER     |\n|  2 |         3 |           3 |            2 | DISPONENT |\ndf3:\n|    |   card_id |   disp_id | type    | issued     |\n|---:|----------:|----------:|:--------|:-----------|\n|  0 |         1 |         9 | gold    | 1998-10-16 |\n|  1 |         2 |        19 | classic | 1998-03-13 |\n|  2 |         3 |        41 | gold    | 1995-09-03 |\nForeign keys:\ndf2.client_id = df1.client_id,df3.disp_id = df2.disp_id\n"
  },
  {
    "table_paths": [
      "datasets/BIRD_dev-financial/district.csv",
      "datasets/BIRD_dev-financial/client.csv"
    ],
    "query": "What proportion of customers who have accounts at the Prague branch are female?",
    "cot": "To solve this problem, we need to join df1 and df2 on district_id, filter the data for Prague branch, and then calculate the proportion of female customers.\n",
    "code": "import numpy as np\nimport pandas as pd\n\n# Assuming df1 and df2 are the dataframes\n\n# Join df1 and df2 on district_id\ndf = pd.merge(df1, df2, on='district_id')\n\n# Filter the data for Prague branch\ndf_prague = df[df['A2'] == 'Prague']\n\n# Calculate the proportion of female customers\nproportion_female = df_prague[df_prague['gender'] == 'F'].shape[0] / df_prague.shape[0]\n\nprint(f\"The proportion of customers who have accounts at the Prague branch are female is {proportion_female}\")",
    "observation": "ZeroDivisionError: division by zero",
    "true_result": "[(48.86877828054298,)]",
    "table_infos": "df1:\n|    |   district_id | A2          | A3              |      A4 |   A5 |   A6 |   A7 |   A8 |   A9 |   A10 |   A11 |   A12 |   A13 |   A14 |   A15 |   A16 |\n|---:|--------------:|:------------|:----------------|--------:|-----:|-----:|-----:|-----:|-----:|------:|------:|------:|------:|------:|------:|------:|\n|  0 |             1 | Hl.m. Praha | Prague          | 1204953 |    0 |    0 |    0 |    1 |    1 | 100   | 12541 |   0.2 |  0.43 |   167 | 85677 | 99107 |\n|  1 |             2 | Benesov     | central Bohemia |   88884 |   80 |   26 |    6 |    2 |    5 |  46.7 |  8507 |   1.6 |  1.85 |   132 |  2159 |  2674 |\n|  2 |             3 | Beroun      | central Bohemia |   75232 |   55 |   26 |    4 |    1 |    5 |  41.7 |  8980 |   1.9 |  2.21 |   111 |  2824 |  2813 |\ndf2:\n|    |   client_id | gender   | birth_date   |   district_id |\n|---:|------------:|:---------|:-------------|--------------:|\n|  0 |           1 | F        | 1970-12-13   |            18 |\n|  1 |           2 | M        | 1945-02-04   |             1 |\n|  2 |           3 | F        | 1940-10-09   |             1 |\nForeign keys:\ndf2.district_id = df1.district_id\n"
  },
  {
    "table_paths": [
      "datasets/BIRD_dev-financial/loan.csv",
      "datasets/BIRD_dev-financial/account.csv"
    ],
    "query": "Among the accounts who have loan validity more than 24 months, list out the accounts that have the lowest approved amount and have account opening date before 1997.",
    "cot": "\nTo solve this problem, we need to filter the data in df1 based on the conditions:\n\n1. Loan validity (duration) more than 24 months.\n2. Approved amount is the lowest.\n3. Account opening date is before 1997.\n\nWe can use the pandas library to filter the data and sort it based on the conditions.\n",
    "code": "import numpy as np\nimport pandas as pd\n\n# Load the data\n\n\n\n# Merge the two dataframes based on account_id\ndf = pd.merge(df1, df2, on='account_id')\n\n# Convert date to datetime format\ndf['date'] = pd.to_datetime(df['date'])\n\n# Filter the data based on the conditions\nfiltered_df = df[(df['duration'] > 24) & (df['status'] == 'A') & (df['date_y'] < '1997-01-01')]\n\n# Sort the data based on the approved amount\nsorted_df = filtered_df.sort_values('amount')\n\n# Get the accounts with the lowest approved amount\nfinal_df = sorted_df.groupby('account_id').first()\n\n# Print the final result\nprint(final_df)",
    "observation": "KeyError: 'date'",
    "true_result": "[(6453,)]",
    "table_infos": "df1:\n|    |   loan_id |   account_id | date       |   amount |   duration |   payments | status   |\n|---:|----------:|-------------:|:-----------|---------:|-----------:|-----------:|:---------|\n|  0 |      4959 |            2 | 1994-01-05 |    80952 |         24 |       3373 | A        |\n|  1 |      4961 |           19 | 1996-04-29 |    30276 |         12 |       2523 | B        |\n|  2 |      4962 |           25 | 1997-12-08 |    30276 |         12 |       2523 | A        |\ndf2:\n|    |   account_id |   district_id | frequency        | date       |\n|---:|-------------:|--------------:|:-----------------|:-----------|\n|  0 |            1 |            18 | POPLATEK MESICNE | 1995-03-24 |\n|  1 |            2 |             1 | POPLATEK MESICNE | 1993-02-26 |\n|  2 |            3 |             5 | POPLATEK MESICNE | 1997-07-07 |\nForeign keys:\ndf1.account_id = df2.account_id\n"
  },
  {
    "table_paths": [
      "datasets/BIRD_dev-financial/client.csv",
      "datasets/BIRD_dev-financial/district.csv",
      "datasets/BIRD_dev-financial/account.csv"
    ],
    "query": "Name the account numbers of female clients who are oldest and have lowest average salary?",
    "cot": "",
    "code": "import numpy as np\nimport pandas as pd\n\n# Assuming df1, df2, df3 are the dataframes given in the question\n\n# Merge df1 and df2 on district_id\ndf = pd.merge(df1, df2, on='district_id')\n\n# Merge df with df3 on district_id\ndf = pd.merge(df, df3, on='district_id')\n\n# Convert birth_date to datetime\ndf['birth_date'] = pd.to_datetime(df['birth_date'])\n\n# Calculate age\ndf['age'] = pd.DatetimeIndex(df['birth_date']).year\n\n# Filter for female clients\ndf = df[df['gender'] == 'F']\n\n# Calculate average salary for each account_id\ndf['avg_salary'] = df.groupby('account_id')['frequency'].transform('mean')\n\n# Get the oldest clients\ndf = df[df['age'] == df['age'].max()]\n\n# Get the clients with lowest average salary\ndf = df[df['avg_salary'] == df['avg_salary'].min()]\n\n# Get the account numbers\nfinal_df = df['account_id']\n\n# Print the final result\nprint(final_df)",
    "observation": "TypeError: agg function failed [how->mean,dtype->object]",
    "true_result": "[(6,)]",
    "table_infos": "df1:\n|    |   client_id | gender   | birth_date   |   district_id |\n|---:|------------:|:---------|:-------------|--------------:|\n|  0 |           1 | F        | 1970-12-13   |            18 |\n|  1 |           2 | M        | 1945-02-04   |             1 |\n|  2 |           3 | F        | 1940-10-09   |             1 |\ndf2:\n|    |   district_id | A2          | A3              |      A4 |   A5 |   A6 |   A7 |   A8 |   A9 |   A10 |   A11 |   A12 |   A13 |   A14 |   A15 |   A16 |\n|---:|--------------:|:------------|:----------------|--------:|-----:|-----:|-----:|-----:|-----:|------:|------:|------:|------:|------:|------:|------:|\n|  0 |             1 | Hl.m. Praha | Prague          | 1204953 |    0 |    0 |    0 |    1 |    1 | 100   | 12541 |   0.2 |  0.43 |   167 | 85677 | 99107 |\n|  1 |             2 | Benesov     | central Bohemia |   88884 |   80 |   26 |    6 |    2 |    5 |  46.7 |  8507 |   1.6 |  1.85 |   132 |  2159 |  2674 |\n|  2 |             3 | Beroun      | central Bohemia |   75232 |   55 |   26 |    4 |    1 |    5 |  41.7 |  8980 |   1.9 |  2.21 |   111 |  2824 |  2813 |\ndf3:\n|    |   account_id |   district_id | frequency        | date       |\n|---:|-------------:|--------------:|:-----------------|:-----------|\n|  0 |            1 |            18 | POPLATEK MESICNE | 1995-03-24 |\n|  1 |            2 |             1 | POPLATEK MESICNE | 1993-02-26 |\n|  2 |            3 |             5 | POPLATEK MESICNE | 1997-07-07 |\nForeign keys:\ndf1.district_id = df2.district_id,df3.district_id = df2.district_id\n"
  },
  {
    "table_paths": [
      "datasets/BIRD_dev-financial/client.csv",
      "datasets/BIRD_dev-financial/district.csv"
    ],
    "query": "How many clients who were born in 1920 stay in east Bohemia?",
    "cot": "To solve this problem, we need to join df1 and df2 on district_id, filter the clients who were born in 1920 and are from east Bohemia (A3 = 'central Bohemia'), and count the number of clients.\n",
    "code": "import numpy as np\nimport pandas as pd\n\n# Assuming df1 and df2 are the dataframes given in the question\n\n# Merge df1 and df2 on district_id\ndf = pd.merge(df1, df2, on='district_id')\n\n# Filter the clients who were born in 1920 and are from east Bohemia\ndf = df[(df['birth_date'].dt.year == 1920) & (df['A3'] == 'central Bohemia')]\n\n# Count the number of clients\nnum_clients = df.shape[0]\n\nprint(f\"The number of clients who were born in 1920 and are from central Bohemia is {num_clients}\")",
    "observation": "AttributeError: Can only use .dt accessor with datetimelike values",
    "true_result": "[(6,)]",
    "table_infos": "df1:\n|    |   client_id | gender   | birth_date   |   district_id |\n|---:|------------:|:---------|:-------------|--------------:|\n|  0 |           1 | F        | 1970-12-13   |            18 |\n|  1 |           2 | M        | 1945-02-04   |             1 |\n|  2 |           3 | F        | 1940-10-09   |             1 |\ndf2:\n|    |   district_id | A2          | A3              |      A4 |   A5 |   A6 |   A7 |   A8 |   A9 |   A10 |   A11 |   A12 |   A13 |   A14 |   A15 |   A16 |\n|---:|--------------:|:------------|:----------------|--------:|-----:|-----:|-----:|-----:|-----:|------:|------:|------:|------:|------:|------:|------:|\n|  0 |             1 | Hl.m. Praha | Prague          | 1204953 |    0 |    0 |    0 |    1 |    1 | 100   | 12541 |   0.2 |  0.43 |   167 | 85677 | 99107 |\n|  1 |             2 | Benesov     | central Bohemia |   88884 |   80 |   26 |    6 |    2 |    5 |  46.7 |  8507 |   1.6 |  1.85 |   132 |  2159 |  2674 |\n|  2 |             3 | Beroun      | central Bohemia |   75232 |   55 |   26 |    4 |    1 |    5 |  41.7 |  8980 |   1.9 |  2.21 |   111 |  2824 |  2813 |\nForeign keys:\ndf1.district_id = df2.district_id\n"
  },
  {
    "table_paths": [
      "datasets/BIRD_dev-toxicology/atom.csv",
      "datasets/BIRD_dev-toxicology/bond.csv"
    ],
    "query": "Calculate the average number of oxygen atoms in single-bonded molecules.",
    "cot": "\nTo solve this problem, we need to join df1 and df2 on molecule_id, then group by molecule_id and count the number of atoms with element 'o'. The average number of oxygen atoms in single-bonded molecules can be calculated by dividing the sum of the counts by the number of unique molecules.\n",
    "code": "import numpy as np\nimport pandas as pd\n\n# Assuming df1 and df2 are the dataframes\ndf = pd.merge(df1, df2, on='molecule_id')\n\n# Filter out molecules that have more than one atom\ndf = df[df['atom_id'].apply(lambda x: x.split('_')[0]).nunique() == 1]\n\n# Count the number of oxygen atoms in each molecule\ndf['o_count'] = df['element'].apply(lambda x: 1 if x == 'o' else 0)\naverage_o = df.groupby('molecule_id')['o_count'].sum().mean()\n\nprint(average_o)",
    "observation": "KeyError: False",
    "true_result": "[(116.65273311897106,)]",
    "table_infos": "df1:\n|    | atom_id   | molecule_id   | element   |\n|---:|:----------|:--------------|:----------|\n|  0 | TR000_1   | TR000         | cl        |\n|  1 | TR000_2   | TR000         | c         |\n|  2 | TR000_3   | TR000         | cl        |\ndf2:\n|    | bond_id   | molecule_id   | bond_type   |\n|---:|:----------|:--------------|:------------|\n|  0 | TR000_1_2 | TR000         | -           |\n|  1 | TR000_2_3 | TR000         | -           |\n|  2 | TR000_2_4 | TR000         | -           |\nForeign keys:\n\n"
  },
  {
    "table_paths": [
      "datasets/BIRD_dev-toxicology/atom.csv",
      "datasets/BIRD_dev-toxicology/connected.csv"
    ],
    "query": "What elements are in the TR004_8_9 bond atoms?",
    "cot": "To answer this question, we need to join df1 and df2 based on the atom_id and atom_id2. Then, we can select the elements of the bond atoms.\n",
    "code": "import numpy as np\nimport pandas as pd\n\n# Assuming df1 and df2 are the dataframes\n\n# Data Processing\ndf = pd.merge(df1, df2, left_on='atom_id', right_on='atom_id2', how='inner')\ndf = df[df['molecule_id'] == 'TR000']  # Filter for the molecule_id TR000\n\n# Declare `final_df` Variable\nfinal_df = df[['atom_id', 'element']]\n\n# Print the final result\nprint(final_df)",
    "observation": "KeyError: \"['atom_id'] not in index\"",
    "true_result": "[('c',)]",
    "table_infos": "df1:\n|    | atom_id   | molecule_id   | element   |\n|---:|:----------|:--------------|:----------|\n|  0 | TR000_1   | TR000         | cl        |\n|  1 | TR000_2   | TR000         | c         |\n|  2 | TR000_3   | TR000         | cl        |\ndf2:\n|    | atom_id   | atom_id2   | bond_id   |\n|---:|:----------|:-----------|:----------|\n|  0 | TR000_1   | TR000_2    | TR000_1_2 |\n|  1 | TR000_2   | TR000_1    | TR000_1_2 |\n|  2 | TR000_2   | TR000_3    | TR000_2_3 |\nForeign keys:\ndf2.atom_id2 = df1.atom_id,df2.atom_id = df1.atom_id\n"
  },
  {
    "table_paths": [
      "datasets/BIRD_dev-toxicology/bond.csv",
      "datasets/BIRD_dev-toxicology/connected.csv",
      "datasets/BIRD_dev-toxicology/atom.csv"
    ],
    "query": "Tellurium is in what type of bond?",
    "cot": "\nTo find out the type of bond between Tellurium atoms, we need to join df1, df2 and df3 based on the bond_id and atom_id. Then, we can filter the rows where molecule_id is 'TR000' and element is 'cl'.\n",
    "code": "import numpy as np\nimport pandas as pd\n\n# Load the dataframes\n\n# Join the dataframes\ndf = pd.merge(df2, df1, on='bond_id')\ndf = pd.merge(df, df3, left_on='atom_id', right_on='atom_id2')\n\n# Filter the rows where molecule_id is 'TR000' and element is 'cl'\ndf = df[(df['molecule_id'] == 'TR000') & (df['element'] == 'cl')]\n\n# Get the bond type\nbond_type = df['bond_type'].values[0]\n\n# Print the result\nprint(f\"Tellurium is in a {bond_type} bond.\")",
    "observation": "KeyError: 'atom_id2'",
    "true_result": "[('-',)]",
    "table_infos": "df1:\n|    | bond_id   | molecule_id   | bond_type   |\n|---:|:----------|:--------------|:------------|\n|  0 | TR000_1_2 | TR000         | -           |\n|  1 | TR000_2_3 | TR000         | -           |\n|  2 | TR000_2_4 | TR000         | -           |\ndf2:\n|    | atom_id   | atom_id2   | bond_id   |\n|---:|:----------|:-----------|:----------|\n|  0 | TR000_1   | TR000_2    | TR000_1_2 |\n|  1 | TR000_2   | TR000_1    | TR000_1_2 |\n|  2 | TR000_2   | TR000_3    | TR000_2_3 |\ndf3:\n|    | atom_id   | molecule_id   | element   |\n|---:|:----------|:--------------|:----------|\n|  0 | TR000_1   | TR000         | cl        |\n|  1 | TR000_2   | TR000         | c         |\n|  2 | TR000_3   | TR000         | cl        |\nForeign keys:\ndf2.bond_id = df1.bond_id,df2.atom_id2 = df3.atom_id,df2.atom_id = df3.atom_id\n"
  },
  {
    "table_paths": [
      "datasets/BIRD_dev-toxicology/atom.csv",
      "datasets/BIRD_dev-toxicology/molecule.csv",
      "datasets/BIRD_dev-toxicology/connected.csv"
    ],
    "query": "Indicate which atoms are connected in non-carcinogenic type molecules.",
    "cot": "\nTo solve this problem, we need to join df1, df3, and df2 on the appropriate columns. Then, we can filter out the molecules that are not carcinogenic (label = '+'). Finally, we can group by atom_id and count the number of unique molecules for each atom. Atoms with a count of 0 are connected to all carcinogenic molecules.\n",
    "code": "import numpy as np\nimport pandas as pd\n\n# Assuming df1, df2, df3 are the dataframes\n\n# Join df1, df3, and df2 on the appropriate columns\ndf = pd.merge(df1, df3, left_on='atom_id', right_on='atom_id2')\ndf = pd.merge(df, df2, on='molecule_id')\n\n# Filter out the molecules that are not carcinogenic\ndf = df[df['label'] == '+']\n\n# Group by atom_id and count the number of unique molecules for each atom\ndf = df.groupby('atom_id').nunique()\n\n# Atoms with a count of 0 are connected to all carcinogenic molecules\nnon_carcinogenic_atoms = df[df['molecule_id'] == 0].index.tolist()\n\n# Print the final result\nprint(final_df)",
    "observation": "KeyError: 'atom_id'",
    "true_result": "[('TR002_1',), ('TR002_2',), ('TR002_3',), ('TR002_4',), ('TR002_5',), ('TR002_6',), ('TR004_1',), ('TR004_10',), ('TR004_11',), ('TR004_12',), ('TR004_13',), ('TR004_14',), ('TR004_15',), ('TR004_16',), ('TR004_17',), ('TR004_18',), ('TR004_19',), ('TR004_2',), ('TR004_20',), ('TR004_21',), ('TR004_22',), ('TR004_23',), ('TR004_24',), ('TR004_3',), ('TR004_4',), ('TR004_5',), ('TR004_6',), ('TR004_7',), ('TR004_8',), ('TR004_9',), ('TR007_1',), ('TR007_10',), ('TR007_11',), ('TR007_12',), ('TR007_13',), ('TR007_14',), ('TR007_15',), ('TR007_16',), ('TR007_17',), ('TR007_18',), ('TR007_19',), ('TR007_2',), ('TR007_20',), ('TR007_21',), ('TR007_22',), ('TR007_23',), ('TR007_24',), ('TR007_25',), ('TR007_26',), ('TR007_27',), ('TR007_28',), ('TR007_29',), ('TR007_3',), ('TR007_30',), ('TR007_4',), ('TR007_5',), ('TR007_6',), ('TR007_7',), ('TR007_8',), ('TR007_9',), ('TR008_1',), ('TR008_10',), ('TR008_11',), ('TR008_12',), ('TR008_13',), ('TR008_14',), ('TR008_15',), ('TR008_16',), ('TR008_17',), ('TR008_18',), ('TR008_19',), ('TR008_2',), ('TR008_20',), ('TR008_21',), ('TR008_22',), ('TR008_23',), ('TR008_24',), ('TR008_3',), ('TR008_4',), ('TR008_5',), ('TR008_6',), ('TR008_7',), ('TR008_8',), ('TR008_9',), ('TR009_1',), ('TR009_10',), ('TR009_11',), ('TR009_12',), ('TR009_13',), ('TR009_14',), ('TR009_15',), ('TR009_16',), ('TR009_17',), ('TR009_18',), ('TR009_19',), ('TR009_2',), ('TR009_20',), ('TR009_21',), ('TR009_22',), ('TR009_3',), ('TR009_4',), ('TR009_5',), ('TR009_6',), ('TR009_7',), ('TR009_8',), ('TR009_9',), ('TR010_1',), ('TR010_10',), ('TR010_11',), ('TR010_12',), ('TR010_13',), ('TR010_14',), ('TR010_15',), ('TR010_16',), ('TR010_17',), ('TR010_18',), ('TR010_2',), ('TR010_3',), ('TR010_4',), ('TR010_5',), ('TR010_6',), ('TR010_7',), ('TR010_8',), ('TR010_9',), ('TR011_1',), ('TR011_10',), ('TR011_11',), ('TR011_12',), ('TR011_13',), ('TR011_14',), ('TR011_15',), ('TR011_16',), ('TR011_17',), ('TR011_18',), ('TR011_19',), ('TR011_2',), ('TR011_20',), ('TR011_21',), ('TR011_22',), ('TR011_23',), ('TR011_24',), ('TR011_25',), ('TR011_26',), ('TR011_27',), ('TR011_28',), ('TR011_29',), ('TR011_3',), ('TR011_30',), ('TR011_31',), ('TR011_32',), ('TR011_33',), ('TR011_34',), ('TR011_35',), ('TR011_36',), ('TR011_37',), ('TR011_38',), ('TR011_39',), ('TR011_4',), ('TR011_40',), ('TR011_41',), ('TR011_42',), ('TR011_5',), ('TR011_6',), ('TR011_7',), ('TR011_8',), ('TR011_9',), ('TR012_1',), ('TR012_10',), ('TR012_11',), ('TR012_12',), ('TR012_13',), ('TR012_14',), ('TR012_15',), ('TR012_16',), ('TR012_17',), ('TR012_18',), ('TR012_19',), ('TR012_2',), ('TR012_20',), ('TR012_21',), ('TR012_22',), ('TR012_23',), ('TR012_24',), ('TR012_25',), ('TR012_26',), ('TR012_27',), ('TR012_3',), ('TR012_4',), ('TR012_5',), ('TR012_6',), ('TR012_7',), ('TR012_8',), ('TR012_9',), ('TR014_1',), ('TR014_10',), ('TR014_11',), ('TR014_12',), ('TR014_13',), ('TR014_14',), ('TR014_15',), ('TR014_16',), ('TR014_17',), ('TR014_18',), ('TR014_2',), ('TR014_3',), ('TR014_4',), ('TR014_5',), ('TR014_6',), ('TR014_7',), ('TR014_8',), ('TR014_9',), ('TR015_1',), ('TR015_10',), ('TR015_11',), ('TR015_12',), ('TR015_13',), ('TR015_14',), ('TR015_15',), ('TR015_16',), ('TR015_17',), ('TR015_18',), ('TR015_19',), ('TR015_2',), ('TR015_20',), ('TR015_21',), ('TR015_22',), ('TR015_23',), ('TR015_24',), ('TR015_3',), ('TR015_4',), ('TR015_5',), ('TR015_6',), ('TR015_7',), ('TR015_8',), ('TR015_9',), ('TR017_1',), ('TR017_10',), ('TR017_11',), ('TR017_12',), ('TR017_13',), ('TR017_14',), ('TR017_15',), ('TR017_16',), ('TR017_17',), ('TR017_18',), ('TR017_19',), ('TR017_2',), ('TR017_20',), ('TR017_21',), ('TR017_22',), ('TR017_23',), ('TR017_24',), ('TR017_25',), ('TR017_26',), ('TR017_27',), ('TR017_3',), ('TR017_4',), ('TR017_5',), ('TR017_6',), ('TR017_7',), ('TR017_8',), ('TR017_9',), ('TR021_1',), ('TR021_10',), ('TR021_11',), ('TR021_12',), ('TR021_13',), ('TR021_14',), ('TR021_15',), ('TR021_16',), ('TR021_17',), ('TR021_18',), ('TR021_19',), ('TR021_2',), ('TR021_20',), ('TR021_21',), ('TR021_22',), ('TR021_23',), ('TR021_24',), ('TR021_25',), ('TR021_26',), ('TR021_27',), ('TR021_28',), ('TR021_29',), ('TR021_3',), ('TR021_30',), ('TR021_31',), ('TR021_32',), ('TR021_33',), ('TR021_34',), ('TR021_35',), ('TR021_36',), ('TR021_37',), ('TR021_38',), ('TR021_39',), ('TR021_4',), ('TR021_40',), ('TR021_41',), ('TR021_42',), ('TR021_43',), ('TR021_44',), ('TR021_45',), ('TR021_46',), ('TR021_47',), ('TR021_48',), ('TR021_49',), ('TR021_5',), ('TR021_50',), ('TR021_51',), ('TR021_52',), ('TR021_53',), ('TR021_6',), ('TR021_7',), ('TR021_8',), ('TR021_9',), ('TR022_1',), ('TR022_10',), ('TR022_11',), ('TR022_12',), ('TR022_13',), ('TR022_14',), ('TR022_15',), ('TR022_16',), ('TR022_17',), ('TR022_18',), ('TR022_19',), ('TR022_2',), ('TR022_20',), ('TR022_21',), ('TR022_22',), ('TR022_23',), ('TR022_24',), ('TR022_25',), ('TR022_26',), ('TR022_27',), ('TR022_3',), ('TR022_4',), ('TR022_5',), ('TR022_6',), ('TR022_7',), ('TR022_8',), ('TR022_9',), ('TR023_1',), ('TR023_10',), ('TR023_11',), ('TR023_12',), ('TR023_13',), ('TR023_14',), ('TR023_15',), ('TR023_16',), ('TR023_2',), ('TR023_3',), ('TR023_4',), ('TR023_5',), ('TR023_6',), ('TR023_7',), ('TR023_8',), ('TR023_9',), ('TR024_1',), ('TR024_10',), ('TR024_11',), ('TR024_12',), ('TR024_13',), ('TR024_14',), ('TR024_15',), ('TR024_16',), ('TR024_17',), ('TR024_18',), ('TR024_19',), ('TR024_2',), ('TR024_20',), ('TR024_21',), ('TR024_22',), ('TR024_23',), ('TR024_24',), ('TR024_25',), ('TR024_26',), ('TR024_27',), ('TR024_28',), ('TR024_29',), ('TR024_3',), ('TR024_30',), ('TR024_31',), ('TR024_32',), ('TR024_33',), ('TR024_34',), ('TR024_35',), ('TR024_36',), ('TR024_37',), ('TR024_38',), ('TR024_4',), ('TR024_5',), ('TR024_6',), ('TR024_7',), ('TR024_8',), ('TR024_9',), ('TR025_1',), ('TR025_10',), ('TR025_11',), ('TR025_12',), ('TR025_13',), ('TR025_14',), ('TR025_15',), ('TR025_16',), ('TR025_17',), ('TR025_2',), ('TR025_3',), ('TR025_4',), ('TR025_5',), ('TR025_6',), ('TR025_7',), ('TR025_8',), ('TR025_9',), ('TR030_1',), ('TR030_10',), ('TR030_11',), ('TR030_12',), ('TR030_13',), ('TR030_14',), ('TR030_15',), ('TR030_16',), ('TR030_17',), ('TR030_18',), ('TR030_19',), ('TR030_2',), ('TR030_20',), ('TR030_21',), ('TR030_22',), ('TR030_23',), ('TR030_24',), ('TR030_25',), ('TR030_26',), ('TR030_27',), ('TR030_28',), ('TR030_29',), ('TR030_3',), ('TR030_30',), ('TR030_31',), ('TR030_32',), ('TR030_33',), ('TR030_34',), ('TR030_35',), ('TR030_36',), ('TR030_37',), ('TR030_38',), ('TR030_39',), ('TR030_4',), ('TR030_40',), ('TR030_41',), ('TR030_42',), ('TR030_43',), ('TR030_44',), ('TR030_45',), ('TR030_46',), ('TR030_47',), ('TR030_48',), ('TR030_49',), ('TR030_5',), ('TR030_50',), ('TR030_51',), ('TR030_52',), ('TR030_53',), ('TR030_54',), ('TR030_55',), ('TR030_56',), ('TR030_57',), ('TR030_58',), ('TR030_59',), ('TR030_6',), ('TR030_60',), ('TR030_61',), ('TR030_62',), ('TR030_63',), ('TR030_64',), ('TR030_65',), ('TR030_66',), ('TR030_67',), ('TR030_68',), ('TR030_69',), ('TR030_7',), ('TR030_70',), ('TR030_8',), ('TR030_9',), ('TR031_1',), ('TR031_10',), ('TR031_11',), ('TR031_12',), ('TR031_13',), ('TR031_14',), ('TR031_15',), ('TR031_16',), ('TR031_17',), ('TR031_18',), ('TR031_19',), ('TR031_2',), ('TR031_20',), ('TR031_21',), ('TR031_22',), ('TR031_23',), ('TR031_24',), ('TR031_25',), ('TR031_26',), ('TR031_27',), ('TR031_28',), ('TR031_29',), ('TR031_3',), ('TR031_30',), ('TR031_31',), ('TR031_32',), ('TR031_33',), ('TR031_34',), ('TR031_35',), ('TR031_36',), ('TR031_4',), ('TR031_5',), ('TR031_6',), ('TR031_7',), ('TR031_8',), ('TR031_9',), ('TR032_1',), ('TR032_10',), ('TR032_11',), ('TR032_12',), ('TR032_13',), ('TR032_14',), ('TR032_15',), ('TR032_16',), ('TR032_17',), ('TR032_18',), ('TR032_19',), ('TR032_2',), ('TR032_20',), ('TR032_21',), ('TR032_22',), ('TR032_23',), ('TR032_24',), ('TR032_25',), ('TR032_26',), ('TR032_27',), ('TR032_28',), ('TR032_29',), ('TR032_3',), ('TR032_4',), ('TR032_5',), ('TR032_6',), ('TR032_7',), ('TR032_8',), ('TR032_9',), ('TR033_1',), ('TR033_10',), ('TR033_11',), ('TR033_12',), ('TR033_13',), ('TR033_14',), ('TR033_15',), ('TR033_16',), ('TR033_17',), ('TR033_18',), ('TR033_19',), ('TR033_2',), ('TR033_20',), ('TR033_21',), ('TR033_22',), ('TR033_23',), ('TR033_24',), ('TR033_25',), ('TR033_26',), ('TR033_27',), ('TR033_28',), ('TR033_3',), ('TR033_4',), ('TR033_5',), ('TR033_6',), ('TR033_7',), ('TR033_8',), ('TR033_9',), ('TR034_1',), ('TR034_10',), ('TR034_11',), ('TR034_12',), ('TR034_13',), ('TR034_14',), ('TR034_15',), ('TR034_16',), ('TR034_17',), ('TR034_18',), ('TR034_19',), ('TR034_2',), ('TR034_20',), ('TR034_21',), ('TR034_22',), ('TR034_23',), ('TR034_24',), ('TR034_25',), ('TR034_26',), ('TR034_27',), ('TR034_28',), ('TR034_29',), ('TR034_3',), ('TR034_30',), ('TR034_31',), ('TR034_32',), ('TR034_33',), ('TR034_34',), ('TR034_35',), ('TR034_36',), ('TR034_37',), ('TR034_38',), ('TR034_39',), ('TR034_4',), ('TR034_5',), ('TR034_6',), ('TR034_7',), ('TR034_8',), ('TR034_9',), ('TR035_1',), ('TR035_10',), ('TR035_11',), ('TR035_12',), ('TR035_13',), ('TR035_14',), ('TR035_15',), ('TR035_16',), ('TR035_17',), ('TR035_18',), ('TR035_19',), ('TR035_2',), ('TR035_20',), ('TR035_21',), ('TR035_22',), ('TR035_23',), ('TR035_24',), ('TR035_25',), ('TR035_26',), ('TR035_27',), ('TR035_28',), ('TR035_29',), ('TR035_3',), ('TR035_30',), ('TR035_31',), ('TR035_32',), ('TR035_33',), ('TR035_34',), ('TR035_35',), ('TR035_36',), ('TR035_4',), ('TR035_5',), ('TR035_6',), ('TR035_7',), ('TR035_8',), ('TR035_9',), ('TR036_1',), ('TR036_10',), ('TR036_11',), ('TR036_12',), ('TR036_13',), ('TR036_14',), ('TR036_15',), ('TR036_16',), ('TR036_17',), ('TR036_2',), ('TR036_3',), ('TR036_4',), ('TR036_5',), ('TR036_6',), ('TR036_7',), ('TR036_8',), ('TR036_9',), ('TR040_1',), ('TR040_10',), ('TR040_11',), ('TR040_12',), ('TR040_13',), ('TR040_14',), ('TR040_15',), ('TR040_16',), ('TR040_17',), ('TR040_18',), ('TR040_19',), ('TR040_2',), ('TR040_20',), ('TR040_21',), ('TR040_22',), ('TR040_23',), ('TR040_24',), ('TR040_25',), ('TR040_26',), ('TR040_27',), ('TR040_3',), ('TR040_4',), ('TR040_5',), ('TR040_6',), ('TR040_7',), ('TR040_8',), ('TR040_9',), ('TR045_1',), ('TR045_10',), ('TR045_11',), ('TR045_12',), ('TR045_13',), ('TR045_14',), ('TR045_15',), ('TR045_16',), ('TR045_17',), ('TR045_18',), ('TR045_19',), ('TR045_2',), ('TR045_20',), ('TR045_21',), ('TR045_22',), ('TR045_23',), ('TR045_24',), ('TR045_25',), ('TR045_26',), ('TR045_27',), ('TR045_28',), ('TR045_29',), ('TR045_3',), ('TR045_30',), ('TR045_4',), ('TR045_5',), ('TR045_6',), ('TR045_7',), ('TR045_8',), ('TR045_9',), ('TR046_1',), ('TR046_10',), ('TR046_11',), ('TR046_12',), ('TR046_13',), ('TR046_14',), ('TR046_15',), ('TR046_16',), ('TR046_17',), ('TR046_18',), ('TR046_19',), ('TR046_2',), ('TR046_20',), ('TR046_21',), ('TR046_3',), ('TR046_4',), ('TR046_5',), ('TR046_6',), ('TR046_7',), ('TR046_8',), ('TR046_9',), ('TR048_1',), ('TR048_10',), ('TR048_11',), ('TR048_12',), ('TR048_13',), ('TR048_14',), ('TR048_2',), ('TR048_3',), ('TR048_4',), ('TR048_5',), ('TR048_6',), ('TR048_7',), ('TR048_8',), ('TR048_9',), ('TR050_1',), ('TR050_10',), ('TR050_11',), ('TR050_12',), ('TR050_13',), ('TR050_14',), ('TR050_15',), ('TR050_16',), ('TR050_17',), ('TR050_18',), ('TR050_19',), ('TR050_2',), ('TR050_20',), ('TR050_21',), ('TR050_22',), ('TR050_23',), ('TR050_24',), ('TR050_25',), ('TR050_26',), ('TR050_27',), ('TR050_28',), ('TR050_29',), ('TR050_3',), ('TR050_30',), ('TR050_31',), ('TR050_32',), ('TR050_33',), ('TR050_34',), ('TR050_35',), ('TR050_36',), ('TR050_37',), ('TR050_38',), ('TR050_39',), ('TR050_4',), ('TR050_40',), ('TR050_41',), ('TR050_42',), ('TR050_5',), ('TR050_6',), ('TR050_7',), ('TR050_8',), ('TR050_9',), ('TR051_1',), ('TR051_10',), ('TR051_11',), ('TR051_12',), ('TR051_13',), ('TR051_14',), ('TR051_15',), ('TR051_16',), ('TR051_17',), ('TR051_18',), ('TR051_19',), ('TR051_2',), ('TR051_20',), ('TR051_21',), ('TR051_22',), ('TR051_23',), ('TR051_24',), ('TR051_25',), ('TR051_26',), ('TR051_27',), ('TR051_28',), ('TR051_29',), ('TR051_3',), ('TR051_30',), ('TR051_31',), ('TR051_32',), ('TR051_33',), ('TR051_34',), ('TR051_35',), ('TR051_36',), ('TR051_37',), ('TR051_38',), ('TR051_39',), ('TR051_4',), ('TR051_40',), ('TR051_41',), ('TR051_42',), ('TR051_5',), ('TR051_6',), ('TR051_7',), ('TR051_8',), ('TR051_9',), ('TR056_1',), ('TR056_10',), ('TR056_11',), ('TR056_12',), ('TR056_13',), ('TR056_14',), ('TR056_15',), ('TR056_16',), ('TR056_17',), ('TR056_18',), ('TR056_19',), ('TR056_2',), ('TR056_20',), ('TR056_21',), ('TR056_22',), ('TR056_23',), ('TR056_24',), ('TR056_25',), ('TR056_26',), ('TR056_27',), ('TR056_28',), ('TR056_29',), ('TR056_3',), ('TR056_30',), ('TR056_31',), ('TR056_32',), ('TR056_33',), ('TR056_34',), ('TR056_35',), ('TR056_36',), ('TR056_37',), ('TR056_38',), ('TR056_39',), ('TR056_4',), ('TR056_40',), ('TR056_5',), ('TR056_6',), ('TR056_7',), ('TR056_8',), ('TR056_9',), ('TR059_1',), ('TR059_10',), ('TR059_100',), ('TR059_101',), ('TR059_102',), ('TR059_11',), ('TR059_12',), ('TR059_13',), ('TR059_14',), ('TR059_15',), ('TR059_16',), ('TR059_17',), ('TR059_18',), ('TR059_19',), ('TR059_2',), ('TR059_20',), ('TR059_21',), ('TR059_22',), ('TR059_23',), ('TR059_24',), ('TR059_25',), ('TR059_26',), ('TR059_27',), ('TR059_28',), ('TR059_29',), ('TR059_3',), ('TR059_30',), ('TR059_31',), ('TR059_32',), ('TR059_33',), ('TR059_34',), ('TR059_35',), ('TR059_36',), ('TR059_37',), ('TR059_38',), ('TR059_39',), ('TR059_4',), ('TR059_40',), ('TR059_41',), ('TR059_42',), ('TR059_43',), ('TR059_44',), ('TR059_45',), ('TR059_46',), ('TR059_47',), ('TR059_48',), ('TR059_49',), ('TR059_5',), ('TR059_50',), ('TR059_51',), ('TR059_52',), ('TR059_53',), ('TR059_54',), ('TR059_55',), ('TR059_56',), ('TR059_57',), ('TR059_58',), ('TR059_59',), ('TR059_6',), ('TR059_60',), ('TR059_61',), ('TR059_62',), ('TR059_63',), ('TR059_64',), ('TR059_65',), ('TR059_66',), ('TR059_67',), ('TR059_68',), ('TR059_69',), ('TR059_7',), ('TR059_70',), ('TR059_71',), ('TR059_72',), ('TR059_73',), ('TR059_74',), ('TR059_75',), ('TR059_76',), ('TR059_77',), ('TR059_78',), ('TR059_79',), ('TR059_8',), ('TR059_80',), ('TR059_81',), ('TR059_82',), ('TR059_83',), ('TR059_84',), ('TR059_85',), ('TR059_86',), ('TR059_87',), ('TR059_88',), ('TR059_89',), ('TR059_9',), ('TR059_90',), ('TR059_91',), ('TR059_92',), ('TR059_93',), ('TR059_94',), ('TR059_95',), ('TR059_96',), ('TR059_97',), ('TR059_98',), ('TR059_99',), ('TR060_1',), ('TR060_10',), ('TR060_100',), ('TR060_101',), ('TR060_102',), ('TR060_103',), ('TR060_11',), ('TR060_12',), ('TR060_13',), ('TR060_14',), ('TR060_15',), ('TR060_16',), ('TR060_17',), ('TR060_18',), ('TR060_19',), ('TR060_2',), ('TR060_20',), ('TR060_21',), ('TR060_22',), ('TR060_23',), ('TR060_24',), ('TR060_25',), ('TR060_26',), ('TR060_27',), ('TR060_28',), ('TR060_29',), ('TR060_3',), ('TR060_30',), ('TR060_31',), ('TR060_32',), ('TR060_33',), ('TR060_34',), ('TR060_35',), ('TR060_36',), ('TR060_37',), ('TR060_38',), ('TR060_39',), ('TR060_4',), ('TR060_40',), ('TR060_41',), ('TR060_42',), ('TR060_43',), ('TR060_44',), ('TR060_45',), ('TR060_46',), ('TR060_47',), ('TR060_48',), ('TR060_49',), ('TR060_5',), ('TR060_50',), ('TR060_51',), ('TR060_52',), ('TR060_53',), ('TR060_54',), ('TR060_55',), ('TR060_56',), ('TR060_57',), ('TR060_58',), ('TR060_59',), ('TR060_6',), ('TR060_60',), ('TR060_61',), ('TR060_62',), ('TR060_63',), ('TR060_64',), ('TR060_65',), ('TR060_66',), ('TR060_67',), ('TR060_68',), ('TR060_69',), ('TR060_7',), ('TR060_70',), ('TR060_71',), ('TR060_72',), ('TR060_73',), ('TR060_74',), ('TR060_75',), ('TR060_76',), ('TR060_77',), ('TR060_78',), ('TR060_79',), ('TR060_8',), ('TR060_80',), ('TR060_81',), ('TR060_82',), ('TR060_83',), ('TR060_84',), ('TR060_85',), ('TR060_86',), ('TR060_87',), ('TR060_88',), ('TR060_89',), ('TR060_9',), ('TR060_90',), ('TR060_91',), ('TR060_92',), ('TR060_93',), ('TR060_94',), ('TR060_95',), ('TR060_96',), ('TR060_97',), ('TR060_98',), ('TR060_99',), ('TR061_1',), ('TR061_10',), ('TR061_11',), ('TR061_12',), ('TR061_13',), ('TR061_14',), ('TR061_2',), ('TR061_3',), ('TR061_4',), ('TR061_5',), ('TR061_6',), ('TR061_7',), ('TR061_8',), ('TR061_9',), ('TR064_1',), ('TR064_10',), ('TR064_11',), ('TR064_12',), ('TR064_13',), ('TR064_14',), ('TR064_15',), ('TR064_16',), ('TR064_17',), ('TR064_18',), ('TR064_19',), ('TR064_2',), ('TR064_20',), ('TR064_3',), ('TR064_4',), ('TR064_5',), ('TR064_6',), ('TR064_7',), ('TR064_8',), ('TR064_9',), ('TR066_1',), ('TR066_2',), ('TR066_3',), ('TR066_4',), ('TR066_5',), ('TR066_6',), ('TR066_7',), ('TR066_8',), ('TR068_1',), ('TR068_2',), ('TR068_3',), ('TR068_4',), ('TR068_5',), ('TR068_6',), ('TR068_7',), ('TR068_8',), ('TR071_1',), ('TR071_10',), ('TR071_11',), ('TR071_12',), ('TR071_13',), ('TR071_14',), ('TR071_15',), ('TR071_16',), ('TR071_17',), ('TR071_18',), ('TR071_19',), ('TR071_2',), ('TR071_20',), ('TR071_21',), ('TR071_22',), ('TR071_23',), ('TR071_24',), ('TR071_25',), ('TR071_26',), ('TR071_27',), ('TR071_3',), ('TR071_4',), ('TR071_5',), ('TR071_6',), ('TR071_7',), ('TR071_8',), ('TR071_9',), ('TR073_1',), ('TR073_2',), ('TR073_3',), ('TR073_4',), ('TR073_5',), ('TR073_6',), ('TR073_7',), ('TR073_8',), ('TR073_9',), ('TR074_1',), ('TR074_2',), ('TR074_3',), ('TR074_4',), ('TR074_5',), ('TR074_6',), ('TR074_7',), ('TR074_8',), ('TR077_1',), ('TR077_10',), ('TR077_11',), ('TR077_12',), ('TR077_13',), ('TR077_14',), ('TR077_15',), ('TR077_16',), ('TR077_17',), ('TR077_18',), ('TR077_19',), ('TR077_2',), ('TR077_20',), ('TR077_21',), ('TR077_22',), ('TR077_23',), ('TR077_24',), ('TR077_25',), ('TR077_26',), ('TR077_27',), ('TR077_28',), ('TR077_29',), ('TR077_3',), ('TR077_30',), ('TR077_4',), ('TR077_5',), ('TR077_6',), ('TR077_7',), ('TR077_8',), ('TR077_9',), ('TR078_1',), ('TR078_10',), ('TR078_11',), ('TR078_12',), ('TR078_13',), ('TR078_14',), ('TR078_15',), ('TR078_16',), ('TR078_17',), ('TR078_18',), ('TR078_19',), ('TR078_2',), ('TR078_20',), ('TR078_21',), ('TR078_22',), ('TR078_23',), ('TR078_24',), ('TR078_25',), ('TR078_26',), ('TR078_27',), ('TR078_28',), ('TR078_29',), ('TR078_3',), ('TR078_30',), ('TR078_31',), ('TR078_32',), ('TR078_33',), ('TR078_34',), ('TR078_35',), ('TR078_4',), ('TR078_5',), ('TR078_6',), ('TR078_7',), ('TR078_8',), ('TR078_9',), ('TR082_1',), ('TR082_10',), ('TR082_11',), ('TR082_12',), ('TR082_13',), ('TR082_14',), ('TR082_15',), ('TR082_16',), ('TR082_17',), ('TR082_18',), ('TR082_19',), ('TR082_2',), ('TR082_20',), ('TR082_21',), ('TR082_22',), ('TR082_23',), ('TR082_24',), ('TR082_25',), ('TR082_26',), ('TR082_3',), ('TR082_4',), ('TR082_5',), ('TR082_6',), ('TR082_7',), ('TR082_8',), ('TR082_9',), ('TR083_1',), ('TR083_10',), ('TR083_11',), ('TR083_12',), ('TR083_13',), ('TR083_14',), ('TR083_15',), ('TR083_16',), ('TR083_17',), ('TR083_18',), ('TR083_19',), ('TR083_2',), ('TR083_20',), ('TR083_21',), ('TR083_22',), ('TR083_23',), ('TR083_3',), ('TR083_4',), ('TR083_5',), ('TR083_6',), ('TR083_7',), ('TR083_8',), ('TR083_9',), ('TR090_1',), ('TR090_10',), ('TR090_11',), ('TR090_12',), ('TR090_13',), ('TR090_14',), ('TR090_15',), ('TR090_16',), ('TR090_17',), ('TR090_18',), ('TR090_19',), ('TR090_2',), ('TR090_20',), ('TR090_21',), ('TR090_22',), ('TR090_23',), ('TR090_24',), ('TR090_25',), ('TR090_26',), ('TR090_27',), ('TR090_28',), ('TR090_29',), ('TR090_3',), ('TR090_4',), ('TR090_5',), ('TR090_6',), ('TR090_7',), ('TR090_8',), ('TR090_9',), ('TR091_1',), ('TR091_10',), ('TR091_11',), ('TR091_12',), ('TR091_13',), ('TR091_14',), ('TR091_15',), ('TR091_16',), ('TR091_17',), ('TR091_18',), ('TR091_19',), ('TR091_2',), ('TR091_20',), ('TR091_21',), ('TR091_22',), ('TR091_23',), ('TR091_24',), ('TR091_25',), ('TR091_26',), ('TR091_27',), ('TR091_28',), ('TR091_29',), ('TR091_3',), ('TR091_4',), ('TR091_5',), ('TR091_6',), ('TR091_7',), ('TR091_8',), ('TR091_9',), ('TR096_1',), ('TR096_10',), ('TR096_11',), ('TR096_12',), ('TR096_13',), ('TR096_14',), ('TR096_15',), ('TR096_16',), ('TR096_17',), ('TR096_18',), ('TR096_19',), ('TR096_2',), ('TR096_20',), ('TR096_21',), ('TR096_22',), ('TR096_23',), ('TR096_24',), ('TR096_25',), ('TR096_26',), ('TR096_27',), ('TR096_28',), ('TR096_29',), ('TR096_3',), ('TR096_30',), ('TR096_31',), ('TR096_32',), ('TR096_33',), ('TR096_34',), ('TR096_35',), ('TR096_36',), ('TR096_37',), ('TR096_38',), ('TR096_4',), ('TR096_5',), ('TR096_6',), ('TR096_7',), ('TR096_8',), ('TR096_9',), ('TR098_1',), ('TR098_10',), ('TR098_11',), ('TR098_12',), ('TR098_13',), ('TR098_14',), ('TR098_15',), ('TR098_16',), ('TR098_17',), ('TR098_18',), ('TR098_19',), ('TR098_2',), ('TR098_20',), ('TR098_21',), ('TR098_22',), ('TR098_23',), ('TR098_24',), ('TR098_25',), ('TR098_26',), ('TR098_27',), ('TR098_28',), ('TR098_29',), ('TR098_3',), ('TR098_30',), ('TR098_31',), ('TR098_4',), ('TR098_5',), ('TR098_6',), ('TR098_7',), ('TR098_8',), ('TR098_9',), ('TR101_1',), ('TR101_10',), ('TR101_11',), ('TR101_12',), ('TR101_13',), ('TR101_14',), ('TR101_15',), ('TR101_16',), ('TR101_17',), ('TR101_18',), ('TR101_19',), ('TR101_2',), ('TR101_20',), ('TR101_21',), ('TR101_22',), ('TR101_23',), ('TR101_24',), ('TR101_25',), ('TR101_3',), ('TR101_4',), ('TR101_5',), ('TR101_6',), ('TR101_7',), ('TR101_8',), ('TR101_9',), ('TR102_1',), ('TR102_10',), ('TR102_11',), ('TR102_12',), ('TR102_13',), ('TR102_2',), ('TR102_3',), ('TR102_4',), ('TR102_5',), ('TR102_6',), ('TR102_7',), ('TR102_8',), ('TR102_9',), ('TR103_1',), ('TR103_10',), ('TR103_11',), ('TR103_12',), ('TR103_13',), ('TR103_14',), ('TR103_15',), ('TR103_16',), ('TR103_17',), ('TR103_18',), ('TR103_19',), ('TR103_2',), ('TR103_20',), ('TR103_21',), ('TR103_22',), ('TR103_23',), ('TR103_24',), ('TR103_25',), ('TR103_26',), ('TR103_27',), ('TR103_28',), ('TR103_29',), ('TR103_3',), ('TR103_30',), ('TR103_31',), ('TR103_4',), ('TR103_5',), ('TR103_6',), ('TR103_7',), ('TR103_8',), ('TR103_9',), ('TR104_1',), ('TR104_10',), ('TR104_11',), ('TR104_12',), ('TR104_13',), ('TR104_14',), ('TR104_15',), ('TR104_16',), ('TR104_17',), ('TR104_18',), ('TR104_19',), ('TR104_2',), ('TR104_20',), ('TR104_21',), ('TR104_3',), ('TR104_4',), ('TR104_5',), ('TR104_6',), ('TR104_7',), ('TR104_8',), ('TR104_9',), ('TR107_1',), ('TR107_10',), ('TR107_11',), ('TR107_12',), ('TR107_13',), ('TR107_14',), ('TR107_15',), ('TR107_16',), ('TR107_17',), ('TR107_18',), ('TR107_19',), ('TR107_2',), ('TR107_3',), ('TR107_4',), ('TR107_5',), ('TR107_6',), ('TR107_7',), ('TR107_8',), ('TR107_9',), ('TR109_1',), ('TR109_10',), ('TR109_11',), ('TR109_12',), ('TR109_13',), ('TR109_14',), ('TR109_15',), ('TR109_16',), ('TR109_17',), ('TR109_18',), ('TR109_19',), ('TR109_2',), ('TR109_3',), ('TR109_4',), ('TR109_5',), ('TR109_6',), ('TR109_7',), ('TR109_8',), ('TR109_9',), ('TR110_1',), ('TR110_2',), ('TR110_3',), ('TR110_4',), ('TR110_5',), ('TR112_1',), ('TR112_10',), ('TR112_11',), ('TR112_12',), ('TR112_13',), ('TR112_14',), ('TR112_15',), ('TR112_16',), ('TR112_17',), ('TR112_18',), ('TR112_19',), ('TR112_2',), ('TR112_20',), ('TR112_21',), ('TR112_22',), ('TR112_23',), ('TR112_24',), ('TR112_25',), ('TR112_26',), ('TR112_27',), ('TR112_28',), ('TR112_3',), ('TR112_4',), ('TR112_5',), ('TR112_6',), ('TR112_7',), ('TR112_8',), ('TR112_9',), ('TR113_1',), ('TR113_10',), ('TR113_11',), ('TR113_12',), ('TR113_13',), ('TR113_14',), ('TR113_15',), ('TR113_16',), ('TR113_17',), ('TR113_18',), ('TR113_19',), ('TR113_2',), ('TR113_20',), ('TR113_21',), ('TR113_22',), ('TR113_23',), ('TR113_3',), ('TR113_4',), ('TR113_5',), ('TR113_6',), ('TR113_7',), ('TR113_8',), ('TR113_9',), ('TR114_1',), ('TR114_10',), ('TR114_11',), ('TR114_12',), ('TR114_13',), ('TR114_14',), ('TR114_15',), ('TR114_16',), ('TR114_17',), ('TR114_18',), ('TR114_2',), ('TR114_3',), ('TR114_4',), ('TR114_5',), ('TR114_6',), ('TR114_7',), ('TR114_8',), ('TR114_9',), ('TR117_1',), ('TR117_10',), ('TR117_11',), ('TR117_12',), ('TR117_13',), ('TR117_14',), ('TR117_15',), ('TR117_16',), ('TR117_17',), ('TR117_2',), ('TR117_3',), ('TR117_4',), ('TR117_5',), ('TR117_6',), ('TR117_7',), ('TR117_8',), ('TR117_9',), ('TR120_1',), ('TR120_10',), ('TR120_11',), ('TR120_12',), ('TR120_13',), ('TR120_14',), ('TR120_15',), ('TR120_16',), ('TR120_17',), ('TR120_18',), ('TR120_19',), ('TR120_2',), ('TR120_20',), ('TR120_21',), ('TR120_22',), ('TR120_23',), ('TR120_24',), ('TR120_25',), ('TR120_26',), ('TR120_27',), ('TR120_28',), ('TR120_29',), ('TR120_3',), ('TR120_30',), ('TR120_31',), ('TR120_32',), ('TR120_33',), ('TR120_34',), ('TR120_35',), ('TR120_36',), ('TR120_37',), ('TR120_38',), ('TR120_39',), ('TR120_4',), ('TR120_40',), ('TR120_41',), ('TR120_42',), ('TR120_43',), ('TR120_44',), ('TR120_45',), ('TR120_46',), ('TR120_47',), ('TR120_48',), ('TR120_49',), ('TR120_5',), ('TR120_50',), ('TR120_51',), ('TR120_52',), ('TR120_53',), ('TR120_54',), ('TR120_6',), ('TR120_7',), ('TR120_8',), ('TR120_9',), ('TR121_1',), ('TR121_10',), ('TR121_11',), ('TR121_12',), ('TR121_13',), ('TR121_14',), ('TR121_15',), ('TR121_16',), ('TR121_17',), ('TR121_18',), ('TR121_19',), ('TR121_2',), ('TR121_20',), ('TR121_21',), ('TR121_22',), ('TR121_23',), ('TR121_24',), ('TR121_3',), ('TR121_4',), ('TR121_5',), ('TR121_6',), ('TR121_7',), ('TR121_8',), ('TR121_9',), ('TR122_1',), ('TR122_10',), ('TR122_11',), ('TR122_12',), ('TR122_13',), ('TR122_14',), ('TR122_15',), ('TR122_16',), ('TR122_17',), ('TR122_18',), ('TR122_19',), ('TR122_2',), ('TR122_20',), ('TR122_21',), ('TR122_22',), ('TR122_3',), ('TR122_4',), ('TR122_5',), ('TR122_6',), ('TR122_7',), ('TR122_8',), ('TR122_9',), ('TR123_1',), ('TR123_10',), ('TR123_11',), ('TR123_12',), ('TR123_13',), ('TR123_14',), ('TR123_15',), ('TR123_16',), ('TR123_17',), ('TR123_18',), ('TR123_19',), ('TR123_2',), ('TR123_20',), ('TR123_21',), ('TR123_22',), ('TR123_3',), ('TR123_4',), ('TR123_5',), ('TR123_6',), ('TR123_7',), ('TR123_8',), ('TR123_9',), ('TR124_1',), ('TR124_10',), ('TR124_11',), ('TR124_12',), ('TR124_13',), ('TR124_14',), ('TR124_15',), ('TR124_16',), ('TR124_17',), ('TR124_18',), ('TR124_19',), ('TR124_2',), ('TR124_20',), ('TR124_21',), ('TR124_22',), ('TR124_23',), ('TR124_24',), ('TR124_25',), ('TR124_26',), ('TR124_27',), ('TR124_28',), ('TR124_29',), ('TR124_3',), ('TR124_30',), ('TR124_31',), ('TR124_32',), ('TR124_33',), ('TR124_34',), ('TR124_35',), ('TR124_36',), ('TR124_37',), ('TR124_38',), ('TR124_39',), ('TR124_4',), ('TR124_40',), ('TR124_41',), ('TR124_42',), ('TR124_43',), ('TR124_44',), ('TR124_45',), ('TR124_46',), ('TR124_47',), ('TR124_48',), ('TR124_49',), ('TR124_5',), ('TR124_50',), ('TR124_6',), ('TR124_7',), ('TR124_8',), ('TR124_9',), ('TR125_1',), ('TR125_10',), ('TR125_11',), ('TR125_12',), ('TR125_13',), ('TR125_14',), ('TR125_15',), ('TR125_16',), ('TR125_17',), ('TR125_18',), ('TR125_19',), ('TR125_2',), ('TR125_20',), ('TR125_21',), ('TR125_22',), ('TR125_23',), ('TR125_24',), ('TR125_25',), ('TR125_26',), ('TR125_27',), ('TR125_28',), ('TR125_29',), ('TR125_3',), ('TR125_30',), ('TR125_31',), ('TR125_32',), ('TR125_33',), ('TR125_34',), ('TR125_35',), ('TR125_36',), ('TR125_37',), ('TR125_38',), ('TR125_39',), ('TR125_4',), ('TR125_40',), ('TR125_41',), ('TR125_42',), ('TR125_43',), ('TR125_44',), ('TR125_45',), ('TR125_46',), ('TR125_47',), ('TR125_48',), ('TR125_49',), ('TR125_5',), ('TR125_50',), ('TR125_6',), ('TR125_7',), ('TR125_8',), ('TR125_9',), ('TR126_1',), ('TR126_10',), ('TR126_11',), ('TR126_12',), ('TR126_13',), ('TR126_14',), ('TR126_15',), ('TR126_16',), ('TR126_17',), ('TR126_18',), ('TR126_19',), ('TR126_2',), ('TR126_20',), ('TR126_21',), ('TR126_22',), ('TR126_23',), ('TR126_24',), ('TR126_25',), ('TR126_26',), ('TR126_3',), ('TR126_4',), ('TR126_5',), ('TR126_6',), ('TR126_7',), ('TR126_8',), ('TR126_9',), ('TR129_1',), ('TR129_10',), ('TR129_11',), ('TR129_12',), ('TR129_13',), ('TR129_14',), ('TR129_15',), ('TR129_16',), ('TR129_17',), ('TR129_2',), ('TR129_3',), ('TR129_4',), ('TR129_5',), ('TR129_6',), ('TR129_7',), ('TR129_8',), ('TR129_9',), ('TR131_1',), ('TR131_10',), ('TR131_11',), ('TR131_12',), ('TR131_13',), ('TR131_14',), ('TR131_15',), ('TR131_16',), ('TR131_17',), ('TR131_18',), ('TR131_19',), ('TR131_2',), ('TR131_20',), ('TR131_21',), ('TR131_22',), ('TR131_23',), ('TR131_24',), ('TR131_25',), ('TR131_26',), ('TR131_27',), ('TR131_28',), ('TR131_29',), ('TR131_3',), ('TR131_30',), ('TR131_31',), ('TR131_32',), ('TR131_33',), ('TR131_34',), ('TR131_35',), ('TR131_36',), ('TR131_37',), ('TR131_38',), ('TR131_39',), ('TR131_4',), ('TR131_40',), ('TR131_41',), ('TR131_42',), ('TR131_43',), ('TR131_44',), ('TR131_45',), ('TR131_46',), ('TR131_47',), ('TR131_48',), ('TR131_49',), ('TR131_5',), ('TR131_50',), ('TR131_51',), ('TR131_52',), ('TR131_53',), ('TR131_54',), ('TR131_55',), ('TR131_56',), ('TR131_57',), ('TR131_58',), ('TR131_59',), ('TR131_6',), ('TR131_60',), ('TR131_61',), ('TR131_62',), ('TR131_63',), ('TR131_64',), ('TR131_65',), ('TR131_66',), ('TR131_67',), ('TR131_68',), ('TR131_69',), ('TR131_7',), ('TR131_70',), ('TR131_71',), ('TR131_72',), ('TR131_73',), ('TR131_74',), ('TR131_75',), ('TR131_76',), ('TR131_77',), ('TR131_78',), ('TR131_79',), ('TR131_8',), ('TR131_80',), ('TR131_81',), ('TR131_82',), ('TR131_9',), ('TR132_1',), ('TR132_10',), ('TR132_11',), ('TR132_12',), ('TR132_13',), ('TR132_14',), ('TR132_2',), ('TR132_3',), ('TR132_4',), ('TR132_5',), ('TR132_6',), ('TR132_7',), ('TR132_8',), ('TR132_9',), ('TR133_1',), ('TR133_10',), ('TR133_11',), ('TR133_12',), ('TR133_13',), ('TR133_14',), ('TR133_15',), ('TR133_16',), ('TR133_17',), ('TR133_18',), ('TR133_19',), ('TR133_2',), ('TR133_20',), ('TR133_21',), ('TR133_22',), ('TR133_23',), ('TR133_24',), ('TR133_25',), ('TR133_26',), ('TR133_27',), ('TR133_28',), ('TR133_3',), ('TR133_4',), ('TR133_5',), ('TR133_6',), ('TR133_7',), ('TR133_8',), ('TR133_9',), ('TR134_1',), ('TR134_10',), ('TR134_11',), ('TR134_12',), ('TR134_13',), ('TR134_14',), ('TR134_15',), ('TR134_16',), ('TR134_17',), ('TR134_18',), ('TR134_19',), ('TR134_2',), ('TR134_20',), ('TR134_21',), ('TR134_22',), ('TR134_23',), ('TR134_24',), ('TR134_25',), ('TR134_26',), ('TR134_27',), ('TR134_28',), ('TR134_29',), ('TR134_3',), ('TR134_30',), ('TR134_31',), ('TR134_32',), ('TR134_33',), ('TR134_34',), ('TR134_35',), ('TR134_36',), ('TR134_37',), ('TR134_38',), ('TR134_4',), ('TR134_5',), ('TR134_6',), ('TR134_7',), ('TR134_8',), ('TR134_9',), ('TR135_1',), ('TR135_10',), ('TR135_11',), ('TR135_12',), ('TR135_13',), ('TR135_14',), ('TR135_15',), ('TR135_16',), ('TR135_17',), ('TR135_18',), ('TR135_19',), ('TR135_2',), ('TR135_20',), ('TR135_21',), ('TR135_22',), ('TR135_23',), ('TR135_24',), ('TR135_25',), ('TR135_26',), ('TR135_27',), ('TR135_28',), ('TR135_29',), ('TR135_3',), ('TR135_30',), ('TR135_31',), ('TR135_32',), ('TR135_33',), ('TR135_34',), ('TR135_35',), ('TR135_36',), ('TR135_37',), ('TR135_38',), ('TR135_4',), ('TR135_5',), ('TR135_6',), ('TR135_7',), ('TR135_8',), ('TR135_9',), ('TR136_1',), ('TR136_10',), ('TR136_11',), ('TR136_12',), ('TR136_13',), ('TR136_14',), ('TR136_15',), ('TR136_16',), ('TR136_17',), ('TR136_18',), ('TR136_19',), ('TR136_2',), ('TR136_20',), ('TR136_21',), ('TR136_22',), ('TR136_23',), ('TR136_24',), ('TR136_25',), ('TR136_26',), ('TR136_3',), ('TR136_4',), ('TR136_5',), ('TR136_6',), ('TR136_7',), ('TR136_8',), ('TR136_9',), ('TR137_1',), ('TR137_10',), ('TR137_11',), ('TR137_12',), ('TR137_13',), ('TR137_14',), ('TR137_15',), ('TR137_16',), ('TR137_17',), ('TR137_18',), ('TR137_19',), ('TR137_2',), ('TR137_20',), ('TR137_21',), ('TR137_22',), ('TR137_23',), ('TR137_24',), ('TR137_25',), ('TR137_26',), ('TR137_27',), ('TR137_28',), ('TR137_29',), ('TR137_3',), ('TR137_30',), ('TR137_31',), ('TR137_32',), ('TR137_33',), ('TR137_34',), ('TR137_35',), ('TR137_36',), ('TR137_37',), ('TR137_38',), ('TR137_39',), ('TR137_4',), ('TR137_40',), ('TR137_5',), ('TR137_6',), ('TR137_7',), ('TR137_8',), ('TR137_9',), ('TR138_1',), ('TR138_10',), ('TR138_11',), ('TR138_12',), ('TR138_13',), ('TR138_14',), ('TR138_15',), ('TR138_16',), ('TR138_17',), ('TR138_18',), ('TR138_19',), ('TR138_2',), ('TR138_20',), ('TR138_21',), ('TR138_22',), ('TR138_23',), ('TR138_24',), ('TR138_25',), ('TR138_26',), ('TR138_27',), ('TR138_28',), ('TR138_29',), ('TR138_3',), ('TR138_30',), ('TR138_31',), ('TR138_4',), ('TR138_5',), ('TR138_6',), ('TR138_7',), ('TR138_8',), ('TR138_9',), ('TR139_1',), ('TR139_10',), ('TR139_11',), ('TR139_12',), ('TR139_13',), ('TR139_14',), ('TR139_15',), ('TR139_16',), ('TR139_17',), ('TR139_18',), ('TR139_19',), ('TR139_2',), ('TR139_20',), ('TR139_21',), ('TR139_22',), ('TR139_23',), ('TR139_24',), ('TR139_25',), ('TR139_26',), ('TR139_27',), ('TR139_28',), ('TR139_29',), ('TR139_3',), ('TR139_30',), ('TR139_31',), ('TR139_32',), ('TR139_33',), ('TR139_34',), ('TR139_35',), ('TR139_36',), ('TR139_4',), ('TR139_5',), ('TR139_6',), ('TR139_7',), ('TR139_8',), ('TR139_9',), ('TR141_1',), ('TR141_10',), ('TR141_11',), ('TR141_12',), ('TR141_13',), ('TR141_14',), ('TR141_15',), ('TR141_16',), ('TR141_17',), ('TR141_18',), ('TR141_19',), ('TR141_2',), ('TR141_20',), ('TR141_21',), ('TR141_22',), ('TR141_23',), ('TR141_3',), ('TR141_4',), ('TR141_5',), ('TR141_6',), ('TR141_7',), ('TR141_8',), ('TR141_9',), ('TR143_1',), ('TR143_10',), ('TR143_11',), ('TR143_12',), ('TR143_13',), ('TR143_14',), ('TR143_15',), ('TR143_16',), ('TR143_17',), ('TR143_18',), ('TR143_19',), ('TR143_2',), ('TR143_20',), ('TR143_21',), ('TR143_22',), ('TR143_3',), ('TR143_4',), ('TR143_5',), ('TR143_6',), ('TR143_7',), ('TR143_8',), ('TR143_9',), ('TR145_1',), ('TR145_10',), ('TR145_11',), ('TR145_12',), ('TR145_13',), ('TR145_14',), ('TR145_15',), ('TR145_16',), ('TR145_17',), ('TR145_2',), ('TR145_3',), ('TR145_4',), ('TR145_5',), ('TR145_6',), ('TR145_7',), ('TR145_8',), ('TR145_9',), ('TR146_1',), ('TR146_10',), ('TR146_11',), ('TR146_12',), ('TR146_13',), ('TR146_14',), ('TR146_15',), ('TR146_16',), ('TR146_17',), ('TR146_18',), ('TR146_19',), ('TR146_2',), ('TR146_20',), ('TR146_21',), ('TR146_22',), ('TR146_3',), ('TR146_4',), ('TR146_5',), ('TR146_6',), ('TR146_7',), ('TR146_8',), ('TR146_9',), ('TR147_1',), ('TR147_10',), ('TR147_11',), ('TR147_12',), ('TR147_13',), ('TR147_14',), ('TR147_15',), ('TR147_16',), ('TR147_17',), ('TR147_18',), ('TR147_19',), ('TR147_2',), ('TR147_20',), ('TR147_21',), ('TR147_22',), ('TR147_23',), ('TR147_24',), ('TR147_25',), ('TR147_26',), ('TR147_27',), ('TR147_28',), ('TR147_29',), ('TR147_3',), ('TR147_30',), ('TR147_31',), ('TR147_32',), ('TR147_33',), ('TR147_34',), ('TR147_4',), ('TR147_5',), ('TR147_6',), ('TR147_7',), ('TR147_8',), ('TR147_9',), ('TR148_1',), ('TR148_10',), ('TR148_11',), ('TR148_12',), ('TR148_13',), ('TR148_14',), ('TR148_15',), ('TR148_16',), ('TR148_17',), ('TR148_18',), ('TR148_2',), ('TR148_3',), ('TR148_4',), ('TR148_5',), ('TR148_6',), ('TR148_7',), ('TR148_8',), ('TR148_9',), ('TR150_1',), ('TR150_10',), ('TR150_11',), ('TR150_12',), ('TR150_13',), ('TR150_14',), ('TR150_15',), ('TR150_16',), ('TR150_17',), ('TR150_18',), ('TR150_19',), ('TR150_2',), ('TR150_20',), ('TR150_21',), ('TR150_22',), ('TR150_23',), ('TR150_24',), ('TR150_25',), ('TR150_26',), ('TR150_27',), ('TR150_28',), ('TR150_29',), ('TR150_3',), ('TR150_30',), ('TR150_31',), ('TR150_32',), ('TR150_33',), ('TR150_34',), ('TR150_35',), ('TR150_36',), ('TR150_37',), ('TR150_38',), ('TR150_39',), ('TR150_4',), ('TR150_40',), ('TR150_5',), ('TR150_6',), ('TR150_7',), ('TR150_8',), ('TR150_9',), ('TR151_1',), ('TR151_10',), ('TR151_11',), ('TR151_12',), ('TR151_13',), ('TR151_14',), ('TR151_15',), ('TR151_16',), ('TR151_17',), ('TR151_18',), ('TR151_19',), ('TR151_2',), ('TR151_20',), ('TR151_21',), ('TR151_22',), ('TR151_23',), ('TR151_24',), ('TR151_25',), ('TR151_26',), ('TR151_27',), ('TR151_28',), ('TR151_29',), ('TR151_3',), ('TR151_30',), ('TR151_31',), ('TR151_4',), ('TR151_5',), ('TR151_6',), ('TR151_7',), ('TR151_8',), ('TR151_9',), ('TR156_1',), ('TR156_10',), ('TR156_11',), ('TR156_12',), ('TR156_13',), ('TR156_14',), ('TR156_15',), ('TR156_16',), ('TR156_17',), ('TR156_18',), ('TR156_19',), ('TR156_2',), ('TR156_20',), ('TR156_21',), ('TR156_22',), ('TR156_23',), ('TR156_24',), ('TR156_25',), ('TR156_26',), ('TR156_27',), ('TR156_28',), ('TR156_29',), ('TR156_3',), ('TR156_30',), ('TR156_31',), ('TR156_32',), ('TR156_33',), ('TR156_34',), ('TR156_35',), ('TR156_36',), ('TR156_37',), ('TR156_38',), ('TR156_39',), ('TR156_4',), ('TR156_40',), ('TR156_5',), ('TR156_6',), ('TR156_7',), ('TR156_8',), ('TR156_9',), ('TR157_1',), ('TR157_10',), ('TR157_11',), ('TR157_12',), ('TR157_13',), ('TR157_14',), ('TR157_15',), ('TR157_16',), ('TR157_17',), ('TR157_18',), ('TR157_19',), ('TR157_2',), ('TR157_20',), ('TR157_21',), ('TR157_22',), ('TR157_23',), ('TR157_24',), ('TR157_25',), ('TR157_26',), ('TR157_3',), ('TR157_4',), ('TR157_5',), ('TR157_6',), ('TR157_7',), ('TR157_8',), ('TR157_9',), ('TR158_1',), ('TR158_10',), ('TR158_11',), ('TR158_12',), ('TR158_13',), ('TR158_14',), ('TR158_15',), ('TR158_16',), ('TR158_17',), ('TR158_18',), ('TR158_19',), ('TR158_2',), ('TR158_20',), ('TR158_3',), ('TR158_4',), ('TR158_5',), ('TR158_6',), ('TR158_7',), ('TR158_8',), ('TR158_9',), ('TR159_1',), ('TR159_10',), ('TR159_11',), ('TR159_12',), ('TR159_13',), ('TR159_14',), ('TR159_15',), ('TR159_2',), ('TR159_3',), ('TR159_4',), ('TR159_5',), ('TR159_6',), ('TR159_7',), ('TR159_8',), ('TR159_9',), ('TR161_1',), ('TR161_10',), ('TR161_11',), ('TR161_12',), ('TR161_13',), ('TR161_14',), ('TR161_15',), ('TR161_16',), ('TR161_17',), ('TR161_18',), ('TR161_19',), ('TR161_2',), ('TR161_20',), ('TR161_3',), ('TR161_4',), ('TR161_5',), ('TR161_6',), ('TR161_7',), ('TR161_8',), ('TR161_9',), ('TR163_1',), ('TR163_2',), ('TR163_3',), ('TR163_4',), ('TR165_1',), ('TR165_10',), ('TR165_11',), ('TR165_12',), ('TR165_13',), ('TR165_14',), ('TR165_15',), ('TR165_16',), ('TR165_17',), ('TR165_18',), ('TR165_19',), ('TR165_2',), ('TR165_3',), ('TR165_4',), ('TR165_5',), ('TR165_6',), ('TR165_7',), ('TR165_8',), ('TR165_9',), ('TR166_1',), ('TR166_10',), ('TR166_11',), ('TR166_12',), ('TR166_13',), ('TR166_14',), ('TR166_15',), ('TR166_16',), ('TR166_17',), ('TR166_18',), ('TR166_19',), ('TR166_2',), ('TR166_20',), ('TR166_21',), ('TR166_22',), ('TR166_23',), ('TR166_24',), ('TR166_25',), ('TR166_26',), ('TR166_27',), ('TR166_28',), ('TR166_29',), ('TR166_3',), ('TR166_30',), ('TR166_31',), ('TR166_32',), ('TR166_33',), ('TR166_34',), ('TR166_35',), ('TR166_36',), ('TR166_4',), ('TR166_5',), ('TR166_6',), ('TR166_7',), ('TR166_8',), ('TR166_9',), ('TR168_1',), ('TR168_10',), ('TR168_11',), ('TR168_12',), ('TR168_13',), ('TR168_14',), ('TR168_15',), ('TR168_16',), ('TR168_17',), ('TR168_18',), ('TR168_19',), ('TR168_2',), ('TR168_20',), ('TR168_21',), ('TR168_22',), ('TR168_23',), ('TR168_24',), ('TR168_25',), ('TR168_26',), ('TR168_27',), ('TR168_28',), ('TR168_29',), ('TR168_3',), ('TR168_30',), ('TR168_31',), ('TR168_32',), ('TR168_4',), ('TR168_5',), ('TR168_6',), ('TR168_7',), ('TR168_8',), ('TR168_9',), ('TR169_1',), ('TR169_10',), ('TR169_11',), ('TR169_12',), ('TR169_13',), ('TR169_14',), ('TR169_15',), ('TR169_16',), ('TR169_17',), ('TR169_18',), ('TR169_2',), ('TR169_3',), ('TR169_4',), ('TR169_5',), ('TR169_6',), ('TR169_7',), ('TR169_8',), ('TR169_9',), ('TR171_1',), ('TR171_10',), ('TR171_11',), ('TR171_12',), ('TR171_13',), ('TR171_14',), ('TR171_15',), ('TR171_16',), ('TR171_17',), ('TR171_18',), ('TR171_19',), ('TR171_2',), ('TR171_20',), ('TR171_21',), ('TR171_22',), ('TR171_23',), ('TR171_24',), ('TR171_3',), ('TR171_4',), ('TR171_5',), ('TR171_6',), ('TR171_7',), ('TR171_8',), ('TR171_9',), ('TR172_1',), ('TR172_10',), ('TR172_11',), ('TR172_12',), ('TR172_13',), ('TR172_14',), ('TR172_15',), ('TR172_16',), ('TR172_17',), ('TR172_18',), ('TR172_19',), ('TR172_2',), ('TR172_20',), ('TR172_21',), ('TR172_22',), ('TR172_23',), ('TR172_24',), ('TR172_25',), ('TR172_26',), ('TR172_27',), ('TR172_28',), ('TR172_3',), ('TR172_4',), ('TR172_5',), ('TR172_6',), ('TR172_7',), ('TR172_8',), ('TR172_9',), ('TR173_1',), ('TR173_10',), ('TR173_11',), ('TR173_12',), ('TR173_13',), ('TR173_14',), ('TR173_15',), ('TR173_16',), ('TR173_17',), ('TR173_18',), ('TR173_19',), ('TR173_2',), ('TR173_20',), ('TR173_21',), ('TR173_22',), ('TR173_23',), ('TR173_24',), ('TR173_25',), ('TR173_3',), ('TR173_4',), ('TR173_5',), ('TR173_6',), ('TR173_7',), ('TR173_8',), ('TR173_9',), ('TR174_1',), ('TR174_10',), ('TR174_11',), ('TR174_12',), ('TR174_13',), ('TR174_14',), ('TR174_15',), ('TR174_16',), ('TR174_17',), ('TR174_18',), ('TR174_19',), ('TR174_2',), ('TR174_20',), ('TR174_3',), ('TR174_4',), ('TR174_5',), ('TR174_6',), ('TR174_7',), ('TR174_8',), ('TR174_9',), ('TR175_1',), ('TR175_10',), ('TR175_11',), ('TR175_12',), ('TR175_13',), ('TR175_14',), ('TR175_15',), ('TR175_16',), ('TR175_17',), ('TR175_18',), ('TR175_19',), ('TR175_2',), ('TR175_20',), ('TR175_21',), ('TR175_22',), ('TR175_23',), ('TR175_24',), ('TR175_25',), ('TR175_26',), ('TR175_27',), ('TR175_28',), ('TR175_29',), ('TR175_3',), ('TR175_30',), ('TR175_31',), ('TR175_32',), ('TR175_33',), ('TR175_34',), ('TR175_35',), ('TR175_36',), ('TR175_37',), ('TR175_38',), ('TR175_39',), ('TR175_4',), ('TR175_40',), ('TR175_41',), ('TR175_42',), ('TR175_43',), ('TR175_44',), ('TR175_45',), ('TR175_46',), ('TR175_47',), ('TR175_48',), ('TR175_49',), ('TR175_5',), ('TR175_50',), ('TR175_51',), ('TR175_52',), ('TR175_53',), ('TR175_54',), ('TR175_55',), ('TR175_56',), ('TR175_57',), ('TR175_58',), ('TR175_59',), ('TR175_6',), ('TR175_60',), ('TR175_61',), ('TR175_62',), ('TR175_63',), ('TR175_64',), ('TR175_65',), ('TR175_66',), ('TR175_67',), ('TR175_7',), ('TR175_8',), ('TR175_9',), ('TR177_1',), ('TR177_10',), ('TR177_11',), ('TR177_12',), ('TR177_13',), ('TR177_14',), ('TR177_15',), ('TR177_16',), ('TR177_17',), ('TR177_18',), ('TR177_19',), ('TR177_2',), ('TR177_20',), ('TR177_21',), ('TR177_22',), ('TR177_23',), ('TR177_24',), ('TR177_3',), ('TR177_4',), ('TR177_5',), ('TR177_6',), ('TR177_7',), ('TR177_8',), ('TR177_9',), ('TR178_1',), ('TR178_10',), ('TR178_11',), ('TR178_12',), ('TR178_13',), ('TR178_14',), ('TR178_15',), ('TR178_16',), ('TR178_2',), ('TR178_3',), ('TR178_4',), ('TR178_5',), ('TR178_6',), ('TR178_7',), ('TR178_8',), ('TR178_9',), ('TR179_1',), ('TR179_10',), ('TR179_11',), ('TR179_12',), ('TR179_13',), ('TR179_14',), ('TR179_15',), ('TR179_16',), ('TR179_2',), ('TR179_3',), ('TR179_4',), ('TR179_5',), ('TR179_6',), ('TR179_7',), ('TR179_8',), ('TR179_9',), ('TR180_1',), ('TR180_10',), ('TR180_11',), ('TR180_12',), ('TR180_13',), ('TR180_14',), ('TR180_15',), ('TR180_16',), ('TR180_17',), ('TR180_18',), ('TR180_2',), ('TR180_3',), ('TR180_4',), ('TR180_5',), ('TR180_6',), ('TR180_7',), ('TR180_8',), ('TR180_9',), ('TR183_1',), ('TR183_10',), ('TR183_11',), ('TR183_12',), ('TR183_13',), ('TR183_14',), ('TR183_15',), ('TR183_16',), ('TR183_17',), ('TR183_18',), ('TR183_19',), ('TR183_2',), ('TR183_20',), ('TR183_21',), ('TR183_22',), ('TR183_23',), ('TR183_24',), ('TR183_25',), ('TR183_26',), ('TR183_27',), ('TR183_28',), ('TR183_29',), ('TR183_3',), ('TR183_30',), ('TR183_31',), ('TR183_32',), ('TR183_33',), ('TR183_34',), ('TR183_35',), ('TR183_36',), ('TR183_37',), ('TR183_38',), ('TR183_39',), ('TR183_4',), ('TR183_40',), ('TR183_41',), ('TR183_5',), ('TR183_6',), ('TR183_7',), ('TR183_8',), ('TR183_9',), ('TR184_1',), ('TR184_10',), ('TR184_11',), ('TR184_12',), ('TR184_13',), ('TR184_14',), ('TR184_15',), ('TR184_16',), ('TR184_17',), ('TR184_18',), ('TR184_19',), ('TR184_2',), ('TR184_20',), ('TR184_21',), ('TR184_22',), ('TR184_23',), ('TR184_24',), ('TR184_25',), ('TR184_3',), ('TR184_4',), ('TR184_5',), ('TR184_6',), ('TR184_7',), ('TR184_8',), ('TR184_9',), ('TR185_1',), ('TR185_10',), ('TR185_11',), ('TR185_12',), ('TR185_13',), ('TR185_14',), ('TR185_15',), ('TR185_16',), ('TR185_2',), ('TR185_3',), ('TR185_4',), ('TR185_5',), ('TR185_6',), ('TR185_7',), ('TR185_8',), ('TR185_9',), ('TR187_1',), ('TR187_10',), ('TR187_11',), ('TR187_12',), ('TR187_13',), ('TR187_14',), ('TR187_15',), ('TR187_16',), ('TR187_17',), ('TR187_2',), ('TR187_3',), ('TR187_4',), ('TR187_5',), ('TR187_6',), ('TR187_7',), ('TR187_8',), ('TR187_9',), ('TR191_1',), ('TR191_10',), ('TR191_11',), ('TR191_12',), ('TR191_13',), ('TR191_14',), ('TR191_15',), ('TR191_16',), ('TR191_17',), ('TR191_18',), ('TR191_19',), ('TR191_2',), ('TR191_20',), ('TR191_21',), ('TR191_3',), ('TR191_4',), ('TR191_5',), ('TR191_6',), ('TR191_7',), ('TR191_8',), ('TR191_9',), ('TR192_1',), ('TR192_10',), ('TR192_11',), ('TR192_12',), ('TR192_13',), ('TR192_14',), ('TR192_15',), ('TR192_16',), ('TR192_17',), ('TR192_18',), ('TR192_19',), ('TR192_2',), ('TR192_20',), ('TR192_21',), ('TR192_22',), ('TR192_23',), ('TR192_24',), ('TR192_25',), ('TR192_26',), ('TR192_27',), ('TR192_28',), ('TR192_29',), ('TR192_3',), ('TR192_30',), ('TR192_31',), ('TR192_32',), ('TR192_33',), ('TR192_34',), ('TR192_35',), ('TR192_36',), ('TR192_37',), ('TR192_38',), ('TR192_4',), ('TR192_5',), ('TR192_6',), ('TR192_7',), ('TR192_8',), ('TR192_9',), ('TR195_1',), ('TR195_10',), ('TR195_11',), ('TR195_12',), ('TR195_13',), ('TR195_14',), ('TR195_15',), ('TR195_16',), ('TR195_17',), ('TR195_18',), ('TR195_19',), ('TR195_2',), ('TR195_20',), ('TR195_21',), ('TR195_22',), ('TR195_23',), ('TR195_24',), ('TR195_25',), ('TR195_26',), ('TR195_27',), ('TR195_3',), ('TR195_4',), ('TR195_5',), ('TR195_6',), ('TR195_7',), ('TR195_8',), ('TR195_9',), ('TR200_1',), ('TR200_10',), ('TR200_11',), ('TR200_12',), ('TR200_13',), ('TR200_14',), ('TR200_15',), ('TR200_16',), ('TR200_17',), ('TR200_18',), ('TR200_19',), ('TR200_2',), ('TR200_20',), ('TR200_21',), ('TR200_22',), ('TR200_23',), ('TR200_3',), ('TR200_4',), ('TR200_5',), ('TR200_6',), ('TR200_7',), ('TR200_8',), ('TR200_9',), ('TR203_1',), ('TR203_10',), ('TR203_11',), ('TR203_12',), ('TR203_13',), ('TR203_2',), ('TR203_3',), ('TR203_4',), ('TR203_5',), ('TR203_6',), ('TR203_7',), ('TR203_8',), ('TR203_9',), ('TR204_1',), ('TR204_10',), ('TR204_11',), ('TR204_12',), ('TR204_13',), ('TR204_14',), ('TR204_15',), ('TR204_16',), ('TR204_17',), ('TR204_18',), ('TR204_19',), ('TR204_2',), ('TR204_20',), ('TR204_21',), ('TR204_22',), ('TR204_23',), ('TR204_24',), ('TR204_25',), ('TR204_26',), ('TR204_27',), ('TR204_28',), ('TR204_3',), ('TR204_4',), ('TR204_5',), ('TR204_6',), ('TR204_7',), ('TR204_8',), ('TR204_9',), ('TR208_1',), ('TR208_10',), ('TR208_11',), ('TR208_12',), ('TR208_13',), ('TR208_14',), ('TR208_15',), ('TR208_16',), ('TR208_17',), ('TR208_18',), ('TR208_19',), ('TR208_2',), ('TR208_20',), ('TR208_21',), ('TR208_22',), ('TR208_23',), ('TR208_24',), ('TR208_25',), ('TR208_26',), ('TR208_27',), ('TR208_28',), ('TR208_29',), ('TR208_3',), ('TR208_30',), ('TR208_31',), ('TR208_32',), ('TR208_33',), ('TR208_34',), ('TR208_35',), ('TR208_36',), ('TR208_37',), ('TR208_4',), ('TR208_5',), ('TR208_6',), ('TR208_7',), ('TR208_8',), ('TR208_9',), ('TR211_1',), ('TR211_10',), ('TR211_11',), ('TR211_12',), ('TR211_13',), ('TR211_14',), ('TR211_15',), ('TR211_16',), ('TR211_17',), ('TR211_18',), ('TR211_19',), ('TR211_2',), ('TR211_20',), ('TR211_21',), ('TR211_22',), ('TR211_23',), ('TR211_24',), ('TR211_25',), ('TR211_26',), ('TR211_27',), ('TR211_28',), ('TR211_29',), ('TR211_3',), ('TR211_30',), ('TR211_31',), ('TR211_32',), ('TR211_33',), ('TR211_34',), ('TR211_35',), ('TR211_36',), ('TR211_37',), ('TR211_4',), ('TR211_5',), ('TR211_6',), ('TR211_7',), ('TR211_8',), ('TR211_9',), ('TR212_1',), ('TR212_10',), ('TR212_11',), ('TR212_12',), ('TR212_13',), ('TR212_14',), ('TR212_15',), ('TR212_16',), ('TR212_17',), ('TR212_18',), ('TR212_19',), ('TR212_2',), ('TR212_20',), ('TR212_21',), ('TR212_22',), ('TR212_23',), ('TR212_24',), ('TR212_25',), ('TR212_26',), ('TR212_27',), ('TR212_28',), ('TR212_29',), ('TR212_3',), ('TR212_30',), ('TR212_31',), ('TR212_32',), ('TR212_33',), ('TR212_34',), ('TR212_35',), ('TR212_36',), ('TR212_37',), ('TR212_38',), ('TR212_39',), ('TR212_4',), ('TR212_40',), ('TR212_41',), ('TR212_42',), ('TR212_43',), ('TR212_44',), ('TR212_45',), ('TR212_46',), ('TR212_47',), ('TR212_48',), ('TR212_49',), ('TR212_5',), ('TR212_50',), ('TR212_51',), ('TR212_52',), ('TR212_53',), ('TR212_54',), ('TR212_55',), ('TR212_56',), ('TR212_57',), ('TR212_58',), ('TR212_59',), ('TR212_6',), ('TR212_60',), ('TR212_61',), ('TR212_62',), ('TR212_63',), ('TR212_64',), ('TR212_65',), ('TR212_66',), ('TR212_67',), ('TR212_68',), ('TR212_7',), ('TR212_8',), ('TR212_9',), ('TR214_1',), ('TR214_10',), ('TR214_11',), ('TR214_12',), ('TR214_13',), ('TR214_14',), ('TR214_15',), ('TR214_16',), ('TR214_17',), ('TR214_18',), ('TR214_19',), ('TR214_2',), ('TR214_3',), ('TR214_4',), ('TR214_5',), ('TR214_6',), ('TR214_7',), ('TR214_8',), ('TR214_9',), ('TR219_1',), ('TR219_10',), ('TR219_11',), ('TR219_12',), ('TR219_13',), ('TR219_14',), ('TR219_15',), ('TR219_16',), ('TR219_2',), ('TR219_3',), ('TR219_4',), ('TR219_5',), ('TR219_6',), ('TR219_7',), ('TR219_8',), ('TR219_9',), ('TR220_1',), ('TR220_10',), ('TR220_11',), ('TR220_12',), ('TR220_13',), ('TR220_14',), ('TR220_15',), ('TR220_16',), ('TR220_17',), ('TR220_18',), ('TR220_19',), ('TR220_2',), ('TR220_20',), ('TR220_21',), ('TR220_22',), ('TR220_23',), ('TR220_24',), ('TR220_25',), ('TR220_26',), ('TR220_27',), ('TR220_28',), ('TR220_29',), ('TR220_3',), ('TR220_30',), ('TR220_31',), ('TR220_32',), ('TR220_33',), ('TR220_34',), ('TR220_35',), ('TR220_36',), ('TR220_37',), ('TR220_38',), ('TR220_39',), ('TR220_4',), ('TR220_40',), ('TR220_41',), ('TR220_42',), ('TR220_43',), ('TR220_5',), ('TR220_6',), ('TR220_7',), ('TR220_8',), ('TR220_9',), ('TR223_1',), ('TR223_10',), ('TR223_11',), ('TR223_12',), ('TR223_13',), ('TR223_14',), ('TR223_15',), ('TR223_16',), ('TR223_17',), ('TR223_18',), ('TR223_19',), ('TR223_2',), ('TR223_20',), ('TR223_21',), ('TR223_22',), ('TR223_23',), ('TR223_24',), ('TR223_3',), ('TR223_4',), ('TR223_5',), ('TR223_6',), ('TR223_7',), ('TR223_8',), ('TR223_9',), ('TR228_1',), ('TR228_2',), ('TR228_3',), ('TR228_4',), ('TR228_5',), ('TR228_6',), ('TR233_1',), ('TR233_10',), ('TR233_11',), ('TR233_12',), ('TR233_13',), ('TR233_14',), ('TR233_15',), ('TR233_16',), ('TR233_17',), ('TR233_18',), ('TR233_19',), ('TR233_2',), ('TR233_20',), ('TR233_21',), ('TR233_22',), ('TR233_23',), ('TR233_24',), ('TR233_25',), ('TR233_26',), ('TR233_3',), ('TR233_4',), ('TR233_5',), ('TR233_6',), ('TR233_7',), ('TR233_8',), ('TR233_9',), ('TR235_1',), ('TR235_10',), ('TR235_11',), ('TR235_12',), ('TR235_13',), ('TR235_14',), ('TR235_15',), ('TR235_16',), ('TR235_17',), ('TR235_18',), ('TR235_19',), ('TR235_2',), ('TR235_20',), ('TR235_21',), ('TR235_22',), ('TR235_23',), ('TR235_24',), ('TR235_25',), ('TR235_26',), ('TR235_27',), ('TR235_28',), ('TR235_29',), ('TR235_3',), ('TR235_30',), ('TR235_31',), ('TR235_32',), ('TR235_33',), ('TR235_34',), ('TR235_35',), ('TR235_36',), ('TR235_37',), ('TR235_38',), ('TR235_39',), ('TR235_4',), ('TR235_40',), ('TR235_41',), ('TR235_42',), ('TR235_43',), ('TR235_44',), ('TR235_45',), ('TR235_5',), ('TR235_6',), ('TR235_7',), ('TR235_8',), ('TR235_9',), ('TR236_1',), ('TR236_10',), ('TR236_11',), ('TR236_12',), ('TR236_13',), ('TR236_14',), ('TR236_15',), ('TR236_16',), ('TR236_17',), ('TR236_18',), ('TR236_19',), ('TR236_2',), ('TR236_20',), ('TR236_21',), ('TR236_22',), ('TR236_23',), ('TR236_24',), ('TR236_25',), ('TR236_26',), ('TR236_3',), ('TR236_4',), ('TR236_5',), ('TR236_6',), ('TR236_7',), ('TR236_8',), ('TR236_9',), ('TR247_1',), ('TR247_10',), ('TR247_11',), ('TR247_12',), ('TR247_13',), ('TR247_14',), ('TR247_15',), ('TR247_16',), ('TR247_17',), ('TR247_18',), ('TR247_19',), ('TR247_2',), ('TR247_20',), ('TR247_3',), ('TR247_4',), ('TR247_5',), ('TR247_6',), ('TR247_7',), ('TR247_8',), ('TR247_9',), ('TR255_1',), ('TR255_10',), ('TR255_11',), ('TR255_12',), ('TR255_2',), ('TR255_3',), ('TR255_4',), ('TR255_5',), ('TR255_6',), ('TR255_7',), ('TR255_8',), ('TR255_9',), ('TR263_1',), ('TR263_10',), ('TR263_11',), ('TR263_2',), ('TR263_3',), ('TR263_4',), ('TR263_5',), ('TR263_6',), ('TR263_7',), ('TR263_8',), ('TR263_9',), ('TR272_1',), ('TR272_2',), ('TR272_3',), ('TR272_4',), ('TR272_5',), ('TR272_6',), ('TR272_7',), ('TR272_8',), ('TR272_9',), ('TR275_1',), ('TR275_2',), ('TR275_3',), ('TR275_4',), ('TR275_5',), ('TR275_6',), ('TR275_7',), ('TR275_8',), ('TR275_9',), ('TR276_1',), ('TR276_10',), ('TR276_11',), ('TR276_12',), ('TR276_13',), ('TR276_14',), ('TR276_15',), ('TR276_16',), ('TR276_17',), ('TR276_18',), ('TR276_2',), ('TR276_3',), ('TR276_4',), ('TR276_5',), ('TR276_6',), ('TR276_7',), ('TR276_8',), ('TR276_9',), ('TR281_1',), ('TR281_10',), ('TR281_11',), ('TR281_12',), ('TR281_13',), ('TR281_14',), ('TR281_15',), ('TR281_16',), ('TR281_17',), ('TR281_18',), ('TR281_19',), ('TR281_2',), ('TR281_20',), ('TR281_21',), ('TR281_22',), ('TR281_23',), ('TR281_24',), ('TR281_25',), ('TR281_3',), ('TR281_4',), ('TR281_5',), ('TR281_6',), ('TR281_7',), ('TR281_8',), ('TR281_9',), ('TR282_1',), ('TR282_2',), ('TR282_3',), ('TR282_4',), ('TR282_5',), ('TR284_1',), ('TR284_10',), ('TR284_11',), ('TR284_12',), ('TR284_13',), ('TR284_14',), ('TR284_15',), ('TR284_16',), ('TR284_17',), ('TR284_18',), ('TR284_19',), ('TR284_2',), ('TR284_20',), ('TR284_21',), ('TR284_22',), ('TR284_23',), ('TR284_24',), ('TR284_25',), ('TR284_26',), ('TR284_27',), ('TR284_28',), ('TR284_29',), ('TR284_3',), ('TR284_30',), ('TR284_31',), ('TR284_32',), ('TR284_4',), ('TR284_5',), ('TR284_6',), ('TR284_7',), ('TR284_8',), ('TR284_9',), ('TR293_1',), ('TR293_10',), ('TR293_11',), ('TR293_12',), ('TR293_13',), ('TR293_14',), ('TR293_15',), ('TR293_16',), ('TR293_17',), ('TR293_18',), ('TR293_19',), ('TR293_2',), ('TR293_20',), ('TR293_21',), ('TR293_22',), ('TR293_23',), ('TR293_24',), ('TR293_25',), ('TR293_26',), ('TR293_27',), ('TR293_28',), ('TR293_29',), ('TR293_3',), ('TR293_30',), ('TR293_31',), ('TR293_32',), ('TR293_33',), ('TR293_34',), ('TR293_35',), ('TR293_36',), ('TR293_37',), ('TR293_38',), ('TR293_39',), ('TR293_4',), ('TR293_5',), ('TR293_6',), ('TR293_7',), ('TR293_8',), ('TR293_9',), ('TR305_1',), ('TR305_10',), ('TR305_11',), ('TR305_12',), ('TR305_13',), ('TR305_14',), ('TR305_15',), ('TR305_16',), ('TR305_17',), ('TR305_18',), ('TR305_19',), ('TR305_2',), ('TR305_20',), ('TR305_21',), ('TR305_22',), ('TR305_23',), ('TR305_24',), ('TR305_25',), ('TR305_26',), ('TR305_27',), ('TR305_28',), ('TR305_29',), ('TR305_3',), ('TR305_30',), ('TR305_31',), ('TR305_32',), ('TR305_33',), ('TR305_34',), ('TR305_35',), ('TR305_36',), ('TR305_37',), ('TR305_38',), ('TR305_39',), ('TR305_4',), ('TR305_40',), ('TR305_41',), ('TR305_42',), ('TR305_43',), ('TR305_44',), ('TR305_45',), ('TR305_46',), ('TR305_47',), ('TR305_48',), ('TR305_49',), ('TR305_5',), ('TR305_50',), ('TR305_51',), ('TR305_52',), ('TR305_53',), ('TR305_54',), ('TR305_55',), ('TR305_56',), ('TR305_57',), ('TR305_58',), ('TR305_59',), ('TR305_6',), ('TR305_60',), ('TR305_61',), ('TR305_62',), ('TR305_63',), ('TR305_64',), ('TR305_65',), ('TR305_66',), ('TR305_67',), ('TR305_68',), ('TR305_69',), ('TR305_7',), ('TR305_70',), ('TR305_71',), ('TR305_8',), ('TR305_9',), ('TR307_1',), ('TR307_10',), ('TR307_11',), ('TR307_12',), ('TR307_13',), ('TR307_14',), ('TR307_15',), ('TR307_16',), ('TR307_17',), ('TR307_18',), ('TR307_19',), ('TR307_2',), ('TR307_20',), ('TR307_21',), ('TR307_22',), ('TR307_23',), ('TR307_24',), ('TR307_25',), ('TR307_26',), ('TR307_27',), ('TR307_28',), ('TR307_29',), ('TR307_3',), ('TR307_30',), ('TR307_31',), ('TR307_32',), ('TR307_33',), ('TR307_34',), ('TR307_35',), ('TR307_36',), ('TR307_37',), ('TR307_38',), ('TR307_39',), ('TR307_4',), ('TR307_40',), ('TR307_41',), ('TR307_42',), ('TR307_43',), ('TR307_44',), ('TR307_45',), ('TR307_46',), ('TR307_47',), ('TR307_48',), ('TR307_49',), ('TR307_5',), ('TR307_50',), ('TR307_51',), ('TR307_52',), ('TR307_53',), ('TR307_54',), ('TR307_55',), ('TR307_56',), ('TR307_57',), ('TR307_58',), ('TR307_59',), ('TR307_6',), ('TR307_60',), ('TR307_61',), ('TR307_7',), ('TR307_8',), ('TR307_9',), ('TR312_1',), ('TR312_10',), ('TR312_11',), ('TR312_12',), ('TR312_13',), ('TR312_14',), ('TR312_2',), ('TR312_3',), ('TR312_4',), ('TR312_5',), ('TR312_6',), ('TR312_7',), ('TR312_8',), ('TR312_9',), ('TR314_1',), ('TR314_10',), ('TR314_11',), ('TR314_12',), ('TR314_13',), ('TR314_14',), ('TR314_15',), ('TR314_2',), ('TR314_3',), ('TR314_4',), ('TR314_5',), ('TR314_6',), ('TR314_7',), ('TR314_8',), ('TR314_9',), ('TR322_1',), ('TR322_10',), ('TR322_11',), ('TR322_12',), ('TR322_13',), ('TR322_14',), ('TR322_15',), ('TR322_16',), ('TR322_17',), ('TR322_18',), ('TR322_19',), ('TR322_2',), ('TR322_20',), ('TR322_21',), ('TR322_22',), ('TR322_23',), ('TR322_24',), ('TR322_25',), ('TR322_26',), ('TR322_27',), ('TR322_3',), ('TR322_4',), ('TR322_5',), ('TR322_6',), ('TR322_7',), ('TR322_8',), ('TR322_9',), ('TR330_1',), ('TR330_10',), ('TR330_11',), ('TR330_12',), ('TR330_13',), ('TR330_14',), ('TR330_15',), ('TR330_16',), ('TR330_17',), ('TR330_18',), ('TR330_19',), ('TR330_2',), ('TR330_20',), ('TR330_21',), ('TR330_22',), ('TR330_23',), ('TR330_24',), ('TR330_25',), ('TR330_26',), ('TR330_27',), ('TR330_28',), ('TR330_29',), ('TR330_3',), ('TR330_30',), ('TR330_31',), ('TR330_32',), ('TR330_4',), ('TR330_5',), ('TR330_6',), ('TR330_7',), ('TR330_8',), ('TR330_9',), ('TR333_1',), ('TR333_10',), ('TR333_11',), ('TR333_12',), ('TR333_13',), ('TR333_14',), ('TR333_15',), ('TR333_16',), ('TR333_17',), ('TR333_18',), ('TR333_19',), ('TR333_2',), ('TR333_20',), ('TR333_21',), ('TR333_22',), ('TR333_23',), ('TR333_24',), ('TR333_25',), ('TR333_26',), ('TR333_27',), ('TR333_28',), ('TR333_29',), ('TR333_3',), ('TR333_30',), ('TR333_4',), ('TR333_5',), ('TR333_6',), ('TR333_7',), ('TR333_8',), ('TR333_9',), ('TR335_1',), ('TR335_10',), ('TR335_11',), ('TR335_12',), ('TR335_13',), ('TR335_14',), ('TR335_15',), ('TR335_16',), ('TR335_17',), ('TR335_18',), ('TR335_19',), ('TR335_2',), ('TR335_20',), ('TR335_21',), ('TR335_22',), ('TR335_23',), ('TR335_24',), ('TR335_25',), ('TR335_26',), ('TR335_27',), ('TR335_28',), ('TR335_29',), ('TR335_3',), ('TR335_30',), ('TR335_31',), ('TR335_32',), ('TR335_33',), ('TR335_34',), ('TR335_35',), ('TR335_36',), ('TR335_37',), ('TR335_38',), ('TR335_39',), ('TR335_4',), ('TR335_40',), ('TR335_41',), ('TR335_42',), ('TR335_43',), ('TR335_5',), ('TR335_6',), ('TR335_7',), ('TR335_8',), ('TR335_9',), ('TR336_1',), ('TR336_10',), ('TR336_11',), ('TR336_12',), ('TR336_13',), ('TR336_14',), ('TR336_15',), ('TR336_16',), ('TR336_17',), ('TR336_18',), ('TR336_19',), ('TR336_2',), ('TR336_20',), ('TR336_21',), ('TR336_22',), ('TR336_23',), ('TR336_24',), ('TR336_25',), ('TR336_26',), ('TR336_27',), ('TR336_28',), ('TR336_29',), ('TR336_3',), ('TR336_30',), ('TR336_31',), ('TR336_32',), ('TR336_33',), ('TR336_34',), ('TR336_35',), ('TR336_36',), ('TR336_37',), ('TR336_38',), ('TR336_39',), ('TR336_4',), ('TR336_40',), ('TR336_41',), ('TR336_5',), ('TR336_6',), ('TR336_7',), ('TR336_8',), ('TR336_9',), ('TR343_1',), ('TR343_10',), ('TR343_11',), ('TR343_12',), ('TR343_13',), ('TR343_14',), ('TR343_15',), ('TR343_16',), ('TR343_2',), ('TR343_3',), ('TR343_4',), ('TR343_5',), ('TR343_6',), ('TR343_7',), ('TR343_8',), ('TR343_9',), ('TR344_1',), ('TR344_10',), ('TR344_11',), ('TR344_12',), ('TR344_13',), ('TR344_14',), ('TR344_15',), ('TR344_16',), ('TR344_17',), ('TR344_18',), ('TR344_19',), ('TR344_2',), ('TR344_20',), ('TR344_21',), ('TR344_22',), ('TR344_23',), ('TR344_24',), ('TR344_25',), ('TR344_26',), ('TR344_27',), ('TR344_28',), ('TR344_29',), ('TR344_3',), ('TR344_30',), ('TR344_31',), ('TR344_32',), ('TR344_33',), ('TR344_34',), ('TR344_35',), ('TR344_36',), ('TR344_37',), ('TR344_38',), ('TR344_39',), ('TR344_4',), ('TR344_40',), ('TR344_41',), ('TR344_42',), ('TR344_43',), ('TR344_44',), ('TR344_45',), ('TR344_46',), ('TR344_47',), ('TR344_48',), ('TR344_49',), ('TR344_5',), ('TR344_50',), ('TR344_51',), ('TR344_52',), ('TR344_53',), ('TR344_54',), ('TR344_55',), ('TR344_56',), ('TR344_57',), ('TR344_58',), ('TR344_6',), ('TR344_7',), ('TR344_8',), ('TR344_9',), ('TR348_1',), ('TR348_10',), ('TR348_11',), ('TR348_12',), ('TR348_13',), ('TR348_14',), ('TR348_15',), ('TR348_16',), ('TR348_17',), ('TR348_18',), ('TR348_19',), ('TR348_2',), ('TR348_20',), ('TR348_21',), ('TR348_22',), ('TR348_23',), ('TR348_24',), ('TR348_25',), ('TR348_26',), ('TR348_27',), ('TR348_28',), ('TR348_29',), ('TR348_3',), ('TR348_30',), ('TR348_31',), ('TR348_32',), ('TR348_33',), ('TR348_34',), ('TR348_35',), ('TR348_36',), ('TR348_37',), ('TR348_38',), ('TR348_39',), ('TR348_4',), ('TR348_40',), ('TR348_41',), ('TR348_42',), ('TR348_43',), ('TR348_44',), ('TR348_45',), ('TR348_46',), ('TR348_47',), ('TR348_48',), ('TR348_49',), ('TR348_5',), ('TR348_50',), ('TR348_51',), ('TR348_52',), ('TR348_53',), ('TR348_54',), ('TR348_55',), ('TR348_56',), ('TR348_57',), ('TR348_58',), ('TR348_59',), ('TR348_6',), ('TR348_60',), ('TR348_61',), ('TR348_62',), ('TR348_63',), ('TR348_64',), ('TR348_65',), ('TR348_7',), ('TR348_8',), ('TR348_9',), ('TR352_1',), ('TR352_10',), ('TR352_11',), ('TR352_12',), ('TR352_13',), ('TR352_14',), ('TR352_2',), ('TR352_3',), ('TR352_4',), ('TR352_5',), ('TR352_6',), ('TR352_7',), ('TR352_8',), ('TR352_9',), ('TR353_1',), ('TR353_10',), ('TR353_11',), ('TR353_12',), ('TR353_13',), ('TR353_2',), ('TR353_3',), ('TR353_4',), ('TR353_5',), ('TR353_6',), ('TR353_7',), ('TR353_8',), ('TR353_9',), ('TR354_1',), ('TR354_10',), ('TR354_11',), ('TR354_12',), ('TR354_13',), ('TR354_14',), ('TR354_15',), ('TR354_16',), ('TR354_17',), ('TR354_18',), ('TR354_19',), ('TR354_2',), ('TR354_20',), ('TR354_21',), ('TR354_22',), ('TR354_23',), ('TR354_24',), ('TR354_25',), ('TR354_26',), ('TR354_3',), ('TR354_4',), ('TR354_5',), ('TR354_6',), ('TR354_7',), ('TR354_8',), ('TR354_9',), ('TR357_1',), ('TR357_10',), ('TR357_11',), ('TR357_12',), ('TR357_13',), ('TR357_14',), ('TR357_15',), ('TR357_16',), ('TR357_17',), ('TR357_18',), ('TR357_19',), ('TR357_2',), ('TR357_20',), ('TR357_21',), ('TR357_22',), ('TR357_23',), ('TR357_24',), ('TR357_25',), ('TR357_3',), ('TR357_4',), ('TR357_5',), ('TR357_6',), ('TR357_7',), ('TR357_8',), ('TR357_9',), ('TR370_1',), ('TR370_10',), ('TR370_11',), ('TR370_12',), ('TR370_13',), ('TR370_14',), ('TR370_15',), ('TR370_2',), ('TR370_3',), ('TR370_4',), ('TR370_5',), ('TR370_6',), ('TR370_7',), ('TR370_8',), ('TR370_9',), ('TR371_1',), ('TR371_10',), ('TR371_11',), ('TR371_12',), ('TR371_13',), ('TR371_14',), ('TR371_15',), ('TR371_2',), ('TR371_3',), ('TR371_4',), ('TR371_5',), ('TR371_6',), ('TR371_7',), ('TR371_8',), ('TR371_9',), ('TR373_1',), ('TR373_10',), ('TR373_11',), ('TR373_2',), ('TR373_3',), ('TR373_4',), ('TR373_5',), ('TR373_6',), ('TR373_7',), ('TR373_8',), ('TR373_9',), ('TR377_1',), ('TR377_10',), ('TR377_11',), ('TR377_12',), ('TR377_13',), ('TR377_14',), ('TR377_15',), ('TR377_16',), ('TR377_17',), ('TR377_18',), ('TR377_2',), ('TR377_3',), ('TR377_4',), ('TR377_5',), ('TR377_6',), ('TR377_7',), ('TR377_8',), ('TR377_9',), ('TR378_1',), ('TR378_10',), ('TR378_11',), ('TR378_12',), ('TR378_13',), ('TR378_14',), ('TR378_2',), ('TR378_3',), ('TR378_4',), ('TR378_5',), ('TR378_6',), ('TR378_7',), ('TR378_8',), ('TR378_9',), ('TR379_1',), ('TR379_10',), ('TR379_11',), ('TR379_12',), ('TR379_13',), ('TR379_14',), ('TR379_15',), ('TR379_16',), ('TR379_17',), ('TR379_2',), ('TR379_3',), ('TR379_4',), ('TR379_5',), ('TR379_6',), ('TR379_7',), ('TR379_8',), ('TR379_9',), ('TR387_1',), ('TR387_10',), ('TR387_11',), ('TR387_12',), ('TR387_13',), ('TR387_14',), ('TR387_15',), ('TR387_16',), ('TR387_17',), ('TR387_18',), ('TR387_19',), ('TR387_2',), ('TR387_20',), ('TR387_21',), ('TR387_22',), ('TR387_23',), ('TR387_24',), ('TR387_25',), ('TR387_26',), ('TR387_27',), ('TR387_28',), ('TR387_29',), ('TR387_3',), ('TR387_30',), ('TR387_31',), ('TR387_32',), ('TR387_33',), ('TR387_34',), ('TR387_35',), ('TR387_36',), ('TR387_37',), ('TR387_38',), ('TR387_39',), ('TR387_4',), ('TR387_40',), ('TR387_41',), ('TR387_42',), ('TR387_43',), ('TR387_44',), ('TR387_45',), ('TR387_46',), ('TR387_47',), ('TR387_48',), ('TR387_49',), ('TR387_5',), ('TR387_50',), ('TR387_51',), ('TR387_52',), ('TR387_53',), ('TR387_6',), ('TR387_7',), ('TR387_8',), ('TR387_9',), ('TR389_2',), ('TR389_3',), ('TR389_4',), ('TR394_1',), ('TR394_10',), ('TR394_11',), ('TR394_12',), ('TR394_13',), ('TR394_14',), ('TR394_15',), ('TR394_16',), ('TR394_17',), ('TR394_18',), ('TR394_19',), ('TR394_2',), ('TR394_20',), ('TR394_3',), ('TR394_4',), ('TR394_5',), ('TR394_6',), ('TR394_7',), ('TR394_8',), ('TR394_9',), ('TR395_1',), ('TR395_10',), ('TR395_11',), ('TR395_12',), ('TR395_13',), ('TR395_14',), ('TR395_15',), ('TR395_16',), ('TR395_17',), ('TR395_18',), ('TR395_19',), ('TR395_2',), ('TR395_20',), ('TR395_21',), ('TR395_22',), ('TR395_23',), ('TR395_24',), ('TR395_25',), ('TR395_26',), ('TR395_27',), ('TR395_28',), ('TR395_29',), ('TR395_3',), ('TR395_30',), ('TR395_31',), ('TR395_32',), ('TR395_33',), ('TR395_34',), ('TR395_35',), ('TR395_36',), ('TR395_37',), ('TR395_38',), ('TR395_4',), ('TR395_5',), ('TR395_6',), ('TR395_7',), ('TR395_8',), ('TR395_9',), ('TR396_1',), ('TR396_2',), ('TR396_3',), ('TR396_4',), ('TR396_5',), ('TR396_6',), ('TR396_7',), ('TR396_8',), ('TR401_1',), ('TR401_10',), ('TR401_11',), ('TR401_12',), ('TR401_13',), ('TR401_14',), ('TR401_15',), ('TR401_16',), ('TR401_17',), ('TR401_18',), ('TR401_19',), ('TR401_2',), ('TR401_20',), ('TR401_21',), ('TR401_3',), ('TR401_4',), ('TR401_5',), ('TR401_6',), ('TR401_7',), ('TR401_8',), ('TR401_9',), ('TR403_1',), ('TR403_10',), ('TR403_11',), ('TR403_12',), ('TR403_13',), ('TR403_14',), ('TR403_2',), ('TR403_3',), ('TR403_4',), ('TR403_5',), ('TR403_6',), ('TR403_7',), ('TR403_8',), ('TR403_9',), ('TR406_1',), ('TR406_10',), ('TR406_11',), ('TR406_12',), ('TR406_2',), ('TR406_3',), ('TR406_4',), ('TR406_5',), ('TR406_6',), ('TR406_7',), ('TR406_8',), ('TR406_9',), ('TR412_1',), ('TR412_10',), ('TR412_11',), ('TR412_12',), ('TR412_13',), ('TR412_14',), ('TR412_15',), ('TR412_16',), ('TR412_17',), ('TR412_18',), ('TR412_19',), ('TR412_2',), ('TR412_20',), ('TR412_21',), ('TR412_22',), ('TR412_23',), ('TR412_24',), ('TR412_25',), ('TR412_26',), ('TR412_27',), ('TR412_28',), ('TR412_29',), ('TR412_3',), ('TR412_30',), ('TR412_31',), ('TR412_32',), ('TR412_33',), ('TR412_34',), ('TR412_35',), ('TR412_36',), ('TR412_4',), ('TR412_5',), ('TR412_6',), ('TR412_7',), ('TR412_8',), ('TR412_9',), ('TR424_1',), ('TR424_10',), ('TR424_11',), ('TR424_12',), ('TR424_13',), ('TR424_14',), ('TR424_15',), ('TR424_16',), ('TR424_17',), ('TR424_18',), ('TR424_19',), ('TR424_2',), ('TR424_20',), ('TR424_21',), ('TR424_22',), ('TR424_23',), ('TR424_24',), ('TR424_25',), ('TR424_26',), ('TR424_3',), ('TR424_4',), ('TR424_5',), ('TR424_6',), ('TR424_7',), ('TR424_8',), ('TR424_9',), ('TR425_1',), ('TR425_10',), ('TR425_11',), ('TR425_12',), ('TR425_13',), ('TR425_14',), ('TR425_15',), ('TR425_16',), ('TR425_17',), ('TR425_18',), ('TR425_19',), ('TR425_2',), ('TR425_20',), ('TR425_21',), ('TR425_22',), ('TR425_23',), ('TR425_24',), ('TR425_25',), ('TR425_26',), ('TR425_27',), ('TR425_28',), ('TR425_29',), ('TR425_3',), ('TR425_30',), ('TR425_31',), ('TR425_32',), ('TR425_33',), ('TR425_34',), ('TR425_35',), ('TR425_36',), ('TR425_37',), ('TR425_38',), ('TR425_39',), ('TR425_4',), ('TR425_40',), ('TR425_41',), ('TR425_42',), ('TR425_5',), ('TR425_6',), ('TR425_7',), ('TR425_8',), ('TR425_9',), ('TR427_1',), ('TR427_10',), ('TR427_11',), ('TR427_12',), ('TR427_13',), ('TR427_14',), ('TR427_15',), ('TR427_16',), ('TR427_17',), ('TR427_18',), ('TR427_19',), ('TR427_2',), ('TR427_20',), ('TR427_21',), ('TR427_22',), ('TR427_23',), ('TR427_24',), ('TR427_25',), ('TR427_26',), ('TR427_27',), ('TR427_28',), ('TR427_29',), ('TR427_3',), ('TR427_30',), ('TR427_31',), ('TR427_32',), ('TR427_33',), ('TR427_34',), ('TR427_35',), ('TR427_36',), ('TR427_37',), ('TR427_38',), ('TR427_39',), ('TR427_4',), ('TR427_40',), ('TR427_41',), ('TR427_42',), ('TR427_43',), ('TR427_44',), ('TR427_45',), ('TR427_46',), ('TR427_47',), ('TR427_5',), ('TR427_6',), ('TR427_7',), ('TR427_8',), ('TR427_9',), ('TR431_1',), ('TR431_10',), ('TR431_11',), ('TR431_12',), ('TR431_13',), ('TR431_14',), ('TR431_15',), ('TR431_16',), ('TR431_17',), ('TR431_18',), ('TR431_19',), ('TR431_2',), ('TR431_20',), ('TR431_21',), ('TR431_3',), ('TR431_4',), ('TR431_5',), ('TR431_6',), ('TR431_7',), ('TR431_8',), ('TR431_9',), ('TR433_1',), ('TR433_10',), ('TR433_11',), ('TR433_12',), ('TR433_13',), ('TR433_14',), ('TR433_15',), ('TR433_16',), ('TR433_17',), ('TR433_18',), ('TR433_19',), ('TR433_2',), ('TR433_20',), ('TR433_21',), ('TR433_22',), ('TR433_23',), ('TR433_24',), ('TR433_25',), ('TR433_26',), ('TR433_27',), ('TR433_28',), ('TR433_29',), ('TR433_3',), ('TR433_30',), ('TR433_31',), ('TR433_32',), ('TR433_33',), ('TR433_34',), ('TR433_35',), ('TR433_36',), ('TR433_37',), ('TR433_38',), ('TR433_39',), ('TR433_4',), ('TR433_40',), ('TR433_41',), ('TR433_42',), ('TR433_43',), ('TR433_44',), ('TR433_45',), ('TR433_46',), ('TR433_47',), ('TR433_48',), ('TR433_5',), ('TR433_6',), ('TR433_7',), ('TR433_8',), ('TR433_9',), ('TR435_1',), ('TR435_10',), ('TR435_11',), ('TR435_12',), ('TR435_13',), ('TR435_14',), ('TR435_15',), ('TR435_16',), ('TR435_17',), ('TR435_18',), ('TR435_19',), ('TR435_2',), ('TR435_20',), ('TR435_21',), ('TR435_22',), ('TR435_23',), ('TR435_24',), ('TR435_25',), ('TR435_26',), ('TR435_27',), ('TR435_28',), ('TR435_29',), ('TR435_3',), ('TR435_30',), ('TR435_31',), ('TR435_32',), ('TR435_33',), ('TR435_34',), ('TR435_35',), ('TR435_36',), ('TR435_37',), ('TR435_38',), ('TR435_39',), ('TR435_4',), ('TR435_40',), ('TR435_41',), ('TR435_42',), ('TR435_43',), ('TR435_44',), ('TR435_45',), ('TR435_46',), ('TR435_47',), ('TR435_48',), ('TR435_49',), ('TR435_5',), ('TR435_50',), ('TR435_51',), ('TR435_52',), ('TR435_53',), ('TR435_54',), ('TR435_55',), ('TR435_6',), ('TR435_7',), ('TR435_8',), ('TR435_9',), ('TR437_1',), ('TR437_10',), ('TR437_11',), ('TR437_2',), ('TR437_3',), ('TR437_4',), ('TR437_5',), ('TR437_6',), ('TR437_7',), ('TR437_8',), ('TR437_9',), ('TR438_1',), ('TR438_10',), ('TR438_11',), ('TR438_12',), ('TR438_13',), ('TR438_14',), ('TR438_15',), ('TR438_16',), ('TR438_17',), ('TR438_18',), ('TR438_19',), ('TR438_2',), ('TR438_20',), ('TR438_21',), ('TR438_22',), ('TR438_23',), ('TR438_24',), ('TR438_25',), ('TR438_26',), ('TR438_27',), ('TR438_28',), ('TR438_29',), ('TR438_3',), ('TR438_30',), ('TR438_31',), ('TR438_32',), ('TR438_33',), ('TR438_34',), ('TR438_35',), ('TR438_36',), ('TR438_37',), ('TR438_38',), ('TR438_39',), ('TR438_4',), ('TR438_40',), ('TR438_41',), ('TR438_42',), ('TR438_43',), ('TR438_44',), ('TR438_45',), ('TR438_46',), ('TR438_47',), ('TR438_48',), ('TR438_49',), ('TR438_5',), ('TR438_50',), ('TR438_51',), ('TR438_52',), ('TR438_53',), ('TR438_54',), ('TR438_55',), ('TR438_56',), ('TR438_57',), ('TR438_58',), ('TR438_59',), ('TR438_6',), ('TR438_60',), ('TR438_61',), ('TR438_62',), ('TR438_63',), ('TR438_64',), ('TR438_65',), ('TR438_66',), ('TR438_67',), ('TR438_68',), ('TR438_69',), ('TR438_7',), ('TR438_70',), ('TR438_71',), ('TR438_72',), ('TR438_8',), ('TR438_9',), ('TR439_1',), ('TR439_10',), ('TR439_11',), ('TR439_12',), ('TR439_13',), ('TR439_14',), ('TR439_15',), ('TR439_16',), ('TR439_17',), ('TR439_18',), ('TR439_19',), ('TR439_2',), ('TR439_20',), ('TR439_21',), ('TR439_22',), ('TR439_23',), ('TR439_24',), ('TR439_25',), ('TR439_26',), ('TR439_27',), ('TR439_28',), ('TR439_29',), ('TR439_3',), ('TR439_30',), ('TR439_31',), ('TR439_32',), ('TR439_33',), ('TR439_34',), ('TR439_35',), ('TR439_36',), ('TR439_37',), ('TR439_38',), ('TR439_4',), ('TR439_5',), ('TR439_6',), ('TR439_7',), ('TR439_8',), ('TR439_9',), ('TR442_1',), ('TR442_10',), ('TR442_11',), ('TR442_12',), ('TR442_13',), ('TR442_14',), ('TR442_15',), ('TR442_16',), ('TR442_17',), ('TR442_2',), ('TR442_3',), ('TR442_4',), ('TR442_5',), ('TR442_6',), ('TR442_7',), ('TR442_8',), ('TR442_9',), ('TR445_1',), ('TR445_10',), ('TR445_11',), ('TR445_12',), ('TR445_13',), ('TR445_14',), ('TR445_15',), ('TR445_16',), ('TR445_17',), ('TR445_18',), ('TR445_19',), ('TR445_2',), ('TR445_20',), ('TR445_21',), ('TR445_22',), ('TR445_23',), ('TR445_24',), ('TR445_25',), ('TR445_26',), ('TR445_27',), ('TR445_28',), ('TR445_29',), ('TR445_3',), ('TR445_30',), ('TR445_31',), ('TR445_32',), ('TR445_33',), ('TR445_34',), ('TR445_35',), ('TR445_36',), ('TR445_37',), ('TR445_38',), ('TR445_39',), ('TR445_4',), ('TR445_40',), ('TR445_41',), ('TR445_42',), ('TR445_43',), ('TR445_44',), ('TR445_45',), ('TR445_46',), ('TR445_47',), ('TR445_48',), ('TR445_49',), ('TR445_5',), ('TR445_50',), ('TR445_51',), ('TR445_52',), ('TR445_53',), ('TR445_54',), ('TR445_6',), ('TR445_7',), ('TR445_8',), ('TR445_9',), ('TR446_1',), ('TR446_10',), ('TR446_11',), ('TR446_12',), ('TR446_13',), ('TR446_14',), ('TR446_15',), ('TR446_16',), ('TR446_17',), ('TR446_18',), ('TR446_19',), ('TR446_2',), ('TR446_20',), ('TR446_21',), ('TR446_22',), ('TR446_23',), ('TR446_24',), ('TR446_25',), ('TR446_26',), ('TR446_27',), ('TR446_28',), ('TR446_29',), ('TR446_3',), ('TR446_30',), ('TR446_31',), ('TR446_32',), ('TR446_33',), ('TR446_34',), ('TR446_35',), ('TR446_36',), ('TR446_37',), ('TR446_38',), ('TR446_39',), ('TR446_4',), ('TR446_40',), ('TR446_41',), ('TR446_42',), ('TR446_43',), ('TR446_44',), ('TR446_45',), ('TR446_46',), ('TR446_47',), ('TR446_48',), ('TR446_49',), ('TR446_5',), ('TR446_50',), ('TR446_51',), ('TR446_52',), ('TR446_53',), ('TR446_6',), ('TR446_7',), ('TR446_8',), ('TR446_9',), ('TR455_1',), ('TR455_10',), ('TR455_11',), ('TR455_12',), ('TR455_13',), ('TR455_14',), ('TR455_15',), ('TR455_16',), ('TR455_17',), ('TR455_18',), ('TR455_19',), ('TR455_2',), ('TR455_20',), ('TR455_21',), ('TR455_22',), ('TR455_23',), ('TR455_24',), ('TR455_25',), ('TR455_26',), ('TR455_27',), ('TR455_28',), ('TR455_29',), ('TR455_3',), ('TR455_30',), ('TR455_31',), ('TR455_32',), ('TR455_33',), ('TR455_34',), ('TR455_35',), ('TR455_36',), ('TR455_37',), ('TR455_38',), ('TR455_39',), ('TR455_4',), ('TR455_40',), ('TR455_41',), ('TR455_42',), ('TR455_43',), ('TR455_5',), ('TR455_6',), ('TR455_7',), ('TR455_8',), ('TR455_9',), ('TR459_1',), ('TR459_10',), ('TR459_11',), ('TR459_12',), ('TR459_13',), ('TR459_14',), ('TR459_15',), ('TR459_16',), ('TR459_17',), ('TR459_18',), ('TR459_19',), ('TR459_2',), ('TR459_20',), ('TR459_21',), ('TR459_22',), ('TR459_23',), ('TR459_24',), ('TR459_25',), ('TR459_26',), ('TR459_3',), ('TR459_4',), ('TR459_5',), ('TR459_6',), ('TR459_7',), ('TR459_8',), ('TR459_9',), ('TR461_1',), ('TR461_2',), ('TR461_3',), ('TR461_4',), ('TR461_5',), ('TR461_6',), ('TR461_7',), ('TR464_1',), ('TR464_10',), ('TR464_11',), ('TR464_12',), ('TR464_13',), ('TR464_14',), ('TR464_15',), ('TR464_16',), ('TR464_17',), ('TR464_18',), ('TR464_19',), ('TR464_2',), ('TR464_20',), ('TR464_21',), ('TR464_3',), ('TR464_4',), ('TR464_5',), ('TR464_6',), ('TR464_7',), ('TR464_8',), ('TR464_9',), ('TR472_1',), ('TR472_10',), ('TR472_11',), ('TR472_12',), ('TR472_13',), ('TR472_2',), ('TR472_3',), ('TR472_4',), ('TR472_5',), ('TR472_6',), ('TR472_7',), ('TR472_8',), ('TR472_9',), ('TR473_1',), ('TR473_10',), ('TR473_11',), ('TR473_12',), ('TR473_13',), ('TR473_14',), ('TR473_15',), ('TR473_16',), ('TR473_17',), ('TR473_18',), ('TR473_19',), ('TR473_2',), ('TR473_20',), ('TR473_21',), ('TR473_3',), ('TR473_4',), ('TR473_5',), ('TR473_6',), ('TR473_7',), ('TR473_8',), ('TR473_9',), ('TR477_1',), ('TR477_10',), ('TR477_11',), ('TR477_12',), ('TR477_2',), ('TR477_3',), ('TR477_4',), ('TR477_5',), ('TR477_6',), ('TR477_7',), ('TR477_8',), ('TR477_9',), ('TR478_1',), ('TR478_10',), ('TR478_11',), ('TR478_12',), ('TR478_13',), ('TR478_14',), ('TR478_15',), ('TR478_16',), ('TR478_17',), ('TR478_18',), ('TR478_2',), ('TR478_3',), ('TR478_4',), ('TR478_5',), ('TR478_6',), ('TR478_7',), ('TR478_8',), ('TR478_9',), ('TR480_1',), ('TR480_10',), ('TR480_11',), ('TR480_12',), ('TR480_13',), ('TR480_14',), ('TR480_15',), ('TR480_16',), ('TR480_17',), ('TR480_18',), ('TR480_19',), ('TR480_2',), ('TR480_20',), ('TR480_21',), ('TR480_22',), ('TR480_23',), ('TR480_24',), ('TR480_25',), ('TR480_26',), ('TR480_27',), ('TR480_28',), ('TR480_29',), ('TR480_3',), ('TR480_30',), ('TR480_31',), ('TR480_32',), ('TR480_33',), ('TR480_34',), ('TR480_35',), ('TR480_36',), ('TR480_37',), ('TR480_38',), ('TR480_39',), ('TR480_4',), ('TR480_40',), ('TR480_41',), ('TR480_42',), ('TR480_43',), ('TR480_44',), ('TR480_45',), ('TR480_46',), ('TR480_47',), ('TR480_48',), ('TR480_49',), ('TR480_5',), ('TR480_50',), ('TR480_51',), ('TR480_52',), ('TR480_53',), ('TR480_54',), ('TR480_6',), ('TR480_7',), ('TR480_8',), ('TR480_9',), ('TR481_1',), ('TR481_10',), ('TR481_11',), ('TR481_12',), ('TR481_13',), ('TR481_14',), ('TR481_15',), ('TR481_16',), ('TR481_17',), ('TR481_18',), ('TR481_19',), ('TR481_2',), ('TR481_20',), ('TR481_21',), ('TR481_22',), ('TR481_23',), ('TR481_24',), ('TR481_25',), ('TR481_26',), ('TR481_27',), ('TR481_28',), ('TR481_29',), ('TR481_3',), ('TR481_30',), ('TR481_31',), ('TR481_32',), ('TR481_33',), ('TR481_34',), ('TR481_35',), ('TR481_36',), ('TR481_37',), ('TR481_38',), ('TR481_39',), ('TR481_4',), ('TR481_40',), ('TR481_41',), ('TR481_42',), ('TR481_43',), ('TR481_44',), ('TR481_45',), ('TR481_46',), ('TR481_47',), ('TR481_48',), ('TR481_49',), ('TR481_5',), ('TR481_50',), ('TR481_51',), ('TR481_52',), ('TR481_53',), ('TR481_54',), ('TR481_55',), ('TR481_56',), ('TR481_57',), ('TR481_58',), ('TR481_59',), ('TR481_6',), ('TR481_60',), ('TR481_61',), ('TR481_62',), ('TR481_63',), ('TR481_64',), ('TR481_65',), ('TR481_66',), ('TR481_67',), ('TR481_7',), ('TR481_8',), ('TR481_9',), ('TR484_1',), ('TR484_10',), ('TR484_11',), ('TR484_12',), ('TR484_13',), ('TR484_14',), ('TR484_15',), ('TR484_16',), ('TR484_17',), ('TR484_18',), ('TR484_19',), ('TR484_2',), ('TR484_20',), ('TR484_21',), ('TR484_22',), ('TR484_3',), ('TR484_4',), ('TR484_5',), ('TR484_6',), ('TR484_7',), ('TR484_8',), ('TR484_9',), ('TR490_1',), ('TR490_10',), ('TR490_11',), ('TR490_12',), ('TR490_13',), ('TR490_14',), ('TR490_15',), ('TR490_2',), ('TR490_3',), ('TR490_4',), ('TR490_5',), ('TR490_6',), ('TR490_7',), ('TR490_8',), ('TR490_9',), ('TR493_1',), ('TR493_10',), ('TR493_11',), ('TR493_12',), ('TR493_13',), ('TR493_14',), ('TR493_15',), ('TR493_16',), ('TR493_17',), ('TR493_18',), ('TR493_19',), ('TR493_2',), ('TR493_20',), ('TR493_21',), ('TR493_22',), ('TR493_23',), ('TR493_24',), ('TR493_25',), ('TR493_26',), ('TR493_27',), ('TR493_28',), ('TR493_29',), ('TR493_3',), ('TR493_30',), ('TR493_4',), ('TR493_5',), ('TR493_6',), ('TR493_7',), ('TR493_8',), ('TR493_9',), ('TR495_1',), ('TR495_2',), ('TR495_3',), ('TR501_1',), ('TR501_10',), ('TR501_11',), ('TR501_12',), ('TR501_13',), ('TR501_14',), ('TR501_15',), ('TR501_16',), ('TR501_17',), ('TR501_18',), ('TR501_19',), ('TR501_2',), ('TR501_20',), ('TR501_21',), ('TR501_22',), ('TR501_23',), ('TR501_24',), ('TR501_25',), ('TR501_3',), ('TR501_4',), ('TR501_5',), ('TR501_6',), ('TR501_7',), ('TR501_8',), ('TR501_9',)]",
    "table_infos": "df1:\n|    | atom_id   | molecule_id   | element   |\n|---:|:----------|:--------------|:----------|\n|  0 | TR000_1   | TR000         | cl        |\n|  1 | TR000_2   | TR000         | c         |\n|  2 | TR000_3   | TR000         | cl        |\ndf2:\n|    | molecule_id   | label   |\n|---:|:--------------|:--------|\n|  0 | TR000         | +       |\n|  1 | TR001         | +       |\n|  2 | TR002         | -       |\ndf3:\n|    | atom_id   | atom_id2   | bond_id   |\n|---:|:----------|:-----------|:----------|\n|  0 | TR000_1   | TR000_2    | TR000_1_2 |\n|  1 | TR000_2   | TR000_1    | TR000_1_2 |\n|  2 | TR000_2   | TR000_3    | TR000_2_3 |\nForeign keys:\ndf1.molecule_id = df2.molecule_id,df3.atom_id2 = df1.atom_id,df3.atom_id = df1.atom_id\n"
  },
  {
    "table_paths": [
      "datasets/BIRD_dev-toxicology/atom.csv",
      "datasets/BIRD_dev-toxicology/connected.csv",
      "datasets/BIRD_dev-toxicology/bond.csv"
    ],
    "query": "How many atoms with iodine and sulfur type elements are there in single bond molecules?",
    "cot": "\nTo solve this problem, we need to join df1, df2 and df3 on the bond_id and atom_id fields. Then, we need to filter the dataframe to include only rows where the element is either iodine (I) or sulfur (S). Finally, we need to count the number of unique molecule_id's.\n",
    "code": "import numpy as np\nimport pandas as pd\n\n# Join df1, df2 and df3 on bond_id and atom_id fields\ndf = pd.merge(df2, df1, left_on='atom_id', right_on='atom_id', how='inner')\ndf = pd.merge(df, df3, left_on='bond_id', right_on='bond_id', how='inner')\n\n# Filter the dataframe to include only rows where the element is either iodine (I) or sulfur (S)\ndf = df[df['element'].isin(['I', 'S'])]\n\n# Count the number of unique molecule_id's\nnum_molecules = df['molecule_id'].nunique()\n\nprint(num_molecules)",
    "observation": "KeyError: 'molecule_id'",
    "true_result": "[(6, 92)]",
    "table_infos": "df1:\n|    | atom_id   | molecule_id   | element   |\n|---:|:----------|:--------------|:----------|\n|  0 | TR000_1   | TR000         | cl        |\n|  1 | TR000_2   | TR000         | c         |\n|  2 | TR000_3   | TR000         | cl        |\ndf2:\n|    | atom_id   | atom_id2   | bond_id   |\n|---:|:----------|:-----------|:----------|\n|  0 | TR000_1   | TR000_2    | TR000_1_2 |\n|  1 | TR000_2   | TR000_1    | TR000_1_2 |\n|  2 | TR000_2   | TR000_3    | TR000_2_3 |\ndf3:\n|    | bond_id   | molecule_id   | bond_type   |\n|---:|:----------|:--------------|:------------|\n|  0 | TR000_1_2 | TR000         | -           |\n|  1 | TR000_2_3 | TR000         | -           |\n|  2 | TR000_2_4 | TR000         | -           |\nForeign keys:\ndf2.bond_id = df3.bond_id,df2.atom_id2 = df1.atom_id,df2.atom_id = df1.atom_id\n"
  },
  {
    "table_paths": ["datasets/BIRD_dev-toxicology/bond.csv"],
    "query": "Which bond type accounted for the majority of the bonds found in molecule TR018 and state whether or not this molecule is carcinogenic?",
    "cot": "\nTo solve this problem, we need to filter the dataframe to include only the rows where molecule_id is 'TR018'. Then, we will group by 'bond_type' and count the number of occurrences. The bond type with the highest count is the one we are looking for.\n\nTo determine if the molecule is carcinogenic, we need to have a reference or a list of known carcinogenic molecules. This information is not provided in the question, so we will assume that we have a boolean column 'carcinogenic' in the dataframe that indicates whether a molecule is carcinogenic or not.\n",
    "code": "import numpy as np\nimport pandas as p数\n\n# Assuming df is your dataframe\n\n# Data Processing\ndf_TR018 = df[df['molecule_id'] == 'TR018']\nbond_counts = df_TR018['bond_type'].value_counts()\n\n# Get the bond type with the highest count\nmajority_bond_type = bond_counts.idxmax()\n\n# Check if the molecule is carcinogenic\nis_carcinogenic = df[df['molecule_id'] == 'TR018']['carcinogenic'].values[0]\n\n# Print the result\nprint(f\"The bond type that accounted for the majority of the bonds in molecule TR018 is: {majority_bond_type}\")\nprint(f\"Is the molecule carcinogenic? {'Yes' if is_carcinogenic else 'No'}\")",
    "observation": "ValueError: attempt to get argmax of an empty sequence",
    "true_result": "[('-',)]",
    "table_infos": "df:\n|    | bond_id   | molecule_id   | bond_type   |\n|---:|:----------|:--------------|:------------|\n|  0 | TR000_1_2 | TR000         | -           |\n"
  },
  {
    "table_paths": [
      "datasets/BIRD_dev-toxicology/bond.csv",
      "datasets/BIRD_dev-toxicology/connected.csv"
    ],
    "query": "What are the bond type and the atoms of the bond ID of TR001_6_9?",
    "cot": "To find the bond type and atoms of the bond ID of TR001_6_9, we need to join df1 and df2 on bond_id and then filter the result based on bond_id.\n",
    "code": "import numpy as np\nimport pandas as pd\n\n# Assuming df1 and df2 are the dataframes\n\n# Join df1 and df2 on bond_id\ndf = pd.merge(df1, df2, on='bond_id')\n\n# Filter the result based on bond_id\nresult = df[df['bond_id'] == 'TR001_6_9']\n\n# Print the bond type and atoms\nprint(\"Bond Type: \", result['bond_type'].values[0])\nprint(\"Atoms: \", result['atom_id'].values[0], \", \", result['atom_id2'].values[0])",
    "observation": "IndexError: index 0 is out of bounds for axis 0 with size 0",
    "true_result": "[('-', 'TR001_6', 'TR001_9'), ('-', 'TR001_9', 'TR001_6')]",
    "table_infos": "df1:\n|    | bond_id   | molecule_id   | bond_type   |\n|---:|:----------|:--------------|:------------|\n|  0 | TR000_1_2 | TR000         | -           |\n|  1 | TR000_2_3 | TR000         | -           |\n|  2 | TR000_2_4 | TR000         | -           |\ndf2:\n|    | atom_id   | atom_id2   | bond_id   |\n|---:|:----------|:-----------|:----------|\n|  0 | TR000_1   | TR000_2    | TR000_1_2 |\n|  1 | TR000_2   | TR000_1    | TR000_1_2 |\n|  2 | TR000_2   | TR000_3    | TR000_2_3 |\nForeign keys:\ndf2.bond_id = df1.bond_id\n"
  },
  {
    "table_paths": [
      "datasets/BIRD_dev-toxicology/atom.csv",
      "datasets/BIRD_dev-toxicology/molecule.csv"
    ],
    "query": "Which molecule does the atom TR001_10 belong to? Please state whether this molecule is carcinogenic or not.",
    "cot": "",
    "code": "import numpy as np\nimport pandas as pd\n\n# Assuming df1 and df2 are the given dataframes\n\n# Merge df1 and df2 on 'molecule_id'\nmerged_df = pd.merge(df1, df2, on='molecule_id')\n\n# Filter the merged_df to get the row where atom_id is 'TR001_10'\nfiltered_df = merged_df[merged_df['atom_id'] == 'TR001_10']\n\n# Get the molecule_id and label of the filtered_df\nmolecule_id = filtered_df['molecule_id'].values[0]\nlabel = filtered_df['label'].values[0]\n\nprint(f\"The molecule of atom TR001_10 is {molecule_id} and it is {'carcinogenic' if label == '+' else 'not carcinogenic'}.\")",
    "observation": "IndexError: index 0 is out of bounds for axis 0 with size 0",
    "true_result": "[('TR001', 'YES')]",
    "table_infos": "df1:\n|    | atom_id   | molecule_id   | element   |\n|---:|:----------|:--------------|:----------|\n|  0 | TR000_1   | TR000         | cl        |\n|  1 | TR000_2   | TR000         | c         |\n|  2 | TR000_3   | TR000         | cl        |\ndf2:\n|    | molecule_id   | label   |\n|---:|:--------------|:--------|\n|  0 | TR000         | +       |\n|  1 | TR001         | +       |\n|  2 | TR002         | -       |\nForeign keys:\ndf1.molecule_id = df2.molecule_id\n"
  },
  {
    "table_paths": [
      "datasets/BIRD_dev-toxicology/atom.csv",
      "datasets/BIRD_dev-toxicology/connected.csv"
    ],
    "query": "List all the elements of atoms that can not bond with any other atoms.",
    "cot": "",
    "code": "import numpy as np\nimport pandas as pd\n\n# Assuming df1 and df2 are your dataframes\n\n# Merge df1 and df2 on atom_id and atom_id2\ndf = pd.merge(df1, df2, left_on='atom_id', right_on='atom_id2')\n\n# Group by molecule_id and element, and count the number of unique atom_id\ndf = df.groupby(['molecule_id', 'element']).atom_id.nunique()\n\n# Reset the index to get a dataframe\ndf = df.reset_index()\n\n# Filter out the elements that have more than one atom_id in the same molecule_id\ndf = df[df.atom_id == 1]\n\n# Get the list of elements\nelements = df.element.tolist()\n\nprint(elements)",
    "observation": "AttributeError: 'DataFrameGroupBy' object has no attribute 'atom_id'",
    "true_result": "[('na',), ('zn',), ('k',)]",
    "table_infos": "df1:\n|    | atom_id   | molecule_id   | element   |\n|---:|:----------|:--------------|:----------|\n|  0 | TR000_1   | TR000         | cl        |\n|  1 | TR000_2   | TR000         | c         |\n|  2 | TR000_3   | TR000         | cl        |\ndf2:\n|    | atom_id   | atom_id2   | bond_id   |\n|---:|:----------|:-----------|:----------|\n|  0 | TR000_1   | TR000_2    | TR000_1_2 |\n|  1 | TR000_2   | TR000_1    | TR000_1_2 |\n|  2 | TR000_2   | TR000_3    | TR000_2_3 |\nForeign keys:\ndf2.atom_id2 = df1.atom_id,df2.atom_id = df1.atom_id\n"
  },
  {
    "table_paths": [
      "datasets/BIRD_dev-toxicology/atom.csv",
      "datasets/BIRD_dev-toxicology/connected.csv",
      "datasets/BIRD_dev-toxicology/bond.csv"
    ],
    "query": "What are the atoms of the triple bond with the molecule \"TR447\"?",
    "cot": "\nTo solve this problem, we need to join the three dataframes based on the foreign keys and filter the data for the molecule \"TR447\".\n",
    "code": "import numpy as np\nimport pandas as pd\n\n# Assuming df1, df2, df3 are the dataframes\n\n# Join df1 and df2 on atom_id\ndf = pd.merge(df1, df2, on='atom_id', how='inner')\n\n# Join df3 on bond_id\ndf = pd.merge(df, df3, on='bond_id', how='inner')\n\n# Filter the data for the molecule \"TR447\"\ndf = df[df['molecule_id'] == 'TR447']\n\n# Filter the data for triple bonds\ndf = df[df['bond_type'] == '-']\n\n# Get the atoms of the triple bonds\natoms = df['element'].tolist()\n\n# Print the atoms\nprint(atoms)",
    "observation": "KeyError: 'molecule_id'",
    "true_result": "[('TR447_1', 'TR447_3'), ('TR447_3', 'TR447_1')]",
    "table_infos": "df1:\n|    | atom_id   | molecule_id   | element   |\n|---:|:----------|:--------------|:----------|\n|  0 | TR000_1   | TR000         | cl        |\n|  1 | TR000_2   | TR000         | c         |\n|  2 | TR000_3   | TR000         | cl        |\ndf2:\n|    | atom_id   | atom_id2   | bond_id   |\n|---:|:----------|:-----------|:----------|\n|  0 | TR000_1   | TR000_2    | TR000_1_2 |\n|  1 | TR000_2   | TR000_1    | TR000_1_2 |\n|  2 | TR000_2   | TR000_3    | TR000_2_3 |\ndf3:\n|    | bond_id   | molecule_id   | bond_type   |\n|---:|:----------|:--------------|:------------|\n|  0 | TR000_1_2 | TR000         | -           |\n|  1 | TR000_2_3 | TR000         | -           |\n|  2 | TR000_2_4 | TR000         | -           |\nForeign keys:\ndf2.bond_id = df3.bond_id,df2.atom_id2 = df1.atom_id,df2.atom_id = df1.atom_id\n"
  },
  {
    "table_paths": [
      "datasets/BIRD_dev-toxicology/connected.csv",
      "datasets/BIRD_dev-toxicology/atom.csv"
    ],
    "query": "What are the elements of the atoms of TR144_8_19?",
    "cot": "To find the elements of the atoms of TR144_8_19, we need to join df1 and df2 on the atom_id and atom_id2 columns. Then, filter the resulting dataframe to only include rows where the molecule_id is TR144_8_19. Finally, select the element column.\n",
    "code": "import numpy as np\nimport pandas as pd\n\n# Assuming df1 and df2 are the dataframes\n\n# Join df1 and df2 on atom_id and atom_id2\ndf = pd.merge(df1, df2, left_on='atom_id', right_on='atom_id2')\n\n# Filter the dataframe to only include rows where the molecule_id is TR144_8_19\ndf = df[df['molecule_id'] == 'TR144_8_19']\n\n# Select the element column\nelements = df['element']\n\n# Print the elements\nprint(elements)",
    "observation": "KeyError: 'atom_id2'",
    "true_result": "[('h',), ('c',)]",
    "table_infos": "df1:\n|    | atom_id   | atom_id2   | bond_id   |\n|---:|:----------|:-----------|:----------|\n|  0 | TR000_1   | TR000_2    | TR000_1_2 |\n|  1 | TR000_2   | TR000_1    | TR000_1_2 |\n|  2 | TR000_2   | TR000_3    | TR000_2_3 |\ndf2:\n|    | atom_id   | molecule_id   | element   |\n|---:|:----------|:--------------|:----------|\n|  0 | TR000_1   | TR000         | cl        |\n|  1 | TR000_2   | TR000         | c         |\n|  2 | TR000_3   | TR000         | cl        |\nForeign keys:\ndf1.atom_id2 = df2.atom_id,df1.atom_id = df2.atom_id\n"
  },
  {
    "table_paths": [
      "datasets/BIRD_dev-toxicology/bond.csv",
      "datasets/BIRD_dev-toxicology/molecule.csv"
    ],
    "query": "Of all the carcinogenic molecules, which one has the most double bonds?",
    "cot": "To solve this problem, we need to first merge df1 and df2 on molecule_id. Then, we need to filter out only the rows where label is '+'. After that, we need to count the number of double bonds for each molecule. Finally, we need to find the molecule with the most double bonds.\n",
    "code": "import numpy as np\nimport pandas as pd\n\n# Assuming df1 and df2 are your dataframes\n\n# Merge df1 and df2 on molecule_id\nmerged_df = pd.merge(df1, df2, on='molecule_id')\n\n# Filter out only the rows where label is '+'\nfiltered_df = merged_df[merged_df['label'] == '+']\n\n# Count the number of double bonds for each molecule\ndouble_bond_counts = filtered_df[filtered_df['bond_type'] == 'double'].groupby('molecule_id').size()\n\n# Find the molecule with the most double bonds\nmost_double_bonds_molecule = double_bond_counts.idxmax()\n\n# Print the result\nprint(f\"The molecule with the most double bonds is: {most_double_bonds_molecule}\")",
    "observation": "ValueError: attempt to get argmax of an empty sequence",
    "true_result": "[('TR430',)]",
    "table_infos": "df1:\n|    | bond_id   | molecule_id   | bond_type   |\n|---:|:----------|:--------------|:------------|\n|  0 | TR000_1_2 | TR000         | -           |\n|  1 | TR000_2_3 | TR000         | -           |\n|  2 | TR000_2_4 | TR000         | -           |\ndf2:\n|    | molecule_id   | label   |\n|---:|:--------------|:--------|\n|  0 | TR000         | +       |\n|  1 | TR001         | +       |\n|  2 | TR002         | -       |\nForeign keys:\ndf1.molecule_id = df2.molecule_id\n"
  },
  {
    "table_paths": ["datasets/BIRD_dev-toxicology/molecule.csv"],
    "query": "Calculate the total carcinogenic molecules for molecule id from TR000 to TR030.",
    "cot": "To solve this problem, we need to filter the dataframe based on the molecule_id and count the number of rows where label is '+'.\n",
    "code": "import numpy as np\nimport pandas as pd\n\n# Assuming df is your dataframe\n\n# Filter the dataframe based on molecule_id and count the number of rows where label is '+'\ncarcinogenic_molecules = df[df['molecule_id'].between('TR000', 'TR030') & (df['label'] == '+')]['molecule_id'].nunique()\n\nprint(f\"The total carcinogenic molecules for molecule id from TR000 to TR030 is {carcinogenic_molecules}\")",
    "observation": "ValueError: All arrays must be of the same length",
    "true_result": "[(7,)]",
    "table_infos": "df:\n|    | molecule_id   | label   |\n|---:|:--------------|:--------|\n|  0 | TR000         | +       |\n"
  },
  {
    "table_paths": [
      "datasets/BIRD_dev-toxicology/connected.csv",
      "datasets/BIRD_dev-toxicology/atom.csv"
    ],
    "query": "What are the elements for bond id TR001_10_11?",
    "cot": "To find the elements for bond id TR001_10_11, we need to join df1 and df2 on the atom_id and atom_id2 columns. Then, filter the resulting dataframe to get the rows where bond_id is 'TR001_10_11'. From these rows, we can extract the elements for atom_id1 and atom_id2.\n",
    "code": "import numpy as np\nimport pandas as pd\n\n# Assuming df1 and df2 are the dataframes given in the question\n\n# Join df1 and df2 on atom_id and atom_id2\ndf = pd.merge(df1, df2, left_on='atom_id', right_on='atom_id', how='left')\ndf = pd.merge(df, df2, left_on='atom_id2', right_on='atom_id', how='left', suffixes=('', '_y'))\ndf.drop(columns=['atom_id_y', 'atom_id_y_y', 'element_y'], axis=1, inplace=True)\n\n# Filter the dataframe to get the rows where bond_id is 'TR001_10_11'\ndf = df[df['bond_id'] == 'TR001_10_11']\n\n# Get the elements for atom_id1 and atom_id2\nelement1 = df['element'].values[0]\nelement2 = df['element_x'].values[0]\n\n# Print the elements\nprint(f\"The elements for bond id TR001_10_11 are {element1} and {element2}\")",
    "observation": "KeyError: \"['atom_id_y_y'] not found in axis\"",
    "true_result": "[('c',), ('o',)]",
    "table_infos": "df1:\n|    | atom_id   | atom_id2   | bond_id   |\n|---:|:----------|:-----------|:----------|\n|  0 | TR000_1   | TR000_2    | TR000_1_2 |\n|  1 | TR000_2   | TR000_1    | TR000_1_2 |\n|  2 | TR000_2   | TR000_3    | TR000_2_3 |\ndf2:\n|    | atom_id   | molecule_id   | element   |\n|---:|:----------|:--------------|:----------|\n|  0 | TR000_1   | TR000         | cl        |\n|  1 | TR000_2   | TR000         | c         |\n|  2 | TR000_3   | TR000         | cl        |\nForeign keys:\ndf1.atom_id2 = df2.atom_id,df1.atom_id = df2.atom_id\n"
  },
  {
    "table_paths": [
      "datasets/BIRD_dev-toxicology/atom.csv",
      "datasets/BIRD_dev-toxicology/connected.csv"
    ],
    "query": "Does bond id TR001_1_8 have both element of chlorine and carbon?",
    "cot": "To answer this question, we need to join df1 and df2 on the atom_id and atom_id2 columns. Then, we need to check if the bond_id is 'TR001_1_8' and if the elements are 'cl' and 'c' respectively.\n",
    "code": "import numpy as np\nimport pandas as pd\n\n# Assuming df1 and df2 are the dataframes given in the question\n\n# Join df1 and df2 on atom_id and atom_id2\ndf = pd.merge(df1, df2, left_on='atom_id', right_on='atom_id2')\n\n# Filter the dataframe to get the rows where bond_id is 'TR001_1_8' and elements are 'cl' and 'c'\nfiltered_df = df[(df['bond_id'] == 'TR001_1_8') & (df['element_x'] == 'cl') & (df['element_y'] == 'c')]\n\n# If the length of the filtered dataframe is 1, then the bond id 'TR001_1_8' has both element of chlorine and carbon\nif len(filtered_df) == 1:\n    print(\"Yes, bond id TR001_1_8 has both element of chlorine and carbon.\")\nelse:\n    print(\"No, bond id TR001_1_8 does not have both element of chlorine and carbon.\")",
    "observation": "KeyError: 'element_x'",
    "true_result": "[('TR001_1_8', 'TR001_8', 'c'), ('TR001_1_8', 'TR001_1', 'c')]",
    "table_infos": "df1:\n|    | atom_id   | molecule_id   | element   |\n|---:|:----------|:--------------|:----------|\n|  0 | TR000_1   | TR000         | cl        |\n|  1 | TR000_2   | TR000         | c         |\n|  2 | TR000_3   | TR000         | cl        |\ndf2:\n|    | atom_id   | atom_id2   | bond_id   |\n|---:|:----------|:-----------|:----------|\n|  0 | TR000_1   | TR000_2    | TR000_1_2 |\n|  1 | TR000_2   | TR000_1    | TR000_1_2 |\n|  2 | TR000_2   | TR000_3    | TR000_2_3 |\nForeign keys:\ndf2.atom_id2 = df1.atom_id,df2.atom_id = df1.atom_id\n"
  },
  {
    "table_paths": [
      "datasets/BIRD_dev-toxicology/bond.csv",
      "datasets/BIRD_dev-toxicology/molecule.csv"
    ],
    "query": "What is the label for bond ID TR001_10_11?",
    "cot": "To find the label for bond ID TR001_10_11, we first need to merge the two dataframes on the 'molecule_id' column. Then, we can filter the merged dataframe to get the label for the molecule_id corresponding to the bond_id TR001_10_11.\n",
    "code": "import numpy as np\nimport pandas as pd\n\n# Assuming df1 and df2 are the dataframes\n\n# Merge the two dataframes on 'molecule_id'\nmerged_df = pd.merge(df1, df2, on='molecule_id')\n\n# Filter the merged dataframe to get the label for bond ID TR001_10_11\nlabel = merged_df.loc[merged_df['bond_id'] == 'TR001_10_11', 'label'].values[0]\n\n# Print the label\nprint(f\"The label for bond ID TR001_10_11 is: {label}\")",
    "observation": "IndexError: index 0 is out of bounds for axis 0 with size 0",
    "true_result": "[('+',)]",
    "table_infos": "df1:\n|    | bond_id   | molecule_id   | bond_type   |\n|---:|:----------|:--------------|:------------|\n|  0 | TR000_1_2 | TR000         | -           |\n|  1 | TR000_2_3 | TR000         | -           |\n|  2 | TR000_2_4 | TR000         | -           |\ndf2:\n|    | molecule_id   | label   |\n|---:|:--------------|:--------|\n|  0 | TR000         | +       |\n|  1 | TR001         | +       |\n|  2 | TR002         | -       |\nForeign keys:\ndf1.molecule_id = df2.molecule_id\n"
  },
  {
    "table_paths": [
      "datasets/BIRD_dev-toxicology/atom.csv",
      "datasets/BIRD_dev-toxicology/molecule.csv"
    ],
    "query": "Tally the toxicology element of the 4th atom of each molecule that was carcinogenic.",
    "cot": "\nTo solve this problem, we need to join df1 and df2 on molecule_id, filter out the molecules that are carcinogenic (label = '+'), and then count the number of times each element appears in the 4th atom of each molecule.\n",
    "code": "import numpy as np\nimport pandas as pd\n\n# Assuming df1 and df2 are your dataframes\n\n# Join df1 and df2 on molecule_id\ndf = pd.merge(df1, df2, on='molecule_id')\n\n# Filter out the molecules that are carcinogenic\ndf = df[df['label'] == '+']\n\n# Split atom_id into two columns: atom_number and atom_id_suffix\ndf[['atom_number', 'atom_id_suffix']] = df['atom_id'].str.split('_', expand=True)\n\n# Convert atom_number to integer\ndf['atom_number'] = df['atom_number'].astype(int)\n\n# Filter out the atoms that are not the 4th atom of each molecule\ndf = df[df['atom_number'] == 4]\n\n# Count the number of times each element appears\nfinal_df = df.groupby('element').size().reset_index(name='count')\n\n# Print the final result\nprint(final_df)",
    "observation": "ValueError: invalid literal for int() with base 10: 'TR000'",
    "true_result": "[('cl',), ('c',), ('br',), ('n',), ('o',), ('s',), ('h',), ('f',)]",
    "table_infos": "df1:\n|    | atom_id   | molecule_id   | element   |\n|---:|:----------|:--------------|:----------|\n|  0 | TR000_1   | TR000         | cl        |\n|  1 | TR000_2   | TR000         | c         |\n|  2 | TR000_3   | TR000         | cl        |\ndf2:\n|    | molecule_id   | label   |\n|---:|:--------------|:--------|\n|  0 | TR000         | +       |\n|  1 | TR001         | +       |\n|  2 | TR002         | -       |\nForeign keys:\ndf1.molecule_id = df2.molecule_id\n"
  },
  {
    "table_paths": [
      "datasets/BIRD_dev-toxicology/atom.csv",
      "datasets/BIRD_dev-toxicology/connected.csv",
      "datasets/BIRD_dev-toxicology/bond.csv"
    ],
    "query": "Name chemical elements that form a bond TR001_10_11.",
    "cot": "",
    "code": "# Data Preparation\n# Merge df1 and df2 on atom_id\ndf4 = pd.merge(df1, df2, on='atom_id', how='inner')\n\n# Merge df4 and df3 on bond_id\ndf5 = pd.merge(df4, df3, on='bond_id', how='inner')\n\n# Data Processing\n# Filter df5 based on bond_id\ndf6 = df5[df5['bond_id'] == 'TR000_1_2']\n\n# Declare `final_df` Variable\nfinal_df = df6\n\n# Print the final result\nprint(final_df[['element_x', 'element_y']])",
    "observation": "KeyError: \"None of [Index(['element_x', 'element_y'], dtype='object')] are in the [columns]\"",
    "true_result": "[('c',), ('o',)]",
    "table_infos": "df1:\n|    | atom_id   | molecule_id   | element   |\n|---:|:----------|:--------------|:----------|\n|  0 | TR000_1   | TR000         | cl        |\n|  1 | TR000_2   | TR000         | c         |\n|  2 | TR000_3   | TR000         | cl        |\ndf2:\n|    | atom_id   | atom_id2   | bond_id   |\n|---:|:----------|:-----------|:----------|\n|  0 | TR000_1   | TR000_2    | TR000_1_2 |\n|  1 | TR000_2   | TR000_1    | TR000_1_2 |\n|  2 | TR000_2   | TR000_3    | TR000_2_3 |\ndf3:\n|    | bond_id   | molecule_id   | bond_type   |\n|---:|:----------|:--------------|:------------|\n|  0 | TR000_1_2 | TR000         | -           |\n|  1 | TR000_2_3 | TR000         | -           |\n|  2 | TR000_2_4 | TR000         | -           |\nForeign keys:\ndf2.bond_id = df3.bond_id,df2.atom_id2 = df1.atom_id,df2.atom_id = df1.atom_id\n"
  },
  {
    "table_paths": ["datasets/BIRD_dev-toxicology/bond.csv"],
    "query": "Among all chemical compounds that contain molecule TR047, identify the percent that form a double-bond.",
    "cot": "To solve this problem, we need to filter the dataframe to only include rows where molecule_id is 'TR047' and bond_type is '-'. Then, we can calculate the percentage of these rows in the total number of rows where molecule_id is 'TR047'.\n",
    "code": "import numpy as np\nimport pandas as pd\n\n# Assuming df is your DataFrame\n\n# Data Processing\ndouble_bonds = df[df['molecule_id'] == 'TR047'][df['bond_type'] == '-']\npercentage = len(double_bonds) / len(df[df['molecule_id'] == 'TR047']) * 100\n\n# Print the result\nprint(f\"The percentage of compounds that form a double bond among those containing molecule TR047 is {percentage}%\")",
    "observation": "ZeroDivisionError: division by zero",
    "true_result": "[(21.428571428571427,)]",
    "table_infos": "df:\n|    | bond_id   | molecule_id   | bond_type   |\n|---:|:----------|:--------------|:------------|\n|  0 | TR000_1_2 | TR000         | -           |\n"
  },
  {
    "table_paths": ["datasets/BIRD_dev-toxicology/molecule.csv"],
    "query": "Is molecule TR151 carcinogenic?",
    "cot": "",
    "code": "import numpy as np\nimport pandas as pd\n\n# Assuming we have a CSV file named 'molecules.csv' with columns 'molecule_id' and 'carcinogenicity'\n\n\n# Filter the dataframe to get the row where molecule_id is 'TR151'\nmolecule_info = df[df['molecule_id'] == 'TR151']\n\n# Check if the molecule is carcinogenic\nif molecule_info['carcinogenicity'].values[0] == '+':\n    print(\"The molecule TR151 is carcinogenic.\")\nelse:\n    print(\"The molecule TR151 is not carcinogenic.\")",
    "observation": "KeyError: 'carcinogenicity'",
    "true_result": "[('-',)]",
    "table_infos": "df:\n|    | molecule_id   | label   |\n|---:|:--------------|:--------|\n|  0 | TR000         | +       |\n"
  },
  {
    "table_paths": [
      "datasets/BIRD_dev-toxicology/bond.csv",
      "datasets/BIRD_dev-toxicology/connected.csv"
    ],
    "query": "Name all bonds with single bond types and what atoms are connected to the molecules.",
    "cot": "\nTo solve this problem, we need to find the bonds that have only one bond type and the atoms connected to the molecules. We can achieve this by grouping the data by bond_id and molecule_id, then filter out the groups that have more than one unique bond_type. For the atoms connected to the molecules, we can simply group by molecule_id and atom_id.\n",
    "code": "import numpy as np\nimport pandas as pd\n\n# Assuming df1 and df2 are the dataframes\n\n# Data Processing\ndf1_grouped = df1.groupby(['bond_id', 'molecule_id']).apply(lambda x: x['bond_type'].nunique() == 1)\nsingle_bond_types = df1_grouped[df1_grouped].reset_index()\n\n# Filter df2 by bond_id from single_bond_types\ndf2_filtered = df2[df2['bond_id'].isin(single_bond_types['bond_id'])]\n\n# Group by molecule_id and atom_id\natom_groups = df2_filtered.groupby('molecule_id')['atom_id'].apply(list)\n\n# Declare `final_df` Variable), columns=['molecule_id', 'atoms'])\n\n# Print the final result\nprint(final_df)",
    "observation": "KeyError: 'molecule_id'",
    "true_result": "[('TR000_1_2', 'TR000_1', 'TR000_2'), ('TR000_1_2', 'TR000_2', 'TR000_1'), ('TR000_2_3', 'TR000_2', 'TR000_3'), ('TR000_2_3', 'TR000_3', 'TR000_2'), ('TR000_2_4', 'TR000_2', 'TR000_4'), ('TR000_2_4', 'TR000_4', 'TR000_2'), ('TR000_2_5', 'TR000_2', 'TR000_5'), ('TR000_2_5', 'TR000_5', 'TR000_2'), ('TR001_1_12', 'TR001_1', 'TR001_12'), ('TR001_1_12', 'TR001_12', 'TR001_1'), ('TR001_1_2', 'TR001_1', 'TR001_2'), ('TR001_1_2', 'TR001_2', 'TR001_1'), ('TR001_1_7', 'TR001_1', 'TR001_7'), ('TR001_1_7', 'TR001_7', 'TR001_1'), ('TR001_1_8', 'TR001_1', 'TR001_8'), ('TR001_1_8', 'TR001_8', 'TR001_1'), ('TR001_2_14', 'TR001_14', 'TR001_2'), ('TR001_2_14', 'TR001_2', 'TR001_14'), ('TR001_2_4', 'TR001_2', 'TR001_4'), ('TR001_2_4', 'TR001_4', 'TR001_2'), ('TR001_2_6', 'TR001_2', 'TR001_6'), ('TR001_2_6', 'TR001_6', 'TR001_2'), ('TR001_3_13', 'TR001_13', 'TR001_3'), ('TR001_3_13', 'TR001_3', 'TR001_13'), ('TR001_3_4', 'TR001_3', 'TR001_4'), ('TR001_3_4', 'TR001_4', 'TR001_3'), ('TR001_3_5', 'TR001_3', 'TR001_5'), ('TR001_3_5', 'TR001_5', 'TR001_3'), ('TR001_3_6', 'TR001_3', 'TR001_6'), ('TR001_3_6', 'TR001_6', 'TR001_3'), ('TR001_4_10', 'TR001_10', 'TR001_4'), ('TR001_4_10', 'TR001_4', 'TR001_10'), ('TR001_4_19', 'TR001_19', 'TR001_4'), ('TR001_4_19', 'TR001_4', 'TR001_19'), ('TR001_5_15', 'TR001_15', 'TR001_5'), ('TR001_5_15', 'TR001_5', 'TR001_15'), ('TR001_5_7', 'TR001_5', 'TR001_7'), ('TR001_5_7', 'TR001_7', 'TR001_5'), ('TR001_5_8', 'TR001_5', 'TR001_8'), ('TR001_5_8', 'TR001_8', 'TR001_5'), ('TR001_6_17', 'TR001_17', 'TR001_6'), ('TR001_6_17', 'TR001_6', 'TR001_17'), ('TR001_6_9', 'TR001_6', 'TR001_9'), ('TR001_6_9', 'TR001_9', 'TR001_6'), ('TR001_7_16', 'TR001_16', 'TR001_7'), ('TR001_7_16', 'TR001_7', 'TR001_16'), ('TR001_7_9', 'TR001_7', 'TR001_9'), ('TR001_7_9', 'TR001_9', 'TR001_7'), ('TR001_8_10', 'TR001_10', 'TR001_8'), ('TR001_8_10', 'TR001_8', 'TR001_10'), ('TR001_8_18', 'TR001_18', 'TR001_8'), ('TR001_8_18', 'TR001_8', 'TR001_18'), ('TR001_9_20', 'TR001_20', 'TR001_9'), ('TR001_9_20', 'TR001_9', 'TR001_20'), ('TR001_9_21', 'TR001_21', 'TR001_9'), ('TR001_9_21', 'TR001_9', 'TR001_21'), ('TR002_1_3', 'TR002_1', 'TR002_3'), ('TR002_1_3', 'TR002_3', 'TR002_1'), ('TR002_1_6', 'TR002_1', 'TR002_6'), ('TR002_1_6', 'TR002_6', 'TR002_1'), ('TR002_2_4', 'TR002_2', 'TR002_4'), ('TR002_2_4', 'TR002_4', 'TR002_2'), ('TR002_2_5', 'TR002_2', 'TR002_5'), ('TR002_2_5', 'TR002_5', 'TR002_2'), ('TR003_1_2', 'TR003_1', 'TR003_2'), ('TR003_1_2', 'TR003_2', 'TR003_1'), ('TR003_1_6', 'TR003_1', 'TR003_6'), ('TR003_1_6', 'TR003_6', 'TR003_1'), ('TR003_1_7', 'TR003_1', 'TR003_7'), ('TR003_1_7', 'TR003_7', 'TR003_1'), ('TR003_1_8', 'TR003_1', 'TR003_8'), ('TR003_1_8', 'TR003_8', 'TR003_1'), ('TR003_2_3', 'TR003_2', 'TR003_3'), ('TR003_2_3', 'TR003_3', 'TR003_2'), ('TR003_2_4', 'TR003_2', 'TR003_4'), ('TR003_2_4', 'TR003_4', 'TR003_2'), ('TR003_2_5', 'TR003_2', 'TR003_5'), ('TR003_2_5', 'TR003_5', 'TR003_2'), ('TR004_10_12', 'TR004_10', 'TR004_12'), ('TR004_10_12', 'TR004_12', 'TR004_10'), ('TR004_10_21', 'TR004_10', 'TR004_21'), ('TR004_10_21', 'TR004_21', 'TR004_10'), ('TR004_12_22', 'TR004_12', 'TR004_22'), ('TR004_12_22', 'TR004_22', 'TR004_12'), ('TR004_12_23', 'TR004_12', 'TR004_23'), ('TR004_12_23', 'TR004_23', 'TR004_12'), ('TR004_12_24', 'TR004_12', 'TR004_24'), ('TR004_12_24', 'TR004_24', 'TR004_12'), ('TR004_1_2', 'TR004_1', 'TR004_2'), ('TR004_1_2', 'TR004_2', 'TR004_1'), ('TR004_2_3', 'TR004_2', 'TR004_3'), ('TR004_2_3', 'TR004_3', 'TR004_2'), ('TR004_2_4', 'TR004_2', 'TR004_4'), ('TR004_2_4', 'TR004_4', 'TR004_2'), ('TR004_2_5', 'TR004_2', 'TR004_5'), ('TR004_2_5', 'TR004_5', 'TR004_2'), ('TR004_3_8', 'TR004_3', 'TR004_8'), ('TR004_3_8', 'TR004_8', 'TR004_3'), ('TR004_4_7', 'TR004_4', 'TR004_7'), ('TR004_4_7', 'TR004_7', 'TR004_4'), ('TR004_5_6', 'TR004_5', 'TR004_6'), ('TR004_5_6', 'TR004_6', 'TR004_5'), ('TR004_6_13', 'TR004_13', 'TR004_6'), ('TR004_6_13', 'TR004_6', 'TR004_13'), ('TR004_6_14', 'TR004_14', 'TR004_6'), ('TR004_6_14', 'TR004_6', 'TR004_14'), ('TR004_6_15', 'TR004_15', 'TR004_6'), ('TR004_6_15', 'TR004_6', 'TR004_15'), ('TR004_7_16', 'TR004_16', 'TR004_7'), ('TR004_7_16', 'TR004_7', 'TR004_16'), ('TR004_7_17', 'TR004_17', 'TR004_7'), ('TR004_7_17', 'TR004_7', 'TR004_17'), ('TR004_7_18', 'TR004_18', 'TR004_7'), ('TR004_7_18', 'TR004_7', 'TR004_18'), ('TR004_8_19', 'TR004_19', 'TR004_8'), ('TR004_8_19', 'TR004_8', 'TR004_19'), ('TR004_8_20', 'TR004_20', 'TR004_8'), ('TR004_8_20', 'TR004_8', 'TR004_20'), ('TR004_8_9', 'TR004_8', 'TR004_9'), ('TR004_8_9', 'TR004_9', 'TR004_8'), ('TR004_9_10', 'TR004_10', 'TR004_9'), ('TR004_9_10', 'TR004_9', 'TR004_10'), ('TR005_10_20', 'TR005_10', 'TR005_20'), ('TR005_10_20', 'TR005_20', 'TR005_10'), ('TR005_11_21', 'TR005_11', 'TR005_21'), ('TR005_11_21', 'TR005_21', 'TR005_11'), ('TR005_12_13', 'TR005_12', 'TR005_13'), ('TR005_12_13', 'TR005_13', 'TR005_12'), ('TR005_12_15', 'TR005_12', 'TR005_15'), ('TR005_12_15', 'TR005_15', 'TR005_12'), ('TR005_13_22', 'TR005_13', 'TR005_22'), ('TR005_13_22', 'TR005_22', 'TR005_13'), ('TR005_14_23', 'TR005_14', 'TR005_23'), ('TR005_14_23', 'TR005_23', 'TR005_14'), ('TR005_15_24', 'TR005_15', 'TR005_24'), ('TR005_15_24', 'TR005_24', 'TR005_15'), ('TR005_15_25', 'TR005_15', 'TR005_25'), ('TR005_15_25', 'TR005_25', 'TR005_15'), ('TR005_16_26', 'TR005_16', 'TR005_26'), ('TR005_16_26', 'TR005_26', 'TR005_16'), ('TR005_16_27', 'TR005_16', 'TR005_27'), ('TR005_16_27', 'TR005_27', 'TR005_16'), ('TR005_1_17', 'TR005_1', 'TR005_17'), ('TR005_1_17', 'TR005_17', 'TR005_1'), ('TR005_1_6', 'TR005_1', 'TR005_6'), ('TR005_1_6', 'TR005_6', 'TR005_1'), ('TR005_28_29', 'TR005_28', 'TR005_29'), ('TR005_28_29', 'TR005_29', 'TR005_28'), ('TR005_2_16', 'TR005_16', 'TR005_2'), ('TR005_2_16', 'TR005_2', 'TR005_16'), ('TR005_2_3', 'TR005_2', 'TR005_3'), ('TR005_2_3', 'TR005_3', 'TR005_2'), ('TR005_3_18', 'TR005_18', 'TR005_3'), ('TR005_3_18', 'TR005_3', 'TR005_18'), ('TR005_4_5', 'TR005_4', 'TR005_5'), ('TR005_4_5', 'TR005_5', 'TR005_4'), ('TR005_4_7', 'TR005_4', 'TR005_7'), ('TR005_4_7', 'TR005_7', 'TR005_4'), ('TR005_5_10', 'TR005_10', 'TR005_5'), ('TR005_5_10', 'TR005_5', 'TR005_10'), ('TR005_6_19', 'TR005_19', 'TR005_6'), ('TR005_6_19', 'TR005_6', 'TR005_19'), ('TR005_8_11', 'TR005_11', 'TR005_8'), ('TR005_8_11', 'TR005_8', 'TR005_11'), ('TR005_8_9', 'TR005_8', 'TR005_9'), ('TR005_8_9', 'TR005_9', 'TR005_8'), ('TR005_9_14', 'TR005_14', 'TR005_9'), ('TR005_9_14', 'TR005_9', 'TR005_14'), ('TR006_11_12', 'TR006_11', 'TR006_12'), ('TR006_11_12', 'TR006_12', 'TR006_11'), ('TR006_12_22', 'TR006_12', 'TR006_22'), ('TR006_12_22', 'TR006_22', 'TR006_12'), ('TR006_1_2', 'TR006_1', 'TR006_2'), ('TR006_1_2', 'TR006_2', 'TR006_1'), ('TR006_1_3', 'TR006_1', 'TR006_3'), ('TR006_1_3', 'TR006_3', 'TR006_1'), ('TR006_1_4', 'TR006_1', 'TR006_4'), ('TR006_1_4', 'TR006_4', 'TR006_1'), ('TR006_23_24', 'TR006_23', 'TR006_24'), ('TR006_23_24', 'TR006_24', 'TR006_23'), ('TR006_23_25', 'TR006_23', 'TR006_25'), ('TR006_23_25', 'TR006_25', 'TR006_23'), ('TR006_23_26', 'TR006_23', 'TR006_26'), ('TR006_23_26', 'TR006_26', 'TR006_23'), ('TR006_24_30', 'TR006_24', 'TR006_30'), ('TR006_24_30', 'TR006_30', 'TR006_24'), ('TR006_24_36', 'TR006_24', 'TR006_36'), ('TR006_24_36', 'TR006_36', 'TR006_24'), ('TR006_24_37', 'TR006_24', 'TR006_37'), ('TR006_24_37', 'TR006_37', 'TR006_24'), ('TR006_25_33', 'TR006_25', 'TR006_33'), ('TR006_25_33', 'TR006_33', 'TR006_25'), ('TR006_25_38', 'TR006_25', 'TR006_38'), ('TR006_25_38', 'TR006_38', 'TR006_25'), ('TR006_25_39', 'TR006_25', 'TR006_39'), ('TR006_25_39', 'TR006_39', 'TR006_25'), ('TR006_26_27', 'TR006_26', 'TR006_27'), ('TR006_26_27', 'TR006_27', 'TR006_26'), ('TR006_26_40', 'TR006_26', 'TR006_40'), ('TR006_26_40', 'TR006_40', 'TR006_26'), ('TR006_26_41', 'TR006_26', 'TR006_41'), ('TR006_26_41', 'TR006_41', 'TR006_26'), ('TR006_27_28', 'TR006_27', 'TR006_28'), ('TR006_27_28', 'TR006_28', 'TR006_27'), ('TR006_2_14', 'TR006_14', 'TR006_2'), ('TR006_2_14', 'TR006_2', 'TR006_14'), ('TR006_2_15', 'TR006_15', 'TR006_2'), ('TR006_2_15', 'TR006_2', 'TR006_15'), ('TR006_2_8', 'TR006_2', 'TR006_8'), ('TR006_2_8', 'TR006_8', 'TR006_2'), ('TR006_30_31', 'TR006_30', 'TR006_31'), ('TR006_30_31', 'TR006_31', 'TR006_30'), ('TR006_33_34', 'TR006_33', 'TR006_34'), ('TR006_33_34', 'TR006_34', 'TR006_33'), ('TR006_3_11', 'TR006_11', 'TR006_3'), ('TR006_3_11', 'TR006_3', 'TR006_11'), ('TR006_3_16', 'TR006_16', 'TR006_3'), ('TR006_3_16', 'TR006_3', 'TR006_16'), ('TR006_3_17', 'TR006_17', 'TR006_3'), ('TR006_3_17', 'TR006_3', 'TR006_17'), ('TR006_45_46', 'TR006_45', 'TR006_46'), ('TR006_45_46', 'TR006_46', 'TR006_45'), ('TR006_45_47', 'TR006_45', 'TR006_47'), ('TR006_45_47', 'TR006_47', 'TR006_45'), ('TR006_4_18', 'TR006_18', 'TR006_4'), ('TR006_4_18', 'TR006_4', 'TR006_18'), ('TR006_4_19', 'TR006_19', 'TR006_4'), ('TR006_4_19', 'TR006_4', 'TR006_19'), ('TR006_4_5', 'TR006_4', 'TR006_5'), ('TR006_4_5', 'TR006_5', 'TR006_4'), ('TR006_5_6', 'TR006_5', 'TR006_6'), ('TR006_5_6', 'TR006_6', 'TR006_5'), ('TR006_6_20', 'TR006_20', 'TR006_6'), ('TR006_6_20', 'TR006_6', 'TR006_20'), ('TR006_8_9', 'TR006_8', 'TR006_9'), ('TR006_8_9', 'TR006_9', 'TR006_8'), ('TR006_9_21', 'TR006_21', 'TR006_9'), ('TR006_9_21', 'TR006_9', 'TR006_21'), ('TR007_10_11', 'TR007_10', 'TR007_11'), ('TR007_10_11', 'TR007_11', 'TR007_10'), ('TR007_11_13', 'TR007_11', 'TR007_13'), ('TR007_11_13', 'TR007_13', 'TR007_11'), ('TR007_11_26', 'TR007_11', 'TR007_26'), ('TR007_11_26', 'TR007_26', 'TR007_11'), ('TR007_12_27', 'TR007_12', 'TR007_27'), ('TR007_12_27', 'TR007_27', 'TR007_12'), ('TR007_13_14', 'TR007_13', 'TR007_14'), ('TR007_13_14', 'TR007_14', 'TR007_13'), ('TR007_14_28', 'TR007_14', 'TR007_28'), ('TR007_14_28', 'TR007_28', 'TR007_14'), ('TR007_14_29', 'TR007_14', 'TR007_29'), ('TR007_14_29', 'TR007_29', 'TR007_14'), ('TR007_15_30', 'TR007_15', 'TR007_30'), ('TR007_15_30', 'TR007_30', 'TR007_15'), ('TR007_1_16', 'TR007_1', 'TR007_16'), ('TR007_1_16', 'TR007_16', 'TR007_1'), ('TR007_1_6', 'TR007_1', 'TR007_6'), ('TR007_1_6', 'TR007_6', 'TR007_1'), ('TR007_2_17', 'TR007_17', 'TR007_2'), ('TR007_2_17', 'TR007_2', 'TR007_17'), ('TR007_2_3', 'TR007_2', 'TR007_3'), ('TR007_2_3', 'TR007_3', 'TR007_2'), ('TR007_3_18', 'TR007_18', 'TR007_3'), ('TR007_3_18', 'TR007_3', 'TR007_18'), ('TR007_4_19', 'TR007_19', 'TR007_4'), ('TR007_4_19', 'TR007_4', 'TR007_19'), ('TR007_4_5', 'TR007_4', 'TR007_5'), ('TR007_4_5', 'TR007_5', 'TR007_4'), ('TR007_5_7', 'TR007_5', 'TR007_7'), ('TR007_5_7', 'TR007_7', 'TR007_5'), ('TR007_6_20', 'TR007_20', 'TR007_6'), ('TR007_6_20', 'TR007_6', 'TR007_20'), ('TR007_7_21', 'TR007_21', 'TR007_7'), ('TR007_7_21', 'TR007_7', 'TR007_21'), ('TR007_7_22', 'TR007_22', 'TR007_7'), ('TR007_7_22', 'TR007_7', 'TR007_22'), ('TR007_7_8', 'TR007_7', 'TR007_8'), ('TR007_7_8', 'TR007_8', 'TR007_7'), ('TR007_8_23', 'TR007_23', 'TR007_8'), ('TR007_8_23', 'TR007_8', 'TR007_23'), ('TR007_8_24', 'TR007_24', 'TR007_8'), ('TR007_8_24', 'TR007_8', 'TR007_24'), ('TR007_8_9', 'TR007_8', 'TR007_9'), ('TR007_8_9', 'TR007_9', 'TR007_8'), ('TR007_9_10', 'TR007_10', 'TR007_9'), ('TR007_9_10', 'TR007_9', 'TR007_10'), ('TR007_9_25', 'TR007_25', 'TR007_9'), ('TR007_9_25', 'TR007_9', 'TR007_25'), ('TR008_14_16', 'TR008_14', 'TR008_16'), ('TR008_14_16', 'TR008_16', 'TR008_14'), ('TR008_14_17', 'TR008_14', 'TR008_17'), ('TR008_14_17', 'TR008_17', 'TR008_14'), ('TR008_1_12', 'TR008_1', 'TR008_12'), ('TR008_1_12', 'TR008_12', 'TR008_1'), ('TR008_1_4', 'TR008_1', 'TR008_4'), ('TR008_1_4', 'TR008_4', 'TR008_1'), ('TR008_2_13', 'TR008_13', 'TR008_2'), ('TR008_2_13', 'TR008_2', 'TR008_13'), ('TR008_2_3', 'TR008_2', 'TR008_3'), ('TR008_2_3', 'TR008_3', 'TR008_2'), ('TR008_3_14', 'TR008_14', 'TR008_3'), ('TR008_3_14', 'TR008_3', 'TR008_14'), ('TR008_3_15', 'TR008_15', 'TR008_3'), ('TR008_3_15', 'TR008_3', 'TR008_15'), ('TR008_3_6', 'TR008_3', 'TR008_6'), ('TR008_3_6', 'TR008_6', 'TR008_3'), ('TR008_4_14', 'TR008_14', 'TR008_4'), ('TR008_4_14', 'TR008_4', 'TR008_14'), ('TR008_4_18', 'TR008_18', 'TR008_4'), ('TR008_4_18', 'TR008_4', 'TR008_18'), ('TR008_4_5', 'TR008_4', 'TR008_5'), ('TR008_4_5', 'TR008_5', 'TR008_4'), ('TR008_5_19', 'TR008_19', 'TR008_5'), ('TR008_5_19', 'TR008_5', 'TR008_19'), ('TR008_5_6', 'TR008_5', 'TR008_6'), ('TR008_5_6', 'TR008_6', 'TR008_5'), ('TR008_5_9', 'TR008_5', 'TR008_9'), ('TR008_5_9', 'TR008_9', 'TR008_5'), ('TR008_6_20', 'TR008_20', 'TR008_6'), ('TR008_6_20', 'TR008_6', 'TR008_20'), ('TR008_6_7', 'TR008_6', 'TR008_7'), ('TR008_6_7', 'TR008_7', 'TR008_6'), ('TR008_7_21', 'TR008_21', 'TR008_7'), ('TR008_7_21', 'TR008_7', 'TR008_21'), ('TR008_7_22', 'TR008_22', 'TR008_7'), ('TR008_7_22', 'TR008_7', 'TR008_22'), ('TR008_7_8', 'TR008_7', 'TR008_8'), ('TR008_7_8', 'TR008_8', 'TR008_7'), ('TR008_8_11', 'TR008_11', 'TR008_8'), ('TR008_8_11', 'TR008_8', 'TR008_11'), ('TR008_8_23', 'TR008_23', 'TR008_8'), ('TR008_8_23', 'TR008_8', 'TR008_23'), ('TR008_8_9', 'TR008_8', 'TR008_9'), ('TR008_8_9', 'TR008_9', 'TR008_8'), ('TR008_9_10', 'TR008_10', 'TR008_9'), ('TR008_9_10', 'TR008_9', 'TR008_10'), ('TR008_9_24', 'TR008_24', 'TR008_9'), ('TR008_9_24', 'TR008_9', 'TR008_24'), ('TR009_10_12', 'TR009_10', 'TR009_12'), ('TR009_10_12', 'TR009_12', 'TR009_10'), ('TR009_10_16', 'TR009_10', 'TR009_16'), ('TR009_10_16', 'TR009_16', 'TR009_10'), ('TR009_12_17', 'TR009_12', 'TR009_17'), ('TR009_12_17', 'TR009_17', 'TR009_12'), ('TR009_13_21', 'TR009_13', 'TR009_21'), ('TR009_13_21', 'TR009_21', 'TR009_13'), ('TR009_15_22', 'TR009_15', 'TR009_22'), ('TR009_15_22', 'TR009_22', 'TR009_15'), ('TR009_1_2', 'TR009_1', 'TR009_2'), ('TR009_1_2', 'TR009_2', 'TR009_1'), ('TR009_2_3', 'TR009_2', 'TR009_3'), ('TR009_2_3', 'TR009_3', 'TR009_2'), ('TR009_2_4', 'TR009_2', 'TR009_4'), ('TR009_2_4', 'TR009_4', 'TR009_2'), ('TR009_2_5', 'TR009_2', 'TR009_5'), ('TR009_2_5', 'TR009_5', 'TR009_2'), ('TR009_3_18', 'TR009_18', 'TR009_3'), ('TR009_3_18', 'TR009_3', 'TR009_18'), ('TR009_3_6', 'TR009_3', 'TR009_6'), ('TR009_3_6', 'TR009_6', 'TR009_3'), ('TR009_3_7', 'TR009_3', 'TR009_7'), ('TR009_3_7', 'TR009_7', 'TR009_3'), ('TR009_4_10', 'TR009_10', 'TR009_4'), ('TR009_4_10', 'TR009_4', 'TR009_10'), ('TR009_4_8', 'TR009_4', 'TR009_8'), ('TR009_4_8', 'TR009_8', 'TR009_4'), ('TR009_4_9', 'TR009_4', 'TR009_9'), ('TR009_4_9', 'TR009_9', 'TR009_4'), ('TR009_5_11', 'TR009_11', 'TR009_5'), ('TR009_5_11', 'TR009_5', 'TR009_11'), ('TR009_6_10', 'TR009_10', 'TR009_6'), ('TR009_6_10', 'TR009_6', 'TR009_10'), ('TR009_6_13', 'TR009_13', 'TR009_6'), ('TR009_6_13', 'TR009_6', 'TR009_13'), ('TR009_6_19', 'TR009_19', 'TR009_6'), ('TR009_6_19', 'TR009_6', 'TR009_19'), ('TR009_7_14', 'TR009_14', 'TR009_7'), ('TR009_7_14', 'TR009_7', 'TR009_14'), ('TR009_7_15', 'TR009_15', 'TR009_7'), ('TR009_7_15', 'TR009_7', 'TR009_15'), ('TR009_7_20', 'TR009_20', 'TR009_7'), ('TR009_7_20', 'TR009_7', 'TR009_20'), ('TR010_11_16', 'TR010_11', 'TR010_16'), ('TR010_11_16', 'TR010_16', 'TR010_11'), ('TR010_11_17', 'TR010_11', 'TR010_17'), ('TR010_11_17', 'TR010_17', 'TR010_11'), ('TR010_11_18', 'TR010_11', 'TR010_18'), ('TR010_11_18', 'TR010_18', 'TR010_11'), ('TR010_1_2', 'TR010_1', 'TR010_2'), ('TR010_1_2', 'TR010_2', 'TR010_1'), ('TR010_1_3', 'TR010_1', 'TR010_3'), ('TR010_1_3', 'TR010_3', 'TR010_1'), ('TR010_1_4', 'TR010_1', 'TR010_4'), ('TR010_1_4', 'TR010_4', 'TR010_1'), ('TR010_1_5', 'TR010_1', 'TR010_5'), ('TR010_1_5', 'TR010_5', 'TR010_1'), ('TR010_2_6', 'TR010_2', 'TR010_6'), ('TR010_2_6', 'TR010_6', 'TR010_2'), ('TR010_3_7', 'TR010_3', 'TR010_7'), ('TR010_3_7', 'TR010_7', 'TR010_3'), ('TR010_4_11', 'TR010_11', 'TR010_4'), ('TR010_4_11', 'TR010_4', 'TR010_11'), ('TR010_6_12', 'TR010_12', 'TR010_6'), ('TR010_6_12', 'TR010_6', 'TR010_12'), ('TR010_7_13', 'TR010_13', 'TR010_7'), ('TR010_7_13', 'TR010_7', 'TR010_13'), ('TR010_7_14', 'TR010_14', 'TR010_7'), ('TR010_7_14', 'TR010_7', 'TR010_14'), ('TR010_7_15', 'TR010_15', 'TR010_7'), ('TR010_7_15', 'TR010_7', 'TR010_15'), ('TR010_8_10', 'TR010_10', 'TR010_8'), ('TR010_8_10', 'TR010_8', 'TR010_10'), ('TR010_8_9', 'TR010_8', 'TR010_9'), ('TR010_8_9', 'TR010_9', 'TR010_8'), ('TR011_10_16', 'TR011_10', 'TR011_16'), ('TR011_10_16', 'TR011_16', 'TR011_10'), ('TR011_11_13', 'TR011_11', 'TR011_13'), ('TR011_11_13', 'TR011_13', 'TR011_11'), ('TR011_12_20', 'TR011_12', 'TR011_20'), ('TR011_12_20', 'TR011_20', 'TR011_12'), ('TR011_18_33', 'TR011_18', 'TR011_33'), ('TR011_18_33', 'TR011_33', 'TR011_18'), ('TR011_1_2', 'TR011_1', 'TR011_2'), ('TR011_1_2', 'TR011_2', 'TR011_1'), ('TR011_1_21', 'TR011_1', 'TR011_21'), ('TR011_1_21', 'TR011_21', 'TR011_1'), ('TR011_1_22', 'TR011_1', 'TR011_22'), ('TR011_1_22', 'TR011_22', 'TR011_1'), ('TR011_1_4', 'TR011_1', 'TR011_4'), ('TR011_1_4', 'TR011_4', 'TR011_1'), ('TR011_2_23', 'TR011_2', 'TR011_23'), ('TR011_2_23', 'TR011_23', 'TR011_2'), ('TR011_2_24', 'TR011_2', 'TR011_24'), ('TR011_2_24', 'TR011_24', 'TR011_2'), ('TR011_2_3', 'TR011_2', 'TR011_3'), ('TR011_2_3', 'TR011_3', 'TR011_2'), ('TR011_34_35', 'TR011_34', 'TR011_35'), ('TR011_34_35', 'TR011_35', 'TR011_34'), ('TR011_34_36', 'TR011_34', 'TR011_36'), ('TR011_34_36', 'TR011_36', 'TR011_34'), ('TR011_37_38', 'TR011_37', 'TR011_38'), ('TR011_37_38', 'TR011_38', 'TR011_37'), ('TR011_37_39', 'TR011_37', 'TR011_39'), ('TR011_37_39', 'TR011_39', 'TR011_37'), ('TR011_3_5', 'TR011_3', 'TR011_5'), ('TR011_3_5', 'TR011_5', 'TR011_3'), ('TR011_3_6', 'TR011_3', 'TR011_6'), ('TR011_3_6', 'TR011_6', 'TR011_3'), ('TR011_40_41', 'TR011_40', 'TR011_41'), ('TR011_40_41', 'TR011_41', 'TR011_40'), ('TR011_40_42', 'TR011_40', 'TR011_42'), ('TR011_40_42', 'TR011_42', 'TR011_40'), ('TR011_4_7', 'TR011_4', 'TR011_7'), ('TR011_4_7', 'TR011_7', 'TR011_4'), ('TR011_4_8', 'TR011_4', 'TR011_8'), ('TR011_4_8', 'TR011_8', 'TR011_4'), ('TR011_5_10', 'TR011_10', 'TR011_5'), ('TR011_5_10', 'TR011_5', 'TR011_10'), ('TR011_5_25', 'TR011_25', 'TR011_5'), ('TR011_5_25', 'TR011_5', 'TR011_25'), ('TR011_5_26', 'TR011_26', 'TR011_5'), ('TR011_5_26', 'TR011_5', 'TR011_26'), ('TR011_6_27', 'TR011_27', 'TR011_6'), ('TR011_6_27', 'TR011_6', 'TR011_27'), ('TR011_6_28', 'TR011_28', 'TR011_6'), ('TR011_6_28', 'TR011_6', 'TR011_28'), ('TR011_6_9', 'TR011_6', 'TR011_9'), ('TR011_6_9', 'TR011_9', 'TR011_6'), ('TR011_7_12', 'TR011_12', 'TR011_7'), ('TR011_7_12', 'TR011_7', 'TR011_12'), ('TR011_7_29', 'TR011_29', 'TR011_7'), ('TR011_7_29', 'TR011_7', 'TR011_29'), ('TR011_7_30', 'TR011_30', 'TR011_7'), ('TR011_7_30', 'TR011_7', 'TR011_30'), ('TR011_8_11', 'TR011_11', 'TR011_8'), ('TR011_8_11', 'TR011_8', 'TR011_11'), ('TR011_8_31', 'TR011_31', 'TR011_8'), ('TR011_8_31', 'TR011_8', 'TR011_31'), ('TR011_8_32', 'TR011_32', 'TR011_8'), ('TR011_8_32', 'TR011_8', 'TR011_32'), ('TR011_9_18', 'TR011_18', 'TR011_9'), ('TR011_9_18', 'TR011_9', 'TR011_18'), ('TR012_12_13', 'TR012_12', 'TR012_13'), ('TR012_12_13', 'TR012_13', 'TR012_12'), ('TR012_12_16', 'TR012_12', 'TR012_16'), ('TR012_12_16', 'TR012_16', 'TR012_12'), ('TR012_12_19', 'TR012_12', 'TR012_19'), ('TR012_12_19', 'TR012_19', 'TR012_12'), ('TR012_12_20', 'TR012_12', 'TR012_20'), ('TR012_12_20', 'TR012_20', 'TR012_12'), ('TR012_13_14', 'TR012_13', 'TR012_14'), ('TR012_13_14', 'TR012_14', 'TR012_13'), ('TR012_13_18', 'TR012_13', 'TR012_18'), ('TR012_13_18', 'TR012_18', 'TR012_13'), ('TR012_13_21', 'TR012_13', 'TR012_21'), ('TR012_13_21', 'TR012_21', 'TR012_13'), ('TR012_14_15', 'TR012_14', 'TR012_15'), ('TR012_14_15', 'TR012_15', 'TR012_14'), ('TR012_14_22', 'TR012_14', 'TR012_22'), ('TR012_14_22', 'TR012_22', 'TR012_14'), ('TR012_15_17', 'TR012_15', 'TR012_17'), ('TR012_15_17', 'TR012_17', 'TR012_15'), ('TR012_15_23', 'TR012_15', 'TR012_23'), ('TR012_15_23', 'TR012_23', 'TR012_15'), ('TR012_16_17', 'TR012_16', 'TR012_17'), ('TR012_16_17', 'TR012_17', 'TR012_16'), ('TR012_16_19', 'TR012_16', 'TR012_19'), ('TR012_16_19', 'TR012_19', 'TR012_16'), ('TR012_16_24', 'TR012_16', 'TR012_24'), ('TR012_16_24', 'TR012_24', 'TR012_16'), ('TR012_17_18', 'TR012_17', 'TR012_18'), ('TR012_17_18', 'TR012_18', 'TR012_17'), ('TR012_17_25', 'TR012_17', 'TR012_25'), ('TR012_17_25', 'TR012_25', 'TR012_17'), ('TR012_18_26', 'TR012_18', 'TR012_26'), ('TR012_18_26', 'TR012_26', 'TR012_18'), ('TR012_18_27', 'TR012_18', 'TR012_27'), ('TR012_18_27', 'TR012_27', 'TR012_18'), ('TR012_1_14', 'TR012_1', 'TR012_14'), ('TR012_1_14', 'TR012_14', 'TR012_1'), ('TR012_1_2', 'TR012_1', 'TR012_2'), ('TR012_1_2', 'TR012_2', 'TR012_1'), ('TR012_1_5', 'TR012_1', 'TR012_5'), ('TR012_1_5', 'TR012_5', 'TR012_1'), ('TR012_1_6', 'TR012_1', 'TR012_6'), ('TR012_1_6', 'TR012_6', 'TR012_1'), ('TR012_2_10', 'TR012_10', 'TR012_2'), ('TR012_2_10', 'TR012_2', 'TR012_10'), ('TR012_3_11', 'TR012_11', 'TR012_3'), ('TR012_3_11', 'TR012_3', 'TR012_11'), ('TR012_3_4', 'TR012_3', 'TR012_4'), ('TR012_3_4', 'TR012_4', 'TR012_3'), ('TR012_4_15', 'TR012_15', 'TR012_4'), ('TR012_4_15', 'TR012_4', 'TR012_15'), ('TR012_4_5', 'TR012_4', 'TR012_5'), ('TR012_4_5', 'TR012_5', 'TR012_4'), ('TR012_4_7', 'TR012_4', 'TR012_7'), ('TR012_4_7', 'TR012_7', 'TR012_4'), ('TR012_5_8', 'TR012_5', 'TR012_8'), ('TR012_5_8', 'TR012_8', 'TR012_5'), ('TR012_5_9', 'TR012_5', 'TR012_9'), ('TR012_5_9', 'TR012_9', 'TR012_5'), ('TR013_1_3', 'TR013_1', 'TR013_3'), ('TR013_1_3', 'TR013_3', 'TR013_1'), ('TR013_1_5', 'TR013_1', 'TR013_5'), ('TR013_1_5', 'TR013_5', 'TR013_1'), ('TR013_2_4', 'TR013_2', 'TR013_4'), ('TR013_2_4', 'TR013_4', 'TR013_2'), ('TR013_2_6', 'TR013_2', 'TR013_6'), ('TR013_2_6', 'TR013_6', 'TR013_2'), ('TR014_1_12', 'TR014_1', 'TR014_12'), ('TR014_1_12', 'TR014_12', 'TR014_1'), ('TR014_1_13', 'TR014_1', 'TR014_13'), ('TR014_1_13', 'TR014_13', 'TR014_1'), ('TR014_1_2', 'TR014_1', 'TR014_2'), ('TR014_1_2', 'TR014_2', 'TR014_1'), ('TR014_1_6', 'TR014_1', 'TR014_6'), ('TR014_1_6', 'TR014_6', 'TR014_1'), ('TR014_2_11', 'TR014_11', 'TR014_2'), ('TR014_2_11', 'TR014_2', 'TR014_11'), ('TR014_2_14', 'TR014_14', 'TR014_2'), ('TR014_2_14', 'TR014_2', 'TR014_14'), ('TR014_2_3', 'TR014_2', 'TR014_3'), ('TR014_2_3', 'TR014_3', 'TR014_2'), ('TR014_3_15', 'TR014_15', 'TR014_3'), ('TR014_3_15', 'TR014_3', 'TR014_15'), ('TR014_3_4', 'TR014_3', 'TR014_4'), ('TR014_3_4', 'TR014_4', 'TR014_3'), ('TR014_3_8', 'TR014_3', 'TR014_8'), ('TR014_3_8', 'TR014_8', 'TR014_3'), ('TR014_4_10', 'TR014_10', 'TR014_4'), ('TR014_4_10', 'TR014_4', 'TR014_10'), ('TR014_4_16', 'TR014_16', 'TR014_4'), ('TR014_4_16', 'TR014_4', 'TR014_16'), ('TR014_4_5', 'TR014_4', 'TR014_5'), ('TR014_4_5', 'TR014_5', 'TR014_4'), ('TR014_5_17', 'TR014_17', 'TR014_5'), ('TR014_5_17', 'TR014_5', 'TR014_17'), ('TR014_5_6', 'TR014_5', 'TR014_6'), ('TR014_5_6', 'TR014_6', 'TR014_5'), ('TR014_5_9', 'TR014_5', 'TR014_9'), ('TR014_5_9', 'TR014_9', 'TR014_5'), ('TR014_6_18', 'TR014_18', 'TR014_6'), ('TR014_6_18', 'TR014_6', 'TR014_18'), ('TR014_6_7', 'TR014_6', 'TR014_7'), ('TR014_6_7', 'TR014_7', 'TR014_6'), ('TR015_10_12', 'TR015_10', 'TR015_12'), ('TR015_10_12', 'TR015_12', 'TR015_10'), ('TR015_10_13', 'TR015_10', 'TR015_13'), ('TR015_10_13', 'TR015_13', 'TR015_10'), ('TR015_10_17', 'TR015_10', 'TR015_17'), ('TR015_10_17', 'TR015_17', 'TR015_10'), ('TR015_12_14', 'TR015_12', 'TR015_14'), ('TR015_12_14', 'TR015_14', 'TR015_12'), ('TR015_12_18', 'TR015_12', 'TR015_18'), ('TR015_12_18', 'TR015_18', 'TR015_12'), ('TR015_13_15', 'TR015_13', 'TR015_15'), ('TR015_13_15', 'TR015_15', 'TR015_13'), ('TR015_13_19', 'TR015_13', 'TR015_19'), ('TR015_13_19', 'TR015_19', 'TR015_13'), ('TR015_13_20', 'TR015_13', 'TR015_20'), ('TR015_13_20', 'TR015_20', 'TR015_13'), ('TR015_14_16', 'TR015_14', 'TR015_16'), ('TR015_14_16', 'TR015_16', 'TR015_14'), ('TR015_14_21', 'TR015_14', 'TR015_21'), ('TR015_14_21', 'TR015_21', 'TR015_14'), ('TR015_14_22', 'TR015_14', 'TR015_22'), ('TR015_14_22', 'TR015_22', 'TR015_14'), ('TR015_15_23', 'TR015_15', 'TR015_23'), ('TR015_15_23', 'TR015_23', 'TR015_15'), ('TR015_16_24', 'TR015_16', 'TR015_24'), ('TR015_16_24', 'TR015_24', 'TR015_16'), ('TR015_1_2', 'TR015_1', 'TR015_2'), ('TR015_1_2', 'TR015_2', 'TR015_1'), ('TR015_1_3', 'TR015_1', 'TR015_3'), ('TR015_1_3', 'TR015_3', 'TR015_1'), ('TR015_2_4', 'TR015_2', 'TR015_4'), ('TR015_2_4', 'TR015_4', 'TR015_2'), ('TR015_2_5', 'TR015_2', 'TR015_5'), ('TR015_2_5', 'TR015_5', 'TR015_2'), ('TR015_2_6', 'TR015_2', 'TR015_6'), ('TR015_2_6', 'TR015_6', 'TR015_2'), ('TR015_3_7', 'TR015_3', 'TR015_7'), ('TR015_3_7', 'TR015_7', 'TR015_3'), ('TR015_3_8', 'TR015_3', 'TR015_8'), ('TR015_3_8', 'TR015_8', 'TR015_3'), ('TR015_7_10', 'TR015_10', 'TR015_7'), ('TR015_7_10', 'TR015_7', 'TR015_10'), ('TR015_8_12', 'TR015_12', 'TR015_8'), ('TR015_8_12', 'TR015_8', 'TR015_12'), ('TR016_10_26', 'TR016_10', 'TR016_26'), ('TR016_10_26', 'TR016_26', 'TR016_10'), ('TR016_10_27', 'TR016_10', 'TR016_27'), ('TR016_10_27', 'TR016_27', 'TR016_10'), ('TR016_10_28', 'TR016_10', 'TR016_28'), ('TR016_10_28', 'TR016_28', 'TR016_10'), ('TR016_11_12', 'TR016_11', 'TR016_12'), ('TR016_11_12', 'TR016_12', 'TR016_11'), ('TR016_12_13', 'TR016_12', 'TR016_13'), ('TR016_12_13', 'TR016_13', 'TR016_12'), ('TR016_12_14', 'TR016_12', 'TR016_14'), ('TR016_12_14', 'TR016_14', 'TR016_12'), ('TR016_12_16', 'TR016_12', 'TR016_16'), ('TR016_12_16', 'TR016_16', 'TR016_12'), ('TR016_14_15', 'TR016_14', 'TR016_15'), ('TR016_14_15', 'TR016_15', 'TR016_14'), ('TR016_15_29', 'TR016_15', 'TR016_29'), ('TR016_15_29', 'TR016_29', 'TR016_15'), ('TR016_15_30', 'TR016_15', 'TR016_30'), ('TR016_15_30', 'TR016_30', 'TR016_15'), ('TR016_15_31', 'TR016_15', 'TR016_31'), ('TR016_15_31', 'TR016_31', 'TR016_15'), ('TR016_16_17', 'TR016_16', 'TR016_17'), ('TR016_16_17', 'TR016_17', 'TR016_16'), ('TR016_17_32', 'TR016_17', 'TR016_32'), ('TR016_17_32', 'TR016_32', 'TR016_17'), ('TR016_17_33', 'TR016_17', 'TR016_33'), ('TR016_17_33', 'TR016_33', 'TR016_17'), ('TR016_17_34', 'TR016_17', 'TR016_34'), ('TR016_17_34', 'TR016_34', 'TR016_17'), ('TR016_18_35', 'TR016_18', 'TR016_35'), ('TR016_18_35', 'TR016_35', 'TR016_18'), ('TR016_18_36', 'TR016_18', 'TR016_36'), ('TR016_18_36', 'TR016_36', 'TR016_18'), ('TR016_18_37', 'TR016_18', 'TR016_37'), ('TR016_18_37', 'TR016_37', 'TR016_18'), ('TR016_1_19', 'TR016_1', 'TR016_19'), ('TR016_1_19', 'TR016_19', 'TR016_1'), ('TR016_1_2', 'TR016_1', 'TR016_2'), ('TR016_1_2', 'TR016_2', 'TR016_1'), ('TR016_1_20', 'TR016_1', 'TR016_20'), ('TR016_1_20', 'TR016_20', 'TR016_1'), ('TR016_1_21', 'TR016_1', 'TR016_21'), ('TR016_1_21', 'TR016_21', 'TR016_1'), ('TR016_2_22', 'TR016_2', 'TR016_22'), ('TR016_2_22', 'TR016_22', 'TR016_2'), ('TR016_2_23', 'TR016_2', 'TR016_23'), ('TR016_2_23', 'TR016_23', 'TR016_2'), ('TR016_2_3', 'TR016_2', 'TR016_3'), ('TR016_2_3', 'TR016_3', 'TR016_2'), ('TR016_3_4', 'TR016_3', 'TR016_4'), ('TR016_3_4', 'TR016_4', 'TR016_3'), ('TR016_3_5', 'TR016_3', 'TR016_5'), ('TR016_3_5', 'TR016_5', 'TR016_3'), ('TR016_4_18', 'TR016_18', 'TR016_4'), ('TR016_4_18', 'TR016_4', 'TR016_18'), ('TR016_4_24', 'TR016_24', 'TR016_4'), ('TR016_4_24', 'TR016_4', 'TR016_24'), ('TR016_4_25', 'TR016_25', 'TR016_4'), ('TR016_4_25', 'TR016_4', 'TR016_25'), ('TR016_5_7', 'TR016_5', 'TR016_7'), ('TR016_5_7', 'TR016_7', 'TR016_5'), ('TR016_7_8', 'TR016_7', 'TR016_8'), ('TR016_7_8', 'TR016_8', 'TR016_7'), ('TR016_9_10', 'TR016_10', 'TR016_9'), ('TR016_9_10', 'TR016_9', 'TR016_10'), ('TR016_9_11', 'TR016_11', 'TR016_9'), ('TR016_9_11', 'TR016_9', 'TR016_11'), ('TR017_13_25', 'TR017_13', 'TR017_25'), ('TR017_13_25', 'TR017_25', 'TR017_13'), ('TR017_14_19', 'TR017_14', 'TR017_19'), ('TR017_14_19', 'TR017_19', 'TR017_14'), ('TR017_15_19', 'TR017_15', 'TR017_19'), ('TR017_15_19', 'TR017_19', 'TR017_15'), ('TR017_16_17', 'TR017_16', 'TR017_17'), ('TR017_16_17', 'TR017_17', 'TR017_16'), ('TR017_16_18', 'TR017_16', 'TR017_18'), ('TR017_16_18', 'TR017_18', 'TR017_16'), ('TR017_16_26', 'TR017_16', 'TR017_26'), ('TR017_16_26', 'TR017_26', 'TR017_16'), ('TR017_17_27', 'TR017_17', 'TR017_27'), ('TR017_17_27', 'TR017_27', 'TR017_17'), ('TR017_18_19', 'TR017_18', 'TR017_19'), ('TR017_18_19', 'TR017_19', 'TR017_18'), ('TR017_1_12', 'TR017_1', 'TR017_12'), ('TR017_1_12', 'TR017_12', 'TR017_1'), ('TR017_1_13', 'TR017_1', 'TR017_13'), ('TR017_1_13', 'TR017_13', 'TR017_1'), ('TR017_1_18', 'TR017_1', 'TR017_18'), ('TR017_1_18', 'TR017_18', 'TR017_1'), ('TR017_1_2', 'TR017_1', 'TR017_2'), ('TR017_1_2', 'TR017_2', 'TR017_1'), ('TR017_2_11', 'TR017_11', 'TR017_2'), ('TR017_2_11', 'TR017_2', 'TR017_11'), ('TR017_2_20', 'TR017_2', 'TR017_20'), ('TR017_2_20', 'TR017_20', 'TR017_2'), ('TR017_2_3', 'TR017_2', 'TR017_3'), ('TR017_2_3', 'TR017_3', 'TR017_2'), ('TR017_3_10', 'TR017_10', 'TR017_3'), ('TR017_3_10', 'TR017_3', 'TR017_10'), ('TR017_3_17', 'TR017_17', 'TR017_3'), ('TR017_3_17', 'TR017_3', 'TR017_17'), ('TR017_3_19', 'TR017_19', 'TR017_3'), ('TR017_3_19', 'TR017_3', 'TR017_19'), ('TR017_4_13', 'TR017_13', 'TR017_4'), ('TR017_4_13', 'TR017_4', 'TR017_13'), ('TR017_4_17', 'TR017_17', 'TR017_4'), ('TR017_4_17', 'TR017_4', 'TR017_17'), ('TR017_4_21', 'TR017_21', 'TR017_4'), ('TR017_4_21', 'TR017_4', 'TR017_21'), ('TR017_4_5', 'TR017_4', 'TR017_5'), ('TR017_4_5', 'TR017_5', 'TR017_4'), ('TR017_5_22', 'TR017_22', 'TR017_5'), ('TR017_5_22', 'TR017_5', 'TR017_22'), ('TR017_5_6', 'TR017_5', 'TR017_6'), ('TR017_5_6', 'TR017_6', 'TR017_5'), ('TR017_5_8', 'TR017_5', 'TR017_8'), ('TR017_5_8', 'TR017_8', 'TR017_5'), ('TR017_6_23', 'TR017_23', 'TR017_6'), ('TR017_6_23', 'TR017_6', 'TR017_23'), ('TR017_6_7', 'TR017_6', 'TR017_7'), ('TR017_6_7', 'TR017_7', 'TR017_6'), ('TR017_6_8', 'TR017_6', 'TR017_8'), ('TR017_6_8', 'TR017_8', 'TR017_6'), ('TR017_7_13', 'TR017_13', 'TR017_7'), ('TR017_7_13', 'TR017_7', 'TR017_13'), ('TR017_7_16', 'TR017_16', 'TR017_7'), ('TR017_7_16', 'TR017_7', 'TR017_16'), ('TR017_7_24', 'TR017_24', 'TR017_7'), ('TR017_7_24', 'TR017_7', 'TR017_24'), ('TR017_9_18', 'TR017_18', 'TR017_9'), ('TR017_9_18', 'TR017_9', 'TR017_18'), ('TR018_10_11', 'TR018_10', 'TR018_11'), ('TR018_10_11', 'TR018_11', 'TR018_10'), ('TR018_10_28', 'TR018_10', 'TR018_28'), ('TR018_10_28', 'TR018_28', 'TR018_10'), ('TR018_10_29', 'TR018_10', 'TR018_29'), ('TR018_10_29', 'TR018_29', 'TR018_10'), ('TR018_11_12', 'TR018_11', 'TR018_12'), ('TR018_11_12', 'TR018_12', 'TR018_11'), ('TR018_11_30', 'TR018_11', 'TR018_30'), ('TR018_11_30', 'TR018_30', 'TR018_11'), ('TR018_11_31', 'TR018_11', 'TR018_31'), ('TR018_11_31', 'TR018_31', 'TR018_11'), ('TR018_12_13', 'TR018_12', 'TR018_13'), ('TR018_12_13', 'TR018_13', 'TR018_12'), ('TR018_12_32', 'TR018_12', 'TR018_32'), ('TR018_12_32', 'TR018_32', 'TR018_12'), ('TR018_12_33', 'TR018_12', 'TR018_33'), ('TR018_12_33', 'TR018_33', 'TR018_12'), ('TR018_13_14', 'TR018_13', 'TR018_14'), ('TR018_13_14', 'TR018_14', 'TR018_13'), ('TR018_14_15', 'TR018_14', 'TR018_15'), ('TR018_14_15', 'TR018_15', 'TR018_14'), ('TR018_15_34', 'TR018_15', 'TR018_34'), ('TR018_15_34', 'TR018_34', 'TR018_15'), ('TR018_15_35', 'TR018_15', 'TR018_35'), ('TR018_15_35', 'TR018_35', 'TR018_15'), ('TR018_15_36', 'TR018_15', 'TR018_36'), ('TR018_15_36', 'TR018_36', 'TR018_15'), ('TR018_1_2', 'TR018_1', 'TR018_2'), ('TR018_1_2', 'TR018_2', 'TR018_1'), ('TR018_1_3', 'TR018_1', 'TR018_3'), ('TR018_1_3', 'TR018_3', 'TR018_1'), ('TR018_2_4', 'TR018_2', 'TR018_4'), ('TR018_2_4', 'TR018_4', 'TR018_2'), ('TR018_37_38', 'TR018_37', 'TR018_38'), ('TR018_37_38', 'TR018_38', 'TR018_37'), ('TR018_3_18', 'TR018_18', 'TR018_3'), ('TR018_3_18', 'TR018_3', 'TR018_18'), ('TR018_3_19', 'TR018_19', 'TR018_3'), ('TR018_3_19', 'TR018_3', 'TR018_19'), ('TR018_3_7', 'TR018_3', 'TR018_7'), ('TR018_3_7', 'TR018_7', 'TR018_3'), ('TR018_4_20', 'TR018_20', 'TR018_4'), ('TR018_4_20', 'TR018_4', 'TR018_20'), ('TR018_4_21', 'TR018_21', 'TR018_4'), ('TR018_4_21', 'TR018_4', 'TR018_21'), ('TR018_4_22', 'TR018_22', 'TR018_4'), ('TR018_4_22', 'TR018_4', 'TR018_22'), ('TR018_7_23', 'TR018_23', 'TR018_7'), ('TR018_7_23', 'TR018_7', 'TR018_23'), ('TR018_7_24', 'TR018_24', 'TR018_7'), ('TR018_7_24', 'TR018_7', 'TR018_24'), ('TR018_7_8', 'TR018_7', 'TR018_8'), ('TR018_7_8', 'TR018_8', 'TR018_7'), ('TR018_8_25', 'TR018_25', 'TR018_8'), ('TR018_8_25', 'TR018_8', 'TR018_25'), ('TR018_8_26', 'TR018_26', 'TR018_8'), ('TR018_8_26', 'TR018_8', 'TR018_26'), ('TR018_8_9', 'TR018_8', 'TR018_9'), ('TR018_8_9', 'TR018_9', 'TR018_8'), ('TR018_9_10', 'TR018_10', 'TR018_9'), ('TR018_9_10', 'TR018_9', 'TR018_10'), ('TR018_9_27', 'TR018_27', 'TR018_9'), ('TR018_9_27', 'TR018_9', 'TR018_27'), ('TR019_10_27', 'TR019_10', 'TR019_27'), ('TR019_10_27', 'TR019_27', 'TR019_10'), ('TR019_11_12', 'TR019_11', 'TR019_12'), ('TR019_11_12', 'TR019_12', 'TR019_11'), ('TR019_11_28', 'TR019_11', 'TR019_28'), ('TR019_11_28', 'TR019_28', 'TR019_11'), ('TR019_12_13', 'TR019_12', 'TR019_13'), ('TR019_12_13', 'TR019_13', 'TR019_12'), ('TR019_13_14', 'TR019_13', 'TR019_14'), ('TR019_13_14', 'TR019_14', 'TR019_13'), ('TR019_13_29', 'TR019_13', 'TR019_29'), ('TR019_13_29', 'TR019_29', 'TR019_13'), ('TR019_13_30', 'TR019_13', 'TR019_30'), ('TR019_13_30', 'TR019_30', 'TR019_13'), ('TR019_14_15', 'TR019_14', 'TR019_15'), ('TR019_14_15', 'TR019_15', 'TR019_14'), ('TR019_14_31', 'TR019_14', 'TR019_31'), ('TR019_14_31', 'TR019_31', 'TR019_14'), ('TR019_15_16', 'TR019_15', 'TR019_16'), ('TR019_15_16', 'TR019_16', 'TR019_15'), ('TR019_15_32', 'TR019_15', 'TR019_32'), ('TR019_15_32', 'TR019_32', 'TR019_15'), ('TR019_16_33', 'TR019_16', 'TR019_33'), ('TR019_16_33', 'TR019_33', 'TR019_16'), ('TR019_16_34', 'TR019_16', 'TR019_34'), ('TR019_16_34', 'TR019_34', 'TR019_16'), ('TR019_16_35', 'TR019_16', 'TR019_35'), ('TR019_16_35', 'TR019_35', 'TR019_16'), ('TR019_1_2', 'TR019_1', 'TR019_2'), ('TR019_1_2', 'TR019_2', 'TR019_1'), ('TR019_1_4', 'TR019_1', 'TR019_4'), ('TR019_1_4', 'TR019_4', 'TR019_1'), ('TR019_2_17', 'TR019_17', 'TR019_2'), ('TR019_2_17', 'TR019_2', 'TR019_17'), ('TR019_2_5', 'TR019_2', 'TR019_5'), ('TR019_2_5', 'TR019_5', 'TR019_2'), ('TR019_36_37', 'TR019_36', 'TR019_37'), ('TR019_36_37', 'TR019_37', 'TR019_36'), ('TR019_4_7', 'TR019_4', 'TR019_7'), ('TR019_4_7', 'TR019_7', 'TR019_4'), ('TR019_5_18', 'TR019_18', 'TR019_5'), ('TR019_5_18', 'TR019_5', 'TR019_18'), ('TR019_5_8', 'TR019_5', 'TR019_8'), ('TR019_5_8', 'TR019_8', 'TR019_5'), ('TR019_5_9', 'TR019_5', 'TR019_9'), ('TR019_5_9', 'TR019_9', 'TR019_5'), ('TR019_6_10', 'TR019_10', 'TR019_6'), ('TR019_6_10', 'TR019_6', 'TR019_10'), ('TR019_6_19', 'TR019_19', 'TR019_6'), ('TR019_6_19', 'TR019_6', 'TR019_19'), ('TR019_7_20', 'TR019_20', 'TR019_7'), ('TR019_7_20', 'TR019_7', 'TR019_20'), ('TR019_8_21', 'TR019_21', 'TR019_8'), ('TR019_8_21', 'TR019_8', 'TR019_21'), ('TR019_8_22', 'TR019_22', 'TR019_8'), ('TR019_8_22', 'TR019_8', 'TR019_22'), ('TR019_8_23', 'TR019_23', 'TR019_8'), ('TR019_8_23', 'TR019_8', 'TR019_23'), ('TR019_9_24', 'TR019_24', 'TR019_9'), ('TR019_9_24', 'TR019_9', 'TR019_24'), ('TR019_9_25', 'TR019_25', 'TR019_9'), ('TR019_9_25', 'TR019_9', 'TR019_25'), ('TR019_9_26', 'TR019_26', 'TR019_9'), ('TR019_9_26', 'TR019_9', 'TR019_26'), ('TR020_10_22', 'TR020_10', 'TR020_22'), ('TR020_10_22', 'TR020_22', 'TR020_10'), ('TR020_11_14', 'TR020_11', 'TR020_14'), ('TR020_11_14', 'TR020_14', 'TR020_11'), ('TR020_11_23', 'TR020_11', 'TR020_23'), ('TR020_11_23', 'TR020_23', 'TR020_11'), ('TR020_12_24', 'TR020_12', 'TR020_24'), ('TR020_12_24', 'TR020_24', 'TR020_12'), ('TR020_13_15', 'TR020_13', 'TR020_15'), ('TR020_13_15', 'TR020_15', 'TR020_13'), ('TR020_13_25', 'TR020_13', 'TR020_25'), ('TR020_13_25', 'TR020_25', 'TR020_13'), ('TR020_14_16', 'TR020_14', 'TR020_16'), ('TR020_14_16', 'TR020_16', 'TR020_14'), ('TR020_15_17', 'TR020_15', 'TR020_17'), ('TR020_15_17', 'TR020_17', 'TR020_15'), ('TR020_16_26', 'TR020_16', 'TR020_26'), ('TR020_16_26', 'TR020_26', 'TR020_16'), ('TR020_16_27', 'TR020_16', 'TR020_27'), ('TR020_16_27', 'TR020_27', 'TR020_16'), ('TR020_17_28', 'TR020_17', 'TR020_28'), ('TR020_17_28', 'TR020_28', 'TR020_17'), ('TR020_17_29', 'TR020_17', 'TR020_29'), ('TR020_17_29', 'TR020_29', 'TR020_17'), ('TR020_1_4', 'TR020_1', 'TR020_4'), ('TR020_1_4', 'TR020_4', 'TR020_1'), ('TR020_1_5', 'TR020_1', 'TR020_5'), ('TR020_1_5', 'TR020_5', 'TR020_1'), ('TR020_4_7', 'TR020_4', 'TR020_7'), ('TR020_4_7', 'TR020_7', 'TR020_4'), ('TR020_5_9', 'TR020_5', 'TR020_9'), ('TR020_5_9', 'TR020_9', 'TR020_5'), ('TR020_6_10', 'TR020_10', 'TR020_6'), ('TR020_6_10', 'TR020_6', 'TR020_10'), ('TR020_6_18', 'TR020_18', 'TR020_6'), ('TR020_6_18', 'TR020_6', 'TR020_18'), ('TR020_7_19', 'TR020_19', 'TR020_7'), ('TR020_7_19', 'TR020_7', 'TR020_19'), ('TR020_8_12', 'TR020_12', 'TR020_8'), ('TR020_8_12', 'TR020_8', 'TR020_12'), ('TR020_8_20', 'TR020_20', 'TR020_8'), ('TR020_8_20', 'TR020_8', 'TR020_20'), ('TR020_9_21', 'TR020_21', 'TR020_9'), ('TR020_9_21', 'TR020_9', 'TR020_21'), ('TR021_10_12', 'TR021_10', 'TR021_12'), ('TR021_10_12', 'TR021_12', 'TR021_10'), ('TR021_10_23', 'TR021_10', 'TR021_23'), ('TR021_10_23', 'TR021_23', 'TR021_10'), ('TR021_10_24', 'TR021_10', 'TR021_24'), ('TR021_10_24', 'TR021_24', 'TR021_10'), ('TR021_11_12', 'TR021_11', 'TR021_12'), ('TR021_11_12', 'TR021_12', 'TR021_11'), ('TR021_11_25', 'TR021_11', 'TR021_25'), ('TR021_11_25', 'TR021_25', 'TR021_11'), ('TR021_12_26', 'TR021_12', 'TR021_26'), ('TR021_12_26', 'TR021_26', 'TR021_12'), ('TR021_1_11', 'TR021_1', 'TR021_11'), ('TR021_1_11', 'TR021_11', 'TR021_1'), ('TR021_1_13', 'TR021_1', 'TR021_13'), ('TR021_1_13', 'TR021_13', 'TR021_1'), ('TR021_1_2', 'TR021_1', 'TR021_2'), ('TR021_1_2', 'TR021_2', 'TR021_1'), ('TR021_1_6', 'TR021_1', 'TR021_6'), ('TR021_1_6', 'TR021_6', 'TR021_1'), ('TR021_27_28', 'TR021_27', 'TR021_28'), ('TR021_27_28', 'TR021_28', 'TR021_27'), ('TR021_27_32', 'TR021_27', 'TR021_32'), ('TR021_27_32', 'TR021_32', 'TR021_27'), ('TR021_27_37', 'TR021_27', 'TR021_37'), ('TR021_27_37', 'TR021_37', 'TR021_27'), ('TR021_27_40', 'TR021_27', 'TR021_40'), ('TR021_27_40', 'TR021_40', 'TR021_27'), ('TR021_28_44', 'TR021_28', 'TR021_44'), ('TR021_28_44', 'TR021_44', 'TR021_28'), ('TR021_29_31', 'TR021_29', 'TR021_31'), ('TR021_29_31', 'TR021_31', 'TR021_29'), ('TR021_29_45', 'TR021_29', 'TR021_45'), ('TR021_29_45', 'TR021_45', 'TR021_29'), ('TR021_2_17', 'TR021_17', 'TR021_2'), ('TR021_2_17', 'TR021_2', 'TR021_17'), ('TR021_30_31', 'TR021_30', 'TR021_31'), ('TR021_30_31', 'TR021_31', 'TR021_30'), ('TR021_30_33', 'TR021_30', 'TR021_33'), ('TR021_30_33', 'TR021_33', 'TR021_30'), ('TR021_30_37', 'TR021_30', 'TR021_37'), ('TR021_30_37', 'TR021_37', 'TR021_30'), ('TR021_30_46', 'TR021_30', 'TR021_46'), ('TR021_30_46', 'TR021_46', 'TR021_30'), ('TR021_31_32', 'TR021_31', 'TR021_32'), ('TR021_31_32', 'TR021_32', 'TR021_31'), ('TR021_31_41', 'TR021_31', 'TR021_41'), ('TR021_31_41', 'TR021_41', 'TR021_31'), ('TR021_32_42', 'TR021_32', 'TR021_42'), ('TR021_32_42', 'TR021_42', 'TR021_32'), ('TR021_32_43', 'TR021_32', 'TR021_43'), ('TR021_32_43', 'TR021_43', 'TR021_32'), ('TR021_33_34', 'TR021_33', 'TR021_34'), ('TR021_33_34', 'TR021_34', 'TR021_33'), ('TR021_33_36', 'TR021_33', 'TR021_36'), ('TR021_33_36', 'TR021_36', 'TR021_33'), ('TR021_33_47', 'TR021_33', 'TR021_47'), ('TR021_33_47', 'TR021_47', 'TR021_33'), ('TR021_34_35', 'TR021_34', 'TR021_35'), ('TR021_34_35', 'TR021_35', 'TR021_34'), ('TR021_34_39', 'TR021_34', 'TR021_39'), ('TR021_34_39', 'TR021_39', 'TR021_34'), ('TR021_34_48', 'TR021_34', 'TR021_48'), ('TR021_34_48', 'TR021_48', 'TR021_34'), ('TR021_35_38', 'TR021_35', 'TR021_38'), ('TR021_35_38', 'TR021_38', 'TR021_35'), ('TR021_35_39', 'TR021_35', 'TR021_39'), ('TR021_35_39', 'TR021_39', 'TR021_35'), ('TR021_35_49', 'TR021_35', 'TR021_49'), ('TR021_35_49', 'TR021_49', 'TR021_35'), ('TR021_36_38', 'TR021_36', 'TR021_38'), ('TR021_36_38', 'TR021_38', 'TR021_36'), ('TR021_36_50', 'TR021_36', 'TR021_50'), ('TR021_36_50', 'TR021_50', 'TR021_36'), ('TR021_36_51', 'TR021_36', 'TR021_51'), ('TR021_36_51', 'TR021_51', 'TR021_36'), ('TR021_37_38', 'TR021_37', 'TR021_38'), ('TR021_37_38', 'TR021_38', 'TR021_37'), ('TR021_37_52', 'TR021_37', 'TR021_52'), ('TR021_37_52', 'TR021_52', 'TR021_37'), ('TR021_38_53', 'TR021_38', 'TR021_53'), ('TR021_38_53', 'TR021_53', 'TR021_38'), ('TR021_3_18', 'TR021_18', 'TR021_3'), ('TR021_3_18', 'TR021_3', 'TR021_18'), ('TR021_3_5', 'TR021_3', 'TR021_5'), ('TR021_3_5', 'TR021_5', 'TR021_3'), ('TR021_4_11', 'TR021_11', 'TR021_4'), ('TR021_4_11', 'TR021_4', 'TR021_11'), ('TR021_4_19', 'TR021_19', 'TR021_4'), ('TR021_4_19', 'TR021_4', 'TR021_19'), ('TR021_4_5', 'TR021_4', 'TR021_5'), ('TR021_4_5', 'TR021_5', 'TR021_4'), ('TR021_4_7', 'TR021_4', 'TR021_7'), ('TR021_4_7', 'TR021_7', 'TR021_4'), ('TR021_5_14', 'TR021_14', 'TR021_5'), ('TR021_5_14', 'TR021_5', 'TR021_14'), ('TR021_5_6', 'TR021_5', 'TR021_6'), ('TR021_5_6', 'TR021_6', 'TR021_5'), ('TR021_6_15', 'TR021_15', 'TR021_6'), ('TR021_6_15', 'TR021_6', 'TR021_15'), ('TR021_6_16', 'TR021_16', 'TR021_6'), ('TR021_6_16', 'TR021_6', 'TR021_16'), ('TR021_7_10', 'TR021_10', 'TR021_7'), ('TR021_7_10', 'TR021_7', 'TR021_10'), ('TR021_7_20', 'TR021_20', 'TR021_7'), ('TR021_7_20', 'TR021_7', 'TR021_20'), ('TR021_7_8', 'TR021_7', 'TR021_8'), ('TR021_7_8', 'TR021_8', 'TR021_7'), ('TR021_8_21', 'TR021_21', 'TR021_8'), ('TR021_8_21', 'TR021_8', 'TR021_21'), ('TR021_9_12', 'TR021_12', 'TR021_9'), ('TR021_9_12', 'TR021_9', 'TR021_12'), ('TR021_9_22', 'TR021_22', 'TR021_9'), ('TR021_9_22', 'TR021_9', 'TR021_22'), ('TR022_10_12', 'TR022_10', 'TR022_12'), ('TR022_10_12', 'TR022_12', 'TR022_10'), ('TR022_10_24', 'TR022_10', 'TR022_24'), ('TR022_10_24', 'TR022_24', 'TR022_10'), ('TR022_10_25', 'TR022_10', 'TR022_25'), ('TR022_10_25', 'TR022_25', 'TR022_10'), ('TR022_11_12', 'TR022_11', 'TR022_12'), ('TR022_11_12', 'TR022_12', 'TR022_11'), ('TR022_11_26', 'TR022_11', 'TR022_26'), ('TR022_11_26', 'TR022_26', 'TR022_11'), ('TR022_12_27', 'TR022_12', 'TR022_27'), ('TR022_12_27', 'TR022_27', 'TR022_12'), ('TR022_1_11', 'TR022_1', 'TR022_11'), ('TR022_1_11', 'TR022_11', 'TR022_1'), ('TR022_1_14', 'TR022_1', 'TR022_14'), ('TR022_1_14', 'TR022_14', 'TR022_1'), ('TR022_1_2', 'TR022_1', 'TR022_2'), ('TR022_1_2', 'TR022_2', 'TR022_1'), ('TR022_1_6', 'TR022_1', 'TR022_6'), ('TR022_1_6', 'TR022_6', 'TR022_1'), ('TR022_2_18', 'TR022_18', 'TR022_2'), ('TR022_2_18', 'TR022_2', 'TR022_18'), ('TR022_3_19', 'TR022_19', 'TR022_3'), ('TR022_3_19', 'TR022_3', 'TR022_19'), ('TR022_3_5', 'TR022_3', 'TR022_5'), ('TR022_3_5', 'TR022_5', 'TR022_3'), ('TR022_4_11', 'TR022_11', 'TR022_4'), ('TR022_4_11', 'TR022_4', 'TR022_11'), ('TR022_4_20', 'TR022_20', 'TR022_4'), ('TR022_4_20', 'TR022_4', 'TR022_20'), ('TR022_4_5', 'TR022_4', 'TR022_5'), ('TR022_4_5', 'TR022_5', 'TR022_4'), ('TR022_4_7', 'TR022_4', 'TR022_7'), ('TR022_4_7', 'TR022_7', 'TR022_4'), ('TR022_5_15', 'TR022_15', 'TR022_5'), ('TR022_5_15', 'TR022_5', 'TR022_15'), ('TR022_5_6', 'TR022_5', 'TR022_6'), ('TR022_5_6', 'TR022_6', 'TR022_5'), ('TR022_6_16', 'TR022_16', 'TR022_6'), ('TR022_6_16', 'TR022_6', 'TR022_16'), ('TR022_6_17', 'TR022_17', 'TR022_6'), ('TR022_6_17', 'TR022_6', 'TR022_17'), ('TR022_7_10', 'TR022_10', 'TR022_7'), ('TR022_7_10', 'TR022_7', 'TR022_10'), ('TR022_7_21', 'TR022_21', 'TR022_7'), ('TR022_7_21', 'TR022_7', 'TR022_21'), ('TR022_7_8', 'TR022_7', 'TR022_8'), ('TR022_7_8', 'TR022_8', 'TR022_7'), ('TR022_8_13', 'TR022_13', 'TR022_8'), ('TR022_8_13', 'TR022_8', 'TR022_13'), ('TR022_8_22', 'TR022_22', 'TR022_8'), ('TR022_8_22', 'TR022_8', 'TR022_22'), ('TR022_8_9', 'TR022_8', 'TR022_9'), ('TR022_8_9', 'TR022_9', 'TR022_8'), ('TR022_9_12', 'TR022_12', 'TR022_9'), ('TR022_9_12', 'TR022_9', 'TR022_12'), ('TR022_9_13', 'TR022_13', 'TR022_9'), ('TR022_9_13', 'TR022_9', 'TR022_13'), ('TR022_9_23', 'TR022_23', 'TR022_9'), ('TR022_9_23', 'TR022_9', 'TR022_23'), ('TR023_10_15', 'TR023_10', 'TR023_15'), ('TR023_10_15', 'TR023_15', 'TR023_10'), ('TR023_10_16', 'TR023_10', 'TR023_16'), ('TR023_10_16', 'TR023_16', 'TR023_10'), ('TR023_11_13', 'TR023_11', 'TR023_13'), ('TR023_11_13', 'TR023_13', 'TR023_11'), ('TR023_1_3', 'TR023_1', 'TR023_3'), ('TR023_1_3', 'TR023_3', 'TR023_1'), ('TR023_1_4', 'TR023_1', 'TR023_4'), ('TR023_1_4', 'TR023_4', 'TR023_1'), ('TR023_3_14', 'TR023_14', 'TR023_3'), ('TR023_3_14', 'TR023_3', 'TR023_14'), ('TR023_4_6', 'TR023_4', 'TR023_6'), ('TR023_4_6', 'TR023_6', 'TR023_4'), ('TR023_5_7', 'TR023_5', 'TR023_7'), ('TR023_5_7', 'TR023_7', 'TR023_5'), ('TR023_5_8', 'TR023_5', 'TR023_8'), ('TR023_5_8', 'TR023_8', 'TR023_5'), ('TR023_8_10', 'TR023_10', 'TR023_8'), ('TR023_8_10', 'TR023_8', 'TR023_10'), ('TR023_9_11', 'TR023_11', 'TR023_9'), ('TR023_9_11', 'TR023_9', 'TR023_11'), ('TR023_9_12', 'TR023_12', 'TR023_9'), ('TR023_9_12', 'TR023_9', 'TR023_12'), ('TR024_10_16', 'TR024_10', 'TR024_16'), ('TR024_10_16', 'TR024_16', 'TR024_10'), ('TR024_12_17', 'TR024_12', 'TR024_17'), ('TR024_12_17', 'TR024_17', 'TR024_12'), ('TR024_14_18', 'TR024_14', 'TR024_18'), ('TR024_14_18', 'TR024_18', 'TR024_14'), ('TR024_14_23', 'TR024_14', 'TR024_23'), ('TR024_14_23', 'TR024_23', 'TR024_14'), ('TR024_14_24', 'TR024_14', 'TR024_24'), ('TR024_14_24', 'TR024_24', 'TR024_14'), ('TR024_15_25', 'TR024_15', 'TR024_25'), ('TR024_15_25', 'TR024_25', 'TR024_15'), ('TR024_15_26', 'TR024_15', 'TR024_26'), ('TR024_15_26', 'TR024_26', 'TR024_15'), ('TR024_15_27', 'TR024_15', 'TR024_27'), ('TR024_15_27', 'TR024_27', 'TR024_15'), ('TR024_16_28', 'TR024_16', 'TR024_28'), ('TR024_16_28', 'TR024_28', 'TR024_16'), ('TR024_16_29', 'TR024_16', 'TR024_29'), ('TR024_16_29', 'TR024_29', 'TR024_16'), ('TR024_16_30', 'TR024_16', 'TR024_30'), ('TR024_16_30', 'TR024_30', 'TR024_16'), ('TR024_17_19', 'TR024_17', 'TR024_19'), ('TR024_17_19', 'TR024_19', 'TR024_17'), ('TR024_17_31', 'TR024_17', 'TR024_31'), ('TR024_17_31', 'TR024_31', 'TR024_17'), ('TR024_17_32', 'TR024_17', 'TR024_32'), ('TR024_17_32', 'TR024_32', 'TR024_17'), ('TR024_18_33', 'TR024_18', 'TR024_33'), ('TR024_18_33', 'TR024_33', 'TR024_18'), ('TR024_18_34', 'TR024_18', 'TR024_34'), ('TR024_18_34', 'TR024_34', 'TR024_18'), ('TR024_18_35', 'TR024_18', 'TR024_35'), ('TR024_18_35', 'TR024_35', 'TR024_18'), ('TR024_19_36', 'TR024_19', 'TR024_36'), ('TR024_19_36', 'TR024_36', 'TR024_19'), ('TR024_19_37', 'TR024_19', 'TR024_37'), ('TR024_19_37', 'TR024_37', 'TR024_19'), ('TR024_19_38', 'TR024_19', 'TR024_38'), ('TR024_19_38', 'TR024_38', 'TR024_19'), ('TR024_1_2', 'TR024_1', 'TR024_2'), ('TR024_1_2', 'TR024_2', 'TR024_1'), ('TR024_1_20', 'TR024_1', 'TR024_20'), ('TR024_1_20', 'TR024_20', 'TR024_1'), ('TR024_1_3', 'TR024_1', 'TR024_3'), ('TR024_1_3', 'TR024_3', 'TR024_1'), ('TR024_1_4', 'TR024_1', 'TR024_4'), ('TR024_1_4', 'TR024_4', 'TR024_1'), ('TR024_2_5', 'TR024_2', 'TR024_5'), ('TR024_2_5', 'TR024_5', 'TR024_2'), ('TR024_3_21', 'TR024_21', 'TR024_3'), ('TR024_3_21', 'TR024_3', 'TR024_21'), ('TR024_3_22', 'TR024_22', 'TR024_3'), ('TR024_3_22', 'TR024_3', 'TR024_22'), ('TR024_3_6', 'TR024_3', 'TR024_6'), ('TR024_3_6', 'TR024_6', 'TR024_3'), ('TR024_4_7', 'TR024_4', 'TR024_7'), ('TR024_4_7', 'TR024_7', 'TR024_4'), ('TR024_5_10', 'TR024_10', 'TR024_5'), ('TR024_5_10', 'TR024_5', 'TR024_10'), ('TR024_5_11', 'TR024_11', 'TR024_5'), ('TR024_5_11', 'TR024_5', 'TR024_11'), ('TR024_5_9', 'TR024_5', 'TR024_9'), ('TR024_5_9', 'TR024_9', 'TR024_5'), ('TR024_6_12', 'TR024_12', 'TR024_6'), ('TR024_6_12', 'TR024_6', 'TR024_12'), ('TR024_7_14', 'TR024_14', 'TR024_7'), ('TR024_7_14', 'TR024_7', 'TR024_14'), ('TR024_9_15', 'TR024_15', 'TR024_9'), ('TR024_9_15', 'TR024_9', 'TR024_15'), ('TR025_10_16', 'TR025_10', 'TR025_16'), ('TR025_10_16', 'TR025_16', 'TR025_10'), ('TR025_10_17', 'TR025_10', 'TR025_17'), ('TR025_10_17', 'TR025_17', 'TR025_10'), ('TR025_1_13', 'TR025_1', 'TR025_13'), ('TR025_1_13', 'TR025_13', 'TR025_1'), ('TR025_1_6', 'TR025_1', 'TR025_6'), ('TR025_1_6', 'TR025_6', 'TR025_1'), ('TR025_2_12', 'TR025_12', 'TR025_2'), ('TR025_2_12', 'TR025_2', 'TR025_12'), ('TR025_2_3', 'TR025_2', 'TR025_3'), ('TR025_2_3', 'TR025_3', 'TR025_2'), ('TR025_3_14', 'TR025_14', 'TR025_3'), ('TR025_3_14', 'TR025_3', 'TR025_14'), ('TR025_4_10', 'TR025_10', 'TR025_4'), ('TR025_4_10', 'TR025_4', 'TR025_10'), ('TR025_4_5', 'TR025_4', 'TR025_5'), ('TR025_4_5', 'TR025_5', 'TR025_4'), ('TR025_5_11', 'TR025_11', 'TR025_5'), ('TR025_5_11', 'TR025_5', 'TR025_11'), ('TR025_6_7', 'TR025_6', 'TR025_7'), ('TR025_6_7', 'TR025_7', 'TR025_6'), ('TR025_7_9', 'TR025_7', 'TR025_9'), ('TR025_7_9', 'TR025_9', 'TR025_7'), ('TR025_9_15', 'TR025_15', 'TR025_9'), ('TR025_9_15', 'TR025_9', 'TR025_15'), ('TR026_11_12', 'TR026_11', 'TR026_12'), ('TR026_11_12', 'TR026_12', 'TR026_11'), ('TR026_11_22', 'TR026_11', 'TR026_22'), ('TR026_11_22', 'TR026_22', 'TR026_11'), ('TR026_12_23', 'TR026_12', 'TR026_23'), ('TR026_12_23', 'TR026_23', 'TR026_12'), ('TR026_13_14', 'TR026_13', 'TR026_14'), ('TR026_13_14', 'TR026_14', 'TR026_13'), ('TR026_13_16', 'TR026_13', 'TR026_16'), ('TR026_13_16', 'TR026_16', 'TR026_13'), ('TR026_14_24', 'TR026_14', 'TR026_24'), ('TR026_14_24', 'TR026_24', 'TR026_14'), ('TR026_15_25', 'TR026_15', 'TR026_25'), ('TR026_15_25', 'TR026_25', 'TR026_15'), ('TR026_16_18', 'TR026_16', 'TR026_18'), ('TR026_16_18', 'TR026_18', 'TR026_16'), ('TR026_1_19', 'TR026_1', 'TR026_19'), ('TR026_1_19', 'TR026_19', 'TR026_1'), ('TR026_1_6', 'TR026_1', 'TR026_6'), ('TR026_1_6', 'TR026_6', 'TR026_1'), ('TR026_2_20', 'TR026_2', 'TR026_20'), ('TR026_2_20', 'TR026_20', 'TR026_2'), ('TR026_2_3', 'TR026_2', 'TR026_3'), ('TR026_2_3', 'TR026_3', 'TR026_2'), ('TR026_3_10', 'TR026_10', 'TR026_3'), ('TR026_3_10', 'TR026_3', 'TR026_10'), ('TR026_4_21', 'TR026_21', 'TR026_4'), ('TR026_4_21', 'TR026_4', 'TR026_21'), ('TR026_4_5', 'TR026_4', 'TR026_5'), ('TR026_4_5', 'TR026_5', 'TR026_4'), ('TR026_5_9', 'TR026_5', 'TR026_9'), ('TR026_5_9', 'TR026_9', 'TR026_5'), ('TR026_6_7', 'TR026_6', 'TR026_7'), ('TR026_6_7', 'TR026_7', 'TR026_6'), ('TR026_7_8', 'TR026_7', 'TR026_8'), ('TR026_7_8', 'TR026_8', 'TR026_7'), ('TR026_8_15', 'TR026_15', 'TR026_8'), ('TR026_8_15', 'TR026_8', 'TR026_15'), ('TR027_1_2', 'TR027_1', 'TR027_2'), ('TR027_1_2', 'TR027_2', 'TR027_1'), ('TR027_1_3', 'TR027_1', 'TR027_3'), ('TR027_1_3', 'TR027_3', 'TR027_1'), ('TR027_1_4', 'TR027_1', 'TR027_4'), ('TR027_1_4', 'TR027_4', 'TR027_1'), ('TR027_1_7', 'TR027_1', 'TR027_7'), ('TR027_1_7', 'TR027_7', 'TR027_1'), ('TR027_2_5', 'TR027_2', 'TR027_5'), ('TR027_2_5', 'TR027_5', 'TR027_2'), ('TR027_2_6', 'TR027_2', 'TR027_6'), ('TR027_2_6', 'TR027_6', 'TR027_2'), ('TR027_2_8', 'TR027_2', 'TR027_8'), ('TR027_2_8', 'TR027_8', 'TR027_2'), ('TR028_1_2', 'TR028_1', 'TR028_2'), ('TR028_1_2', 'TR028_2', 'TR028_1'), ('TR028_1_3', 'TR028_1', 'TR028_3'), ('TR028_1_3', 'TR028_3', 'TR028_1'), ('TR028_1_4', 'TR028_1', 'TR028_4'), ('TR028_1_4', 'TR028_4', 'TR028_1'), ('TR028_1_7', 'TR028_1', 'TR028_7'), ('TR028_1_7', 'TR028_7', 'TR028_1'), ('TR028_2_5', 'TR028_2', 'TR028_5'), ('TR028_2_5', 'TR028_5', 'TR028_2'), ('TR028_2_8', 'TR028_2', 'TR028_8'), ('TR028_2_8', 'TR028_8', 'TR028_2'), ('TR028_2_9', 'TR028_2', 'TR028_9'), ('TR028_2_9', 'TR028_9', 'TR028_2'), ('TR028_3_10', 'TR028_10', 'TR028_3'), ('TR028_3_10', 'TR028_3', 'TR028_10'), ('TR028_3_11', 'TR028_11', 'TR028_3'), ('TR028_3_11', 'TR028_3', 'TR028_11'), ('TR028_3_6', 'TR028_3', 'TR028_6'), ('TR028_3_6', 'TR028_6', 'TR028_3'), ('TR029_10_12', 'TR029_10', 'TR029_12'), ('TR029_10_12', 'TR029_12', 'TR029_10'), ('TR029_10_24', 'TR029_10', 'TR029_24'), ('TR029_10_24', 'TR029_24', 'TR029_10'), ('TR029_11_16', 'TR029_11', 'TR029_16'), ('TR029_11_16', 'TR029_16', 'TR029_11'), ('TR029_12_25', 'TR029_12', 'TR029_25'), ('TR029_12_25', 'TR029_25', 'TR029_12'), ('TR029_14_17', 'TR029_14', 'TR029_17'), ('TR029_14_17', 'TR029_17', 'TR029_14'), ('TR029_16_18', 'TR029_16', 'TR029_18'), ('TR029_16_18', 'TR029_18', 'TR029_16'), ('TR029_17_26', 'TR029_17', 'TR029_26'), ('TR029_17_26', 'TR029_26', 'TR029_17'), ('TR029_18_27', 'TR029_18', 'TR029_27'), ('TR029_18_27', 'TR029_27', 'TR029_18'), ('TR029_19_20', 'TR029_19', 'TR029_20'), ('TR029_19_20', 'TR029_20', 'TR029_19'), ('TR029_19_28', 'TR029_19', 'TR029_28'), ('TR029_19_28', 'TR029_28', 'TR029_19'), ('TR029_1_2', 'TR029_1', 'TR029_2'), ('TR029_1_2', 'TR029_2', 'TR029_1'), ('TR029_1_4', 'TR029_1', 'TR029_4'), ('TR029_1_4', 'TR029_4', 'TR029_1'), ('TR029_20_29', 'TR029_20', 'TR029_29'), ('TR029_20_29', 'TR029_29', 'TR029_20'), ('TR029_4_6', 'TR029_4', 'TR029_6'), ('TR029_4_6', 'TR029_6', 'TR029_4'), ('TR029_5_7', 'TR029_5', 'TR029_7'), ('TR029_5_7', 'TR029_7', 'TR029_5'), ('TR029_5_8', 'TR029_5', 'TR029_8'), ('TR029_5_8', 'TR029_8', 'TR029_5'), ('TR029_6_9', 'TR029_6', 'TR029_9'), ('TR029_6_9', 'TR029_9', 'TR029_6'), ('TR029_7_11', 'TR029_11', 'TR029_7'), ('TR029_7_11', 'TR029_7', 'TR029_11'), ('TR029_8_14', 'TR029_14', 'TR029_8'), ('TR029_8_14', 'TR029_8', 'TR029_14'), ('TR029_9_21', 'TR029_21', 'TR029_9'), ('TR029_9_21', 'TR029_9', 'TR029_21'), ('TR029_9_22', 'TR029_22', 'TR029_9'), ('TR029_9_22', 'TR029_9', 'TR029_22'), ('TR029_9_23', 'TR029_23', 'TR029_9'), ('TR029_9_23', 'TR029_9', 'TR029_23'), ('TR030_10_13', 'TR030_10', 'TR030_13'), ('TR030_10_13', 'TR030_13', 'TR030_10'), ('TR030_11_14', 'TR030_11', 'TR030_14'), ('TR030_11_14', 'TR030_14', 'TR030_11'), ('TR030_11_48', 'TR030_11', 'TR030_48'), ('TR030_11_48', 'TR030_48', 'TR030_11'), ('TR030_12_49', 'TR030_12', 'TR030_49'), ('TR030_12_49', 'TR030_49', 'TR030_12'), ('TR030_13_16', 'TR030_13', 'TR030_16'), ('TR030_13_16', 'TR030_16', 'TR030_13'), ('TR030_13_17', 'TR030_13', 'TR030_17'), ('TR030_13_17', 'TR030_17', 'TR030_13'), ('TR030_13_50', 'TR030_13', 'TR030_50'), ('TR030_13_50', 'TR030_50', 'TR030_13'), ('TR030_14_18', 'TR030_14', 'TR030_18'), ('TR030_14_18', 'TR030_18', 'TR030_14'), ('TR030_15_19', 'TR030_15', 'TR030_19'), ('TR030_15_19', 'TR030_19', 'TR030_15'), ('TR030_15_51', 'TR030_15', 'TR030_51'), ('TR030_15_51', 'TR030_51', 'TR030_15'), ('TR030_16_20', 'TR030_16', 'TR030_20'), ('TR030_16_20', 'TR030_20', 'TR030_16'), ('TR030_17_22', 'TR030_17', 'TR030_22'), ('TR030_17_22', 'TR030_22', 'TR030_17'), ('TR030_19_24', 'TR030_19', 'TR030_24'), ('TR030_19_24', 'TR030_24', 'TR030_19'), ('TR030_1_2', 'TR030_1', 'TR030_2'), ('TR030_1_2', 'TR030_2', 'TR030_1'), ('TR030_20_25', 'TR030_20', 'TR030_25'), ('TR030_20_25', 'TR030_25', 'TR030_20'), ('TR030_20_52', 'TR030_20', 'TR030_52'), ('TR030_20_52', 'TR030_52', 'TR030_20'), ('TR030_22_53', 'TR030_22', 'TR030_53'), ('TR030_22_53', 'TR030_53', 'TR030_22'), ('TR030_22_54', 'TR030_22', 'TR030_54'), ('TR030_22_54', 'TR030_54', 'TR030_22'), ('TR030_22_55', 'TR030_22', 'TR030_55'), ('TR030_22_55', 'TR030_55', 'TR030_22'), ('TR030_25_28', 'TR030_25', 'TR030_28'), ('TR030_25_28', 'TR030_28', 'TR030_25'), ('TR030_26_29', 'TR030_26', 'TR030_29'), ('TR030_26_29', 'TR030_29', 'TR030_26'), ('TR030_27_30', 'TR030_27', 'TR030_30'), ('TR030_27_30', 'TR030_30', 'TR030_27'), ('TR030_27_56', 'TR030_27', 'TR030_56'), ('TR030_27_56', 'TR030_56', 'TR030_27'), ('TR030_28_57', 'TR030_28', 'TR030_57'), ('TR030_28_57', 'TR030_57', 'TR030_28'), ('TR030_29_32', 'TR030_29', 'TR030_32'), ('TR030_29_32', 'TR030_32', 'TR030_29'), ('TR030_29_33', 'TR030_29', 'TR030_33'), ('TR030_29_33', 'TR030_33', 'TR030_29'), ('TR030_29_58', 'TR030_29', 'TR030_58'), ('TR030_29_58', 'TR030_58', 'TR030_29'), ('TR030_2_4', 'TR030_2', 'TR030_4'), ('TR030_2_4', 'TR030_4', 'TR030_2'), ('TR030_30_59', 'TR030_30', 'TR030_59'), ('TR030_30_59', 'TR030_59', 'TR030_30'), ('TR030_31_34', 'TR030_31', 'TR030_34'), ('TR030_31_34', 'TR030_34', 'TR030_31'), ('TR030_31_60', 'TR030_31', 'TR030_60'), ('TR030_31_60', 'TR030_60', 'TR030_31'), ('TR030_32_35', 'TR030_32', 'TR030_35'), ('TR030_32_35', 'TR030_35', 'TR030_32'), ('TR030_33_37', 'TR030_33', 'TR030_37'), ('TR030_33_37', 'TR030_37', 'TR030_33'), ('TR030_34_61', 'TR030_34', 'TR030_61'), ('TR030_34_61', 'TR030_61', 'TR030_34'), ('TR030_35_39', 'TR030_35', 'TR030_39'), ('TR030_35_39', 'TR030_39', 'TR030_35'), ('TR030_35_62', 'TR030_35', 'TR030_62'), ('TR030_35_62', 'TR030_62', 'TR030_35'), ('TR030_37_63', 'TR030_37', 'TR030_63'), ('TR030_37_63', 'TR030_63', 'TR030_37'), ('TR030_37_64', 'TR030_37', 'TR030_64'), ('TR030_37_64', 'TR030_64', 'TR030_37'), ('TR030_37_65', 'TR030_37', 'TR030_65'), ('TR030_37_65', 'TR030_65', 'TR030_37'), ('TR030_39_41', 'TR030_39', 'TR030_41'), ('TR030_39_41', 'TR030_41', 'TR030_39'), ('TR030_3_45', 'TR030_3', 'TR030_45'), ('TR030_3_45', 'TR030_45', 'TR030_3'), ('TR030_3_5', 'TR030_3', 'TR030_5'), ('TR030_3_5', 'TR030_5', 'TR030_3'), ('TR030_40_42', 'TR030_40', 'TR030_42'), ('TR030_40_42', 'TR030_42', 'TR030_40'), ('TR030_40_66', 'TR030_40', 'TR030_66'), ('TR030_40_66', 'TR030_66', 'TR030_40'), ('TR030_41_67', 'TR030_41', 'TR030_67'), ('TR030_41_67', 'TR030_67', 'TR030_41'), ('TR030_42_68', 'TR030_42', 'TR030_68'), ('TR030_42_68', 'TR030_68', 'TR030_42'), ('TR030_43_44', 'TR030_43', 'TR030_44'), ('TR030_43_44', 'TR030_44', 'TR030_43'), ('TR030_43_69', 'TR030_43', 'TR030_69'), ('TR030_43_69', 'TR030_69', 'TR030_43'), ('TR030_44_70', 'TR030_44', 'TR030_70'), ('TR030_44_70', 'TR030_70', 'TR030_44'), ('TR030_4_6', 'TR030_4', 'TR030_6'), ('TR030_4_6', 'TR030_6', 'TR030_4'), ('TR030_5_9', 'TR030_5', 'TR030_9'), ('TR030_5_9', 'TR030_9', 'TR030_5'), ('TR030_7_46', 'TR030_46', 'TR030_7'), ('TR030_7_46', 'TR030_7', 'TR030_46'), ('TR030_7_8', 'TR030_7', 'TR030_8'), ('TR030_7_8', 'TR030_8', 'TR030_7'), ('TR030_8_47', 'TR030_47', 'TR030_8'), ('TR030_8_47', 'TR030_8', 'TR030_47'), ('TR030_9_12', 'TR030_12', 'TR030_9'), ('TR030_9_12', 'TR030_9', 'TR030_12'), ('TR031_10_17', 'TR031_10', 'TR031_17'), ('TR031_10_17', 'TR031_17', 'TR031_10'), ('TR031_13_14', 'TR031_13', 'TR031_14'), ('TR031_13_14', 'TR031_14', 'TR031_13'), ('TR031_13_30', 'TR031_13', 'TR031_30'), ('TR031_13_30', 'TR031_30', 'TR031_13'), ('TR031_14_31', 'TR031_14', 'TR031_31'), ('TR031_14_31', 'TR031_31', 'TR031_14'), ('TR031_15_16', 'TR031_15', 'TR031_16'), ('TR031_15_16', 'TR031_16', 'TR031_15'), ('TR031_15_18', 'TR031_15', 'TR031_18'), ('TR031_15_18', 'TR031_18', 'TR031_15'), ('TR031_16_32', 'TR031_16', 'TR031_32'), ('TR031_16_32', 'TR031_32', 'TR031_16'), ('TR031_17_33', 'TR031_17', 'TR031_33'), ('TR031_17_33', 'TR031_33', 'TR031_17'), ('TR031_18_34', 'TR031_18', 'TR031_34'), ('TR031_18_34', 'TR031_34', 'TR031_18'), ('TR031_18_35', 'TR031_18', 'TR031_35'), ('TR031_18_35', 'TR031_35', 'TR031_18'), ('TR031_18_36', 'TR031_18', 'TR031_36'), ('TR031_18_36', 'TR031_36', 'TR031_18'), ('TR031_2_3', 'TR031_2', 'TR031_3'), ('TR031_2_3', 'TR031_3', 'TR031_2'), ('TR031_2_4', 'TR031_2', 'TR031_4'), ('TR031_2_4', 'TR031_4', 'TR031_2'), ('TR031_3_19', 'TR031_19', 'TR031_3'), ('TR031_3_19', 'TR031_3', 'TR031_19'), ('TR031_3_5', 'TR031_3', 'TR031_5'), ('TR031_3_5', 'TR031_5', 'TR031_3'), ('TR031_4_20', 'TR031_20', 'TR031_4'), ('TR031_4_20', 'TR031_4', 'TR031_20'), ('TR031_4_9', 'TR031_4', 'TR031_9'), ('TR031_4_9', 'TR031_9', 'TR031_4'), ('TR031_5_21', 'TR031_21', 'TR031_5'), ('TR031_5_21', 'TR031_5', 'TR031_21'), ('TR031_5_22', 'TR031_22', 'TR031_5'), ('TR031_5_22', 'TR031_5', 'TR031_22'), ('TR031_5_6', 'TR031_5', 'TR031_6'), ('TR031_5_6', 'TR031_6', 'TR031_5'), ('TR031_6_23', 'TR031_23', 'TR031_6'), ('TR031_6_23', 'TR031_6', 'TR031_23'), ('TR031_6_24', 'TR031_24', 'TR031_6'), ('TR031_6_24', 'TR031_6', 'TR031_24'), ('TR031_6_7', 'TR031_6', 'TR031_7'), ('TR031_6_7', 'TR031_7', 'TR031_6'), ('TR031_7_25', 'TR031_25', 'TR031_7'), ('TR031_7_25', 'TR031_7', 'TR031_25'), ('TR031_7_26', 'TR031_26', 'TR031_7'), ('TR031_7_26', 'TR031_7', 'TR031_26'), ('TR031_7_8', 'TR031_7', 'TR031_8'), ('TR031_7_8', 'TR031_8', 'TR031_7'), ('TR031_8_27', 'TR031_27', 'TR031_8'), ('TR031_8_27', 'TR031_8', 'TR031_27'), ('TR031_8_28', 'TR031_28', 'TR031_8'), ('TR031_8_28', 'TR031_8', 'TR031_28'), ('TR031_8_29', 'TR031_29', 'TR031_8'), ('TR031_8_29', 'TR031_8', 'TR031_29'), ('TR031_9_10', 'TR031_10', 'TR031_9'), ('TR031_9_10', 'TR031_9', 'TR031_10'), ('TR032_10_24', 'TR032_10', 'TR032_24'), ('TR032_10_24', 'TR032_24', 'TR032_10'), ('TR032_10_25', 'TR032_10', 'TR032_25'), ('TR032_10_25', 'TR032_25', 'TR032_10'), ('TR032_11_12', 'TR032_11', 'TR032_12'), ('TR032_11_12', 'TR032_12', 'TR032_11'), ('TR032_11_26', 'TR032_11', 'TR032_26'), ('TR032_11_26', 'TR032_26', 'TR032_11'), ('TR032_11_27', 'TR032_11', 'TR032_27'), ('TR032_11_27', 'TR032_27', 'TR032_11'), ('TR032_13_14', 'TR032_13', 'TR032_14'), ('TR032_13_14', 'TR032_14', 'TR032_13'), ('TR032_13_28', 'TR032_13', 'TR032_28'), ('TR032_13_28', 'TR032_28', 'TR032_13'), ('TR032_13_29', 'TR032_13', 'TR032_29'), ('TR032_13_29', 'TR032_29', 'TR032_13'), ('TR032_1_13', 'TR032_1', 'TR032_13'), ('TR032_1_13', 'TR032_13', 'TR032_1'), ('TR032_1_15', 'TR032_1', 'TR032_15'), ('TR032_1_15', 'TR032_15', 'TR032_1'), ('TR032_1_16', 'TR032_1', 'TR032_16'), ('TR032_1_16', 'TR032_16', 'TR032_1'), ('TR032_1_2', 'TR032_1', 'TR032_2'), ('TR032_1_2', 'TR032_2', 'TR032_1'), ('TR032_2_3', 'TR032_2', 'TR032_3'), ('TR032_2_3', 'TR032_3', 'TR032_2'), ('TR032_2_4', 'TR032_2', 'TR032_4'), ('TR032_2_4', 'TR032_4', 'TR032_2'), ('TR032_3_5', 'TR032_3', 'TR032_5'), ('TR032_3_5', 'TR032_5', 'TR032_3'), ('TR032_3_6', 'TR032_3', 'TR032_6'), ('TR032_3_6', 'TR032_6', 'TR032_3'), ('TR032_3_7', 'TR032_3', 'TR032_7'), ('TR032_3_7', 'TR032_7', 'TR032_3'), ('TR032_4_17', 'TR032_17', 'TR032_4'), ('TR032_4_17', 'TR032_4', 'TR032_17'), ('TR032_4_18', 'TR032_18', 'TR032_4'), ('TR032_4_18', 'TR032_4', 'TR032_18'), ('TR032_4_8', 'TR032_4', 'TR032_8'), ('TR032_4_8', 'TR032_8', 'TR032_4'), ('TR032_5_19', 'TR032_19', 'TR032_5'), ('TR032_5_19', 'TR032_5', 'TR032_19'), ('TR032_5_9', 'TR032_5', 'TR032_9'), ('TR032_5_9', 'TR032_9', 'TR032_5'), ('TR032_7_10', 'TR032_10', 'TR032_7'), ('TR032_7_10', 'TR032_7', 'TR032_10'), ('TR032_8_10', 'TR032_10', 'TR032_8'), ('TR032_8_10', 'TR032_8', 'TR032_10'), ('TR032_8_20', 'TR032_20', 'TR032_8'), ('TR032_8_20', 'TR032_8', 'TR032_20'), ('TR032_8_21', 'TR032_21', 'TR032_8'), ('TR032_8_21', 'TR032_8', 'TR032_21'), ('TR032_9_11', 'TR032_11', 'TR032_9'), ('TR032_9_11', 'TR032_9', 'TR032_11'), ('TR032_9_22', 'TR032_22', 'TR032_9'), ('TR032_9_22', 'TR032_9', 'TR032_22'), ('TR032_9_23', 'TR032_23', 'TR032_9'), ('TR032_9_23', 'TR032_9', 'TR032_23'), ('TR033_11_16', 'TR033_11', 'TR033_16'), ('TR033_11_16', 'TR033_16', 'TR033_11'), ('TR033_12_13', 'TR033_12', 'TR033_13'), ('TR033_12_13', 'TR033_13', 'TR033_12'), ('TR033_12_27', 'TR033_12', 'TR033_27'), ('TR033_12_27', 'TR033_27', 'TR033_12'), ('TR033_13_18', 'TR033_13', 'TR033_18'), ('TR033_13_18', 'TR033_18', 'TR033_13'), ('TR033_14_15', 'TR033_14', 'TR033_15'), ('TR033_14_15', 'TR033_15', 'TR033_14'), ('TR033_14_19', 'TR033_14', 'TR033_19'), ('TR033_14_19', 'TR033_19', 'TR033_14'), ('TR033_15_28', 'TR033_15', 'TR033_28'), ('TR033_15_28', 'TR033_28', 'TR033_15'), ('TR033_16_17', 'TR033_16', 'TR033_17'), ('TR033_16_17', 'TR033_17', 'TR033_16'), ('TR033_1_2', 'TR033_1', 'TR033_2'), ('TR033_1_2', 'TR033_2', 'TR033_1'), ('TR033_2_3', 'TR033_2', 'TR033_3'), ('TR033_2_3', 'TR033_3', 'TR033_2'), ('TR033_2_4', 'TR033_2', 'TR033_4'), ('TR033_2_4', 'TR033_4', 'TR033_2'), ('TR033_2_5', 'TR033_2', 'TR033_5'), ('TR033_2_5', 'TR033_5', 'TR033_2'), ('TR033_3_8', 'TR033_3', 'TR033_8'), ('TR033_3_8', 'TR033_8', 'TR033_3'), ('TR033_4_7', 'TR033_4', 'TR033_7'), ('TR033_4_7', 'TR033_7', 'TR033_4'), ('TR033_5_6', 'TR033_5', 'TR033_6'), ('TR033_5_6', 'TR033_6', 'TR033_5'), ('TR033_6_20', 'TR033_20', 'TR033_6'), ('TR033_6_20', 'TR033_6', 'TR033_20'), ('TR033_6_21', 'TR033_21', 'TR033_6'), ('TR033_6_21', 'TR033_6', 'TR033_21'), ('TR033_6_22', 'TR033_22', 'TR033_6'), ('TR033_6_22', 'TR033_6', 'TR033_22'), ('TR033_7_23', 'TR033_23', 'TR033_7'), ('TR033_7_23', 'TR033_7', 'TR033_23'), ('TR033_7_24', 'TR033_24', 'TR033_7'), ('TR033_7_24', 'TR033_7', 'TR033_24'), ('TR033_7_25', 'TR033_25', 'TR033_7'), ('TR033_7_25', 'TR033_7', 'TR033_25'), ('TR033_8_11', 'TR033_11', 'TR033_8'), ('TR033_8_11', 'TR033_8', 'TR033_11'), ('TR033_9_10', 'TR033_10', 'TR033_9'), ('TR033_9_10', 'TR033_9', 'TR033_10'), ('TR033_9_26', 'TR033_26', 'TR033_9'), ('TR033_9_26', 'TR033_9', 'TR033_26'), ('TR034_14_15', 'TR034_14', 'TR034_15'), ('TR034_14_15', 'TR034_15', 'TR034_14'), ('TR034_14_26', 'TR034_14', 'TR034_26'), ('TR034_14_26', 'TR034_26', 'TR034_14'), ('TR034_14_27', 'TR034_14', 'TR034_27'), ('TR034_14_27', 'TR034_27', 'TR034_14'), ('TR034_15_16', 'TR034_15', 'TR034_16'), ('TR034_15_16', 'TR034_16', 'TR034_15'), ('TR034_15_28', 'TR034_15', 'TR034_28'), ('TR034_15_28', 'TR034_28', 'TR034_15'), ('TR034_15_29', 'TR034_15', 'TR034_29'), ('TR034_15_29', 'TR034_29', 'TR034_15'), ('TR034_16_30', 'TR034_16', 'TR034_30'), ('TR034_16_30', 'TR034_30', 'TR034_16'), ('TR034_16_31', 'TR034_16', 'TR034_31'), ('TR034_16_31', 'TR034_31', 'TR034_16'), ('TR034_16_32', 'TR034_16', 'TR034_32'), ('TR034_16_32', 'TR034_32', 'TR034_16'), ('TR034_17_18', 'TR034_17', 'TR034_18'), ('TR034_17_18', 'TR034_18', 'TR034_17'), ('TR034_17_33', 'TR034_17', 'TR034_33'), ('TR034_17_33', 'TR034_33', 'TR034_17'), ('TR034_17_34', 'TR034_17', 'TR034_34'), ('TR034_17_34', 'TR034_34', 'TR034_17'), ('TR034_18_19', 'TR034_18', 'TR034_19'), ('TR034_18_19', 'TR034_19', 'TR034_18'), ('TR034_18_35', 'TR034_18', 'TR034_35'), ('TR034_18_35', 'TR034_35', 'TR034_18'), ('TR034_18_36', 'TR034_18', 'TR034_36'), ('TR034_18_36', 'TR034_36', 'TR034_18'), ('TR034_19_37', 'TR034_19', 'TR034_37'), ('TR034_19_37', 'TR034_37', 'TR034_19'), ('TR034_19_38', 'TR034_19', 'TR034_38'), ('TR034_19_38', 'TR034_38', 'TR034_19'), ('TR034_19_39', 'TR034_19', 'TR034_39'), ('TR034_19_39', 'TR034_39', 'TR034_19'), ('TR034_1_6', 'TR034_1', 'TR034_6'), ('TR034_1_6', 'TR034_6', 'TR034_1'), ('TR034_1_9', 'TR034_1', 'TR034_9'), ('TR034_1_9', 'TR034_9', 'TR034_1'), ('TR034_20_21', 'TR034_20', 'TR034_21'), ('TR034_20_21', 'TR034_21', 'TR034_20'), ('TR034_20_22', 'TR034_20', 'TR034_22'), ('TR034_20_22', 'TR034_22', 'TR034_20'), ('TR034_20_23', 'TR034_20', 'TR034_23'), ('TR034_20_23', 'TR034_23', 'TR034_20'), ('TR034_2_24', 'TR034_2', 'TR034_24'), ('TR034_2_24', 'TR034_24', 'TR034_2'), ('TR034_2_3', 'TR034_2', 'TR034_3'), ('TR034_2_3', 'TR034_3', 'TR034_2'), ('TR034_3_20', 'TR034_20', 'TR034_3'), ('TR034_3_20', 'TR034_3', 'TR034_20'), ('TR034_4_25', 'TR034_25', 'TR034_4'), ('TR034_4_25', 'TR034_4', 'TR034_25'), ('TR034_4_5', 'TR034_4', 'TR034_5'), ('TR034_4_5', 'TR034_5', 'TR034_4'), ('TR034_5_8', 'TR034_5', 'TR034_8'), ('TR034_5_8', 'TR034_8', 'TR034_5'), ('TR034_6_7', 'TR034_6', 'TR034_7'), ('TR034_6_7', 'TR034_7', 'TR034_6'), ('TR034_7_14', 'TR034_14', 'TR034_7'), ('TR034_7_14', 'TR034_7', 'TR034_14'), ('TR034_7_17', 'TR034_17', 'TR034_7'), ('TR034_7_17', 'TR034_7', 'TR034_17'), ('TR034_8_13', 'TR034_13', 'TR034_8'), ('TR034_8_13', 'TR034_8', 'TR034_13'), ('TR034_9_11', 'TR034_11', 'TR034_9'), ('TR034_9_11', 'TR034_9', 'TR034_11'), ('TR035_10_14', 'TR035_10', 'TR035_14'), ('TR035_10_14', 'TR035_14', 'TR035_10'), ('TR035_10_25', 'TR035_10', 'TR035_25'), ('TR035_10_25', 'TR035_25', 'TR035_10'), ('TR035_11_26', 'TR035_11', 'TR035_26'), ('TR035_11_26', 'TR035_26', 'TR035_11'), ('TR035_12_27', 'TR035_12', 'TR035_27'), ('TR035_12_27', 'TR035_27', 'TR035_12'), ('TR035_13_16', 'TR035_13', 'TR035_16'), ('TR035_13_16', 'TR035_16', 'TR035_13'), ('TR035_13_28', 'TR035_13', 'TR035_28'), ('TR035_13_28', 'TR035_28', 'TR035_13'), ('TR035_14_29', 'TR035_14', 'TR035_29'), ('TR035_14_29', 'TR035_29', 'TR035_14'), ('TR035_15_17', 'TR035_15', 'TR035_17'), ('TR035_15_17', 'TR035_17', 'TR035_15'), ('TR035_15_30', 'TR035_15', 'TR035_30'), ('TR035_15_30', 'TR035_30', 'TR035_15'), ('TR035_16_18', 'TR035_16', 'TR035_18'), ('TR035_16_18', 'TR035_18', 'TR035_16'), ('TR035_17_19', 'TR035_17', 'TR035_19'), ('TR035_17_19', 'TR035_19', 'TR035_17'), ('TR035_18_20', 'TR035_18', 'TR035_20'), ('TR035_18_20', 'TR035_20', 'TR035_18'), ('TR035_19_21', 'TR035_19', 'TR035_21'), ('TR035_19_21', 'TR035_21', 'TR035_19'), ('TR035_1_2', 'TR035_1', 'TR035_2'), ('TR035_1_2', 'TR035_2', 'TR035_1'), ('TR035_1_22', 'TR035_1', 'TR035_22'), ('TR035_1_22', 'TR035_22', 'TR035_1'), ('TR035_1_3', 'TR035_1', 'TR035_3'), ('TR035_1_3', 'TR035_3', 'TR035_1'), ('TR035_1_4', 'TR035_1', 'TR035_4'), ('TR035_1_4', 'TR035_4', 'TR035_1'), ('TR035_20_31', 'TR035_20', 'TR035_31'), ('TR035_20_31', 'TR035_31', 'TR035_20'), ('TR035_20_32', 'TR035_20', 'TR035_32'), ('TR035_20_32', 'TR035_32', 'TR035_20'), ('TR035_20_33', 'TR035_20', 'TR035_33'), ('TR035_20_33', 'TR035_33', 'TR035_20'), ('TR035_21_34', 'TR035_21', 'TR035_34'), ('TR035_21_34', 'TR035_34', 'TR035_21'), ('TR035_21_35', 'TR035_21', 'TR035_35'), ('TR035_21_35', 'TR035_35', 'TR035_21'), ('TR035_21_36', 'TR035_21', 'TR035_36'), ('TR035_21_36', 'TR035_36', 'TR035_21'), ('TR035_2_5', 'TR035_2', 'TR035_5'), ('TR035_2_5', 'TR035_5', 'TR035_2'), ('TR035_2_6', 'TR035_2', 'TR035_6'), ('TR035_2_6', 'TR035_6', 'TR035_2'), ('TR035_2_7', 'TR035_2', 'TR035_7'), ('TR035_2_7', 'TR035_7', 'TR035_2'), ('TR035_3_9', 'TR035_3', 'TR035_9'), ('TR035_3_9', 'TR035_9', 'TR035_3'), ('TR035_4_11', 'TR035_11', 'TR035_4'), ('TR035_4_11', 'TR035_4', 'TR035_11'), ('TR035_8_12', 'TR035_12', 'TR035_8'), ('TR035_8_12', 'TR035_8', 'TR035_12'), ('TR035_8_23', 'TR035_23', 'TR035_8'), ('TR035_8_23', 'TR035_8', 'TR035_23'), ('TR035_9_24', 'TR035_24', 'TR035_9'), ('TR035_9_24', 'TR035_9', 'TR035_24'), ('TR036_10_16', 'TR036_10', 'TR036_16'), ('TR036_10_16', 'TR036_16', 'TR036_10'), ('TR036_10_17', 'TR036_10', 'TR036_17'), ('TR036_10_17', 'TR036_17', 'TR036_10'), ('TR036_1_11', 'TR036_1', 'TR036_11'), ('TR036_1_11', 'TR036_11', 'TR036_1'), ('TR036_1_6', 'TR036_1', 'TR036_6'), ('TR036_1_6', 'TR036_6', 'TR036_1'), ('TR036_2_12', 'TR036_12', 'TR036_2'), ('TR036_2_12', 'TR036_2', 'TR036_12'), ('TR036_2_3', 'TR036_2', 'TR036_3'), ('TR036_2_3', 'TR036_3', 'TR036_2'), ('TR036_3_13', 'TR036_13', 'TR036_3'), ('TR036_3_13', 'TR036_3', 'TR036_13'), ('TR036_4_14', 'TR036_14', 'TR036_4'), ('TR036_4_14', 'TR036_4', 'TR036_14'), ('TR036_4_5', 'TR036_4', 'TR036_5'), ('TR036_4_5', 'TR036_5', 'TR036_4'), ('TR036_5_10', 'TR036_10', 'TR036_5'), ('TR036_5_10', 'TR036_5', 'TR036_10'), ('TR036_6_7', 'TR036_6', 'TR036_7'), ('TR036_6_7', 'TR036_7', 'TR036_6'), ('TR036_7_8', 'TR036_7', 'TR036_8'), ('TR036_7_8', 'TR036_8', 'TR036_7'), ('TR036_8_15', 'TR036_15', 'TR036_8'), ('TR036_8_15', 'TR036_8', 'TR036_15'), ('TR039_10_16', 'TR039_10', 'TR039_16'), ('TR039_10_16', 'TR039_16', 'TR039_10'), ('TR039_10_17', 'TR039_10', 'TR039_17'), ('TR039_10_17', 'TR039_17', 'TR039_10'), ('TR039_10_34', 'TR039_10', 'TR039_34'), ('TR039_10_34', 'TR039_34', 'TR039_10'), ('TR039_11_35', 'TR039_11', 'TR039_35'), ('TR039_11_35', 'TR039_35', 'TR039_11'), ('TR039_11_36', 'TR039_11', 'TR039_36'), ('TR039_11_36', 'TR039_36', 'TR039_11'), ('TR039_12_18', 'TR039_12', 'TR039_18'), ('TR039_12_18', 'TR039_18', 'TR039_12'), ('TR039_12_19', 'TR039_12', 'TR039_19'), ('TR039_12_19', 'TR039_19', 'TR039_12'), ('TR039_12_37', 'TR039_12', 'TR039_37'), ('TR039_12_37', 'TR039_37', 'TR039_12'), ('TR039_13_20', 'TR039_13', 'TR039_20'), ('TR039_13_20', 'TR039_20', 'TR039_13'), ('TR039_13_21', 'TR039_13', 'TR039_21'), ('TR039_13_21', 'TR039_21', 'TR039_13'), ('TR039_13_22', 'TR039_13', 'TR039_22'), ('TR039_13_22', 'TR039_22', 'TR039_13'), ('TR039_14_38', 'TR039_14', 'TR039_38'), ('TR039_14_38', 'TR039_38', 'TR039_14'), ('TR039_15_17', 'TR039_15', 'TR039_17'), ('TR039_15_17', 'TR039_17', 'TR039_15'), ('TR039_15_39', 'TR039_15', 'TR039_39'), ('TR039_15_39', 'TR039_39', 'TR039_15'), ('TR039_15_40', 'TR039_15', 'TR039_40'), ('TR039_15_40', 'TR039_40', 'TR039_15'), ('TR039_16_23', 'TR039_16', 'TR039_23'), ('TR039_16_23', 'TR039_23', 'TR039_16'), ('TR039_17_41', 'TR039_17', 'TR039_41'), ('TR039_17_41', 'TR039_41', 'TR039_17'), ('TR039_17_42', 'TR039_17', 'TR039_42'), ('TR039_17_42', 'TR039_42', 'TR039_17'), ('TR039_18_24', 'TR039_18', 'TR039_24'), ('TR039_18_24', 'TR039_24', 'TR039_18'), ('TR039_19_43', 'TR039_19', 'TR039_43'), ('TR039_19_43', 'TR039_43', 'TR039_19'), ('TR039_19_44', 'TR039_19', 'TR039_44'), ('TR039_19_44', 'TR039_44', 'TR039_19'), ('TR039_19_45', 'TR039_19', 'TR039_45'), ('TR039_19_45', 'TR039_45', 'TR039_19'), ('TR039_1_2', 'TR039_1', 'TR039_2'), ('TR039_1_2', 'TR039_2', 'TR039_1'), ('TR039_1_3', 'TR039_1', 'TR039_3'), ('TR039_1_3', 'TR039_3', 'TR039_1'), ('TR039_1_30', 'TR039_1', 'TR039_30'), ('TR039_1_30', 'TR039_30', 'TR039_1'), ('TR039_1_31', 'TR039_1', 'TR039_31'), ('TR039_1_31', 'TR039_31', 'TR039_1'), ('TR039_20_46', 'TR039_20', 'TR039_46'), ('TR039_20_46', 'TR039_46', 'TR039_20'), ('TR039_20_47', 'TR039_20', 'TR039_47'), ('TR039_20_47', 'TR039_47', 'TR039_20'), ('TR039_20_48', 'TR039_20', 'TR039_48'), ('TR039_20_48', 'TR039_48', 'TR039_20'), ('TR039_21_49', 'TR039_21', 'TR039_49'), ('TR039_21_49', 'TR039_49', 'TR039_21'), ('TR039_21_50', 'TR039_21', 'TR039_50'), ('TR039_21_50', 'TR039_50', 'TR039_21'), ('TR039_21_51', 'TR039_21', 'TR039_51'), ('TR039_21_51', 'TR039_51', 'TR039_21'), ('TR039_22_52', 'TR039_22', 'TR039_52'), ('TR039_22_52', 'TR039_52', 'TR039_22'), ('TR039_23_25', 'TR039_23', 'TR039_25'), ('TR039_23_25', 'TR039_25', 'TR039_23'), ('TR039_24_53', 'TR039_24', 'TR039_53'), ('TR039_24_53', 'TR039_53', 'TR039_24'), ('TR039_24_54', 'TR039_24', 'TR039_54'), ('TR039_24_54', 'TR039_54', 'TR039_24'), ('TR039_24_55', 'TR039_24', 'TR039_55'), ('TR039_24_55', 'TR039_55', 'TR039_24'), ('TR039_25_28', 'TR039_25', 'TR039_28'), ('TR039_25_28', 'TR039_28', 'TR039_25'), ('TR039_27_29', 'TR039_27', 'TR039_29'), ('TR039_27_29', 'TR039_29', 'TR039_27'), ('TR039_27_56', 'TR039_27', 'TR039_56'), ('TR039_27_56', 'TR039_56', 'TR039_27'), ('TR039_28_57', 'TR039_28', 'TR039_57'), ('TR039_28_57', 'TR039_57', 'TR039_28'), ('TR039_28_58', 'TR039_28', 'TR039_58'), ('TR039_28_58', 'TR039_58', 'TR039_28'), ('TR039_28_59', 'TR039_28', 'TR039_59'), ('TR039_28_59', 'TR039_59', 'TR039_28'), ('TR039_29_60', 'TR039_29', 'TR039_60'), ('TR039_29_60', 'TR039_60', 'TR039_29'), ('TR039_29_61', 'TR039_29', 'TR039_61'), ('TR039_29_61', 'TR039_61', 'TR039_29'), ('TR039_29_62', 'TR039_29', 'TR039_62'), ('TR039_29_62', 'TR039_62', 'TR039_29'), ('TR039_2_4', 'TR039_2', 'TR039_4'), ('TR039_2_4', 'TR039_4', 'TR039_2'), ('TR039_3_5', 'TR039_3', 'TR039_5'), ('TR039_3_5', 'TR039_5', 'TR039_3'), ('TR039_4_7', 'TR039_4', 'TR039_7'), ('TR039_4_7', 'TR039_7', 'TR039_4'), ('TR039_5_10', 'TR039_10', 'TR039_5'), ('TR039_5_10', 'TR039_5', 'TR039_10'), ('TR039_5_32', 'TR039_32', 'TR039_5'), ('TR039_5_32', 'TR039_5', 'TR039_32'), ('TR039_5_9', 'TR039_5', 'TR039_9'), ('TR039_5_9', 'TR039_9', 'TR039_5'), ('TR039_6_11', 'TR039_11', 'TR039_6'), ('TR039_6_11', 'TR039_6', 'TR039_11'), ('TR039_6_33', 'TR039_33', 'TR039_6'), ('TR039_6_33', 'TR039_6', 'TR039_33'), ('TR039_7_12', 'TR039_12', 'TR039_7'), ('TR039_7_12', 'TR039_7', 'TR039_12'), ('TR039_7_13', 'TR039_13', 'TR039_7'), ('TR039_7_13', 'TR039_7', 'TR039_13'), ('TR039_7_14', 'TR039_14', 'TR039_7'), ('TR039_7_14', 'TR039_7', 'TR039_14'), ('TR039_9_11', 'TR039_11', 'TR039_9'), ('TR039_9_11', 'TR039_9', 'TR039_11'), ('TR039_9_15', 'TR039_15', 'TR039_9'), ('TR039_9_15', 'TR039_9', 'TR039_15'), ('TR040_10_24', 'TR040_10', 'TR040_24'), ('TR040_10_24', 'TR040_24', 'TR040_10'), ('TR040_11_17', 'TR040_11', 'TR040_17'), ('TR040_11_17', 'TR040_17', 'TR040_11'), ('TR040_11_18', 'TR040_11', 'TR040_18'), ('TR040_11_18', 'TR040_18', 'TR040_11'), ('TR040_13_19', 'TR040_13', 'TR040_19'), ('TR040_13_19', 'TR040_19', 'TR040_13'), ('TR040_14_25', 'TR040_14', 'TR040_25'), ('TR040_14_25', 'TR040_25', 'TR040_14'), ('TR040_15_20', 'TR040_15', 'TR040_20'), ('TR040_15_20', 'TR040_20', 'TR040_15'), ('TR040_15_21', 'TR040_15', 'TR040_21'), ('TR040_15_21', 'TR040_21', 'TR040_15'), ('TR040_17_26', 'TR040_17', 'TR040_26'), ('TR040_17_26', 'TR040_26', 'TR040_17'), ('TR040_1_2', 'TR040_1', 'TR040_2'), ('TR040_1_2', 'TR040_2', 'TR040_1'), ('TR040_1_22', 'TR040_1', 'TR040_22'), ('TR040_1_22', 'TR040_22', 'TR040_1'), ('TR040_1_23', 'TR040_1', 'TR040_23'), ('TR040_1_23', 'TR040_23', 'TR040_1'), ('TR040_1_3', 'TR040_1', 'TR040_3'), ('TR040_1_3', 'TR040_3', 'TR040_1'), ('TR040_20_27', 'TR040_20', 'TR040_27'), ('TR040_20_27', 'TR040_27', 'TR040_20'), ('TR040_2_5', 'TR040_2', 'TR040_5'), ('TR040_2_5', 'TR040_5', 'TR040_2'), ('TR040_3_7', 'TR040_3', 'TR040_7'), ('TR040_3_7', 'TR040_7', 'TR040_3'), ('TR040_4_8', 'TR040_4', 'TR040_8'), ('TR040_4_8', 'TR040_8', 'TR040_4'), ('TR040_4_9', 'TR040_4', 'TR040_9'), ('TR040_4_9', 'TR040_9', 'TR040_4'), ('TR040_5_10', 'TR040_10', 'TR040_5'), ('TR040_5_10', 'TR040_5', 'TR040_10'), ('TR040_6_12', 'TR040_12', 'TR040_6'), ('TR040_6_12', 'TR040_6', 'TR040_12'), ('TR040_6_13', 'TR040_13', 'TR040_6'), ('TR040_6_13', 'TR040_6', 'TR040_13'), ('TR040_7_14', 'TR040_14', 'TR040_7'), ('TR040_7_14', 'TR040_7', 'TR040_14'), ('TR040_9_16', 'TR040_16', 'TR040_9'), ('TR040_9_16', 'TR040_9', 'TR040_16'), ('TR041_1_11', 'TR041_1', 'TR041_11'), ('TR041_1_11', 'TR041_11', 'TR041_1'), ('TR041_1_6', 'TR041_1', 'TR041_6'), ('TR041_1_6', 'TR041_6', 'TR041_1'), ('TR041_2_12', 'TR041_12', 'TR041_2'), ('TR041_2_12', 'TR041_2', 'TR041_12'), ('TR041_2_3', 'TR041_2', 'TR041_3'), ('TR041_2_3', 'TR041_3', 'TR041_2'), ('TR041_3_14', 'TR041_14', 'TR041_3'), ('TR041_3_14', 'TR041_3', 'TR041_14'), ('TR041_4_5', 'TR041_4', 'TR041_5'), ('TR041_4_5', 'TR041_5', 'TR041_4'), ('TR041_4_8', 'TR041_4', 'TR041_8'), ('TR041_4_8', 'TR041_8', 'TR041_4'), ('TR041_5_13', 'TR041_13', 'TR041_5'), ('TR041_5_13', 'TR041_5', 'TR041_13'), ('TR041_6_7', 'TR041_6', 'TR041_7'), ('TR041_6_7', 'TR041_7', 'TR041_6'), ('TR042_10_11', 'TR042_10', 'TR042_11'), ('TR042_10_11', 'TR042_11', 'TR042_10'), ('TR042_11_12', 'TR042_11', 'TR042_12'), ('TR042_11_12', 'TR042_12', 'TR042_11'), ('TR042_12_13', 'TR042_12', 'TR042_13'), ('TR042_12_13', 'TR042_13', 'TR042_12'), ('TR042_13_27', 'TR042_13', 'TR042_27'), ('TR042_13_27', 'TR042_27', 'TR042_13'), ('TR042_14_15', 'TR042_14', 'TR042_15'), ('TR042_14_15', 'TR042_15', 'TR042_14'), ('TR042_15_16', 'TR042_15', 'TR042_16'), ('TR042_15_16', 'TR042_16', 'TR042_15'), ('TR042_16_28', 'TR042_16', 'TR042_28'), ('TR042_16_28', 'TR042_28', 'TR042_16'), ('TR042_16_29', 'TR042_16', 'TR042_29'), ('TR042_16_29', 'TR042_29', 'TR042_16'), ('TR042_1_18', 'TR042_1', 'TR042_18'), ('TR042_1_18', 'TR042_18', 'TR042_1'), ('TR042_1_2', 'TR042_1', 'TR042_2'), ('TR042_1_2', 'TR042_2', 'TR042_1'), ('TR042_1_5', 'TR042_1', 'TR042_5'), ('TR042_1_5', 'TR042_5', 'TR042_1'), ('TR042_1_7', 'TR042_1', 'TR042_7'), ('TR042_1_7', 'TR042_7', 'TR042_1'), ('TR042_2_19', 'TR042_19', 'TR042_2'), ('TR042_2_19', 'TR042_2', 'TR042_19'), ('TR042_2_3', 'TR042_2', 'TR042_3'), ('TR042_2_3', 'TR042_3', 'TR042_2'), ('TR042_2_6', 'TR042_2', 'TR042_6'), ('TR042_2_6', 'TR042_6', 'TR042_2'), ('TR042_3_12', 'TR042_12', 'TR042_3'), ('TR042_3_12', 'TR042_3', 'TR042_12'), ('TR042_3_20', 'TR042_20', 'TR042_3'), ('TR042_3_20', 'TR042_3', 'TR042_20'), ('TR042_3_4', 'TR042_3', 'TR042_4'), ('TR042_3_4', 'TR042_4', 'TR042_3'), ('TR042_4_5', 'TR042_4', 'TR042_5'), ('TR042_4_5', 'TR042_5', 'TR042_4'), ('TR042_5_21', 'TR042_21', 'TR042_5'), ('TR042_5_21', 'TR042_5', 'TR042_21'), ('TR042_5_9', 'TR042_5', 'TR042_9'), ('TR042_5_9', 'TR042_9', 'TR042_5'), ('TR042_6_22', 'TR042_22', 'TR042_6'), ('TR042_6_22', 'TR042_6', 'TR042_22'), ('TR042_7_23', 'TR042_23', 'TR042_7'), ('TR042_7_23', 'TR042_7', 'TR042_23'), ('TR042_8_24', 'TR042_24', 'TR042_8'), ('TR042_8_24', 'TR042_8', 'TR042_24'), ('TR042_8_9', 'TR042_8', 'TR042_9'), ('TR042_8_9', 'TR042_9', 'TR042_8'), ('TR042_9_25', 'TR042_25', 'TR042_9'), ('TR042_9_25', 'TR042_9', 'TR042_25'), ('TR042_9_26', 'TR042_26', 'TR042_9'), ('TR042_9_26', 'TR042_9', 'TR042_26'), ('TR043_10_41', 'TR043_10', 'TR043_41'), ('TR043_10_41', 'TR043_41', 'TR043_10'), ('TR043_10_42', 'TR043_10', 'TR043_42'), ('TR043_10_42', 'TR043_42', 'TR043_10'), ('TR043_11_12', 'TR043_11', 'TR043_12'), ('TR043_11_12', 'TR043_12', 'TR043_11'), ('TR043_11_43', 'TR043_11', 'TR043_43'), ('TR043_11_43', 'TR043_43', 'TR043_11'), ('TR043_11_44', 'TR043_11', 'TR043_44'), ('TR043_11_44', 'TR043_44', 'TR043_11'), ('TR043_12_13', 'TR043_12', 'TR043_13'), ('TR043_12_13', 'TR043_13', 'TR043_12'), ('TR043_12_15', 'TR043_12', 'TR043_15'), ('TR043_12_15', 'TR043_15', 'TR043_12'), ('TR043_12_45', 'TR043_12', 'TR043_45'), ('TR043_12_45', 'TR043_45', 'TR043_12'), ('TR043_13_14', 'TR043_13', 'TR043_14'), ('TR043_13_14', 'TR043_14', 'TR043_13'), ('TR043_13_27', 'TR043_13', 'TR043_27'), ('TR043_13_27', 'TR043_27', 'TR043_13'), ('TR043_13_46', 'TR043_13', 'TR043_46'), ('TR043_13_46', 'TR043_46', 'TR043_13'), ('TR043_14_47', 'TR043_14', 'TR043_47'), ('TR043_14_47', 'TR043_47', 'TR043_14'), ('TR043_14_48', 'TR043_14', 'TR043_48'), ('TR043_14_48', 'TR043_48', 'TR043_14'), ('TR043_15_16', 'TR043_15', 'TR043_16'), ('TR043_15_16', 'TR043_16', 'TR043_15'), ('TR043_15_49', 'TR043_15', 'TR043_49'), ('TR043_15_49', 'TR043_49', 'TR043_15'), ('TR043_15_50', 'TR043_15', 'TR043_50'), ('TR043_15_50', 'TR043_50', 'TR043_15'), ('TR043_16_17', 'TR043_16', 'TR043_17'), ('TR043_16_17', 'TR043_17', 'TR043_16'), ('TR043_16_21', 'TR043_16', 'TR043_21'), ('TR043_16_21', 'TR043_21', 'TR043_16'), ('TR043_16_51', 'TR043_16', 'TR043_51'), ('TR043_16_51', 'TR043_51', 'TR043_16'), ('TR043_17_18', 'TR043_17', 'TR043_18'), ('TR043_17_18', 'TR043_18', 'TR043_17'), ('TR043_17_52', 'TR043_17', 'TR043_52'), ('TR043_17_52', 'TR043_52', 'TR043_17'), ('TR043_18_19', 'TR043_18', 'TR043_19'), ('TR043_18_19', 'TR043_19', 'TR043_18'), ('TR043_18_53', 'TR043_18', 'TR043_53'), ('TR043_18_53', 'TR043_53', 'TR043_18'), ('TR043_18_54', 'TR043_18', 'TR043_54'), ('TR043_18_54', 'TR043_54', 'TR043_18'), ('TR043_19_20', 'TR043_19', 'TR043_20'), ('TR043_19_20', 'TR043_20', 'TR043_19'), ('TR043_19_55', 'TR043_19', 'TR043_55'), ('TR043_19_55', 'TR043_55', 'TR043_19'), ('TR043_19_56', 'TR043_19', 'TR043_56'), ('TR043_19_56', 'TR043_56', 'TR043_19'), ('TR043_1_36', 'TR043_1', 'TR043_36'), ('TR043_1_36', 'TR043_36', 'TR043_1'), ('TR043_1_6', 'TR043_1', 'TR043_6'), ('TR043_1_6', 'TR043_6', 'TR043_1'), ('TR043_20_22', 'TR043_20', 'TR043_22'), ('TR043_20_22', 'TR043_22', 'TR043_20'), ('TR043_21_29', 'TR043_21', 'TR043_29'), ('TR043_21_29', 'TR043_29', 'TR043_21'), ('TR043_22_57', 'TR043_22', 'TR043_57'), ('TR043_22_57', 'TR043_57', 'TR043_22'), ('TR043_23_24', 'TR043_23', 'TR043_24'), ('TR043_23_24', 'TR043_24', 'TR043_23'), ('TR043_23_31', 'TR043_23', 'TR043_31'), ('TR043_23_31', 'TR043_31', 'TR043_23'), ('TR043_24_30', 'TR043_24', 'TR043_30'), ('TR043_24_30', 'TR043_30', 'TR043_24'), ('TR043_25_32', 'TR043_25', 'TR043_32'), ('TR043_25_32', 'TR043_32', 'TR043_25'), ('TR043_26_33', 'TR043_26', 'TR043_33'), ('TR043_26_33', 'TR043_33', 'TR043_26'), ('TR043_27_28', 'TR043_27', 'TR043_28'), ('TR043_27_28', 'TR043_28', 'TR043_27'), ('TR043_27_58', 'TR043_27', 'TR043_58'), ('TR043_27_58', 'TR043_58', 'TR043_27'), ('TR043_27_59', 'TR043_27', 'TR043_59'), ('TR043_27_59', 'TR043_59', 'TR043_27'), ('TR043_28_60', 'TR043_28', 'TR043_60'), ('TR043_28_60', 'TR043_60', 'TR043_28'), ('TR043_28_61', 'TR043_28', 'TR043_61'), ('TR043_28_61', 'TR043_61', 'TR043_28'), ('TR043_28_62', 'TR043_28', 'TR043_62'), ('TR043_28_62', 'TR043_62', 'TR043_28'), ('TR043_29_63', 'TR043_29', 'TR043_63'), ('TR043_29_63', 'TR043_63', 'TR043_29'), ('TR043_2_26', 'TR043_2', 'TR043_26'), ('TR043_2_26', 'TR043_26', 'TR043_2'), ('TR043_2_3', 'TR043_2', 'TR043_3'), ('TR043_2_3', 'TR043_3', 'TR043_2'), ('TR043_30_34', 'TR043_30', 'TR043_34'), ('TR043_30_34', 'TR043_34', 'TR043_30'), ('TR043_31_35', 'TR043_31', 'TR043_35'), ('TR043_31_35', 'TR043_35', 'TR043_31'), ('TR043_32_64', 'TR043_32', 'TR043_64'), ('TR043_32_64', 'TR043_64', 'TR043_32'), ('TR043_32_65', 'TR043_32', 'TR043_65'), ('TR043_32_65', 'TR043_65', 'TR043_32'), ('TR043_32_66', 'TR043_32', 'TR043_66'), ('TR043_32_66', 'TR043_66', 'TR043_32'), ('TR043_33_67', 'TR043_33', 'TR043_67'), ('TR043_33_67', 'TR043_67', 'TR043_33'), ('TR043_33_68', 'TR043_33', 'TR043_68'), ('TR043_33_68', 'TR043_68', 'TR043_33'), ('TR043_33_69', 'TR043_33', 'TR043_69'), ('TR043_33_69', 'TR043_69', 'TR043_33'), ('TR043_34_70', 'TR043_34', 'TR043_70'), ('TR043_34_70', 'TR043_70', 'TR043_34'), ('TR043_34_71', 'TR043_34', 'TR043_71'), ('TR043_34_71', 'TR043_71', 'TR043_34'), ('TR043_34_72', 'TR043_34', 'TR043_72'), ('TR043_34_72', 'TR043_72', 'TR043_34'), ('TR043_35_73', 'TR043_35', 'TR043_73'), ('TR043_35_73', 'TR043_73', 'TR043_35'), ('TR043_35_74', 'TR043_35', 'TR043_74'), ('TR043_35_74', 'TR043_74', 'TR043_35'), ('TR043_35_75', 'TR043_35', 'TR043_75'), ('TR043_35_75', 'TR043_75', 'TR043_35'), ('TR043_3_25', 'TR043_25', 'TR043_3'), ('TR043_3_25', 'TR043_3', 'TR043_25'), ('TR043_4_37', 'TR043_37', 'TR043_4'), ('TR043_4_37', 'TR043_4', 'TR043_37'), ('TR043_4_5', 'TR043_4', 'TR043_5'), ('TR043_4_5', 'TR043_5', 'TR043_4'), ('TR043_5_7', 'TR043_5', 'TR043_7'), ('TR043_5_7', 'TR043_7', 'TR043_5'), ('TR043_6_10', 'TR043_10', 'TR043_6'), ('TR043_6_10', 'TR043_6', 'TR043_10'), ('TR043_7_11', 'TR043_11', 'TR043_7'), ('TR043_7_11', 'TR043_7', 'TR043_11'), ('TR043_7_38', 'TR043_38', 'TR043_7'), ('TR043_7_38', 'TR043_7', 'TR043_38'), ('TR043_7_8', 'TR043_7', 'TR043_8'), ('TR043_7_8', 'TR043_8', 'TR043_7'), ('TR043_8_14', 'TR043_14', 'TR043_8'), ('TR043_8_14', 'TR043_8', 'TR043_14'), ('TR043_8_9', 'TR043_8', 'TR043_9'), ('TR043_8_9', 'TR043_9', 'TR043_8'), ('TR043_9_10', 'TR043_10', 'TR043_9'), ('TR043_9_10', 'TR043_9', 'TR043_10'), ('TR043_9_39', 'TR043_39', 'TR043_9'), ('TR043_9_39', 'TR043_9', 'TR043_39'), ('TR043_9_40', 'TR043_40', 'TR043_9'), ('TR043_9_40', 'TR043_9', 'TR043_40'), ('TR045_11_22', 'TR045_11', 'TR045_22'), ('TR045_11_22', 'TR045_22', 'TR045_11'), ('TR045_12_14', 'TR045_12', 'TR045_14'), ('TR045_12_14', 'TR045_14', 'TR045_12'), ('TR045_12_23', 'TR045_12', 'TR045_23'), ('TR045_12_23', 'TR045_23', 'TR045_12'), ('TR045_13_15', 'TR045_13', 'TR045_15'), ('TR045_13_15', 'TR045_15', 'TR045_13'), ('TR045_13_24', 'TR045_13', 'TR045_24'), ('TR045_13_24', 'TR045_24', 'TR045_13'), ('TR045_13_25', 'TR045_13', 'TR045_25'), ('TR045_13_25', 'TR045_25', 'TR045_13'), ('TR045_14_16', 'TR045_14', 'TR045_16'), ('TR045_14_16', 'TR045_16', 'TR045_14'), ('TR045_15_17', 'TR045_15', 'TR045_17'), ('TR045_15_17', 'TR045_17', 'TR045_15'), ('TR045_15_26', 'TR045_15', 'TR045_26'), ('TR045_15_26', 'TR045_26', 'TR045_15'), ('TR045_15_27', 'TR045_15', 'TR045_27'), ('TR045_15_27', 'TR045_27', 'TR045_15'), ('TR045_17_28', 'TR045_17', 'TR045_28'), ('TR045_17_28', 'TR045_28', 'TR045_17'), ('TR045_17_29', 'TR045_17', 'TR045_29'), ('TR045_17_29', 'TR045_29', 'TR045_17'), ('TR045_17_30', 'TR045_17', 'TR045_30'), ('TR045_17_30', 'TR045_30', 'TR045_17'), ('TR045_1_2', 'TR045_1', 'TR045_2'), ('TR045_1_2', 'TR045_2', 'TR045_1'), ('TR045_1_5', 'TR045_1', 'TR045_5'), ('TR045_1_5', 'TR045_5', 'TR045_1'), ('TR045_2_18', 'TR045_18', 'TR045_2'), ('TR045_2_18', 'TR045_2', 'TR045_18'), ('TR045_2_6', 'TR045_2', 'TR045_6'), ('TR045_2_6', 'TR045_6', 'TR045_2'), ('TR045_5_8', 'TR045_5', 'TR045_8'), ('TR045_5_8', 'TR045_8', 'TR045_5'), ('TR045_6_9', 'TR045_6', 'TR045_9'), ('TR045_6_9', 'TR045_9', 'TR045_6'), ('TR045_7_11', 'TR045_11', 'TR045_7'), ('TR045_7_11', 'TR045_7', 'TR045_11'), ('TR045_7_19', 'TR045_19', 'TR045_7'), ('TR045_7_19', 'TR045_7', 'TR045_19'), ('TR045_8_20', 'TR045_20', 'TR045_8'), ('TR045_8_20', 'TR045_8', 'TR045_20'), ('TR045_9_13', 'TR045_13', 'TR045_9'), ('TR045_9_13', 'TR045_9', 'TR045_13'), ('TR045_9_21', 'TR045_21', 'TR045_9'), ('TR045_9_21', 'TR045_9', 'TR045_21'), ('TR046_11_19', 'TR046_11', 'TR046_19'), ('TR046_11_19', 'TR046_19', 'TR046_11'), ('TR046_11_20', 'TR046_11', 'TR046_20'), ('TR046_11_20', 'TR046_20', 'TR046_11'), ('TR046_11_21', 'TR046_11', 'TR046_21'), ('TR046_11_21', 'TR046_21', 'TR046_11'), ('TR046_1_2', 'TR046_1', 'TR046_2'), ('TR046_1_2', 'TR046_2', 'TR046_1'), ('TR046_1_4', 'TR046_1', 'TR046_4'), ('TR046_1_4', 'TR046_4', 'TR046_1'), ('TR046_2_12', 'TR046_12', 'TR046_2'), ('TR046_2_12', 'TR046_2', 'TR046_12'), ('TR046_2_13', 'TR046_13', 'TR046_2'), ('TR046_2_13', 'TR046_2', 'TR046_13'), ('TR046_4_6', 'TR046_4', 'TR046_6'), ('TR046_4_6', 'TR046_6', 'TR046_4'), ('TR046_5_14', 'TR046_14', 'TR046_5'), ('TR046_5_14', 'TR046_5', 'TR046_14'), ('TR046_5_7', 'TR046_5', 'TR046_7'), ('TR046_5_7', 'TR046_7', 'TR046_5'), ('TR046_6_15', 'TR046_15', 'TR046_6'), ('TR046_6_15', 'TR046_6', 'TR046_15'), ('TR046_7_9', 'TR046_7', 'TR046_9'), ('TR046_7_9', 'TR046_9', 'TR046_7'), ('TR046_8_10', 'TR046_10', 'TR046_8'), ('TR046_8_10', 'TR046_8', 'TR046_10'), ('TR046_8_16', 'TR046_16', 'TR046_8'), ('TR046_8_16', 'TR046_8', 'TR046_16'), ('TR046_9_11', 'TR046_11', 'TR046_9'), ('TR046_9_11', 'TR046_9', 'TR046_11'), ('TR046_9_17', 'TR046_17', 'TR046_9'), ('TR046_9_17', 'TR046_9', 'TR046_17'), ('TR046_9_18', 'TR046_18', 'TR046_9'), ('TR046_9_18', 'TR046_9', 'TR046_18'), ('TR047_10_22', 'TR047_10', 'TR047_22'), ('TR047_10_22', 'TR047_22', 'TR047_10'), ('TR047_11_13', 'TR047_11', 'TR047_13'), ('TR047_11_13', 'TR047_13', 'TR047_11'), ('TR047_11_23', 'TR047_11', 'TR047_23'), ('TR047_11_23', 'TR047_23', 'TR047_11'), ('TR047_12_14', 'TR047_12', 'TR047_14'), ('TR047_12_14', 'TR047_14', 'TR047_12'), ('TR047_13_15', 'TR047_13', 'TR047_15'), ('TR047_13_15', 'TR047_15', 'TR047_13'), ('TR047_14_24', 'TR047_14', 'TR047_24'), ('TR047_14_24', 'TR047_24', 'TR047_14'), ('TR047_14_25', 'TR047_14', 'TR047_25'), ('TR047_14_25', 'TR047_25', 'TR047_14'), ('TR047_15_26', 'TR047_15', 'TR047_26'), ('TR047_15_26', 'TR047_26', 'TR047_15'), ('TR047_15_27', 'TR047_15', 'TR047_27'), ('TR047_15_27', 'TR047_27', 'TR047_15'), ('TR047_1_2', 'TR047_1', 'TR047_2'), ('TR047_1_2', 'TR047_2', 'TR047_1'), ('TR047_1_3', 'TR047_1', 'TR047_3'), ('TR047_1_3', 'TR047_3', 'TR047_1'), ('TR047_2_5', 'TR047_2', 'TR047_5'), ('TR047_2_5', 'TR047_5', 'TR047_2'), ('TR047_3_7', 'TR047_3', 'TR047_7'), ('TR047_3_7', 'TR047_7', 'TR047_3'), ('TR047_4_16', 'TR047_16', 'TR047_4'), ('TR047_4_16', 'TR047_4', 'TR047_16'), ('TR047_4_8', 'TR047_4', 'TR047_8'), ('TR047_4_8', 'TR047_8', 'TR047_4'), ('TR047_5_17', 'TR047_17', 'TR047_5'), ('TR047_5_17', 'TR047_5', 'TR047_17'), ('TR047_6_10', 'TR047_10', 'TR047_6'), ('TR047_6_10', 'TR047_6', 'TR047_10'), ('TR047_6_18', 'TR047_18', 'TR047_6'), ('TR047_6_18', 'TR047_6', 'TR047_18'), ('TR047_7_19', 'TR047_19', 'TR047_7'), ('TR047_7_19', 'TR047_7', 'TR047_19'), ('TR047_8_20', 'TR047_20', 'TR047_8'), ('TR047_8_20', 'TR047_8', 'TR047_20'), ('TR047_9_12', 'TR047_12', 'TR047_9'), ('TR047_9_12', 'TR047_9', 'TR047_12'), ('TR047_9_21', 'TR047_21', 'TR047_9'), ('TR047_9_21', 'TR047_9', 'TR047_21'), ('TR048_1_2', 'TR048_1', 'TR048_2'), ('TR048_1_2', 'TR048_2', 'TR048_1'), ('TR048_1_8', 'TR048_1', 'TR048_8'), ('TR048_1_8', 'TR048_8', 'TR048_1'), ('TR048_2_10', 'TR048_10', 'TR048_2'), ('TR048_2_10', 'TR048_2', 'TR048_10'), ('TR048_2_11', 'TR048_11', 'TR048_2'), ('TR048_2_11', 'TR048_2', 'TR048_11'), ('TR048_4_12', 'TR048_12', 'TR048_4'), ('TR048_4_12', 'TR048_4', 'TR048_12'), ('TR048_4_9', 'TR048_4', 'TR048_9'), ('TR048_4_9', 'TR048_9', 'TR048_4'), ('TR048_5_13', 'TR048_13', 'TR048_5'), ('TR048_5_13', 'TR048_5', 'TR048_13'), ('TR048_5_6', 'TR048_5', 'TR048_6'), ('TR048_5_6', 'TR048_6', 'TR048_5'), ('TR048_7_14', 'TR048_14', 'TR048_7'), ('TR048_7_14', 'TR048_7', 'TR048_14'), ('TR048_7_8', 'TR048_7', 'TR048_8'), ('TR048_7_8', 'TR048_8', 'TR048_7'), ('TR049_10_15', 'TR049_10', 'TR049_15'), ('TR049_10_15', 'TR049_15', 'TR049_10'), ('TR049_10_17', 'TR049_10', 'TR049_17'), ('TR049_10_17', 'TR049_17', 'TR049_10'), ('TR049_11_26', 'TR049_11', 'TR049_26'), ('TR049_11_26', 'TR049_26', 'TR049_11'), ('TR049_12_27', 'TR049_12', 'TR049_27'), ('TR049_12_27', 'TR049_27', 'TR049_12'), ('TR049_13_19', 'TR049_13', 'TR049_19'), ('TR049_13_19', 'TR049_19', 'TR049_13'), ('TR049_13_28', 'TR049_13', 'TR049_28'), ('TR049_13_28', 'TR049_28', 'TR049_13'), ('TR049_14_20', 'TR049_14', 'TR049_20'), ('TR049_14_20', 'TR049_20', 'TR049_14'), ('TR049_15_29', 'TR049_15', 'TR049_29'), ('TR049_15_29', 'TR049_29', 'TR049_15'), ('TR049_17_21', 'TR049_17', 'TR049_21'), ('TR049_17_21', 'TR049_21', 'TR049_17'), ('TR049_18_21', 'TR049_18', 'TR049_21'), ('TR049_18_21', 'TR049_21', 'TR049_18'), ('TR049_18_30', 'TR049_18', 'TR049_30'), ('TR049_18_30', 'TR049_30', 'TR049_18'), ('TR049_19_31', 'TR049_19', 'TR049_31'), ('TR049_19_31', 'TR049_31', 'TR049_19'), ('TR049_1_2', 'TR049_1', 'TR049_2'), ('TR049_1_2', 'TR049_2', 'TR049_1'), ('TR049_1_24', 'TR049_1', 'TR049_24'), ('TR049_1_24', 'TR049_24', 'TR049_1'), ('TR049_1_3', 'TR049_1', 'TR049_3'), ('TR049_1_3', 'TR049_3', 'TR049_1'), ('TR049_20_32', 'TR049_20', 'TR049_32'), ('TR049_20_32', 'TR049_32', 'TR049_20'), ('TR049_20_33', 'TR049_20', 'TR049_33'), ('TR049_20_33', 'TR049_33', 'TR049_20'), ('TR049_20_34', 'TR049_20', 'TR049_34'), ('TR049_20_34', 'TR049_34', 'TR049_20'), ('TR049_21_22', 'TR049_21', 'TR049_22'), ('TR049_21_22', 'TR049_22', 'TR049_21'), ('TR049_21_23', 'TR049_21', 'TR049_23'), ('TR049_21_23', 'TR049_23', 'TR049_21'), ('TR049_22_35', 'TR049_22', 'TR049_35'), ('TR049_22_35', 'TR049_35', 'TR049_22'), ('TR049_22_36', 'TR049_22', 'TR049_36'), ('TR049_22_36', 'TR049_36', 'TR049_22'), ('TR049_22_37', 'TR049_22', 'TR049_37'), ('TR049_22_37', 'TR049_37', 'TR049_22'), ('TR049_23_38', 'TR049_23', 'TR049_38'), ('TR049_23_38', 'TR049_38', 'TR049_23'), ('TR049_23_39', 'TR049_23', 'TR049_39'), ('TR049_23_39', 'TR049_39', 'TR049_23'), ('TR049_23_40', 'TR049_23', 'TR049_40'), ('TR049_23_40', 'TR049_40', 'TR049_23'), ('TR049_24_41', 'TR049_24', 'TR049_41'), ('TR049_24_41', 'TR049_41', 'TR049_24'), ('TR049_24_42', 'TR049_24', 'TR049_42'), ('TR049_24_42', 'TR049_42', 'TR049_24'), ('TR049_24_43', 'TR049_24', 'TR049_43'), ('TR049_24_43', 'TR049_43', 'TR049_24'), ('TR049_2_5', 'TR049_2', 'TR049_5'), ('TR049_2_5', 'TR049_5', 'TR049_2'), ('TR049_3_7', 'TR049_3', 'TR049_7'), ('TR049_3_7', 'TR049_7', 'TR049_3'), ('TR049_4_8', 'TR049_4', 'TR049_8'), ('TR049_4_8', 'TR049_8', 'TR049_4'), ('TR049_4_9', 'TR049_4', 'TR049_9'), ('TR049_4_9', 'TR049_9', 'TR049_4'), ('TR049_5_11', 'TR049_11', 'TR049_5'), ('TR049_5_11', 'TR049_5', 'TR049_11'), ('TR049_6_12', 'TR049_12', 'TR049_6'), ('TR049_6_12', 'TR049_6', 'TR049_12'), ('TR049_6_9', 'TR049_6', 'TR049_9'), ('TR049_6_9', 'TR049_9', 'TR049_6'), ('TR049_7_25', 'TR049_25', 'TR049_7'), ('TR049_7_25', 'TR049_7', 'TR049_25'), ('TR049_8_14', 'TR049_14', 'TR049_8'), ('TR049_8_14', 'TR049_8', 'TR049_14'), ('TR050_11_12', 'TR050_11', 'TR050_12'), ('TR050_11_12', 'TR050_12', 'TR050_11'), ('TR050_12_28', 'TR050_12', 'TR050_28'), ('TR050_12_28', 'TR050_28', 'TR050_12'), ('TR050_12_29', 'TR050_12', 'TR050_29'), ('TR050_12_29', 'TR050_29', 'TR050_12'), ('TR050_12_30', 'TR050_12', 'TR050_30'), ('TR050_12_30', 'TR050_30', 'TR050_12'), ('TR050_14_15', 'TR050_14', 'TR050_15'), ('TR050_14_15', 'TR050_15', 'TR050_14'), ('TR050_15_17', 'TR050_15', 'TR050_17'), ('TR050_15_17', 'TR050_17', 'TR050_15'), ('TR050_15_31', 'TR050_15', 'TR050_31'), ('TR050_15_31', 'TR050_31', 'TR050_15'), ('TR050_17_18', 'TR050_17', 'TR050_18'), ('TR050_17_18', 'TR050_18', 'TR050_17'), ('TR050_17_22', 'TR050_17', 'TR050_22'), ('TR050_17_22', 'TR050_22', 'TR050_17'), ('TR050_17_32', 'TR050_17', 'TR050_32'), ('TR050_17_32', 'TR050_32', 'TR050_17'), ('TR050_18_19', 'TR050_18', 'TR050_19'), ('TR050_18_19', 'TR050_19', 'TR050_18'), ('TR050_18_33', 'TR050_18', 'TR050_33'), ('TR050_18_33', 'TR050_33', 'TR050_18'), ('TR050_18_34', 'TR050_18', 'TR050_34'), ('TR050_18_34', 'TR050_34', 'TR050_18'), ('TR050_19_20', 'TR050_19', 'TR050_20'), ('TR050_19_20', 'TR050_20', 'TR050_19'), ('TR050_19_35', 'TR050_19', 'TR050_35'), ('TR050_19_35', 'TR050_35', 'TR050_19'), ('TR050_19_36', 'TR050_19', 'TR050_36'), ('TR050_19_36', 'TR050_36', 'TR050_19'), ('TR050_1_23', 'TR050_1', 'TR050_23'), ('TR050_1_23', 'TR050_23', 'TR050_1'), ('TR050_1_6', 'TR050_1', 'TR050_6'), ('TR050_1_6', 'TR050_6', 'TR050_1'), ('TR050_20_21', 'TR050_20', 'TR050_21'), ('TR050_20_21', 'TR050_21', 'TR050_20'), ('TR050_20_37', 'TR050_20', 'TR050_37'), ('TR050_20_37', 'TR050_37', 'TR050_20'), ('TR050_20_38', 'TR050_20', 'TR050_38'), ('TR050_20_38', 'TR050_38', 'TR050_20'), ('TR050_21_22', 'TR050_21', 'TR050_22'), ('TR050_21_22', 'TR050_22', 'TR050_21'), ('TR050_21_39', 'TR050_21', 'TR050_39'), ('TR050_21_39', 'TR050_39', 'TR050_21'), ('TR050_21_40', 'TR050_21', 'TR050_40'), ('TR050_21_40', 'TR050_40', 'TR050_21'), ('TR050_22_41', 'TR050_22', 'TR050_41'), ('TR050_22_41', 'TR050_41', 'TR050_22'), ('TR050_22_42', 'TR050_22', 'TR050_42'), ('TR050_22_42', 'TR050_42', 'TR050_22'), ('TR050_2_24', 'TR050_2', 'TR050_24'), ('TR050_2_24', 'TR050_24', 'TR050_2'), ('TR050_2_3', 'TR050_2', 'TR050_3'), ('TR050_2_3', 'TR050_3', 'TR050_2'), ('TR050_3_7', 'TR050_3', 'TR050_7'), ('TR050_3_7', 'TR050_7', 'TR050_3'), ('TR050_4_25', 'TR050_25', 'TR050_4'), ('TR050_4_25', 'TR050_4', 'TR050_25'), ('TR050_4_5', 'TR050_4', 'TR050_5'), ('TR050_4_5', 'TR050_5', 'TR050_4'), ('TR050_5_26', 'TR050_26', 'TR050_5'), ('TR050_5_26', 'TR050_5', 'TR050_26'), ('TR050_6_11', 'TR050_11', 'TR050_6'), ('TR050_6_11', 'TR050_6', 'TR050_11'), ('TR050_7_8', 'TR050_7', 'TR050_8'), ('TR050_7_8', 'TR050_8', 'TR050_7'), ('TR050_8_14', 'TR050_14', 'TR050_8'), ('TR050_8_14', 'TR050_8', 'TR050_14'), ('TR050_8_27', 'TR050_27', 'TR050_8'), ('TR050_8_27', 'TR050_8', 'TR050_27'), ('TR051_11_26', 'TR051_11', 'TR051_26'), ('TR051_11_26', 'TR051_26', 'TR051_11'), ('TR051_12_14', 'TR051_12', 'TR051_14'), ('TR051_12_14', 'TR051_14', 'TR051_12'), ('TR051_12_27', 'TR051_12', 'TR051_27'), ('TR051_12_27', 'TR051_27', 'TR051_12'), ('TR051_13_15', 'TR051_13', 'TR051_15'), ('TR051_13_15', 'TR051_15', 'TR051_13'), ('TR051_13_16', 'TR051_13', 'TR051_16'), ('TR051_13_16', 'TR051_16', 'TR051_13'), ('TR051_14_17', 'TR051_14', 'TR051_17'), ('TR051_14_17', 'TR051_17', 'TR051_14'), ('TR051_15_18', 'TR051_15', 'TR051_18'), ('TR051_15_18', 'TR051_18', 'TR051_15'), ('TR051_15_28', 'TR051_15', 'TR051_28'), ('TR051_15_28', 'TR051_28', 'TR051_15'), ('TR051_15_29', 'TR051_15', 'TR051_29'), ('TR051_15_29', 'TR051_29', 'TR051_15'), ('TR051_16_19', 'TR051_16', 'TR051_19'), ('TR051_16_19', 'TR051_19', 'TR051_16'), ('TR051_16_30', 'TR051_16', 'TR051_30'), ('TR051_16_30', 'TR051_30', 'TR051_16'), ('TR051_16_31', 'TR051_16', 'TR051_31'), ('TR051_16_31', 'TR051_31', 'TR051_16'), ('TR051_17_32', 'TR051_17', 'TR051_32'), ('TR051_17_32', 'TR051_32', 'TR051_17'), ('TR051_17_33', 'TR051_17', 'TR051_33'), ('TR051_17_33', 'TR051_33', 'TR051_17'), ('TR051_17_34', 'TR051_17', 'TR051_34'), ('TR051_17_34', 'TR051_34', 'TR051_17'), ('TR051_18_20', 'TR051_18', 'TR051_20'), ('TR051_18_20', 'TR051_20', 'TR051_18'), ('TR051_18_35', 'TR051_18', 'TR051_35'), ('TR051_18_35', 'TR051_35', 'TR051_18'), ('TR051_18_36', 'TR051_18', 'TR051_36'), ('TR051_18_36', 'TR051_36', 'TR051_18'), ('TR051_19_21', 'TR051_19', 'TR051_21'), ('TR051_19_21', 'TR051_21', 'TR051_19'), ('TR051_19_37', 'TR051_19', 'TR051_37'), ('TR051_19_37', 'TR051_37', 'TR051_19'), ('TR051_19_38', 'TR051_19', 'TR051_38'), ('TR051_19_38', 'TR051_38', 'TR051_19'), ('TR051_1_2', 'TR051_1', 'TR051_2'), ('TR051_1_2', 'TR051_2', 'TR051_1'), ('TR051_1_5', 'TR051_1', 'TR051_5'), ('TR051_1_5', 'TR051_5', 'TR051_1'), ('TR051_20_21', 'TR051_20', 'TR051_21'), ('TR051_20_21', 'TR051_21', 'TR051_20'), ('TR051_20_39', 'TR051_20', 'TR051_39'), ('TR051_20_39', 'TR051_39', 'TR051_20'), ('TR051_20_40', 'TR051_20', 'TR051_40'), ('TR051_20_40', 'TR051_40', 'TR051_20'), ('TR051_21_41', 'TR051_21', 'TR051_41'), ('TR051_21_41', 'TR051_41', 'TR051_21'), ('TR051_21_42', 'TR051_21', 'TR051_42'), ('TR051_21_42', 'TR051_42', 'TR051_21'), ('TR051_2_22', 'TR051_2', 'TR051_22'), ('TR051_2_22', 'TR051_22', 'TR051_2'), ('TR051_2_6', 'TR051_2', 'TR051_6'), ('TR051_2_6', 'TR051_6', 'TR051_2'), ('TR051_5_8', 'TR051_5', 'TR051_8'), ('TR051_5_8', 'TR051_8', 'TR051_5'), ('TR051_6_9', 'TR051_6', 'TR051_9'), ('TR051_6_9', 'TR051_9', 'TR051_6'), ('TR051_7_11', 'TR051_11', 'TR051_7'), ('TR051_7_11', 'TR051_7', 'TR051_11'), ('TR051_7_23', 'TR051_23', 'TR051_7'), ('TR051_7_23', 'TR051_7', 'TR051_23'), ('TR051_8_24', 'TR051_24', 'TR051_8'), ('TR051_8_24', 'TR051_8', 'TR051_24'), ('TR051_9_13', 'TR051_13', 'TR051_9'), ('TR051_9_13', 'TR051_9', 'TR051_13'), ('TR051_9_25', 'TR051_25', 'TR051_9'), ('TR051_9_25', 'TR051_9', 'TR051_25'), ('TR052_1_10', 'TR052_1', 'TR052_10'), ('TR052_1_10', 'TR052_10', 'TR052_1'), ('TR052_1_2', 'TR052_1', 'TR052_2'), ('TR052_1_2', 'TR052_2', 'TR052_1'), ('TR052_1_3', 'TR052_1', 'TR052_3'), ('TR052_1_3', 'TR052_3', 'TR052_1'), ('TR052_1_9', 'TR052_1', 'TR052_9'), ('TR052_1_9', 'TR052_9', 'TR052_1'), ('TR052_2_11', 'TR052_11', 'TR052_2'), ('TR052_2_11', 'TR052_2', 'TR052_11'), ('TR052_2_12', 'TR052_12', 'TR052_2'), ('TR052_2_12', 'TR052_2', 'TR052_12'), ('TR052_2_4', 'TR052_2', 'TR052_4'), ('TR052_2_4', 'TR052_4', 'TR052_2'), ('TR052_3_6', 'TR052_3', 'TR052_6'), ('TR052_3_6', 'TR052_6', 'TR052_3'), ('TR052_4_8', 'TR052_4', 'TR052_8'), ('TR052_4_8', 'TR052_8', 'TR052_4'), ('TR052_6_13', 'TR052_13', 'TR052_6'), ('TR052_6_13', 'TR052_6', 'TR052_13'), ('TR053_1_2', 'TR053_1', 'TR053_2'), ('TR053_1_2', 'TR053_2', 'TR053_1'), ('TR053_1_4', 'TR053_1', 'TR053_4'), ('TR053_1_4', 'TR053_4', 'TR053_1'), ('TR053_4_5', 'TR053_4', 'TR053_5'), ('TR053_4_5', 'TR053_5', 'TR053_4'), ('TR053_5_7', 'TR053_5', 'TR053_7'), ('TR053_5_7', 'TR053_7', 'TR053_5'), ('TR053_6_10', 'TR053_10', 'TR053_6'), ('TR053_6_10', 'TR053_6', 'TR053_10'), ('TR053_6_8', 'TR053_6', 'TR053_8'), ('TR053_6_8', 'TR053_8', 'TR053_6'), ('TR053_7_9', 'TR053_7', 'TR053_9'), ('TR053_7_9', 'TR053_9', 'TR053_7'), ('TR053_9_11', 'TR053_11', 'TR053_9'), ('TR053_9_11', 'TR053_9', 'TR053_11'), ('TR053_9_12', 'TR053_12', 'TR053_9'), ('TR053_9_12', 'TR053_9', 'TR053_12'), ('TR054_10_13', 'TR054_10', 'TR054_13'), ('TR054_10_13', 'TR054_13', 'TR054_10'), ('TR054_11_19', 'TR054_11', 'TR054_19'), ('TR054_11_19', 'TR054_19', 'TR054_11'), ('TR054_1_2', 'TR054_1', 'TR054_2'), ('TR054_1_2', 'TR054_2', 'TR054_1'), ('TR054_1_4', 'TR054_1', 'TR054_4'), ('TR054_1_4', 'TR054_4', 'TR054_1'), ('TR054_4_6', 'TR054_4', 'TR054_6'), ('TR054_4_6', 'TR054_6', 'TR054_4'), ('TR054_5_14', 'TR054_14', 'TR054_5'), ('TR054_5_14', 'TR054_5', 'TR054_14'), ('TR054_5_7', 'TR054_5', 'TR054_7'), ('TR054_5_7', 'TR054_7', 'TR054_5'), ('TR054_6_8', 'TR054_6', 'TR054_8'), ('TR054_6_8', 'TR054_8', 'TR054_6'), ('TR054_7_10', 'TR054_10', 'TR054_7'), ('TR054_7_10', 'TR054_7', 'TR054_10'), ('TR054_8_15', 'TR054_15', 'TR054_8'), ('TR054_8_15', 'TR054_8', 'TR054_15'), ('TR054_8_16', 'TR054_16', 'TR054_8'), ('TR054_8_16', 'TR054_8', 'TR054_16'), ('TR054_8_17', 'TR054_17', 'TR054_8'), ('TR054_8_17', 'TR054_8', 'TR054_17'), ('TR054_9_11', 'TR054_11', 'TR054_9'), ('TR054_9_11', 'TR054_9', 'TR054_11'), ('TR054_9_18', 'TR054_18', 'TR054_9'), ('TR054_9_18', 'TR054_9', 'TR054_18'), ('TR055_1_2', 'TR055_1', 'TR055_2'), ('TR055_1_2', 'TR055_2', 'TR055_1'), ('TR055_2_3', 'TR055_2', 'TR055_3'), ('TR055_2_3', 'TR055_3', 'TR055_2'), ('TR055_2_5', 'TR055_2', 'TR055_5'), ('TR055_2_5', 'TR055_5', 'TR055_2'), ('TR055_2_6', 'TR055_2', 'TR055_6'), ('TR055_2_6', 'TR055_6', 'TR055_2'), ('TR055_3_4', 'TR055_3', 'TR055_4'), ('TR055_3_4', 'TR055_4', 'TR055_3'), ('TR055_3_7', 'TR055_3', 'TR055_7'), ('TR055_3_7', 'TR055_7', 'TR055_3'), ('TR055_3_8', 'TR055_3', 'TR055_8'), ('TR055_3_8', 'TR055_8', 'TR055_3'), ('TR056_10_13', 'TR056_10', 'TR056_13'), ('TR056_10_13', 'TR056_13', 'TR056_10'), ('TR056_10_27', 'TR056_10', 'TR056_27'), ('TR056_10_27', 'TR056_27', 'TR056_10'), ('TR056_10_28', 'TR056_10', 'TR056_28'), ('TR056_10_28', 'TR056_28', 'TR056_10'), ('TR056_11_14', 'TR056_11', 'TR056_14'), ('TR056_11_14', 'TR056_14', 'TR056_11'), ('TR056_11_29', 'TR056_11', 'TR056_29'), ('TR056_11_29', 'TR056_29', 'TR056_11'), ('TR056_11_30', 'TR056_11', 'TR056_30'), ('TR056_11_30', 'TR056_30', 'TR056_11'), ('TR056_12_15', 'TR056_12', 'TR056_15'), ('TR056_12_15', 'TR056_15', 'TR056_12'), ('TR056_12_31', 'TR056_12', 'TR056_31'), ('TR056_12_31', 'TR056_31', 'TR056_12'), ('TR056_12_32', 'TR056_12', 'TR056_32'), ('TR056_12_32', 'TR056_32', 'TR056_12'), ('TR056_13_33', 'TR056_13', 'TR056_33'), ('TR056_13_33', 'TR056_33', 'TR056_13'), ('TR056_13_34', 'TR056_13', 'TR056_34'), ('TR056_13_34', 'TR056_34', 'TR056_13'), ('TR056_14_16', 'TR056_14', 'TR056_16'), ('TR056_14_16', 'TR056_16', 'TR056_14'), ('TR056_14_35', 'TR056_14', 'TR056_35'), ('TR056_14_35', 'TR056_35', 'TR056_14'), ('TR056_14_36', 'TR056_14', 'TR056_36'), ('TR056_14_36', 'TR056_36', 'TR056_14'), ('TR056_15_16', 'TR056_15', 'TR056_16'), ('TR056_15_16', 'TR056_16', 'TR056_15'), ('TR056_15_37', 'TR056_15', 'TR056_37'), ('TR056_15_37', 'TR056_37', 'TR056_15'), ('TR056_15_38', 'TR056_15', 'TR056_38'), ('TR056_15_38', 'TR056_38', 'TR056_15'), ('TR056_16_39', 'TR056_16', 'TR056_39'), ('TR056_16_39', 'TR056_39', 'TR056_16'), ('TR056_16_40', 'TR056_16', 'TR056_40'), ('TR056_16_40', 'TR056_40', 'TR056_16'), ('TR056_1_17', 'TR056_1', 'TR056_17'), ('TR056_1_17', 'TR056_17', 'TR056_1'), ('TR056_1_2', 'TR056_1', 'TR056_2'), ('TR056_1_2', 'TR056_2', 'TR056_1'), ('TR056_1_3', 'TR056_1', 'TR056_3'), ('TR056_1_3', 'TR056_3', 'TR056_1'), ('TR056_2_4', 'TR056_2', 'TR056_4'), ('TR056_2_4', 'TR056_4', 'TR056_2'), ('TR056_3_18', 'TR056_18', 'TR056_3'), ('TR056_3_18', 'TR056_3', 'TR056_18'), ('TR056_3_6', 'TR056_3', 'TR056_6'), ('TR056_3_6', 'TR056_6', 'TR056_3'), ('TR056_3_7', 'TR056_3', 'TR056_7'), ('TR056_3_7', 'TR056_7', 'TR056_3'), ('TR056_4_19', 'TR056_19', 'TR056_4'), ('TR056_4_19', 'TR056_4', 'TR056_19'), ('TR056_4_8', 'TR056_4', 'TR056_8'), ('TR056_4_8', 'TR056_8', 'TR056_4'), ('TR056_6_20', 'TR056_20', 'TR056_6'), ('TR056_6_20', 'TR056_6', 'TR056_20'), ('TR056_6_21', 'TR056_21', 'TR056_6'), ('TR056_6_21', 'TR056_6', 'TR056_21'), ('TR056_6_9', 'TR056_6', 'TR056_9'), ('TR056_6_9', 'TR056_9', 'TR056_6'), ('TR056_7_10', 'TR056_10', 'TR056_7'), ('TR056_7_10', 'TR056_7', 'TR056_10'), ('TR056_7_22', 'TR056_22', 'TR056_7'), ('TR056_7_22', 'TR056_7', 'TR056_22'), ('TR056_7_23', 'TR056_23', 'TR056_7'), ('TR056_7_23', 'TR056_7', 'TR056_23'), ('TR056_8_11', 'TR056_11', 'TR056_8'), ('TR056_8_11', 'TR056_8', 'TR056_11'), ('TR056_8_12', 'TR056_12', 'TR056_8'), ('TR056_8_12', 'TR056_8', 'TR056_12'), ('TR056_8_24', 'TR056_24', 'TR056_8'), ('TR056_8_24', 'TR056_8', 'TR056_24'), ('TR056_9_13', 'TR056_13', 'TR056_9'), ('TR056_9_13', 'TR056_9', 'TR056_13'), ('TR056_9_25', 'TR056_25', 'TR056_9'), ('TR056_9_25', 'TR056_9', 'TR056_25'), ('TR056_9_26', 'TR056_26', 'TR056_9'), ('TR056_9_26', 'TR056_9', 'TR056_26'), ('TR057_10_22', 'TR057_10', 'TR057_22'), ('TR057_10_22', 'TR057_22', 'TR057_10'), ('TR057_10_23', 'TR057_10', 'TR057_23'), ('TR057_10_23', 'TR057_23', 'TR057_10'), ('TR057_11_14', 'TR057_11', 'TR057_14'), ('TR057_11_14', 'TR057_14', 'TR057_11'), ('TR057_12_13', 'TR057_12', 'TR057_13'), ('TR057_12_13', 'TR057_13', 'TR057_12'), ('TR057_12_16', 'TR057_12', 'TR057_16'), ('TR057_12_16', 'TR057_16', 'TR057_12'), ('TR057_12_17', 'TR057_12', 'TR057_17'), ('TR057_12_17', 'TR057_17', 'TR057_12'), ('TR057_12_24', 'TR057_12', 'TR057_24'), ('TR057_12_24', 'TR057_24', 'TR057_12'), ('TR057_13_14', 'TR057_13', 'TR057_14'), ('TR057_13_14', 'TR057_14', 'TR057_13'), ('TR057_13_25', 'TR057_13', 'TR057_25'), ('TR057_13_25', 'TR057_25', 'TR057_13'), ('TR057_13_26', 'TR057_13', 'TR057_26'), ('TR057_13_26', 'TR057_26', 'TR057_13'), ('TR057_14_15', 'TR057_14', 'TR057_15'), ('TR057_14_15', 'TR057_15', 'TR057_14'), ('TR057_14_27', 'TR057_14', 'TR057_27'), ('TR057_14_27', 'TR057_27', 'TR057_14'), ('TR057_15_16', 'TR057_15', 'TR057_16'), ('TR057_15_16', 'TR057_16', 'TR057_15'), ('TR057_16_19', 'TR057_16', 'TR057_19'), ('TR057_16_19', 'TR057_19', 'TR057_16'), ('TR057_16_28', 'TR057_16', 'TR057_28'), ('TR057_16_28', 'TR057_28', 'TR057_16'), ('TR057_17_29', 'TR057_17', 'TR057_29'), ('TR057_17_29', 'TR057_29', 'TR057_17'), ('TR057_18_19', 'TR057_18', 'TR057_19'), ('TR057_18_19', 'TR057_19', 'TR057_18'), ('TR057_18_30', 'TR057_18', 'TR057_30'), ('TR057_18_30', 'TR057_30', 'TR057_18'), ('TR057_19_31', 'TR057_19', 'TR057_31'), ('TR057_19_31', 'TR057_31', 'TR057_19'), ('TR057_19_32', 'TR057_19', 'TR057_32'), ('TR057_19_32', 'TR057_32', 'TR057_19'), ('TR057_1_6', 'TR057_1', 'TR057_6'), ('TR057_1_6', 'TR057_6', 'TR057_1'), ('TR057_2_10', 'TR057_10', 'TR057_2'), ('TR057_2_10', 'TR057_2', 'TR057_10'), ('TR057_2_3', 'TR057_2', 'TR057_3'), ('TR057_2_3', 'TR057_3', 'TR057_2'), ('TR057_4_11', 'TR057_11', 'TR057_4'), ('TR057_4_11', 'TR057_4', 'TR057_11'), ('TR057_4_5', 'TR057_4', 'TR057_5'), ('TR057_4_5', 'TR057_5', 'TR057_4'), ('TR057_5_8', 'TR057_5', 'TR057_8'), ('TR057_5_8', 'TR057_8', 'TR057_5'), ('TR057_6_9', 'TR057_6', 'TR057_9'), ('TR057_6_9', 'TR057_9', 'TR057_6'), ('TR057_7_11', 'TR057_11', 'TR057_7'), ('TR057_7_11', 'TR057_7', 'TR057_11'), ('TR057_7_20', 'TR057_20', 'TR057_7'), ('TR057_7_20', 'TR057_7', 'TR057_20'), ('TR057_9_21', 'TR057_21', 'TR057_9'), ('TR057_9_21', 'TR057_9', 'TR057_21'), ('TR058_10_11', 'TR058_10', 'TR058_11'), ('TR058_10_11', 'TR058_11', 'TR058_10'), ('TR058_10_20', 'TR058_10', 'TR058_20'), ('TR058_10_20', 'TR058_20', 'TR058_10'), ('TR058_10_21', 'TR058_10', 'TR058_21'), ('TR058_10_21', 'TR058_21', 'TR058_10'), ('TR058_11_22', 'TR058_11', 'TR058_22'), ('TR058_11_22', 'TR058_22', 'TR058_11'), ('TR058_11_23', 'TR058_11', 'TR058_23'), ('TR058_11_23', 'TR058_23', 'TR058_11'), ('TR058_1_2', 'TR058_1', 'TR058_2'), ('TR058_1_2', 'TR058_2', 'TR058_1'), ('TR058_1_3', 'TR058_1', 'TR058_3'), ('TR058_1_3', 'TR058_3', 'TR058_1'), ('TR058_1_4', 'TR058_1', 'TR058_4'), ('TR058_1_4', 'TR058_4', 'TR058_1'), ('TR058_1_5', 'TR058_1', 'TR058_5'), ('TR058_1_5', 'TR058_5', 'TR058_1'), ('TR058_3_6', 'TR058_3', 'TR058_6'), ('TR058_3_6', 'TR058_6', 'TR058_3'), ('TR058_3_7', 'TR058_3', 'TR058_7'), ('TR058_3_7', 'TR058_7', 'TR058_3'), ('TR058_4_8', 'TR058_4', 'TR058_8'), ('TR058_4_8', 'TR058_8', 'TR058_4'), ('TR058_4_9', 'TR058_4', 'TR058_9'), ('TR058_4_9', 'TR058_9', 'TR058_4'), ('TR058_5_10', 'TR058_10', 'TR058_5'), ('TR058_5_10', 'TR058_5', 'TR058_10'), ('TR058_5_11', 'TR058_11', 'TR058_5'), ('TR058_5_11', 'TR058_5', 'TR058_11'), ('TR058_6_12', 'TR058_12', 'TR058_6'), ('TR058_6_12', 'TR058_6', 'TR058_12'), ('TR058_6_13', 'TR058_13', 'TR058_6'), ('TR058_6_13', 'TR058_6', 'TR058_13'), ('TR058_6_7', 'TR058_6', 'TR058_7'), ('TR058_6_7', 'TR058_7', 'TR058_6'), ('TR058_7_14', 'TR058_14', 'TR058_7'), ('TR058_7_14', 'TR058_7', 'TR058_14'), ('TR058_7_15', 'TR058_15', 'TR058_7'), ('TR058_7_15', 'TR058_7', 'TR058_15'), ('TR058_8_16', 'TR058_16', 'TR058_8'), ('TR058_8_16', 'TR058_8', 'TR058_16'), ('TR058_8_17', 'TR058_17', 'TR058_8'), ('TR058_8_17', 'TR058_8', 'TR058_17'), ('TR058_8_9', 'TR058_8', 'TR058_9'), ('TR058_8_9', 'TR058_9', 'TR058_8'), ('TR058_9_18', 'TR058_18', 'TR058_9'), ('TR058_9_18', 'TR058_9', 'TR058_18'), ('TR058_9_19', 'TR058_19', 'TR058_9'), ('TR058_9_19', 'TR058_9', 'TR058_19'), ('TR059_10_14', 'TR059_10', 'TR059_14'), ('TR059_10_14', 'TR059_14', 'TR059_10'), ('TR059_10_15', 'TR059_10', 'TR059_15'), ('TR059_10_15', 'TR059_15', 'TR059_10'), ('TR059_11_12', 'TR059_11', 'TR059_12'), ('TR059_11_12', 'TR059_12', 'TR059_11'), ('TR059_11_51', 'TR059_11', 'TR059_51'), ('TR059_11_51', 'TR059_51', 'TR059_11'), ('TR059_12_16', 'TR059_12', 'TR059_16'), ('TR059_12_16', 'TR059_16', 'TR059_12'), ('TR059_12_59', 'TR059_12', 'TR059_59'), ('TR059_12_59', 'TR059_59', 'TR059_12'), ('TR059_12_60', 'TR059_12', 'TR059_60'), ('TR059_12_60', 'TR059_60', 'TR059_12'), ('TR059_14_17', 'TR059_14', 'TR059_17'), ('TR059_14_17', 'TR059_17', 'TR059_14'), ('TR059_14_61', 'TR059_14', 'TR059_61'), ('TR059_14_61', 'TR059_61', 'TR059_14'), ('TR059_14_62', 'TR059_14', 'TR059_62'), ('TR059_14_62', 'TR059_62', 'TR059_14'), ('TR059_15_18', 'TR059_15', 'TR059_18'), ('TR059_15_18', 'TR059_18', 'TR059_15'), ('TR059_15_63', 'TR059_15', 'TR059_63'), ('TR059_15_63', 'TR059_63', 'TR059_15'), ('TR059_15_64', 'TR059_15', 'TR059_64'), ('TR059_15_64', 'TR059_64', 'TR059_15'), ('TR059_16_20', 'TR059_16', 'TR059_20'), ('TR059_16_20', 'TR059_20', 'TR059_16'), ('TR059_17_21', 'TR059_17', 'TR059_21'), ('TR059_17_21', 'TR059_21', 'TR059_17'), ('TR059_17_65', 'TR059_17', 'TR059_65'), ('TR059_17_65', 'TR059_65', 'TR059_17'), ('TR059_17_66', 'TR059_17', 'TR059_66'), ('TR059_17_66', 'TR059_66', 'TR059_17'), ('TR059_18_22', 'TR059_18', 'TR059_22'), ('TR059_18_22', 'TR059_22', 'TR059_18'), ('TR059_18_67', 'TR059_18', 'TR059_67'), ('TR059_18_67', 'TR059_67', 'TR059_18'), ('TR059_18_68', 'TR059_18', 'TR059_68'), ('TR059_18_68', 'TR059_68', 'TR059_18'), ('TR059_19_23', 'TR059_19', 'TR059_23'), ('TR059_19_23', 'TR059_23', 'TR059_19'), ('TR059_19_69', 'TR059_19', 'TR059_69'), ('TR059_19_69', 'TR059_69', 'TR059_19'), ('TR059_1_2', 'TR059_1', 'TR059_2'), ('TR059_1_2', 'TR059_2', 'TR059_1'), ('TR059_1_52', 'TR059_1', 'TR059_52'), ('TR059_1_52', 'TR059_52', 'TR059_1'), ('TR059_20_70', 'TR059_20', 'TR059_70'), ('TR059_20_70', 'TR059_70', 'TR059_20'), ('TR059_23_71', 'TR059_23', 'TR059_71'), ('TR059_23_71', 'TR059_71', 'TR059_23'), ('TR059_24_25', 'TR059_24', 'TR059_25'), ('TR059_24_25', 'TR059_25', 'TR059_24'), ('TR059_24_72', 'TR059_24', 'TR059_72'), ('TR059_24_72', 'TR059_72', 'TR059_24'), ('TR059_25_26', 'TR059_25', 'TR059_26'), ('TR059_25_26', 'TR059_26', 'TR059_25'), ('TR059_26_27', 'TR059_26', 'TR059_27'), ('TR059_26_27', 'TR059_27', 'TR059_26'), ('TR059_26_28', 'TR059_26', 'TR059_28'), ('TR059_26_28', 'TR059_28', 'TR059_26'), ('TR059_27_29', 'TR059_27', 'TR059_29'), ('TR059_27_29', 'TR059_29', 'TR059_27'), ('TR059_27_73', 'TR059_27', 'TR059_73'), ('TR059_27_73', 'TR059_73', 'TR059_27'), ('TR059_27_74', 'TR059_27', 'TR059_74'), ('TR059_27_74', 'TR059_74', 'TR059_27'), ('TR059_28_30', 'TR059_28', 'TR059_30'), ('TR059_28_30', 'TR059_30', 'TR059_28'), ('TR059_28_75', 'TR059_28', 'TR059_75'), ('TR059_28_75', 'TR059_75', 'TR059_28'), ('TR059_28_76', 'TR059_28', 'TR059_76'), ('TR059_28_76', 'TR059_76', 'TR059_28'), ('TR059_29_31', 'TR059_29', 'TR059_31'), ('TR059_29_31', 'TR059_31', 'TR059_29'), ('TR059_29_77', 'TR059_29', 'TR059_77'), ('TR059_29_77', 'TR059_77', 'TR059_29'), ('TR059_29_78', 'TR059_29', 'TR059_78'), ('TR059_29_78', 'TR059_78', 'TR059_29'), ('TR059_2_4', 'TR059_2', 'TR059_4'), ('TR059_2_4', 'TR059_4', 'TR059_2'), ('TR059_2_53', 'TR059_2', 'TR059_53'), ('TR059_2_53', 'TR059_53', 'TR059_2'), ('TR059_2_54', 'TR059_2', 'TR059_54'), ('TR059_2_54', 'TR059_54', 'TR059_2'), ('TR059_30_32', 'TR059_30', 'TR059_32'), ('TR059_30_32', 'TR059_32', 'TR059_30'), ('TR059_30_79', 'TR059_30', 'TR059_79'), ('TR059_30_79', 'TR059_79', 'TR059_30'), ('TR059_30_80', 'TR059_30', 'TR059_80'), ('TR059_30_80', 'TR059_80', 'TR059_30'), ('TR059_33_38', 'TR059_33', 'TR059_38'), ('TR059_33_38', 'TR059_38', 'TR059_33'), ('TR059_33_81', 'TR059_33', 'TR059_81'), ('TR059_33_81', 'TR059_81', 'TR059_33'), ('TR059_34_35', 'TR059_34', 'TR059_35'), ('TR059_34_35', 'TR059_35', 'TR059_34'), ('TR059_34_51', 'TR059_34', 'TR059_51'), ('TR059_34_51', 'TR059_51', 'TR059_34'), ('TR059_35_82', 'TR059_35', 'TR059_82'), ('TR059_35_82', 'TR059_82', 'TR059_35'), ('TR059_36_37', 'TR059_36', 'TR059_37'), ('TR059_36_37', 'TR059_37', 'TR059_36'), ('TR059_36_39', 'TR059_36', 'TR059_39'), ('TR059_36_39', 'TR059_39', 'TR059_36'), ('TR059_37_42', 'TR059_37', 'TR059_42'), ('TR059_37_42', 'TR059_42', 'TR059_37'), ('TR059_38_83', 'TR059_38', 'TR059_83'), ('TR059_38_83', 'TR059_83', 'TR059_38'), ('TR059_39_40', 'TR059_39', 'TR059_40'), ('TR059_39_40', 'TR059_40', 'TR059_39'), ('TR059_39_84', 'TR059_39', 'TR059_84'), ('TR059_39_84', 'TR059_84', 'TR059_39'), ('TR059_39_85', 'TR059_39', 'TR059_85'), ('TR059_39_85', 'TR059_85', 'TR059_39'), ('TR059_40_41', 'TR059_40', 'TR059_41'), ('TR059_40_41', 'TR059_41', 'TR059_40'), ('TR059_40_86', 'TR059_40', 'TR059_86'), ('TR059_40_86', 'TR059_86', 'TR059_40'), ('TR059_40_87', 'TR059_40', 'TR059_87'), ('TR059_40_87', 'TR059_87', 'TR059_40'), ('TR059_41_42', 'TR059_41', 'TR059_42'), ('TR059_41_42', 'TR059_42', 'TR059_41'), ('TR059_41_43', 'TR059_41', 'TR059_43'), ('TR059_41_43', 'TR059_43', 'TR059_41'), ('TR059_41_88', 'TR059_41', 'TR059_88'), ('TR059_41_88', 'TR059_88', 'TR059_41'), ('TR059_42_46', 'TR059_42', 'TR059_46'), ('TR059_42_46', 'TR059_46', 'TR059_42'), ('TR059_42_89', 'TR059_42', 'TR059_89'), ('TR059_42_89', 'TR059_89', 'TR059_42'), ('TR059_43_44', 'TR059_43', 'TR059_44'), ('TR059_43_44', 'TR059_44', 'TR059_43'), ('TR059_43_47', 'TR059_43', 'TR059_47'), ('TR059_43_47', 'TR059_47', 'TR059_43'), ('TR059_43_90', 'TR059_43', 'TR059_90'), ('TR059_43_90', 'TR059_90', 'TR059_43'), ('TR059_44_45', 'TR059_44', 'TR059_45'), ('TR059_44_45', 'TR059_45', 'TR059_44'), ('TR059_44_49', 'TR059_44', 'TR059_49'), ('TR059_44_49', 'TR059_49', 'TR059_44'), ('TR059_44_50', 'TR059_44', 'TR059_50'), ('TR059_44_50', 'TR059_50', 'TR059_44'), ('TR059_45_46', 'TR059_45', 'TR059_46'), ('TR059_45_46', 'TR059_46', 'TR059_45'), ('TR059_45_91', 'TR059_45', 'TR059_91'), ('TR059_45_91', 'TR059_91', 'TR059_45'), ('TR059_45_92', 'TR059_45', 'TR059_92'), ('TR059_45_92', 'TR059_92', 'TR059_45'), ('TR059_46_93', 'TR059_46', 'TR059_93'), ('TR059_46_93', 'TR059_93', 'TR059_46'), ('TR059_46_94', 'TR059_46', 'TR059_94'), ('TR059_46_94', 'TR059_94', 'TR059_46'), ('TR059_47_48', 'TR059_47', 'TR059_48'), ('TR059_47_48', 'TR059_48', 'TR059_47'), ('TR059_47_95', 'TR059_47', 'TR059_95'), ('TR059_47_95', 'TR059_95', 'TR059_47'), ('TR059_47_96', 'TR059_47', 'TR059_96'), ('TR059_47_96', 'TR059_96', 'TR059_47'), ('TR059_48_49', 'TR059_48', 'TR059_49'), ('TR059_48_49', 'TR059_49', 'TR059_48'), ('TR059_48_97', 'TR059_48', 'TR059_97'), ('TR059_48_97', 'TR059_97', 'TR059_48'), ('TR059_48_98', 'TR059_48', 'TR059_98'), ('TR059_48_98', 'TR059_98', 'TR059_48'), ('TR059_49_52', 'TR059_49', 'TR059_52'), ('TR059_49_52', 'TR059_52', 'TR059_49'), ('TR059_49_99', 'TR059_49', 'TR059_99'), ('TR059_49_99', 'TR059_99', 'TR059_49'), ('TR059_4_6', 'TR059_4', 'TR059_6'), ('TR059_4_6', 'TR059_6', 'TR059_4'), ('TR059_50_100', 'TR059_100', 'TR059_50'), ('TR059_50_100', 'TR059_50', 'TR059_100'), ('TR059_50_101', 'TR059_101', 'TR059_50'), ('TR059_50_101', 'TR059_50', 'TR059_101'), ('TR059_50_102', 'TR059_102', 'TR059_50'), ('TR059_50_102', 'TR059_50', 'TR059_102'), ('TR059_5_55', 'TR059_5', 'TR059_55'), ('TR059_5_55', 'TR059_55', 'TR059_5'), ('TR059_5_7', 'TR059_5', 'TR059_7'), ('TR059_5_7', 'TR059_7', 'TR059_5'), ('TR059_6_56', 'TR059_56', 'TR059_6'), ('TR059_6_56', 'TR059_6', 'TR059_56'), ('TR059_7_57', 'TR059_57', 'TR059_7'), ('TR059_7_57', 'TR059_7', 'TR059_57'), ('TR059_8_58', 'TR059_58', 'TR059_8'), ('TR059_8_58', 'TR059_8', 'TR059_58'), ('TR059_8_9', 'TR059_8', 'TR059_9'), ('TR059_8_9', 'TR059_9', 'TR059_8'), ('TR059_9_10', 'TR059_10', 'TR059_9'), ('TR059_9_10', 'TR059_9', 'TR059_10'), ('TR060_10_14', 'TR060_10', 'TR060_14'), ('TR060_10_14', 'TR060_14', 'TR060_10'), ('TR060_10_57', 'TR060_10', 'TR060_57'), ('TR060_10_57', 'TR060_57', 'TR060_10'), ('TR060_10_58', 'TR060_10', 'TR060_58'), ('TR060_10_58', 'TR060_58', 'TR060_10'), ('TR060_11_15', 'TR060_11', 'TR060_15'), ('TR060_11_15', 'TR060_15', 'TR060_11'), ('TR060_11_16', 'TR060_11', 'TR060_16'), ('TR060_11_16', 'TR060_16', 'TR060_11'), ('TR060_11_59', 'TR060_11', 'TR060_59'), ('TR060_11_59', 'TR060_59', 'TR060_11'), ('TR060_12_60', 'TR060_12', 'TR060_60'), ('TR060_12_60', 'TR060_60', 'TR060_12'), ('TR060_12_61', 'TR060_12', 'TR060_61'), ('TR060_12_61', 'TR060_61', 'TR060_12'), ('TR060_13_15', 'TR060_13', 'TR060_15'), ('TR060_13_15', 'TR060_15', 'TR060_13'), ('TR060_13_62', 'TR060_13', 'TR060_62'), ('TR060_13_62', 'TR060_62', 'TR060_13'), ('TR060_13_63', 'TR060_13', 'TR060_63'), ('TR060_13_63', 'TR060_63', 'TR060_13'), ('TR060_14_17', 'TR060_14', 'TR060_17'), ('TR060_14_17', 'TR060_17', 'TR060_14'), ('TR060_14_64', 'TR060_14', 'TR060_64'), ('TR060_14_64', 'TR060_64', 'TR060_14'), ('TR060_15_18', 'TR060_15', 'TR060_18'), ('TR060_15_18', 'TR060_18', 'TR060_15'), ('TR060_15_19', 'TR060_15', 'TR060_19'), ('TR060_15_19', 'TR060_19', 'TR060_15'), ('TR060_16_20', 'TR060_16', 'TR060_20'), ('TR060_16_20', 'TR060_20', 'TR060_16'), ('TR060_16_65', 'TR060_16', 'TR060_65'), ('TR060_16_65', 'TR060_65', 'TR060_16'), ('TR060_16_66', 'TR060_16', 'TR060_66'), ('TR060_16_66', 'TR060_66', 'TR060_16'), ('TR060_17_21', 'TR060_17', 'TR060_21'), ('TR060_17_21', 'TR060_21', 'TR060_17'), ('TR060_18_67', 'TR060_18', 'TR060_67'), ('TR060_18_67', 'TR060_67', 'TR060_18'), ('TR060_18_68', 'TR060_18', 'TR060_68'), ('TR060_18_68', 'TR060_68', 'TR060_18'), ('TR060_18_69', 'TR060_18', 'TR060_69'), ('TR060_18_69', 'TR060_69', 'TR060_18'), ('TR060_19_20', 'TR060_19', 'TR060_20'), ('TR060_19_20', 'TR060_20', 'TR060_19'), ('TR060_19_22', 'TR060_19', 'TR060_22'), ('TR060_19_22', 'TR060_22', 'TR060_19'), ('TR060_19_70', 'TR060_19', 'TR060_70'), ('TR060_19_70', 'TR060_70', 'TR060_19'), ('TR060_1_2', 'TR060_1', 'TR060_2'), ('TR060_1_2', 'TR060_2', 'TR060_1'), ('TR060_1_45', 'TR060_1', 'TR060_45'), ('TR060_1_45', 'TR060_45', 'TR060_1'), ('TR060_1_46', 'TR060_1', 'TR060_46'), ('TR060_1_46', 'TR060_46', 'TR060_1'), ('TR060_1_47', 'TR060_1', 'TR060_47'), ('TR060_1_47', 'TR060_47', 'TR060_1'), ('TR060_20_71', 'TR060_20', 'TR060_71'), ('TR060_20_71', 'TR060_71', 'TR060_20'), ('TR060_20_72', 'TR060_20', 'TR060_72'), ('TR060_20_72', 'TR060_72', 'TR060_20'), ('TR060_21_23', 'TR060_21', 'TR060_23'), ('TR060_21_23', 'TR060_23', 'TR060_21'), ('TR060_22_25', 'TR060_22', 'TR060_25'), ('TR060_22_25', 'TR060_25', 'TR060_22'), ('TR060_22_26', 'TR060_22', 'TR060_26'), ('TR060_22_26', 'TR060_26', 'TR060_22'), ('TR060_22_73', 'TR060_22', 'TR060_73'), ('TR060_22_73', 'TR060_73', 'TR060_22'), ('TR060_23_27', 'TR060_23', 'TR060_27'), ('TR060_23_27', 'TR060_27', 'TR060_23'), ('TR060_23_74', 'TR060_23', 'TR060_74'), ('TR060_23_74', 'TR060_74', 'TR060_23'), ('TR060_23_75', 'TR060_23', 'TR060_75'), ('TR060_23_75', 'TR060_75', 'TR060_23'), ('TR060_25_28', 'TR060_25', 'TR060_28'), ('TR060_25_28', 'TR060_28', 'TR060_25'), ('TR060_25_76', 'TR060_25', 'TR060_76'), ('TR060_25_76', 'TR060_76', 'TR060_25'), ('TR060_25_77', 'TR060_25', 'TR060_77'), ('TR060_25_77', 'TR060_77', 'TR060_25'), ('TR060_26_78', 'TR060_26', 'TR060_78'), ('TR060_26_78', 'TR060_78', 'TR060_26'), ('TR060_26_79', 'TR060_26', 'TR060_79'), ('TR060_26_79', 'TR060_79', 'TR060_26'), ('TR060_26_80', 'TR060_26', 'TR060_80'), ('TR060_26_80', 'TR060_80', 'TR060_26'), ('TR060_27_30', 'TR060_27', 'TR060_30'), ('TR060_27_30', 'TR060_30', 'TR060_27'), ('TR060_28_31', 'TR060_28', 'TR060_31'), ('TR060_28_31', 'TR060_31', 'TR060_28'), ('TR060_28_81', 'TR060_28', 'TR060_81'), ('TR060_28_81', 'TR060_81', 'TR060_28'), ('TR060_28_82', 'TR060_28', 'TR060_82'), ('TR060_28_82', 'TR060_82', 'TR060_28'), ('TR060_29_32', 'TR060_29', 'TR060_32'), ('TR060_29_32', 'TR060_32', 'TR060_29'), ('TR060_29_83', 'TR060_29', 'TR060_83'), ('TR060_29_83', 'TR060_83', 'TR060_29'), ('TR060_2_3', 'TR060_2', 'TR060_3'), ('TR060_2_3', 'TR060_3', 'TR060_2'), ('TR060_2_4', 'TR060_2', 'TR060_4'), ('TR060_2_4', 'TR060_4', 'TR060_2'), ('TR060_2_5', 'TR060_2', 'TR060_5'), ('TR060_2_5', 'TR060_5', 'TR060_2'), ('TR060_30_84', 'TR060_30', 'TR060_84'), ('TR060_30_84', 'TR060_84', 'TR060_30'), ('TR060_31_34', 'TR060_31', 'TR060_34'), ('TR060_31_34', 'TR060_34', 'TR060_31'), ('TR060_31_85', 'TR060_31', 'TR060_85'), ('TR060_31_85', 'TR060_85', 'TR060_31'), ('TR060_31_86', 'TR060_31', 'TR060_86'), ('TR060_31_86', 'TR060_86', 'TR060_31'), ('TR060_32_87', 'TR060_32', 'TR060_87'), ('TR060_32_87', 'TR060_87', 'TR060_32'), ('TR060_33_35', 'TR060_33', 'TR060_35'), ('TR060_33_35', 'TR060_35', 'TR060_33'), ('TR060_33_88', 'TR060_33', 'TR060_88'), ('TR060_33_88', 'TR060_88', 'TR060_33'), ('TR060_34_36', 'TR060_34', 'TR060_36'), ('TR060_34_36', 'TR060_36', 'TR060_34'), ('TR060_34_37', 'TR060_34', 'TR060_37'), ('TR060_34_37', 'TR060_37', 'TR060_34'), ('TR060_34_89', 'TR060_34', 'TR060_89'), ('TR060_34_89', 'TR060_89', 'TR060_34'), ('TR060_35_38', 'TR060_35', 'TR060_38'), ('TR060_35_38', 'TR060_38', 'TR060_35'), ('TR060_36_90', 'TR060_36', 'TR060_90'), ('TR060_36_90', 'TR060_90', 'TR060_36'), ('TR060_36_91', 'TR060_36', 'TR060_91'), ('TR060_36_91', 'TR060_91', 'TR060_36'), ('TR060_36_92', 'TR060_36', 'TR060_92'), ('TR060_36_92', 'TR060_92', 'TR060_36'), ('TR060_37_93', 'TR060_37', 'TR060_93'), ('TR060_37_93', 'TR060_93', 'TR060_37'), ('TR060_37_94', 'TR060_37', 'TR060_94'), ('TR060_37_94', 'TR060_94', 'TR060_37'), ('TR060_37_95', 'TR060_37', 'TR060_95'), ('TR060_37_95', 'TR060_95', 'TR060_37'), ('TR060_38_39', 'TR060_38', 'TR060_39'), ('TR060_38_39', 'TR060_39', 'TR060_38'), ('TR060_38_40', 'TR060_38', 'TR060_40'), ('TR060_38_40', 'TR060_40', 'TR060_38'), ('TR060_39_41', 'TR060_39', 'TR060_41'), ('TR060_39_41', 'TR060_41', 'TR060_39'), ('TR060_39_96', 'TR060_39', 'TR060_96'), ('TR060_39_96', 'TR060_96', 'TR060_39'), ('TR060_39_97', 'TR060_39', 'TR060_97'), ('TR060_39_97', 'TR060_97', 'TR060_39'), ('TR060_3_48', 'TR060_3', 'TR060_48'), ('TR060_3_48', 'TR060_48', 'TR060_3'), ('TR060_3_6', 'TR060_3', 'TR060_6'), ('TR060_3_6', 'TR060_6', 'TR060_3'), ('TR060_3_7', 'TR060_3', 'TR060_7'), ('TR060_3_7', 'TR060_7', 'TR060_3'), ('TR060_40_42', 'TR060_40', 'TR060_42'), ('TR060_40_42', 'TR060_42', 'TR060_40'), ('TR060_40_98', 'TR060_40', 'TR060_98'), ('TR060_40_98', 'TR060_98', 'TR060_40'), ('TR060_40_99', 'TR060_40', 'TR060_99'), ('TR060_40_99', 'TR060_99', 'TR060_40'), ('TR060_41_100', 'TR060_100', 'TR060_41'), ('TR060_41_100', 'TR060_41', 'TR060_100'), ('TR060_41_101', 'TR060_101', 'TR060_41'), ('TR060_41_101', 'TR060_41', 'TR060_101'), ('TR060_41_43', 'TR060_41', 'TR060_43'), ('TR060_41_43', 'TR060_43', 'TR060_41'), ('TR060_42_102', 'TR060_102', 'TR060_42'), ('TR060_42_102', 'TR060_42', 'TR060_102'), ('TR060_42_103', 'TR060_103', 'TR060_42'), ('TR060_42_103', 'TR060_42', 'TR060_103'), ('TR060_42_44', 'TR060_42', 'TR060_44'), ('TR060_42_44', 'TR060_44', 'TR060_42'), ('TR060_4_9', 'TR060_4', 'TR060_9'), ('TR060_4_9', 'TR060_9', 'TR060_4'), ('TR060_5_10', 'TR060_10', 'TR060_5'), ('TR060_5_10', 'TR060_5', 'TR060_10'), ('TR060_5_49', 'TR060_49', 'TR060_5'), ('TR060_5_49', 'TR060_5', 'TR060_49'), ('TR060_5_50', 'TR060_5', 'TR060_50'), ('TR060_5_50', 'TR060_50', 'TR060_5'), ('TR060_6_11', 'TR060_11', 'TR060_6'), ('TR060_6_11', 'TR060_6', 'TR060_11'), ('TR060_6_12', 'TR060_12', 'TR060_6'), ('TR060_6_12', 'TR060_6', 'TR060_12'), ('TR060_6_51', 'TR060_51', 'TR060_6'), ('TR060_6_51', 'TR060_6', 'TR060_51'), ('TR060_7_13', 'TR060_13', 'TR060_7'), ('TR060_7_13', 'TR060_7', 'TR060_13'), ('TR060_7_52', 'TR060_52', 'TR060_7'), ('TR060_7_52', 'TR060_7', 'TR060_52'), ('TR060_7_53', 'TR060_53', 'TR060_7'), ('TR060_7_53', 'TR060_7', 'TR060_53'), ('TR060_8_12', 'TR060_12', 'TR060_8'), ('TR060_8_12', 'TR060_8', 'TR060_12'), ('TR060_8_54', 'TR060_54', 'TR060_8'), ('TR060_8_54', 'TR060_8', 'TR060_54'), ('TR060_9_14', 'TR060_14', 'TR060_9'), ('TR060_9_14', 'TR060_9', 'TR060_14'), ('TR060_9_55', 'TR060_55', 'TR060_9'), ('TR060_9_55', 'TR060_9', 'TR060_55'), ('TR060_9_56', 'TR060_56', 'TR060_9'), ('TR060_9_56', 'TR060_9', 'TR060_56'), ('TR061_1_2', 'TR061_1', 'TR061_2'), ('TR061_1_2', 'TR061_2', 'TR061_1'), ('TR061_1_9', 'TR061_1', 'TR061_9'), ('TR061_1_9', 'TR061_9', 'TR061_1'), ('TR061_4_14', 'TR061_14', 'TR061_4'), ('TR061_4_14', 'TR061_4', 'TR061_14'), ('TR061_4_9', 'TR061_4', 'TR061_9'), ('TR061_4_9', 'TR061_9', 'TR061_4'), ('TR061_5_13', 'TR061_13', 'TR061_5'), ('TR061_5_13', 'TR061_5', 'TR061_13'), ('TR061_5_6', 'TR061_5', 'TR061_6'), ('TR061_5_6', 'TR061_6', 'TR061_5'), ('TR061_6_12', 'TR061_12', 'TR061_6'), ('TR061_6_12', 'TR061_6', 'TR061_12'), ('TR061_7_11', 'TR061_11', 'TR061_7'), ('TR061_7_11', 'TR061_7', 'TR061_11'), ('TR061_7_8', 'TR061_7', 'TR061_8'), ('TR061_7_8', 'TR061_8', 'TR061_7'), ('TR061_8_10', 'TR061_10', 'TR061_8'), ('TR061_8_10', 'TR061_8', 'TR061_10'), ('TR062_10_11', 'TR062_10', 'TR062_11'), ('TR062_10_11', 'TR062_11', 'TR062_10'), ('TR062_11_22', 'TR062_11', 'TR062_22'), ('TR062_11_22', 'TR062_22', 'TR062_11'), ('TR062_11_23', 'TR062_11', 'TR062_23'), ('TR062_11_23', 'TR062_23', 'TR062_11'), ('TR062_12_24', 'TR062_12', 'TR062_24'), ('TR062_12_24', 'TR062_24', 'TR062_12'), ('TR062_12_25', 'TR062_12', 'TR062_25'), ('TR062_12_25', 'TR062_25', 'TR062_12'), ('TR062_1_14', 'TR062_1', 'TR062_14'), ('TR062_1_14', 'TR062_14', 'TR062_1'), ('TR062_1_2', 'TR062_1', 'TR062_2'), ('TR062_1_2', 'TR062_2', 'TR062_1'), ('TR062_1_5', 'TR062_1', 'TR062_5'), ('TR062_1_5', 'TR062_5', 'TR062_1'), ('TR062_1_7', 'TR062_1', 'TR062_7'), ('TR062_1_7', 'TR062_7', 'TR062_1'), ('TR062_2_16', 'TR062_16', 'TR062_2'), ('TR062_2_16', 'TR062_2', 'TR062_16'), ('TR062_2_17', 'TR062_17', 'TR062_2'), ('TR062_2_17', 'TR062_2', 'TR062_17'), ('TR062_2_3', 'TR062_2', 'TR062_3'), ('TR062_2_3', 'TR062_3', 'TR062_2'), ('TR062_3_15', 'TR062_15', 'TR062_3'), ('TR062_3_15', 'TR062_3', 'TR062_15'), ('TR062_3_4', 'TR062_3', 'TR062_4'), ('TR062_3_4', 'TR062_4', 'TR062_3'), ('TR062_3_6', 'TR062_3', 'TR062_6'), ('TR062_3_6', 'TR062_6', 'TR062_3'), ('TR062_4_19', 'TR062_19', 'TR062_4'), ('TR062_4_19', 'TR062_4', 'TR062_19'), ('TR062_5_18', 'TR062_18', 'TR062_5'), ('TR062_5_18', 'TR062_5', 'TR062_18'), ('TR062_6_12', 'TR062_12', 'TR062_6'), ('TR062_6_12', 'TR062_6', 'TR062_12'), ('TR062_6_20', 'TR062_20', 'TR062_6'), ('TR062_6_20', 'TR062_6', 'TR062_20'), ('TR062_6_7', 'TR062_6', 'TR062_7'), ('TR062_6_7', 'TR062_7', 'TR062_6'), ('TR062_7_11', 'TR062_11', 'TR062_7'), ('TR062_7_11', 'TR062_7', 'TR062_11'), ('TR062_7_21', 'TR062_21', 'TR062_7'), ('TR062_7_21', 'TR062_7', 'TR062_21'), ('TR062_8_10', 'TR062_10', 'TR062_8'), ('TR062_8_10', 'TR062_8', 'TR062_10'), ('TR062_8_9', 'TR062_8', 'TR062_9'), ('TR062_8_9', 'TR062_9', 'TR062_8'), ('TR062_9_12', 'TR062_12', 'TR062_9'), ('TR062_9_12', 'TR062_9', 'TR062_12'), ('TR063_1_10', 'TR063_1', 'TR063_10'), ('TR063_1_10', 'TR063_10', 'TR063_1'), ('TR063_1_11', 'TR063_1', 'TR063_11'), ('TR063_1_11', 'TR063_11', 'TR063_1'), ('TR063_1_2', 'TR063_1', 'TR063_2'), ('TR063_1_2', 'TR063_2', 'TR063_1'), ('TR063_2_4', 'TR063_2', 'TR063_4'), ('TR063_2_4', 'TR063_4', 'TR063_2'), ('TR063_3_5', 'TR063_3', 'TR063_5'), ('TR063_3_5', 'TR063_5', 'TR063_3'), ('TR063_3_6', 'TR063_3', 'TR063_6'), ('TR063_3_6', 'TR063_6', 'TR063_3'), ('TR063_4_12', 'TR063_12', 'TR063_4'), ('TR063_4_12', 'TR063_4', 'TR063_12'), ('TR063_5_13', 'TR063_13', 'TR063_5'), ('TR063_5_13', 'TR063_5', 'TR063_13'), ('TR063_5_14', 'TR063_14', 'TR063_5'), ('TR063_5_14', 'TR063_5', 'TR063_14'), ('TR063_6_15', 'TR063_15', 'TR063_6'), ('TR063_6_15', 'TR063_6', 'TR063_15'), ('TR063_7_8', 'TR063_7', 'TR063_8'), ('TR063_7_8', 'TR063_8', 'TR063_7'), ('TR063_7_9', 'TR063_7', 'TR063_9'), ('TR063_7_9', 'TR063_9', 'TR063_7'), ('TR063_8_16', 'TR063_16', 'TR063_8'), ('TR063_8_16', 'TR063_8', 'TR063_16'), ('TR064_10_17', 'TR064_10', 'TR064_17'), ('TR064_10_17', 'TR064_17', 'TR064_10'), ('TR064_11_18', 'TR064_11', 'TR064_18'), ('TR064_11_18', 'TR064_18', 'TR064_11'), ('TR064_12_13', 'TR064_12', 'TR064_13'), ('TR064_12_13', 'TR064_13', 'TR064_12'), ('TR064_12_19', 'TR064_12', 'TR064_19'), ('TR064_12_19', 'TR064_19', 'TR064_12'), ('TR064_13_20', 'TR064_13', 'TR064_20'), ('TR064_13_20', 'TR064_20', 'TR064_13'), ('TR064_1_2', 'TR064_1', 'TR064_2'), ('TR064_1_2', 'TR064_2', 'TR064_1'), ('TR064_1_4', 'TR064_1', 'TR064_4'), ('TR064_1_4', 'TR064_4', 'TR064_1'), ('TR064_4_6', 'TR064_4', 'TR064_6'), ('TR064_4_6', 'TR064_6', 'TR064_4'), ('TR064_5_7', 'TR064_5', 'TR064_7'), ('TR064_5_7', 'TR064_7', 'TR064_5'), ('TR064_5_8', 'TR064_5', 'TR064_8'), ('TR064_5_8', 'TR064_8', 'TR064_5'), ('TR064_6_14', 'TR064_14', 'TR064_6'), ('TR064_6_14', 'TR064_6', 'TR064_14'), ('TR064_7_11', 'TR064_11', 'TR064_7'), ('TR064_7_11', 'TR064_7', 'TR064_11'), ('TR064_8_15', 'TR064_15', 'TR064_8'), ('TR064_8_15', 'TR064_8', 'TR064_15'), ('TR064_9_10', 'TR064_10', 'TR064_9'), ('TR064_9_10', 'TR064_9', 'TR064_10'), ('TR064_9_16', 'TR064_16', 'TR064_9'), ('TR064_9_16', 'TR064_9', 'TR064_16'), ('TR065_1_2', 'TR065_1', 'TR065_2'), ('TR065_1_2', 'TR065_2', 'TR065_1'), ('TR065_1_7', 'TR065_1', 'TR065_7'), ('TR065_1_7', 'TR065_7', 'TR065_1'), ('TR065_2_3', 'TR065_2', 'TR065_3'), ('TR065_2_3', 'TR065_3', 'TR065_2'), ('TR065_2_4', 'TR065_2', 'TR065_4'), ('TR065_2_4', 'TR065_4', 'TR065_2'), ('TR065_2_5', 'TR065_2', 'TR065_5'), ('TR065_2_5', 'TR065_5', 'TR065_2'), ('TR066_1_2', 'TR066_1', 'TR066_2'), ('TR066_1_2', 'TR066_2', 'TR066_1'), ('TR066_1_3', 'TR066_1', 'TR066_3'), ('TR066_1_3', 'TR066_3', 'TR066_1'), ('TR066_1_4', 'TR066_1', 'TR066_4'), ('TR066_1_4', 'TR066_4', 'TR066_1'), ('TR066_1_5', 'TR066_1', 'TR066_5'), ('TR066_1_5', 'TR066_5', 'TR066_1'), ('TR066_2_6', 'TR066_2', 'TR066_6'), ('TR066_2_6', 'TR066_6', 'TR066_2'), ('TR066_2_7', 'TR066_2', 'TR066_7'), ('TR066_2_7', 'TR066_7', 'TR066_2'), ('TR066_2_8', 'TR066_2', 'TR066_8'), ('TR066_2_8', 'TR066_8', 'TR066_2'), ('TR067_11_18', 'TR067_11', 'TR067_18'), ('TR067_11_18', 'TR067_18', 'TR067_11'), ('TR067_11_19', 'TR067_11', 'TR067_19'), ('TR067_11_19', 'TR067_19', 'TR067_11'), ('TR067_11_20', 'TR067_11', 'TR067_20'), ('TR067_11_20', 'TR067_20', 'TR067_11'), ('TR067_12_21', 'TR067_12', 'TR067_21'), ('TR067_12_21', 'TR067_21', 'TR067_12'), ('TR067_1_14', 'TR067_1', 'TR067_14'), ('TR067_1_14', 'TR067_14', 'TR067_1'), ('TR067_1_6', 'TR067_1', 'TR067_6'), ('TR067_1_6', 'TR067_6', 'TR067_1'), ('TR067_22_27', 'TR067_22', 'TR067_27'), ('TR067_22_27', 'TR067_27', 'TR067_22'), ('TR067_22_35', 'TR067_22', 'TR067_35'), ('TR067_22_35', 'TR067_35', 'TR067_22'), ('TR067_23_24', 'TR067_23', 'TR067_24'), ('TR067_23_24', 'TR067_24', 'TR067_23'), ('TR067_23_36', 'TR067_23', 'TR067_36'), ('TR067_23_36', 'TR067_36', 'TR067_23'), ('TR067_24_31', 'TR067_24', 'TR067_31'), ('TR067_24_31', 'TR067_31', 'TR067_24'), ('TR067_25_26', 'TR067_25', 'TR067_26'), ('TR067_25_26', 'TR067_26', 'TR067_25'), ('TR067_25_37', 'TR067_25', 'TR067_37'), ('TR067_25_37', 'TR067_37', 'TR067_25'), ('TR067_26_38', 'TR067_26', 'TR067_38'), ('TR067_26_38', 'TR067_38', 'TR067_26'), ('TR067_27_30', 'TR067_27', 'TR067_30'), ('TR067_27_30', 'TR067_30', 'TR067_27'), ('TR067_28_29', 'TR067_28', 'TR067_29'), ('TR067_28_29', 'TR067_29', 'TR067_28'), ('TR067_28_39', 'TR067_28', 'TR067_39'), ('TR067_28_39', 'TR067_39', 'TR067_28'), ('TR067_28_40', 'TR067_28', 'TR067_40'), ('TR067_28_40', 'TR067_40', 'TR067_28'), ('TR067_28_41', 'TR067_28', 'TR067_41'), ('TR067_28_41', 'TR067_41', 'TR067_28'), ('TR067_29_30', 'TR067_29', 'TR067_30'), ('TR067_29_30', 'TR067_30', 'TR067_29'), ('TR067_29_42', 'TR067_29', 'TR067_42'), ('TR067_29_42', 'TR067_42', 'TR067_29'), ('TR067_29_43', 'TR067_29', 'TR067_43'), ('TR067_29_43', 'TR067_43', 'TR067_29'), ('TR067_2_15', 'TR067_15', 'TR067_2'), ('TR067_2_15', 'TR067_2', 'TR067_15'), ('TR067_2_3', 'TR067_2', 'TR067_3'), ('TR067_2_3', 'TR067_3', 'TR067_2'), ('TR067_31_32', 'TR067_31', 'TR067_32'), ('TR067_31_32', 'TR067_32', 'TR067_31'), ('TR067_31_44', 'TR067_31', 'TR067_44'), ('TR067_31_44', 'TR067_44', 'TR067_31'), ('TR067_32_34', 'TR067_32', 'TR067_34'), ('TR067_32_34', 'TR067_34', 'TR067_32'), ('TR067_34_45', 'TR067_34', 'TR067_45'), ('TR067_34_45', 'TR067_45', 'TR067_34'), ('TR067_34_46', 'TR067_34', 'TR067_46'), ('TR067_34_46', 'TR067_46', 'TR067_34'), ('TR067_34_47', 'TR067_34', 'TR067_47'), ('TR067_34_47', 'TR067_47', 'TR067_34'), ('TR067_3_16', 'TR067_16', 'TR067_3'), ('TR067_3_16', 'TR067_3', 'TR067_16'), ('TR067_48_49', 'TR067_48', 'TR067_49'), ('TR067_48_49', 'TR067_49', 'TR067_48'), ('TR067_48_53', 'TR067_48', 'TR067_53'), ('TR067_48_53', 'TR067_53', 'TR067_48'), ('TR067_48_60', 'TR067_48', 'TR067_60'), ('TR067_48_60', 'TR067_60', 'TR067_48'), ('TR067_49_50', 'TR067_49', 'TR067_50'), ('TR067_49_50', 'TR067_50', 'TR067_49'), ('TR067_4_17', 'TR067_17', 'TR067_4'), ('TR067_4_17', 'TR067_4', 'TR067_17'), ('TR067_4_5', 'TR067_4', 'TR067_5'), ('TR067_4_5', 'TR067_5', 'TR067_4'), ('TR067_50_51', 'TR067_50', 'TR067_51'), ('TR067_50_51', 'TR067_51', 'TR067_50'), ('TR067_50_61', 'TR067_50', 'TR067_61'), ('TR067_50_61', 'TR067_61', 'TR067_50'), ('TR067_51_54', 'TR067_51', 'TR067_54'), ('TR067_51_54', 'TR067_54', 'TR067_51'), ('TR067_52_53', 'TR067_52', 'TR067_53'), ('TR067_52_53', 'TR067_53', 'TR067_52'), ('TR067_52_56', 'TR067_52', 'TR067_56'), ('TR067_52_56', 'TR067_56', 'TR067_52'), ('TR067_55_56', 'TR067_55', 'TR067_56'), ('TR067_55_56', 'TR067_56', 'TR067_55'), ('TR067_55_62', 'TR067_55', 'TR067_62'), ('TR067_55_62', 'TR067_62', 'TR067_55'), ('TR067_56_59', 'TR067_56', 'TR067_59'), ('TR067_56_59', 'TR067_59', 'TR067_56'), ('TR067_59_63', 'TR067_59', 'TR067_63'), ('TR067_59_63', 'TR067_63', 'TR067_59'), ('TR067_59_64', 'TR067_59', 'TR067_64'), ('TR067_59_64', 'TR067_64', 'TR067_59'), ('TR067_59_65', 'TR067_59', 'TR067_65'), ('TR067_59_65', 'TR067_65', 'TR067_59'), ('TR067_5_8', 'TR067_5', 'TR067_8'), ('TR067_5_8', 'TR067_8', 'TR067_5'), ('TR067_60_66', 'TR067_60', 'TR067_66'), ('TR067_60_66', 'TR067_66', 'TR067_60'), ('TR067_60_67', 'TR067_60', 'TR067_67'), ('TR067_60_67', 'TR067_67', 'TR067_60'), ('TR067_60_68', 'TR067_60', 'TR067_68'), ('TR067_60_68', 'TR067_68', 'TR067_60'), ('TR067_61_69', 'TR067_61', 'TR067_69'), ('TR067_61_69', 'TR067_69', 'TR067_61'), ('TR067_61_70', 'TR067_61', 'TR067_70'), ('TR067_61_70', 'TR067_70', 'TR067_61'), ('TR067_61_71', 'TR067_61', 'TR067_71'), ('TR067_61_71', 'TR067_71', 'TR067_61'), ('TR067_6_7', 'TR067_6', 'TR067_7'), ('TR067_6_7', 'TR067_7', 'TR067_6'), ('TR067_7_12', 'TR067_12', 'TR067_7'), ('TR067_7_12', 'TR067_7', 'TR067_12'), ('TR067_8_9', 'TR067_8', 'TR067_9'), ('TR067_8_9', 'TR067_9', 'TR067_8'), ('TR067_9_11', 'TR067_11', 'TR067_9'), ('TR067_9_11', 'TR067_9', 'TR067_11'), ('TR068_1_2', 'TR068_1', 'TR068_2'), ('TR068_1_2', 'TR068_2', 'TR068_1'), ('TR068_1_3', 'TR068_1', 'TR068_3'), ('TR068_1_3', 'TR068_3', 'TR068_1'), ('TR068_1_4', 'TR068_1', 'TR068_4'), ('TR068_1_4', 'TR068_4', 'TR068_1'), ('TR068_1_5', 'TR068_1', 'TR068_5'), ('TR068_1_5', 'TR068_5', 'TR068_1'), ('TR068_2_6', 'TR068_2', 'TR068_6'), ('TR068_2_6', 'TR068_6', 'TR068_2'), ('TR068_2_7', 'TR068_2', 'TR068_7'), ('TR068_2_7', 'TR068_7', 'TR068_2'), ('TR068_2_8', 'TR068_2', 'TR068_8'), ('TR068_2_8', 'TR068_8', 'TR068_2'), ('TR069_10_28', 'TR069_10', 'TR069_28'), ('TR069_10_28', 'TR069_28', 'TR069_10'), ('TR069_11_13', 'TR069_11', 'TR069_13'), ('TR069_11_13', 'TR069_13', 'TR069_11'), ('TR069_11_29', 'TR069_11', 'TR069_29'), ('TR069_11_29', 'TR069_29', 'TR069_11'), ('TR069_12_17', 'TR069_12', 'TR069_17'), ('TR069_12_17', 'TR069_17', 'TR069_12'), ('TR069_13_14', 'TR069_13', 'TR069_14'), ('TR069_13_14', 'TR069_14', 'TR069_13'), ('TR069_14_15', 'TR069_14', 'TR069_15'), ('TR069_14_15', 'TR069_15', 'TR069_14'), ('TR069_15_16', 'TR069_15', 'TR069_16'), ('TR069_15_16', 'TR069_16', 'TR069_15'), ('TR069_15_19', 'TR069_15', 'TR069_19'), ('TR069_15_19', 'TR069_19', 'TR069_15'), ('TR069_19_30', 'TR069_19', 'TR069_30'), ('TR069_19_30', 'TR069_30', 'TR069_19'), ('TR069_19_31', 'TR069_19', 'TR069_31'), ('TR069_19_31', 'TR069_31', 'TR069_19'), ('TR069_1_2', 'TR069_1', 'TR069_2'), ('TR069_1_2', 'TR069_2', 'TR069_1'), ('TR069_2_3', 'TR069_2', 'TR069_3'), ('TR069_2_3', 'TR069_3', 'TR069_2'), ('TR069_2_4', 'TR069_2', 'TR069_4'), ('TR069_2_4', 'TR069_4', 'TR069_2'), ('TR069_2_5', 'TR069_2', 'TR069_5'), ('TR069_2_5', 'TR069_5', 'TR069_2'), ('TR069_3_19', 'TR069_19', 'TR069_3'), ('TR069_3_19', 'TR069_3', 'TR069_19'), ('TR069_4_6', 'TR069_4', 'TR069_6'), ('TR069_4_6', 'TR069_6', 'TR069_4'), ('TR069_5_7', 'TR069_5', 'TR069_7'), ('TR069_5_7', 'TR069_7', 'TR069_5'), ('TR069_6_20', 'TR069_20', 'TR069_6'), ('TR069_6_20', 'TR069_6', 'TR069_20'), ('TR069_6_21', 'TR069_21', 'TR069_6'), ('TR069_6_21', 'TR069_6', 'TR069_21'), ('TR069_6_22', 'TR069_22', 'TR069_6'), ('TR069_6_22', 'TR069_6', 'TR069_22'), ('TR069_7_23', 'TR069_23', 'TR069_7'), ('TR069_7_23', 'TR069_7', 'TR069_23'), ('TR069_7_24', 'TR069_24', 'TR069_7'), ('TR069_7_24', 'TR069_7', 'TR069_24'), ('TR069_7_25', 'TR069_25', 'TR069_7'), ('TR069_7_25', 'TR069_7', 'TR069_25'), ('TR069_8_12', 'TR069_12', 'TR069_8'), ('TR069_8_12', 'TR069_8', 'TR069_12'), ('TR069_8_26', 'TR069_26', 'TR069_8'), ('TR069_8_26', 'TR069_8', 'TR069_26'), ('TR069_9_10', 'TR069_10', 'TR069_9'), ('TR069_9_10', 'TR069_9', 'TR069_10'), ('TR069_9_27', 'TR069_27', 'TR069_9'), ('TR069_9_27', 'TR069_9', 'TR069_27'), ('TR070_10_24', 'TR070_10', 'TR070_24'), ('TR070_10_24', 'TR070_24', 'TR070_10'), ('TR070_11_12', 'TR070_11', 'TR070_12'), ('TR070_11_12', 'TR070_12', 'TR070_11'), ('TR070_11_14', 'TR070_11', 'TR070_14'), ('TR070_11_14', 'TR070_14', 'TR070_11'), ('TR070_12_25', 'TR070_12', 'TR070_25'), ('TR070_12_25', 'TR070_25', 'TR070_12'), ('TR070_13_26', 'TR070_13', 'TR070_26'), ('TR070_13_26', 'TR070_26', 'TR070_13'), ('TR070_14_15', 'TR070_14', 'TR070_15'), ('TR070_14_15', 'TR070_15', 'TR070_14'), ('TR070_17_27', 'TR070_17', 'TR070_27'), ('TR070_17_27', 'TR070_27', 'TR070_17'), ('TR070_17_28', 'TR070_17', 'TR070_28'), ('TR070_17_28', 'TR070_28', 'TR070_17'), ('TR070_17_29', 'TR070_17', 'TR070_29'), ('TR070_17_29', 'TR070_29', 'TR070_17'), ('TR070_18_30', 'TR070_18', 'TR070_30'), ('TR070_18_30', 'TR070_30', 'TR070_18'), ('TR070_18_31', 'TR070_18', 'TR070_31'), ('TR070_18_31', 'TR070_31', 'TR070_18'), ('TR070_18_32', 'TR070_18', 'TR070_32'), ('TR070_18_32', 'TR070_32', 'TR070_18'), ('TR070_1_2', 'TR070_1', 'TR070_2'), ('TR070_1_2', 'TR070_2', 'TR070_1'), ('TR070_2_3', 'TR070_2', 'TR070_3'), ('TR070_2_3', 'TR070_3', 'TR070_2'), ('TR070_2_4', 'TR070_2', 'TR070_4'), ('TR070_2_4', 'TR070_4', 'TR070_2'), ('TR070_2_5', 'TR070_2', 'TR070_5'), ('TR070_2_5', 'TR070_5', 'TR070_2'), ('TR070_3_8', 'TR070_3', 'TR070_8'), ('TR070_3_8', 'TR070_8', 'TR070_3'), ('TR070_4_7', 'TR070_4', 'TR070_7'), ('TR070_4_7', 'TR070_7', 'TR070_4'), ('TR070_5_6', 'TR070_5', 'TR070_6'), ('TR070_5_6', 'TR070_6', 'TR070_5'), ('TR070_6_17', 'TR070_17', 'TR070_6'), ('TR070_6_17', 'TR070_6', 'TR070_17'), ('TR070_6_19', 'TR070_19', 'TR070_6'), ('TR070_6_19', 'TR070_6', 'TR070_19'), ('TR070_6_20', 'TR070_20', 'TR070_6'), ('TR070_6_20', 'TR070_6', 'TR070_20'), ('TR070_7_18', 'TR070_18', 'TR070_7'), ('TR070_7_18', 'TR070_7', 'TR070_18'), ('TR070_7_21', 'TR070_21', 'TR070_7'), ('TR070_7_21', 'TR070_7', 'TR070_21'), ('TR070_7_22', 'TR070_22', 'TR070_7'), ('TR070_7_22', 'TR070_7', 'TR070_22'), ('TR070_8_13', 'TR070_13', 'TR070_8'), ('TR070_8_13', 'TR070_8', 'TR070_13'), ('TR070_9_10', 'TR070_10', 'TR070_9'), ('TR070_9_10', 'TR070_9', 'TR070_10'), ('TR070_9_23', 'TR070_23', 'TR070_9'), ('TR070_9_23', 'TR070_9', 'TR070_23'), ('TR071_10_11', 'TR071_10', 'TR071_11'), ('TR071_10_11', 'TR071_11', 'TR071_10'), ('TR071_10_22', 'TR071_10', 'TR071_22'), ('TR071_10_22', 'TR071_22', 'TR071_10'), ('TR071_11_23', 'TR071_11', 'TR071_23'), ('TR071_11_23', 'TR071_23', 'TR071_11'), ('TR071_12_24', 'TR071_12', 'TR071_24'), ('TR071_12_24', 'TR071_24', 'TR071_12'), ('TR071_13_14', 'TR071_13', 'TR071_14'), ('TR071_13_14', 'TR071_14', 'TR071_13'), ('TR071_13_25', 'TR071_13', 'TR071_25'), ('TR071_13_25', 'TR071_25', 'TR071_13'), ('TR071_14_26', 'TR071_14', 'TR071_26'), ('TR071_14_26', 'TR071_26', 'TR071_14'), ('TR071_15_27', 'TR071_15', 'TR071_27'), ('TR071_15_27', 'TR071_27', 'TR071_15'), ('TR071_2_3', 'TR071_2', 'TR071_3'), ('TR071_2_3', 'TR071_3', 'TR071_2'), ('TR071_2_4', 'TR071_2', 'TR071_4'), ('TR071_2_4', 'TR071_4', 'TR071_2'), ('TR071_3_16', 'TR071_16', 'TR071_3'), ('TR071_3_16', 'TR071_3', 'TR071_16'), ('TR071_3_5', 'TR071_3', 'TR071_5'), ('TR071_3_5', 'TR071_5', 'TR071_3'), ('TR071_3_6', 'TR071_3', 'TR071_6'), ('TR071_3_6', 'TR071_6', 'TR071_3'), ('TR071_4_17', 'TR071_17', 'TR071_4'), ('TR071_4_17', 'TR071_4', 'TR071_17'), ('TR071_5_18', 'TR071_18', 'TR071_5'), ('TR071_5_18', 'TR071_5', 'TR071_18'), ('TR071_5_19', 'TR071_19', 'TR071_5'), ('TR071_5_19', 'TR071_5', 'TR071_19'), ('TR071_5_7', 'TR071_5', 'TR071_7'), ('TR071_5_7', 'TR071_7', 'TR071_5'), ('TR071_6_20', 'TR071_20', 'TR071_6'), ('TR071_6_20', 'TR071_6', 'TR071_20'), ('TR071_6_21', 'TR071_21', 'TR071_6'), ('TR071_6_21', 'TR071_6', 'TR071_21'), ('TR071_7_8', 'TR071_7', 'TR071_8'), ('TR071_7_8', 'TR071_8', 'TR071_7'), ('TR071_8_12', 'TR071_12', 'TR071_8'), ('TR071_8_12', 'TR071_8', 'TR071_12'), ('TR071_9_10', 'TR071_10', 'TR071_9'), ('TR071_9_10', 'TR071_9', 'TR071_10'), ('TR071_9_15', 'TR071_15', 'TR071_9'), ('TR071_9_15', 'TR071_9', 'TR071_15'), ('TR072_10_14', 'TR072_10', 'TR072_14'), ('TR072_10_14', 'TR072_14', 'TR072_10'), ('TR072_10_34', 'TR072_10', 'TR072_34'), ('TR072_10_34', 'TR072_34', 'TR072_10'), ('TR072_10_35', 'TR072_10', 'TR072_35'), ('TR072_10_35', 'TR072_35', 'TR072_10'), ('TR072_11_36', 'TR072_11', 'TR072_36'), ('TR072_11_36', 'TR072_36', 'TR072_11'), ('TR072_12_15', 'TR072_12', 'TR072_15'), ('TR072_12_15', 'TR072_15', 'TR072_12'), ('TR072_12_37', 'TR072_12', 'TR072_37'), ('TR072_12_37', 'TR072_37', 'TR072_12'), ('TR072_13_16', 'TR072_13', 'TR072_16'), ('TR072_13_16', 'TR072_16', 'TR072_13'), ('TR072_15_38', 'TR072_15', 'TR072_38'), ('TR072_15_38', 'TR072_38', 'TR072_15'), ('TR072_16_18', 'TR072_16', 'TR072_18'), ('TR072_16_18', 'TR072_18', 'TR072_16'), ('TR072_17_19', 'TR072_17', 'TR072_19'), ('TR072_17_19', 'TR072_19', 'TR072_17'), ('TR072_17_39', 'TR072_17', 'TR072_39'), ('TR072_17_39', 'TR072_39', 'TR072_17'), ('TR072_18_40', 'TR072_18', 'TR072_40'), ('TR072_18_40', 'TR072_40', 'TR072_18'), ('TR072_19_41', 'TR072_19', 'TR072_41'), ('TR072_19_41', 'TR072_41', 'TR072_19'), ('TR072_1_2', 'TR072_1', 'TR072_2'), ('TR072_1_2', 'TR072_2', 'TR072_1'), ('TR072_1_22', 'TR072_1', 'TR072_22'), ('TR072_1_22', 'TR072_22', 'TR072_1'), ('TR072_1_23', 'TR072_1', 'TR072_23'), ('TR072_1_23', 'TR072_23', 'TR072_1'), ('TR072_1_3', 'TR072_1', 'TR072_3'), ('TR072_1_3', 'TR072_3', 'TR072_1'), ('TR072_20_21', 'TR072_20', 'TR072_21'), ('TR072_20_21', 'TR072_21', 'TR072_20'), ('TR072_20_42', 'TR072_20', 'TR072_42'), ('TR072_20_42', 'TR072_42', 'TR072_20'), ('TR072_21_43', 'TR072_21', 'TR072_43'), ('TR072_21_43', 'TR072_43', 'TR072_21'), ('TR072_2_4', 'TR072_2', 'TR072_4'), ('TR072_2_4', 'TR072_4', 'TR072_2'), ('TR072_2_5', 'TR072_2', 'TR072_5'), ('TR072_2_5', 'TR072_5', 'TR072_2'), ('TR072_3_7', 'TR072_3', 'TR072_7'), ('TR072_3_7', 'TR072_7', 'TR072_3'), ('TR072_44_45', 'TR072_44', 'TR072_45'), ('TR072_44_45', 'TR072_45', 'TR072_44'), ('TR072_4_24', 'TR072_24', 'TR072_4'), ('TR072_4_24', 'TR072_4', 'TR072_24'), ('TR072_4_8', 'TR072_4', 'TR072_8'), ('TR072_4_8', 'TR072_8', 'TR072_4'), ('TR072_4_9', 'TR072_4', 'TR072_9'), ('TR072_4_9', 'TR072_9', 'TR072_4'), ('TR072_5_10', 'TR072_10', 'TR072_5'), ('TR072_5_10', 'TR072_5', 'TR072_10'), ('TR072_5_25', 'TR072_25', 'TR072_5'), ('TR072_5_25', 'TR072_5', 'TR072_25'), ('TR072_5_26', 'TR072_26', 'TR072_5'), ('TR072_5_26', 'TR072_5', 'TR072_26'), ('TR072_6_11', 'TR072_11', 'TR072_6'), ('TR072_6_11', 'TR072_6', 'TR072_11'), ('TR072_6_27', 'TR072_27', 'TR072_6'), ('TR072_6_27', 'TR072_6', 'TR072_27'), ('TR072_7_28', 'TR072_28', 'TR072_7'), ('TR072_7_28', 'TR072_7', 'TR072_28'), ('TR072_8_13', 'TR072_13', 'TR072_8'), ('TR072_8_13', 'TR072_8', 'TR072_13'), ('TR072_8_29', 'TR072_29', 'TR072_8'), ('TR072_8_29', 'TR072_8', 'TR072_29'), ('TR072_8_30', 'TR072_30', 'TR072_8'), ('TR072_8_30', 'TR072_8', 'TR072_30'), ('TR072_9_31', 'TR072_31', 'TR072_9'), ('TR072_9_31', 'TR072_9', 'TR072_31'), ('TR072_9_32', 'TR072_32', 'TR072_9'), ('TR072_9_32', 'TR072_9', 'TR072_32'), ('TR072_9_33', 'TR072_33', 'TR072_9'), ('TR072_9_33', 'TR072_9', 'TR072_33'), ('TR073_1_2', 'TR073_1', 'TR073_2'), ('TR073_1_2', 'TR073_2', 'TR073_1'), ('TR073_1_5', 'TR073_1', 'TR073_5'), ('TR073_1_5', 'TR073_5', 'TR073_1'), ('TR073_2_4', 'TR073_2', 'TR073_4'), ('TR073_2_4', 'TR073_4', 'TR073_2'), ('TR073_2_6', 'TR073_2', 'TR073_6'), ('TR073_2_6', 'TR073_6', 'TR073_2'), ('TR073_2_7', 'TR073_2', 'TR073_7'), ('TR073_2_7', 'TR073_7', 'TR073_2'), ('TR073_3_8', 'TR073_3', 'TR073_8'), ('TR073_3_8', 'TR073_8', 'TR073_3'), ('TR073_3_9', 'TR073_3', 'TR073_9'), ('TR073_3_9', 'TR073_9', 'TR073_3'), ('TR074_1_2', 'TR074_1', 'TR074_2'), ('TR074_1_2', 'TR074_2', 'TR074_1'), ('TR074_2_3', 'TR074_2', 'TR074_3'), ('TR074_2_3', 'TR074_3', 'TR074_2'), ('TR074_2_4', 'TR074_2', 'TR074_4'), ('TR074_2_4', 'TR074_4', 'TR074_2'), ('TR074_2_6', 'TR074_2', 'TR074_6'), ('TR074_2_6', 'TR074_6', 'TR074_2'), ('TR074_3_5', 'TR074_3', 'TR074_5'), ('TR074_3_5', 'TR074_5', 'TR074_3'), ('TR074_3_7', 'TR074_3', 'TR074_7'), ('TR074_3_7', 'TR074_7', 'TR074_3'), ('TR074_3_8', 'TR074_3', 'TR074_8'), ('TR074_3_8', 'TR074_8', 'TR074_3'), ('TR075_10_11', 'TR075_10', 'TR075_11'), ('TR075_10_11', 'TR075_11', 'TR075_10'), ('TR075_10_21', 'TR075_10', 'TR075_21'), ('TR075_10_21', 'TR075_21', 'TR075_10'), ('TR075_11_25', 'TR075_11', 'TR075_25'), ('TR075_11_25', 'TR075_25', 'TR075_11'), ('TR075_12_26', 'TR075_12', 'TR075_26'), ('TR075_12_26', 'TR075_26', 'TR075_12'), ('TR075_13_14', 'TR075_13', 'TR075_14'), ('TR075_13_14', 'TR075_14', 'TR075_13'), ('TR075_13_27', 'TR075_13', 'TR075_27'), ('TR075_13_27', 'TR075_27', 'TR075_13'), ('TR075_14_28', 'TR075_14', 'TR075_28'), ('TR075_14_28', 'TR075_28', 'TR075_14'), ('TR075_15_16', 'TR075_15', 'TR075_16'), ('TR075_15_16', 'TR075_16', 'TR075_15'), ('TR075_15_20', 'TR075_15', 'TR075_20'), ('TR075_15_20', 'TR075_20', 'TR075_15'), ('TR075_16_29', 'TR075_16', 'TR075_29'), ('TR075_16_29', 'TR075_29', 'TR075_16'), ('TR075_17_30', 'TR075_17', 'TR075_30'), ('TR075_17_30', 'TR075_30', 'TR075_17'), ('TR075_18_19', 'TR075_18', 'TR075_19'), ('TR075_18_19', 'TR075_19', 'TR075_18'), ('TR075_18_31', 'TR075_18', 'TR075_31'), ('TR075_18_31', 'TR075_31', 'TR075_18'), ('TR075_18_32', 'TR075_18', 'TR075_32'), ('TR075_18_32', 'TR075_32', 'TR075_18'), ('TR075_19_33', 'TR075_19', 'TR075_33'), ('TR075_19_33', 'TR075_33', 'TR075_19'), ('TR075_19_34', 'TR075_19', 'TR075_34'), ('TR075_19_34', 'TR075_34', 'TR075_19'), ('TR075_19_35', 'TR075_19', 'TR075_35'), ('TR075_19_35', 'TR075_35', 'TR075_19'), ('TR075_1_2', 'TR075_1', 'TR075_2'), ('TR075_1_2', 'TR075_2', 'TR075_1'), ('TR075_1_7', 'TR075_1', 'TR075_7'), ('TR075_1_7', 'TR075_7', 'TR075_1'), ('TR075_2_3', 'TR075_2', 'TR075_3'), ('TR075_2_3', 'TR075_3', 'TR075_2'), ('TR075_2_4', 'TR075_2', 'TR075_4'), ('TR075_2_4', 'TR075_4', 'TR075_2'), ('TR075_2_5', 'TR075_2', 'TR075_5'), ('TR075_2_5', 'TR075_5', 'TR075_2'), ('TR075_3_22', 'TR075_22', 'TR075_3'), ('TR075_3_22', 'TR075_3', 'TR075_22'), ('TR075_4_17', 'TR075_17', 'TR075_4'), ('TR075_4_17', 'TR075_4', 'TR075_17'), ('TR075_5_12', 'TR075_12', 'TR075_5'), ('TR075_5_12', 'TR075_5', 'TR075_12'), ('TR075_7_18', 'TR075_18', 'TR075_7'), ('TR075_7_18', 'TR075_7', 'TR075_18'), ('TR075_8_23', 'TR075_23', 'TR075_8'), ('TR075_8_23', 'TR075_8', 'TR075_23'), ('TR075_8_9', 'TR075_8', 'TR075_9'), ('TR075_8_9', 'TR075_9', 'TR075_8'), ('TR075_9_24', 'TR075_24', 'TR075_9'), ('TR075_9_24', 'TR075_9', 'TR075_24'), ('TR076_10_14', 'TR076_10', 'TR076_14'), ('TR076_10_14', 'TR076_14', 'TR076_10'), ('TR076_10_15', 'TR076_10', 'TR076_15'), ('TR076_10_15', 'TR076_15', 'TR076_10'), ('TR076_10_28', 'TR076_10', 'TR076_28'), ('TR076_10_28', 'TR076_28', 'TR076_10'), ('TR076_11_16', 'TR076_11', 'TR076_16'), ('TR076_11_16', 'TR076_16', 'TR076_11'), ('TR076_11_17', 'TR076_11', 'TR076_17'), ('TR076_11_17', 'TR076_17', 'TR076_11'), ('TR076_11_29', 'TR076_11', 'TR076_29'), ('TR076_11_29', 'TR076_29', 'TR076_11'), ('TR076_12_18', 'TR076_12', 'TR076_18'), ('TR076_12_18', 'TR076_18', 'TR076_12'), ('TR076_12_30', 'TR076_12', 'TR076_30'), ('TR076_12_30', 'TR076_30', 'TR076_12'), ('TR076_12_31', 'TR076_12', 'TR076_31'), ('TR076_12_31', 'TR076_31', 'TR076_12'), ('TR076_14_19', 'TR076_14', 'TR076_19'), ('TR076_14_19', 'TR076_19', 'TR076_14'), ('TR076_14_32', 'TR076_14', 'TR076_32'), ('TR076_14_32', 'TR076_32', 'TR076_14'), ('TR076_14_33', 'TR076_14', 'TR076_33'), ('TR076_14_33', 'TR076_33', 'TR076_14'), ('TR076_16_20', 'TR076_16', 'TR076_20'), ('TR076_16_20', 'TR076_20', 'TR076_16'), ('TR076_16_34', 'TR076_16', 'TR076_34'), ('TR076_16_34', 'TR076_34', 'TR076_16'), ('TR076_16_35', 'TR076_16', 'TR076_35'), ('TR076_16_35', 'TR076_35', 'TR076_16'), ('TR076_1_2', 'TR076_1', 'TR076_2'), ('TR076_1_2', 'TR076_2', 'TR076_1'), ('TR076_1_3', 'TR076_1', 'TR076_3'), ('TR076_1_3', 'TR076_3', 'TR076_1'), ('TR076_1_4', 'TR076_1', 'TR076_4'), ('TR076_1_4', 'TR076_4', 'TR076_1'), ('TR076_1_5', 'TR076_1', 'TR076_5'), ('TR076_1_5', 'TR076_5', 'TR076_1'), ('TR076_2_6', 'TR076_2', 'TR076_6'), ('TR076_2_6', 'TR076_6', 'TR076_2'), ('TR076_3_7', 'TR076_3', 'TR076_7'), ('TR076_3_7', 'TR076_7', 'TR076_3'), ('TR076_4_8', 'TR076_4', 'TR076_8'), ('TR076_4_8', 'TR076_8', 'TR076_4'), ('TR076_6_21', 'TR076_21', 'TR076_6'), ('TR076_6_21', 'TR076_6', 'TR076_21'), ('TR076_6_22', 'TR076_22', 'TR076_6'), ('TR076_6_22', 'TR076_6', 'TR076_22'), ('TR076_6_9', 'TR076_6', 'TR076_9'), ('TR076_6_9', 'TR076_9', 'TR076_6'), ('TR076_7_10', 'TR076_10', 'TR076_7'), ('TR076_7_10', 'TR076_7', 'TR076_10'), ('TR076_7_23', 'TR076_23', 'TR076_7'), ('TR076_7_23', 'TR076_7', 'TR076_23'), ('TR076_7_24', 'TR076_24', 'TR076_7'), ('TR076_7_24', 'TR076_7', 'TR076_24'), ('TR076_8_11', 'TR076_11', 'TR076_8'), ('TR076_8_11', 'TR076_8', 'TR076_11'), ('TR076_8_25', 'TR076_25', 'TR076_8'), ('TR076_8_25', 'TR076_8', 'TR076_25'), ('TR076_8_26', 'TR076_26', 'TR076_8'), ('TR076_8_26', 'TR076_8', 'TR076_26'), ('TR076_9_12', 'TR076_12', 'TR076_9'), ('TR076_9_12', 'TR076_9', 'TR076_12'), ('TR076_9_13', 'TR076_13', 'TR076_9'), ('TR076_9_13', 'TR076_9', 'TR076_13'), ('TR076_9_27', 'TR076_27', 'TR076_9'), ('TR076_9_27', 'TR076_9', 'TR076_27'), ('TR077_11_14', 'TR077_11', 'TR077_14'), ('TR077_11_14', 'TR077_14', 'TR077_11'), ('TR077_11_25', 'TR077_11', 'TR077_25'), ('TR077_11_25', 'TR077_25', 'TR077_11'), ('TR077_12_26', 'TR077_12', 'TR077_26'), ('TR077_12_26', 'TR077_26', 'TR077_12'), ('TR077_13_27', 'TR077_13', 'TR077_27'), ('TR077_13_27', 'TR077_27', 'TR077_13'), ('TR077_13_28', 'TR077_13', 'TR077_28'), ('TR077_13_28', 'TR077_28', 'TR077_13'), ('TR077_14_29', 'TR077_14', 'TR077_29'), ('TR077_14_29', 'TR077_29', 'TR077_14'), ('TR077_15_16', 'TR077_15', 'TR077_16'), ('TR077_15_16', 'TR077_16', 'TR077_15'), ('TR077_15_30', 'TR077_15', 'TR077_30'), ('TR077_15_30', 'TR077_30', 'TR077_15'), ('TR077_16_17', 'TR077_16', 'TR077_17'), ('TR077_16_17', 'TR077_17', 'TR077_16'), ('TR077_1_18', 'TR077_1', 'TR077_18'), ('TR077_1_18', 'TR077_18', 'TR077_1'), ('TR077_1_19', 'TR077_1', 'TR077_19'), ('TR077_1_19', 'TR077_19', 'TR077_1'), ('TR077_1_2', 'TR077_1', 'TR077_2'), ('TR077_1_2', 'TR077_2', 'TR077_1'), ('TR077_1_3', 'TR077_1', 'TR077_3'), ('TR077_1_3', 'TR077_3', 'TR077_1'), ('TR077_2_20', 'TR077_2', 'TR077_20'), ('TR077_2_20', 'TR077_20', 'TR077_2'), ('TR077_2_21', 'TR077_2', 'TR077_21'), ('TR077_2_21', 'TR077_21', 'TR077_2'), ('TR077_2_22', 'TR077_2', 'TR077_22'), ('TR077_2_22', 'TR077_22', 'TR077_2'), ('TR077_3_5', 'TR077_3', 'TR077_5'), ('TR077_3_5', 'TR077_5', 'TR077_3'), ('TR077_4_6', 'TR077_4', 'TR077_6'), ('TR077_4_6', 'TR077_6', 'TR077_4'), ('TR077_4_7', 'TR077_4', 'TR077_7'), ('TR077_4_7', 'TR077_7', 'TR077_4'), ('TR077_6_9', 'TR077_6', 'TR077_9'), ('TR077_6_9', 'TR077_9', 'TR077_6'), ('TR077_7_12', 'TR077_12', 'TR077_7'), ('TR077_7_12', 'TR077_7', 'TR077_12'), ('TR077_8_10', 'TR077_10', 'TR077_8'), ('TR077_8_10', 'TR077_8', 'TR077_10'), ('TR077_8_13', 'TR077_13', 'TR077_8'), ('TR077_8_13', 'TR077_8', 'TR077_13'), ('TR077_9_23', 'TR077_23', 'TR077_9'), ('TR077_9_23', 'TR077_9', 'TR077_23'), ('TR077_9_24', 'TR077_24', 'TR077_9'), ('TR077_9_24', 'TR077_9', 'TR077_24'), ('TR078_10_15', 'TR078_10', 'TR078_15'), ('TR078_10_15', 'TR078_15', 'TR078_10'), ('TR078_11_15', 'TR078_11', 'TR078_15'), ('TR078_11_15', 'TR078_15', 'TR078_11'), ('TR078_12_18', 'TR078_12', 'TR078_18'), ('TR078_12_18', 'TR078_18', 'TR078_12'), ('TR078_13_18', 'TR078_13', 'TR078_18'), ('TR078_13_18', 'TR078_18', 'TR078_13'), ('TR078_15_34', 'TR078_15', 'TR078_34'), ('TR078_15_34', 'TR078_34', 'TR078_15'), ('TR078_18_35', 'TR078_18', 'TR078_35'), ('TR078_18_35', 'TR078_35', 'TR078_18'), ('TR078_1_2', 'TR078_1', 'TR078_2'), ('TR078_1_2', 'TR078_2', 'TR078_1'), ('TR078_1_20', 'TR078_1', 'TR078_20'), ('TR078_1_20', 'TR078_20', 'TR078_1'), ('TR078_1_21', 'TR078_1', 'TR078_21'), ('TR078_1_21', 'TR078_21', 'TR078_1'), ('TR078_1_3', 'TR078_1', 'TR078_3'), ('TR078_1_3', 'TR078_3', 'TR078_1'), ('TR078_2_22', 'TR078_2', 'TR078_22'), ('TR078_2_22', 'TR078_22', 'TR078_2'), ('TR078_2_4', 'TR078_2', 'TR078_4'), ('TR078_2_4', 'TR078_4', 'TR078_2'), ('TR078_2_5', 'TR078_2', 'TR078_5'), ('TR078_2_5', 'TR078_5', 'TR078_2'), ('TR078_3_6', 'TR078_3', 'TR078_6'), ('TR078_3_6', 'TR078_6', 'TR078_3'), ('TR078_3_7', 'TR078_3', 'TR078_7'), ('TR078_3_7', 'TR078_7', 'TR078_3'), ('TR078_4_23', 'TR078_23', 'TR078_4'), ('TR078_4_23', 'TR078_4', 'TR078_23'), ('TR078_4_24', 'TR078_24', 'TR078_4'), ('TR078_4_24', 'TR078_4', 'TR078_24'), ('TR078_4_25', 'TR078_25', 'TR078_4'), ('TR078_4_25', 'TR078_4', 'TR078_25'), ('TR078_5_8', 'TR078_5', 'TR078_8'), ('TR078_5_8', 'TR078_8', 'TR078_5'), ('TR078_5_9', 'TR078_5', 'TR078_9'), ('TR078_5_9', 'TR078_9', 'TR078_5'), ('TR078_6_10', 'TR078_10', 'TR078_6'), ('TR078_6_10', 'TR078_6', 'TR078_10'), ('TR078_6_26', 'TR078_26', 'TR078_6'), ('TR078_6_26', 'TR078_6', 'TR078_26'), ('TR078_6_27', 'TR078_27', 'TR078_6'), ('TR078_6_27', 'TR078_6', 'TR078_27'), ('TR078_7_11', 'TR078_11', 'TR078_7'), ('TR078_7_11', 'TR078_7', 'TR078_11'), ('TR078_7_28', 'TR078_28', 'TR078_7'), ('TR078_7_28', 'TR078_7', 'TR078_28'), ('TR078_7_29', 'TR078_29', 'TR078_7'), ('TR078_7_29', 'TR078_7', 'TR078_29'), ('TR078_8_12', 'TR078_12', 'TR078_8'), ('TR078_8_12', 'TR078_8', 'TR078_12'), ('TR078_8_30', 'TR078_30', 'TR078_8'), ('TR078_8_30', 'TR078_8', 'TR078_30'), ('TR078_8_31', 'TR078_31', 'TR078_8'), ('TR078_8_31', 'TR078_8', 'TR078_31'), ('TR078_9_13', 'TR078_13', 'TR078_9'), ('TR078_9_13', 'TR078_9', 'TR078_13'), ('TR078_9_32', 'TR078_32', 'TR078_9'), ('TR078_9_32', 'TR078_9', 'TR078_32'), ('TR078_9_33', 'TR078_33', 'TR078_9'), ('TR078_9_33', 'TR078_9', 'TR078_33'), ('TR080_1_2', 'TR080_1', 'TR080_2'), ('TR080_1_2', 'TR080_2', 'TR080_1'), ('TR080_1_6', 'TR080_1', 'TR080_6'), ('TR080_1_6', 'TR080_6', 'TR080_1'), ('TR080_1_7', 'TR080_1', 'TR080_7'), ('TR080_1_7', 'TR080_7', 'TR080_1'), ('TR080_1_8', 'TR080_1', 'TR080_8'), ('TR080_1_8', 'TR080_8', 'TR080_1'), ('TR080_2_10', 'TR080_10', 'TR080_2'), ('TR080_2_10', 'TR080_2', 'TR080_10'), ('TR080_2_3', 'TR080_2', 'TR080_3'), ('TR080_2_3', 'TR080_3', 'TR080_2'), ('TR080_2_9', 'TR080_2', 'TR080_9'), ('TR080_2_9', 'TR080_9', 'TR080_2'), ('TR080_3_4', 'TR080_3', 'TR080_4'), ('TR080_3_4', 'TR080_4', 'TR080_3'), ('TR080_4_11', 'TR080_11', 'TR080_4'), ('TR080_4_11', 'TR080_4', 'TR080_11'), ('TR080_4_12', 'TR080_12', 'TR080_4'), ('TR080_4_12', 'TR080_4', 'TR080_12'), ('TR080_4_5', 'TR080_4', 'TR080_5'), ('TR080_4_5', 'TR080_5', 'TR080_4'), ('TR080_5_13', 'TR080_13', 'TR080_5'), ('TR080_5_13', 'TR080_5', 'TR080_13'), ('TR080_5_14', 'TR080_14', 'TR080_5'), ('TR080_5_14', 'TR080_5', 'TR080_14'), ('TR080_5_6', 'TR080_5', 'TR080_6'), ('TR080_5_6', 'TR080_6', 'TR080_5'), ('TR081_1_2', 'TR081_1', 'TR081_2'), ('TR081_1_2', 'TR081_2', 'TR081_1'), ('TR081_1_3', 'TR081_1', 'TR081_3'), ('TR081_1_3', 'TR081_3', 'TR081_1'), ('TR081_1_4', 'TR081_1', 'TR081_4'), ('TR081_1_4', 'TR081_4', 'TR081_1'), ('TR081_1_5', 'TR081_1', 'TR081_5'), ('TR081_1_5', 'TR081_5', 'TR081_1'), ('TR081_2_6', 'TR081_2', 'TR081_6'), ('TR081_2_6', 'TR081_6', 'TR081_2'), ('TR081_3_7', 'TR081_3', 'TR081_7'), ('TR081_3_7', 'TR081_7', 'TR081_3'), ('TR081_4_8', 'TR081_4', 'TR081_8'), ('TR081_4_8', 'TR081_8', 'TR081_4'), ('TR081_6_10', 'TR081_10', 'TR081_6'), ('TR081_6_10', 'TR081_6', 'TR081_10'), ('TR081_6_11', 'TR081_11', 'TR081_6'), ('TR081_6_11', 'TR081_6', 'TR081_11'), ('TR081_6_9', 'TR081_6', 'TR081_9'), ('TR081_6_9', 'TR081_9', 'TR081_6'), ('TR081_7_12', 'TR081_12', 'TR081_7'), ('TR081_7_12', 'TR081_7', 'TR081_12'), ('TR081_7_13', 'TR081_13', 'TR081_7'), ('TR081_7_13', 'TR081_7', 'TR081_13'), ('TR081_7_14', 'TR081_14', 'TR081_7'), ('TR081_7_14', 'TR081_7', 'TR081_14'), ('TR081_8_15', 'TR081_15', 'TR081_8'), ('TR081_8_15', 'TR081_8', 'TR081_15'), ('TR081_8_16', 'TR081_16', 'TR081_8'), ('TR081_8_16', 'TR081_8', 'TR081_16'), ('TR081_8_17', 'TR081_17', 'TR081_8'), ('TR081_8_17', 'TR081_8', 'TR081_17'), ('TR082_10_22', 'TR082_10', 'TR082_22'), ('TR082_10_22', 'TR082_22', 'TR082_10'), ('TR082_11_13', 'TR082_11', 'TR082_13'), ('TR082_11_13', 'TR082_13', 'TR082_11'), ('TR082_11_23', 'TR082_11', 'TR082_23'), ('TR082_11_23', 'TR082_23', 'TR082_11'), ('TR082_12_14', 'TR082_12', 'TR082_14'), ('TR082_12_14', 'TR082_14', 'TR082_12'), ('TR082_13_24', 'TR082_13', 'TR082_24'), ('TR082_13_24', 'TR082_24', 'TR082_13'), ('TR082_14_25', 'TR082_14', 'TR082_25'), ('TR082_14_25', 'TR082_25', 'TR082_14'), ('TR082_14_26', 'TR082_14', 'TR082_26'), ('TR082_14_26', 'TR082_26', 'TR082_14'), ('TR082_1_15', 'TR082_1', 'TR082_15'), ('TR082_1_15', 'TR082_15', 'TR082_1'), ('TR082_1_2', 'TR082_1', 'TR082_2'), ('TR082_1_2', 'TR082_2', 'TR082_1'), ('TR082_1_3', 'TR082_1', 'TR082_3'), ('TR082_1_3', 'TR082_3', 'TR082_1'), ('TR082_2_5', 'TR082_2', 'TR082_5'), ('TR082_2_5', 'TR082_5', 'TR082_2'), ('TR082_3_7', 'TR082_3', 'TR082_7'), ('TR082_3_7', 'TR082_7', 'TR082_3'), ('TR082_4_16', 'TR082_16', 'TR082_4'), ('TR082_4_16', 'TR082_4', 'TR082_16'), ('TR082_4_8', 'TR082_4', 'TR082_8'), ('TR082_4_8', 'TR082_8', 'TR082_4'), ('TR082_5_17', 'TR082_17', 'TR082_5'), ('TR082_5_17', 'TR082_5', 'TR082_17'), ('TR082_6_10', 'TR082_10', 'TR082_6'), ('TR082_6_10', 'TR082_6', 'TR082_10'), ('TR082_6_18', 'TR082_18', 'TR082_6'), ('TR082_6_18', 'TR082_6', 'TR082_18'), ('TR082_7_19', 'TR082_19', 'TR082_7'), ('TR082_7_19', 'TR082_7', 'TR082_19'), ('TR082_8_20', 'TR082_20', 'TR082_8'), ('TR082_8_20', 'TR082_8', 'TR082_20'), ('TR082_9_12', 'TR082_12', 'TR082_9'), ('TR082_9_12', 'TR082_9', 'TR082_12'), ('TR082_9_21', 'TR082_21', 'TR082_9'), ('TR082_9_21', 'TR082_9', 'TR082_21'), ('TR083_10_23', 'TR083_10', 'TR083_23'), ('TR083_10_23', 'TR083_23', 'TR083_10'), ('TR083_1_12', 'TR083_1', 'TR083_12'), ('TR083_1_12', 'TR083_12', 'TR083_1'), ('TR083_1_13', 'TR083_1', 'TR083_13'), ('TR083_1_13', 'TR083_13', 'TR083_1'), ('TR083_1_14', 'TR083_1', 'TR083_14'), ('TR083_1_14', 'TR083_14', 'TR083_1'), ('TR083_1_2', 'TR083_1', 'TR083_2'), ('TR083_1_2', 'TR083_2', 'TR083_1'), ('TR083_2_3', 'TR083_2', 'TR083_3'), ('TR083_2_3', 'TR083_3', 'TR083_2'), ('TR083_2_4', 'TR083_2', 'TR083_4'), ('TR083_2_4', 'TR083_4', 'TR083_2'), ('TR083_3_15', 'TR083_15', 'TR083_3'), ('TR083_3_15', 'TR083_3', 'TR083_15'), ('TR083_3_16', 'TR083_16', 'TR083_3'), ('TR083_3_16', 'TR083_3', 'TR083_16'), ('TR083_3_17', 'TR083_17', 'TR083_3'), ('TR083_3_17', 'TR083_3', 'TR083_17'), ('TR083_4_18', 'TR083_18', 'TR083_4'), ('TR083_4_18', 'TR083_4', 'TR083_18'), ('TR083_4_5', 'TR083_4', 'TR083_5'), ('TR083_4_5', 'TR083_5', 'TR083_4'), ('TR083_5_7', 'TR083_5', 'TR083_7'), ('TR083_5_7', 'TR083_7', 'TR083_5'), ('TR083_7_19', 'TR083_19', 'TR083_7'), ('TR083_7_19', 'TR083_7', 'TR083_19'), ('TR083_7_20', 'TR083_20', 'TR083_7'), ('TR083_7_20', 'TR083_7', 'TR083_20'), ('TR083_7_8', 'TR083_7', 'TR083_8'), ('TR083_7_8', 'TR083_8', 'TR083_7'), ('TR083_8_21', 'TR083_21', 'TR083_8'), ('TR083_8_21', 'TR083_8', 'TR083_21'), ('TR083_8_22', 'TR083_22', 'TR083_8'), ('TR083_8_22', 'TR083_8', 'TR083_22'), ('TR083_8_9', 'TR083_8', 'TR083_9'), ('TR083_8_9', 'TR083_9', 'TR083_8'), ('TR083_9_10', 'TR083_10', 'TR083_9'), ('TR083_9_10', 'TR083_9', 'TR083_10'), ('TR084_10_19', 'TR084_10', 'TR084_19'), ('TR084_10_19', 'TR084_19', 'TR084_10'), ('TR084_10_20', 'TR084_10', 'TR084_20'), ('TR084_10_20', 'TR084_20', 'TR084_10'), ('TR084_1_11', 'TR084_1', 'TR084_11'), ('TR084_1_11', 'TR084_11', 'TR084_1'), ('TR084_1_6', 'TR084_1', 'TR084_6'), ('TR084_1_6', 'TR084_6', 'TR084_1'), ('TR084_21_22', 'TR084_21', 'TR084_22'), ('TR084_21_22', 'TR084_22', 'TR084_21'), ('TR084_21_23', 'TR084_21', 'TR084_23'), ('TR084_21_23', 'TR084_23', 'TR084_21'), ('TR084_22_26', 'TR084_22', 'TR084_26'), ('TR084_22_26', 'TR084_26', 'TR084_22'), ('TR084_23_27', 'TR084_23', 'TR084_27'), ('TR084_23_27', 'TR084_27', 'TR084_23'), ('TR084_2_12', 'TR084_12', 'TR084_2'), ('TR084_2_12', 'TR084_2', 'TR084_12'), ('TR084_2_3', 'TR084_2', 'TR084_3'), ('TR084_2_3', 'TR084_3', 'TR084_2'), ('TR084_3_7', 'TR084_3', 'TR084_7'), ('TR084_3_7', 'TR084_7', 'TR084_3'), ('TR084_4_5', 'TR084_4', 'TR084_5'), ('TR084_4_5', 'TR084_5', 'TR084_4'), ('TR084_4_9', 'TR084_4', 'TR084_9'), ('TR084_4_9', 'TR084_9', 'TR084_4'), ('TR084_5_13', 'TR084_13', 'TR084_5'), ('TR084_5_13', 'TR084_5', 'TR084_13'), ('TR084_6_10', 'TR084_10', 'TR084_6'), ('TR084_6_10', 'TR084_6', 'TR084_10'), ('TR084_7_8', 'TR084_7', 'TR084_8'), ('TR084_7_8', 'TR084_8', 'TR084_7'), ('TR084_8_14', 'TR084_14', 'TR084_8'), ('TR084_8_14', 'TR084_8', 'TR084_14'), ('TR084_8_15', 'TR084_15', 'TR084_8'), ('TR084_8_15', 'TR084_8', 'TR084_15'), ('TR084_8_16', 'TR084_16', 'TR084_8'), ('TR084_8_16', 'TR084_8', 'TR084_16'), ('TR084_9_17', 'TR084_17', 'TR084_9'), ('TR084_9_17', 'TR084_9', 'TR084_17'), ('TR084_9_18', 'TR084_18', 'TR084_9'), ('TR084_9_18', 'TR084_9', 'TR084_18'), ('TR085_1_10', 'TR085_1', 'TR085_10'), ('TR085_1_10', 'TR085_10', 'TR085_1'), ('TR085_1_6', 'TR085_1', 'TR085_6'), ('TR085_1_6', 'TR085_6', 'TR085_1'), ('TR085_2_11', 'TR085_11', 'TR085_2'), ('TR085_2_11', 'TR085_2', 'TR085_11'), ('TR085_2_3', 'TR085_2', 'TR085_3'), ('TR085_2_3', 'TR085_3', 'TR085_2'), ('TR085_3_7', 'TR085_3', 'TR085_7'), ('TR085_3_7', 'TR085_7', 'TR085_3'), ('TR085_4_5', 'TR085_4', 'TR085_5'), ('TR085_4_5', 'TR085_5', 'TR085_4'), ('TR085_4_8', 'TR085_4', 'TR085_8'), ('TR085_4_8', 'TR085_8', 'TR085_4'), ('TR085_5_12', 'TR085_12', 'TR085_5'), ('TR085_5_12', 'TR085_5', 'TR085_12'), ('TR085_6_9', 'TR085_6', 'TR085_9'), ('TR085_6_9', 'TR085_9', 'TR085_6'), ('TR085_8_13', 'TR085_13', 'TR085_8'), ('TR085_8_13', 'TR085_8', 'TR085_13'), ('TR085_8_14', 'TR085_14', 'TR085_8'), ('TR085_8_14', 'TR085_8', 'TR085_14'), ('TR085_9_15', 'TR085_15', 'TR085_9'), ('TR085_9_15', 'TR085_9', 'TR085_15'), ('TR085_9_16', 'TR085_16', 'TR085_9'), ('TR085_9_16', 'TR085_9', 'TR085_16'), ('TR086_1_2', 'TR086_1', 'TR086_2'), ('TR086_1_2', 'TR086_2', 'TR086_1'), ('TR086_1_4', 'TR086_1', 'TR086_4'), ('TR086_1_4', 'TR086_4', 'TR086_1'), ('TR086_1_5', 'TR086_1', 'TR086_5'), ('TR086_1_5', 'TR086_5', 'TR086_1'), ('TR086_1_6', 'TR086_1', 'TR086_6'), ('TR086_1_6', 'TR086_6', 'TR086_1'), ('TR086_2_3', 'TR086_2', 'TR086_3'), ('TR086_2_3', 'TR086_3', 'TR086_2'), ('TR086_2_7', 'TR086_2', 'TR086_7'), ('TR086_2_7', 'TR086_7', 'TR086_2'), ('TR086_2_8', 'TR086_2', 'TR086_8'), ('TR086_2_8', 'TR086_8', 'TR086_2'), ('TR088_1_10', 'TR088_1', 'TR088_10'), ('TR088_1_10', 'TR088_10', 'TR088_1'), ('TR088_1_6', 'TR088_1', 'TR088_6'), ('TR088_1_6', 'TR088_6', 'TR088_1'), ('TR088_2_11', 'TR088_11', 'TR088_2'), ('TR088_2_11', 'TR088_2', 'TR088_11'), ('TR088_2_3', 'TR088_2', 'TR088_3'), ('TR088_2_3', 'TR088_3', 'TR088_2'), ('TR088_3_12', 'TR088_12', 'TR088_3'), ('TR088_3_12', 'TR088_3', 'TR088_12'), ('TR088_4_5', 'TR088_4', 'TR088_5'), ('TR088_4_5', 'TR088_5', 'TR088_4'), ('TR088_4_7', 'TR088_4', 'TR088_7'), ('TR088_4_7', 'TR088_7', 'TR088_4'), ('TR088_5_9', 'TR088_5', 'TR088_9'), ('TR088_5_9', 'TR088_9', 'TR088_5'), ('TR088_6_13', 'TR088_13', 'TR088_6'), ('TR088_6_13', 'TR088_6', 'TR088_13'), ('TR088_8_9', 'TR088_8', 'TR088_9'), ('TR088_8_9', 'TR088_9', 'TR088_8'), ('TR088_9_14', 'TR088_14', 'TR088_9'), ('TR088_9_14', 'TR088_9', 'TR088_14'), ('TR089_19_20', 'TR089_19', 'TR089_20'), ('TR089_19_20', 'TR089_20', 'TR089_19'), ('TR089_1_10', 'TR089_1', 'TR089_10'), ('TR089_1_10', 'TR089_10', 'TR089_1'), ('TR089_1_6', 'TR089_1', 'TR089_6'), ('TR089_1_6', 'TR089_6', 'TR089_1'), ('TR089_2_11', 'TR089_11', 'TR089_2'), ('TR089_2_11', 'TR089_2', 'TR089_11'), ('TR089_2_3', 'TR089_2', 'TR089_3'), ('TR089_2_3', 'TR089_3', 'TR089_2'), ('TR089_3_12', 'TR089_12', 'TR089_3'), ('TR089_3_12', 'TR089_3', 'TR089_12'), ('TR089_4_13', 'TR089_13', 'TR089_4'), ('TR089_4_13', 'TR089_4', 'TR089_13'), ('TR089_4_5', 'TR089_4', 'TR089_5'), ('TR089_4_5', 'TR089_5', 'TR089_4'), ('TR089_5_8', 'TR089_5', 'TR089_8'), ('TR089_5_8', 'TR089_8', 'TR089_5'), ('TR089_6_7', 'TR089_6', 'TR089_7'), ('TR089_6_7', 'TR089_7', 'TR089_6'), ('TR089_7_14', 'TR089_14', 'TR089_7'), ('TR089_7_14', 'TR089_7', 'TR089_14'), ('TR089_7_15', 'TR089_15', 'TR089_7'), ('TR089_7_15', 'TR089_7', 'TR089_15'), ('TR089_8_9', 'TR089_8', 'TR089_9'), ('TR089_8_9', 'TR089_9', 'TR089_8'), ('TR089_9_16', 'TR089_16', 'TR089_9'), ('TR089_9_16', 'TR089_9', 'TR089_16'), ('TR089_9_17', 'TR089_17', 'TR089_9'), ('TR089_9_17', 'TR089_9', 'TR089_17'), ('TR089_9_18', 'TR089_18', 'TR089_9'), ('TR089_9_18', 'TR089_9', 'TR089_18'), ('TR090_10_25', 'TR090_10', 'TR090_25'), ('TR090_10_25', 'TR090_25', 'TR090_10'), ('TR090_11_12', 'TR090_11', 'TR090_12'), ('TR090_11_12', 'TR090_12', 'TR090_11'), ('TR090_11_26', 'TR090_11', 'TR090_26'), ('TR090_11_26', 'TR090_26', 'TR090_11'), ('TR090_12_27', 'TR090_12', 'TR090_27'), ('TR090_12_27', 'TR090_27', 'TR090_12'), ('TR090_13_14', 'TR090_13', 'TR090_14'), ('TR090_13_14', 'TR090_14', 'TR090_13'), ('TR090_13_16', 'TR090_13', 'TR090_16'), ('TR090_13_16', 'TR090_16', 'TR090_13'), ('TR090_14_28', 'TR090_14', 'TR090_28'), ('TR090_14_28', 'TR090_28', 'TR090_14'), ('TR090_15_29', 'TR090_15', 'TR090_29'), ('TR090_15_29', 'TR090_29', 'TR090_15'), ('TR090_1_2', 'TR090_1', 'TR090_2'), ('TR090_1_2', 'TR090_2', 'TR090_1'), ('TR090_1_3', 'TR090_1', 'TR090_3'), ('TR090_1_3', 'TR090_3', 'TR090_1'), ('TR090_1_4', 'TR090_1', 'TR090_4'), ('TR090_1_4', 'TR090_4', 'TR090_1'), ('TR090_1_5', 'TR090_1', 'TR090_5'), ('TR090_1_5', 'TR090_5', 'TR090_1'), ('TR090_2_21', 'TR090_2', 'TR090_21'), ('TR090_2_21', 'TR090_21', 'TR090_2'), ('TR090_3_18', 'TR090_18', 'TR090_3'), ('TR090_3_18', 'TR090_3', 'TR090_18'), ('TR090_3_19', 'TR090_19', 'TR090_3'), ('TR090_3_19', 'TR090_3', 'TR090_19'), ('TR090_3_20', 'TR090_20', 'TR090_3'), ('TR090_3_20', 'TR090_3', 'TR090_20'), ('TR090_4_10', 'TR090_10', 'TR090_4'), ('TR090_4_10', 'TR090_4', 'TR090_10'), ('TR090_5_15', 'TR090_15', 'TR090_5'), ('TR090_5_15', 'TR090_5', 'TR090_15'), ('TR090_6_22', 'TR090_22', 'TR090_6'), ('TR090_6_22', 'TR090_6', 'TR090_22'), ('TR090_6_7', 'TR090_6', 'TR090_7'), ('TR090_6_7', 'TR090_7', 'TR090_6'), ('TR090_7_23', 'TR090_23', 'TR090_7'), ('TR090_7_23', 'TR090_7', 'TR090_23'), ('TR090_8_17', 'TR090_17', 'TR090_8'), ('TR090_8_17', 'TR090_8', 'TR090_17'), ('TR090_8_9', 'TR090_8', 'TR090_9'), ('TR090_8_9', 'TR090_9', 'TR090_8'), ('TR090_9_24', 'TR090_24', 'TR090_9'), ('TR090_9_24', 'TR090_9', 'TR090_24'), ('TR091_11_12', 'TR091_11', 'TR091_12'), ('TR091_11_12', 'TR091_12', 'TR091_11'), ('TR091_11_26', 'TR091_11', 'TR091_26'), ('TR091_11_26', 'TR091_26', 'TR091_11'), ('TR091_12_17', 'TR091_12', 'TR091_17'), ('TR091_12_17', 'TR091_17', 'TR091_12'), ('TR091_13_14', 'TR091_13', 'TR091_14'), ('TR091_13_14', 'TR091_14', 'TR091_13'), ('TR091_13_27', 'TR091_13', 'TR091_27'), ('TR091_13_27', 'TR091_27', 'TR091_13'), ('TR091_14_28', 'TR091_14', 'TR091_28'), ('TR091_14_28', 'TR091_28', 'TR091_14'), ('TR091_15_16', 'TR091_15', 'TR091_16'), ('TR091_15_16', 'TR091_16', 'TR091_15'), ('TR091_15_19', 'TR091_15', 'TR091_19'), ('TR091_15_19', 'TR091_19', 'TR091_15'), ('TR091_16_29', 'TR091_16', 'TR091_29'), ('TR091_16_29', 'TR091_29', 'TR091_16'), ('TR091_17_18', 'TR091_17', 'TR091_18'), ('TR091_17_18', 'TR091_18', 'TR091_17'), ('TR091_19_20', 'TR091_19', 'TR091_20'), ('TR091_19_20', 'TR091_20', 'TR091_19'), ('TR091_1_2', 'TR091_1', 'TR091_2'), ('TR091_1_2', 'TR091_2', 'TR091_1'), ('TR091_1_22', 'TR091_1', 'TR091_22'), ('TR091_1_22', 'TR091_22', 'TR091_1'), ('TR091_2_8', 'TR091_2', 'TR091_8'), ('TR091_2_8', 'TR091_8', 'TR091_2'), ('TR091_3_23', 'TR091_23', 'TR091_3'), ('TR091_3_23', 'TR091_3', 'TR091_23'), ('TR091_3_4', 'TR091_3', 'TR091_4'), ('TR091_3_4', 'TR091_4', 'TR091_3'), ('TR091_4_24', 'TR091_24', 'TR091_4'), ('TR091_4_24', 'TR091_4', 'TR091_24'), ('TR091_5_6', 'TR091_5', 'TR091_6'), ('TR091_5_6', 'TR091_6', 'TR091_5'), ('TR091_5_7', 'TR091_5', 'TR091_7'), ('TR091_5_7', 'TR091_7', 'TR091_5'), ('TR091_7_25', 'TR091_25', 'TR091_7'), ('TR091_7_25', 'TR091_7', 'TR091_25'), ('TR091_8_9', 'TR091_8', 'TR091_9'), ('TR091_8_9', 'TR091_9', 'TR091_8'), ('TR091_9_11', 'TR091_11', 'TR091_9'), ('TR091_9_11', 'TR091_9', 'TR091_11'), ('TR092_10_13', 'TR092_10', 'TR092_13'), ('TR092_10_13', 'TR092_13', 'TR092_10'), ('TR092_10_22', 'TR092_10', 'TR092_22'), ('TR092_10_22', 'TR092_22', 'TR092_10'), ('TR092_11_23', 'TR092_11', 'TR092_23'), ('TR092_11_23', 'TR092_23', 'TR092_11'), ('TR092_12_14', 'TR092_12', 'TR092_14'), ('TR092_12_14', 'TR092_14', 'TR092_12'), ('TR092_12_24', 'TR092_12', 'TR092_24'), ('TR092_12_24', 'TR092_24', 'TR092_12'), ('TR092_13_25', 'TR092_13', 'TR092_25'), ('TR092_13_25', 'TR092_25', 'TR092_13'), ('TR092_14_26', 'TR092_14', 'TR092_26'), ('TR092_14_26', 'TR092_26', 'TR092_14'), ('TR092_1_15', 'TR092_1', 'TR092_15'), ('TR092_1_15', 'TR092_15', 'TR092_1'), ('TR092_1_2', 'TR092_1', 'TR092_2'), ('TR092_1_2', 'TR092_2', 'TR092_1'), ('TR092_1_3', 'TR092_1', 'TR092_3'), ('TR092_1_3', 'TR092_3', 'TR092_1'), ('TR092_2_16', 'TR092_16', 'TR092_2'), ('TR092_2_16', 'TR092_2', 'TR092_16'), ('TR092_2_4', 'TR092_2', 'TR092_4'), ('TR092_2_4', 'TR092_4', 'TR092_2'), ('TR092_3_6', 'TR092_3', 'TR092_6'), ('TR092_3_6', 'TR092_6', 'TR092_3'), ('TR092_4_8', 'TR092_4', 'TR092_8'), ('TR092_4_8', 'TR092_8', 'TR092_4'), ('TR092_5_17', 'TR092_17', 'TR092_5'), ('TR092_5_17', 'TR092_5', 'TR092_17'), ('TR092_5_9', 'TR092_5', 'TR092_9'), ('TR092_5_9', 'TR092_9', 'TR092_5'), ('TR092_6_18', 'TR092_18', 'TR092_6'), ('TR092_6_18', 'TR092_6', 'TR092_18'), ('TR092_7_11', 'TR092_11', 'TR092_7'), ('TR092_7_11', 'TR092_7', 'TR092_11'), ('TR092_7_19', 'TR092_19', 'TR092_7'), ('TR092_7_19', 'TR092_7', 'TR092_19'), ('TR092_8_20', 'TR092_20', 'TR092_8'), ('TR092_8_20', 'TR092_8', 'TR092_20'), ('TR092_9_21', 'TR092_21', 'TR092_9'), ('TR092_9_21', 'TR092_9', 'TR092_21'), ('TR093_10_24', 'TR093_10', 'TR093_24'), ('TR093_10_24', 'TR093_24', 'TR093_10'), ('TR093_11_14', 'TR093_11', 'TR093_14'), ('TR093_11_14', 'TR093_14', 'TR093_11'), ('TR093_11_25', 'TR093_11', 'TR093_25'), ('TR093_11_25', 'TR093_25', 'TR093_11'), ('TR093_12_26', 'TR093_12', 'TR093_26'), ('TR093_12_26', 'TR093_26', 'TR093_12'), ('TR093_13_15', 'TR093_13', 'TR093_15'), ('TR093_13_15', 'TR093_15', 'TR093_13'), ('TR093_13_27', 'TR093_13', 'TR093_27'), ('TR093_13_27', 'TR093_27', 'TR093_13'), ('TR093_14_28', 'TR093_14', 'TR093_28'), ('TR093_14_28', 'TR093_28', 'TR093_14'), ('TR093_15_16', 'TR093_15', 'TR093_16'), ('TR093_15_16', 'TR093_16', 'TR093_15'), ('TR093_16_29', 'TR093_16', 'TR093_29'), ('TR093_16_29', 'TR093_29', 'TR093_16'), ('TR093_16_30', 'TR093_16', 'TR093_30'), ('TR093_16_30', 'TR093_30', 'TR093_16'), ('TR093_1_17', 'TR093_1', 'TR093_17'), ('TR093_1_17', 'TR093_17', 'TR093_1'), ('TR093_1_18', 'TR093_1', 'TR093_18'), ('TR093_1_18', 'TR093_18', 'TR093_1'), ('TR093_1_2', 'TR093_1', 'TR093_2'), ('TR093_1_2', 'TR093_2', 'TR093_1'), ('TR093_1_3', 'TR093_1', 'TR093_3'), ('TR093_1_3', 'TR093_3', 'TR093_1'), ('TR093_2_19', 'TR093_19', 'TR093_2'), ('TR093_2_19', 'TR093_2', 'TR093_19'), ('TR093_2_20', 'TR093_2', 'TR093_20'), ('TR093_2_20', 'TR093_20', 'TR093_2'), ('TR093_2_21', 'TR093_2', 'TR093_21'), ('TR093_2_21', 'TR093_21', 'TR093_2'), ('TR093_31_32', 'TR093_31', 'TR093_32'), ('TR093_31_32', 'TR093_32', 'TR093_31'), ('TR093_3_4', 'TR093_3', 'TR093_4'), ('TR093_3_4', 'TR093_4', 'TR093_3'), ('TR093_3_5', 'TR093_3', 'TR093_5'), ('TR093_3_5', 'TR093_5', 'TR093_3'), ('TR093_4_7', 'TR093_4', 'TR093_7'), ('TR093_4_7', 'TR093_7', 'TR093_4'), ('TR093_5_9', 'TR093_5', 'TR093_9'), ('TR093_5_9', 'TR093_9', 'TR093_5'), ('TR093_6_10', 'TR093_10', 'TR093_6'), ('TR093_6_10', 'TR093_6', 'TR093_10'), ('TR093_6_8', 'TR093_6', 'TR093_8'), ('TR093_6_8', 'TR093_8', 'TR093_6'), ('TR093_7_22', 'TR093_22', 'TR093_7'), ('TR093_7_22', 'TR093_7', 'TR093_22'), ('TR093_8_12', 'TR093_12', 'TR093_8'), ('TR093_8_12', 'TR093_8', 'TR093_12'), ('TR093_9_23', 'TR093_23', 'TR093_9'), ('TR093_9_23', 'TR093_9', 'TR093_23'), ('TR094_1_12', 'TR094_1', 'TR094_12'), ('TR094_1_12', 'TR094_12', 'TR094_1'), ('TR094_1_6', 'TR094_1', 'TR094_6'), ('TR094_1_6', 'TR094_6', 'TR094_1'), ('TR094_2_13', 'TR094_13', 'TR094_2'), ('TR094_2_13', 'TR094_2', 'TR094_13'), ('TR094_2_3', 'TR094_2', 'TR094_3'), ('TR094_2_3', 'TR094_3', 'TR094_2'), ('TR094_3_8', 'TR094_3', 'TR094_8'), ('TR094_3_8', 'TR094_8', 'TR094_3'), ('TR094_4_14', 'TR094_14', 'TR094_4'), ('TR094_4_14', 'TR094_4', 'TR094_14'), ('TR094_4_5', 'TR094_4', 'TR094_5'), ('TR094_4_5', 'TR094_5', 'TR094_4'), ('TR094_5_9', 'TR094_5', 'TR094_9'), ('TR094_5_9', 'TR094_9', 'TR094_5'), ('TR094_6_7', 'TR094_6', 'TR094_7'), ('TR094_6_7', 'TR094_7', 'TR094_6'), ('TR094_7_15', 'TR094_15', 'TR094_7'), ('TR094_7_15', 'TR094_7', 'TR094_15'), ('TR094_8_16', 'TR094_16', 'TR094_8'), ('TR094_8_16', 'TR094_8', 'TR094_16'), ('TR094_8_17', 'TR094_17', 'TR094_8'), ('TR094_8_17', 'TR094_8', 'TR094_17'), ('TR094_9_11', 'TR094_11', 'TR094_9'), ('TR094_9_11', 'TR094_9', 'TR094_11'), ('TR095_1_2', 'TR095_1', 'TR095_2'), ('TR095_1_2', 'TR095_2', 'TR095_1'), ('TR095_3_11', 'TR095_11', 'TR095_3'), ('TR095_3_11', 'TR095_3', 'TR095_11'), ('TR095_3_8', 'TR095_3', 'TR095_8'), ('TR095_3_8', 'TR095_8', 'TR095_3'), ('TR095_4_12', 'TR095_12', 'TR095_4'), ('TR095_4_12', 'TR095_4', 'TR095_12'), ('TR095_4_5', 'TR095_4', 'TR095_5'), ('TR095_4_5', 'TR095_5', 'TR095_4'), ('TR095_6_13', 'TR095_13', 'TR095_6'), ('TR095_6_13', 'TR095_6', 'TR095_13'), ('TR095_6_7', 'TR095_6', 'TR095_7'), ('TR095_6_7', 'TR095_7', 'TR095_6'), ('TR095_7_9', 'TR095_7', 'TR095_9'), ('TR095_7_9', 'TR095_9', 'TR095_7'), ('TR095_8_14', 'TR095_14', 'TR095_8'), ('TR095_8_14', 'TR095_8', 'TR095_14'), ('TR095_9_10', 'TR095_10', 'TR095_9'), ('TR095_9_10', 'TR095_9', 'TR095_10'), ('TR095_9_15', 'TR095_15', 'TR095_9'), ('TR095_9_15', 'TR095_9', 'TR095_15'), ('TR095_9_16', 'TR095_16', 'TR095_9'), ('TR095_9_16', 'TR095_9', 'TR095_16'), ('TR096_10_12', 'TR096_10', 'TR096_12'), ('TR096_10_12', 'TR096_12', 'TR096_10'), ('TR096_10_25', 'TR096_10', 'TR096_25'), ('TR096_10_25', 'TR096_25', 'TR096_10'), ('TR096_12_13', 'TR096_12', 'TR096_13'), ('TR096_12_13', 'TR096_13', 'TR096_12'), ('TR096_13_14', 'TR096_13', 'TR096_14'), ('TR096_13_14', 'TR096_14', 'TR096_13'), ('TR096_14_15', 'TR096_14', 'TR096_15'), ('TR096_14_15', 'TR096_15', 'TR096_14'), ('TR096_14_16', 'TR096_14', 'TR096_16'), ('TR096_14_16', 'TR096_16', 'TR096_14'), ('TR096_14_17', 'TR096_14', 'TR096_17'), ('TR096_14_17', 'TR096_17', 'TR096_14'), ('TR096_15_18', 'TR096_15', 'TR096_18'), ('TR096_15_18', 'TR096_18', 'TR096_15'), ('TR096_16_19', 'TR096_16', 'TR096_19'), ('TR096_16_19', 'TR096_19', 'TR096_16'), ('TR096_18_20', 'TR096_18', 'TR096_20'), ('TR096_18_20', 'TR096_20', 'TR096_18'), ('TR096_18_26', 'TR096_18', 'TR096_26'), ('TR096_18_26', 'TR096_26', 'TR096_18'), ('TR096_18_27', 'TR096_18', 'TR096_27'), ('TR096_18_27', 'TR096_27', 'TR096_18'), ('TR096_19_21', 'TR096_19', 'TR096_21'), ('TR096_19_21', 'TR096_21', 'TR096_19'), ('TR096_19_28', 'TR096_19', 'TR096_28'), ('TR096_19_28', 'TR096_28', 'TR096_19'), ('TR096_19_29', 'TR096_19', 'TR096_29'), ('TR096_19_29', 'TR096_29', 'TR096_19'), ('TR096_1_2', 'TR096_1', 'TR096_2'), ('TR096_1_2', 'TR096_2', 'TR096_1'), ('TR096_1_22', 'TR096_1', 'TR096_22'), ('TR096_1_22', 'TR096_22', 'TR096_1'), ('TR096_20_30', 'TR096_20', 'TR096_30'), ('TR096_20_30', 'TR096_30', 'TR096_20'), ('TR096_20_31', 'TR096_20', 'TR096_31'), ('TR096_20_31', 'TR096_31', 'TR096_20'), ('TR096_20_32', 'TR096_20', 'TR096_32'), ('TR096_20_32', 'TR096_32', 'TR096_20'), ('TR096_21_33', 'TR096_21', 'TR096_33'), ('TR096_21_33', 'TR096_33', 'TR096_21'), ('TR096_21_34', 'TR096_21', 'TR096_34'), ('TR096_21_34', 'TR096_34', 'TR096_21'), ('TR096_21_35', 'TR096_21', 'TR096_35'), ('TR096_21_35', 'TR096_35', 'TR096_21'), ('TR096_22_36', 'TR096_22', 'TR096_36'), ('TR096_22_36', 'TR096_36', 'TR096_22'), ('TR096_22_37', 'TR096_22', 'TR096_37'), ('TR096_22_37', 'TR096_37', 'TR096_22'), ('TR096_22_38', 'TR096_22', 'TR096_38'), ('TR096_22_38', 'TR096_38', 'TR096_22'), ('TR096_2_5', 'TR096_2', 'TR096_5'), ('TR096_2_5', 'TR096_5', 'TR096_2'), ('TR096_3_6', 'TR096_3', 'TR096_6'), ('TR096_3_6', 'TR096_6', 'TR096_3'), ('TR096_3_7', 'TR096_3', 'TR096_7'), ('TR096_3_7', 'TR096_7', 'TR096_3'), ('TR096_4_8', 'TR096_4', 'TR096_8'), ('TR096_4_8', 'TR096_8', 'TR096_4'), ('TR096_4_9', 'TR096_4', 'TR096_9'), ('TR096_4_9', 'TR096_9', 'TR096_4'), ('TR096_5_23', 'TR096_23', 'TR096_5'), ('TR096_5_23', 'TR096_5', 'TR096_23'), ('TR096_7_9', 'TR096_7', 'TR096_9'), ('TR096_7_9', 'TR096_9', 'TR096_7'), ('TR096_8_24', 'TR096_24', 'TR096_8'), ('TR096_8_24', 'TR096_8', 'TR096_24'), ('TR098_10_11', 'TR098_10', 'TR098_11'), ('TR098_10_11', 'TR098_11', 'TR098_10'), ('TR098_10_28', 'TR098_10', 'TR098_28'), ('TR098_10_28', 'TR098_28', 'TR098_10'), ('TR098_11_29', 'TR098_11', 'TR098_29'), ('TR098_11_29', 'TR098_29', 'TR098_11'), ('TR098_11_30', 'TR098_11', 'TR098_30'), ('TR098_11_30', 'TR098_30', 'TR098_11'), ('TR098_11_31', 'TR098_11', 'TR098_31'), ('TR098_11_31', 'TR098_31', 'TR098_11'), ('TR098_1_12', 'TR098_1', 'TR098_12'), ('TR098_1_12', 'TR098_12', 'TR098_1'), ('TR098_1_2', 'TR098_1', 'TR098_2'), ('TR098_1_2', 'TR098_2', 'TR098_1'), ('TR098_1_3', 'TR098_1', 'TR098_3'), ('TR098_1_3', 'TR098_3', 'TR098_1'), ('TR098_1_4', 'TR098_1', 'TR098_4'), ('TR098_1_4', 'TR098_4', 'TR098_1'), ('TR098_2_13', 'TR098_13', 'TR098_2'), ('TR098_2_13', 'TR098_2', 'TR098_13'), ('TR098_2_14', 'TR098_14', 'TR098_2'), ('TR098_2_14', 'TR098_2', 'TR098_14'), ('TR098_2_15', 'TR098_15', 'TR098_2'), ('TR098_2_15', 'TR098_2', 'TR098_15'), ('TR098_3_16', 'TR098_16', 'TR098_3'), ('TR098_3_16', 'TR098_3', 'TR098_16'), ('TR098_3_17', 'TR098_17', 'TR098_3'), ('TR098_3_17', 'TR098_3', 'TR098_17'), ('TR098_3_18', 'TR098_18', 'TR098_3'), ('TR098_3_18', 'TR098_3', 'TR098_18'), ('TR098_4_19', 'TR098_19', 'TR098_4'), ('TR098_4_19', 'TR098_4', 'TR098_19'), ('TR098_4_5', 'TR098_4', 'TR098_5'), ('TR098_4_5', 'TR098_5', 'TR098_4'), ('TR098_4_6', 'TR098_4', 'TR098_6'), ('TR098_4_6', 'TR098_6', 'TR098_4'), ('TR098_5_20', 'TR098_20', 'TR098_5'), ('TR098_5_20', 'TR098_5', 'TR098_20'), ('TR098_5_7', 'TR098_5', 'TR098_7'), ('TR098_5_7', 'TR098_7', 'TR098_5'), ('TR098_5_8', 'TR098_5', 'TR098_8'), ('TR098_5_8', 'TR098_8', 'TR098_5'), ('TR098_6_21', 'TR098_21', 'TR098_6'), ('TR098_6_21', 'TR098_6', 'TR098_21'), ('TR098_6_22', 'TR098_22', 'TR098_6'), ('TR098_6_22', 'TR098_6', 'TR098_22'), ('TR098_6_9', 'TR098_6', 'TR098_9'), ('TR098_6_9', 'TR098_9', 'TR098_6'), ('TR098_7_23', 'TR098_23', 'TR098_7'), ('TR098_7_23', 'TR098_7', 'TR098_23'), ('TR098_8_10', 'TR098_10', 'TR098_8'), ('TR098_8_10', 'TR098_8', 'TR098_10'), ('TR098_8_24', 'TR098_24', 'TR098_8'), ('TR098_8_24', 'TR098_8', 'TR098_24'), ('TR098_8_25', 'TR098_25', 'TR098_8'), ('TR098_8_25', 'TR098_8', 'TR098_25'), ('TR098_9_10', 'TR098_10', 'TR098_9'), ('TR098_9_10', 'TR098_9', 'TR098_10'), ('TR098_9_26', 'TR098_26', 'TR098_9'), ('TR098_9_26', 'TR098_9', 'TR098_26'), ('TR098_9_27', 'TR098_27', 'TR098_9'), ('TR098_9_27', 'TR098_9', 'TR098_27'), ('TR099_11_14', 'TR099_11', 'TR099_14'), ('TR099_11_14', 'TR099_14', 'TR099_11'), ('TR099_11_22', 'TR099_11', 'TR099_22'), ('TR099_11_22', 'TR099_22', 'TR099_11'), ('TR099_12_23', 'TR099_12', 'TR099_23'), ('TR099_12_23', 'TR099_23', 'TR099_12'), ('TR099_13_15', 'TR099_13', 'TR099_15'), ('TR099_13_15', 'TR099_15', 'TR099_13'), ('TR099_13_24', 'TR099_13', 'TR099_24'), ('TR099_13_24', 'TR099_24', 'TR099_13'), ('TR099_14_16', 'TR099_14', 'TR099_16'), ('TR099_14_16', 'TR099_16', 'TR099_14'), ('TR099_15_25', 'TR099_15', 'TR099_25'), ('TR099_15_25', 'TR099_25', 'TR099_15'), ('TR099_16_26', 'TR099_16', 'TR099_26'), ('TR099_16_26', 'TR099_26', 'TR099_16'), ('TR099_16_27', 'TR099_16', 'TR099_27'), ('TR099_16_27', 'TR099_27', 'TR099_16'), ('TR099_1_3', 'TR099_1', 'TR099_3'), ('TR099_1_3', 'TR099_3', 'TR099_1'), ('TR099_28_29', 'TR099_28', 'TR099_29'), ('TR099_28_29', 'TR099_29', 'TR099_28'), ('TR099_2_4', 'TR099_2', 'TR099_4'), ('TR099_2_4', 'TR099_4', 'TR099_2'), ('TR099_3_6', 'TR099_3', 'TR099_6'), ('TR099_3_6', 'TR099_6', 'TR099_3'), ('TR099_4_8', 'TR099_4', 'TR099_8'), ('TR099_4_8', 'TR099_8', 'TR099_4'), ('TR099_5_10', 'TR099_10', 'TR099_5'), ('TR099_5_10', 'TR099_5', 'TR099_10'), ('TR099_5_9', 'TR099_5', 'TR099_9'), ('TR099_5_9', 'TR099_9', 'TR099_5'), ('TR099_6_17', 'TR099_17', 'TR099_6'), ('TR099_6_17', 'TR099_6', 'TR099_17'), ('TR099_7_12', 'TR099_12', 'TR099_7'), ('TR099_7_12', 'TR099_7', 'TR099_12'), ('TR099_7_18', 'TR099_18', 'TR099_7'), ('TR099_7_18', 'TR099_7', 'TR099_18'), ('TR099_8_19', 'TR099_19', 'TR099_8'), ('TR099_8_19', 'TR099_8', 'TR099_19'), ('TR099_9_20', 'TR099_20', 'TR099_9'), ('TR099_9_20', 'TR099_9', 'TR099_20'), ('TR099_9_21', 'TR099_21', 'TR099_9'), ('TR099_9_21', 'TR099_9', 'TR099_21'), ('TR100_16_17', 'TR100_16', 'TR100_17'), ('TR100_16_17', 'TR100_17', 'TR100_16'), ('TR100_16_18', 'TR100_16', 'TR100_18'), ('TR100_16_18', 'TR100_18', 'TR100_16'), ('TR100_16_19', 'TR100_16', 'TR100_19'), ('TR100_16_19', 'TR100_19', 'TR100_16'), ('TR100_16_20', 'TR100_16', 'TR100_20'), ('TR100_16_20', 'TR100_20', 'TR100_16'), ('TR100_1_11', 'TR100_1', 'TR100_11'), ('TR100_1_11', 'TR100_11', 'TR100_1'), ('TR100_1_6', 'TR100_1', 'TR100_6'), ('TR100_1_6', 'TR100_6', 'TR100_1'), ('TR100_2_12', 'TR100_12', 'TR100_2'), ('TR100_2_12', 'TR100_2', 'TR100_12'), ('TR100_2_3', 'TR100_2', 'TR100_3'), ('TR100_2_3', 'TR100_3', 'TR100_2'), ('TR100_3_13', 'TR100_13', 'TR100_3'), ('TR100_3_13', 'TR100_3', 'TR100_13'), ('TR100_4_14', 'TR100_14', 'TR100_4'), ('TR100_4_14', 'TR100_4', 'TR100_14'), ('TR100_4_5', 'TR100_4', 'TR100_5'), ('TR100_4_5', 'TR100_5', 'TR100_4'), ('TR100_5_7', 'TR100_5', 'TR100_7'), ('TR100_5_7', 'TR100_7', 'TR100_5'), ('TR100_6_15', 'TR100_15', 'TR100_6'), ('TR100_6_15', 'TR100_6', 'TR100_15'), ('TR100_7_10', 'TR100_10', 'TR100_7'), ('TR100_7_10', 'TR100_7', 'TR100_10'), ('TR100_7_8', 'TR100_7', 'TR100_8'), ('TR100_7_8', 'TR100_8', 'TR100_7'), ('TR101_11_12', 'TR101_11', 'TR101_12'), ('TR101_11_12', 'TR101_12', 'TR101_11'), ('TR101_12_15', 'TR101_12', 'TR101_15'), ('TR101_12_15', 'TR101_15', 'TR101_12'), ('TR101_1_16', 'TR101_1', 'TR101_16'), ('TR101_1_16', 'TR101_16', 'TR101_1'), ('TR101_1_6', 'TR101_1', 'TR101_6'), ('TR101_1_6', 'TR101_6', 'TR101_1'), ('TR101_2_17', 'TR101_17', 'TR101_2'), ('TR101_2_17', 'TR101_2', 'TR101_17'), ('TR101_2_3', 'TR101_2', 'TR101_3'), ('TR101_2_3', 'TR101_3', 'TR101_2'), ('TR101_3_10', 'TR101_10', 'TR101_3'), ('TR101_3_10', 'TR101_3', 'TR101_10'), ('TR101_4_18', 'TR101_18', 'TR101_4'), ('TR101_4_18', 'TR101_4', 'TR101_18'), ('TR101_4_5', 'TR101_4', 'TR101_5'), ('TR101_4_5', 'TR101_5', 'TR101_4'), ('TR101_5_19', 'TR101_19', 'TR101_5'), ('TR101_5_19', 'TR101_5', 'TR101_19'), ('TR101_6_8', 'TR101_6', 'TR101_8'), ('TR101_6_8', 'TR101_8', 'TR101_6'), ('TR101_7_20', 'TR101_20', 'TR101_7'), ('TR101_7_20', 'TR101_7', 'TR101_20'), ('TR101_7_21', 'TR101_21', 'TR101_7'), ('TR101_7_21', 'TR101_7', 'TR101_21'), ('TR101_7_22', 'TR101_22', 'TR101_7'), ('TR101_7_22', 'TR101_7', 'TR101_22'), ('TR101_7_8', 'TR101_7', 'TR101_8'), ('TR101_7_8', 'TR101_8', 'TR101_7'), ('TR101_8_9', 'TR101_8', 'TR101_9'), ('TR101_8_9', 'TR101_9', 'TR101_8'), ('TR101_9_23', 'TR101_23', 'TR101_9'), ('TR101_9_23', 'TR101_9', 'TR101_23'), ('TR101_9_24', 'TR101_24', 'TR101_9'), ('TR101_9_24', 'TR101_9', 'TR101_24'), ('TR101_9_25', 'TR101_25', 'TR101_9'), ('TR101_9_25', 'TR101_9', 'TR101_25'), ('TR102_2_4', 'TR102_2', 'TR102_4'), ('TR102_2_4', 'TR102_4', 'TR102_2'), ('TR102_2_5', 'TR102_2', 'TR102_5'), ('TR102_2_5', 'TR102_5', 'TR102_2'), ('TR102_4_6', 'TR102_4', 'TR102_6'), ('TR102_4_6', 'TR102_6', 'TR102_4'), ('TR102_4_8', 'TR102_4', 'TR102_8'), ('TR102_4_8', 'TR102_8', 'TR102_4'), ('TR102_4_9', 'TR102_4', 'TR102_9'), ('TR102_4_9', 'TR102_9', 'TR102_4'), ('TR102_5_10', 'TR102_10', 'TR102_5'), ('TR102_5_10', 'TR102_5', 'TR102_10'), ('TR102_5_11', 'TR102_11', 'TR102_5'), ('TR102_5_11', 'TR102_5', 'TR102_11'), ('TR102_5_7', 'TR102_5', 'TR102_7'), ('TR102_5_7', 'TR102_7', 'TR102_5'), ('TR102_6_12', 'TR102_12', 'TR102_6'), ('TR102_6_12', 'TR102_6', 'TR102_12'), ('TR102_7_13', 'TR102_13', 'TR102_7'), ('TR102_7_13', 'TR102_7', 'TR102_13'), ('TR103_10_14', 'TR103_10', 'TR103_14'), ('TR103_10_14', 'TR103_14', 'TR103_10'), ('TR103_11_12', 'TR103_11', 'TR103_12'), ('TR103_11_12', 'TR103_12', 'TR103_11'), ('TR103_11_15', 'TR103_11', 'TR103_15'), ('TR103_11_15', 'TR103_15', 'TR103_11'), ('TR103_12_24', 'TR103_12', 'TR103_24'), ('TR103_12_24', 'TR103_24', 'TR103_12'), ('TR103_13_25', 'TR103_13', 'TR103_25'), ('TR103_13_25', 'TR103_25', 'TR103_13'), ('TR103_14_26', 'TR103_14', 'TR103_26'), ('TR103_14_26', 'TR103_26', 'TR103_14'), ('TR103_14_27', 'TR103_14', 'TR103_27'), ('TR103_14_27', 'TR103_27', 'TR103_14'), ('TR103_14_28', 'TR103_14', 'TR103_28'), ('TR103_14_28', 'TR103_28', 'TR103_14'), ('TR103_15_16', 'TR103_15', 'TR103_16'), ('TR103_15_16', 'TR103_16', 'TR103_15'), ('TR103_16_29', 'TR103_16', 'TR103_29'), ('TR103_16_29', 'TR103_29', 'TR103_16'), ('TR103_16_30', 'TR103_16', 'TR103_30'), ('TR103_16_30', 'TR103_30', 'TR103_16'), ('TR103_16_31', 'TR103_16', 'TR103_31'), ('TR103_16_31', 'TR103_31', 'TR103_16'), ('TR103_1_2', 'TR103_1', 'TR103_2'), ('TR103_1_2', 'TR103_2', 'TR103_1'), ('TR103_2_3', 'TR103_2', 'TR103_3'), ('TR103_2_3', 'TR103_3', 'TR103_2'), ('TR103_2_4', 'TR103_2', 'TR103_4'), ('TR103_2_4', 'TR103_4', 'TR103_2'), ('TR103_2_5', 'TR103_2', 'TR103_5'), ('TR103_2_5', 'TR103_5', 'TR103_2'), ('TR103_3_8', 'TR103_3', 'TR103_8'), ('TR103_3_8', 'TR103_8', 'TR103_3'), ('TR103_4_7', 'TR103_4', 'TR103_7'), ('TR103_4_7', 'TR103_7', 'TR103_4'), ('TR103_5_6', 'TR103_5', 'TR103_6'), ('TR103_5_6', 'TR103_6', 'TR103_5'), ('TR103_6_17', 'TR103_17', 'TR103_6'), ('TR103_6_17', 'TR103_6', 'TR103_17'), ('TR103_6_18', 'TR103_18', 'TR103_6'), ('TR103_6_18', 'TR103_6', 'TR103_18'), ('TR103_6_19', 'TR103_19', 'TR103_6'), ('TR103_6_19', 'TR103_6', 'TR103_19'), ('TR103_7_20', 'TR103_20', 'TR103_7'), ('TR103_7_20', 'TR103_7', 'TR103_20'), ('TR103_7_21', 'TR103_21', 'TR103_7'), ('TR103_7_21', 'TR103_7', 'TR103_21'), ('TR103_7_22', 'TR103_22', 'TR103_7'), ('TR103_7_22', 'TR103_7', 'TR103_22'), ('TR103_8_13', 'TR103_13', 'TR103_8'), ('TR103_8_13', 'TR103_8', 'TR103_13'), ('TR103_9_10', 'TR103_10', 'TR103_9'), ('TR103_9_10', 'TR103_9', 'TR103_10'), ('TR103_9_23', 'TR103_23', 'TR103_9'), ('TR103_9_23', 'TR103_9', 'TR103_23'), ('TR104_10_19', 'TR104_10', 'TR104_19'), ('TR104_10_19', 'TR104_19', 'TR104_10'), ('TR104_11_14', 'TR104_11', 'TR104_14'), ('TR104_11_14', 'TR104_14', 'TR104_11'), ('TR104_11_20', 'TR104_11', 'TR104_20'), ('TR104_11_20', 'TR104_20', 'TR104_11'), ('TR104_14_21', 'TR104_14', 'TR104_21'), ('TR104_14_21', 'TR104_21', 'TR104_14'), ('TR104_1_17', 'TR104_1', 'TR104_17'), ('TR104_1_17', 'TR104_17', 'TR104_1'), ('TR104_1_2', 'TR104_1', 'TR104_2'), ('TR104_1_2', 'TR104_2', 'TR104_1'), ('TR104_1_3', 'TR104_1', 'TR104_3'), ('TR104_1_3', 'TR104_3', 'TR104_1'), ('TR104_2_5', 'TR104_2', 'TR104_5'), ('TR104_2_5', 'TR104_5', 'TR104_2'), ('TR104_3_7', 'TR104_3', 'TR104_7'), ('TR104_3_7', 'TR104_7', 'TR104_3'), ('TR104_4_8', 'TR104_4', 'TR104_8'), ('TR104_4_8', 'TR104_8', 'TR104_4'), ('TR104_6_10', 'TR104_10', 'TR104_6'), ('TR104_6_10', 'TR104_6', 'TR104_10'), ('TR104_6_15', 'TR104_15', 'TR104_6'), ('TR104_6_15', 'TR104_6', 'TR104_15'), ('TR104_7_18', 'TR104_18', 'TR104_7'), ('TR104_7_18', 'TR104_7', 'TR104_18'), ('TR104_8_16', 'TR104_16', 'TR104_8'), ('TR104_8_16', 'TR104_8', 'TR104_16'), ('TR104_9_12', 'TR104_12', 'TR104_9'), ('TR104_9_12', 'TR104_9', 'TR104_12'), ('TR104_9_13', 'TR104_13', 'TR104_9'), ('TR104_9_13', 'TR104_9', 'TR104_13'), ('TR105_10_20', 'TR105_10', 'TR105_20'), ('TR105_10_20', 'TR105_20', 'TR105_10'), ('TR105_10_21', 'TR105_10', 'TR105_21'), ('TR105_10_21', 'TR105_21', 'TR105_10'), ('TR105_1_2', 'TR105_1', 'TR105_2'), ('TR105_1_2', 'TR105_2', 'TR105_1'), ('TR105_1_3', 'TR105_1', 'TR105_3'), ('TR105_1_3', 'TR105_3', 'TR105_1'), ('TR105_2_11', 'TR105_11', 'TR105_2'), ('TR105_2_11', 'TR105_2', 'TR105_11'), ('TR105_2_12', 'TR105_12', 'TR105_2'), ('TR105_2_12', 'TR105_2', 'TR105_12'), ('TR105_2_13', 'TR105_13', 'TR105_2'), ('TR105_2_13', 'TR105_2', 'TR105_13'), ('TR105_3_5', 'TR105_3', 'TR105_5'), ('TR105_3_5', 'TR105_5', 'TR105_3'), ('TR105_4_14', 'TR105_14', 'TR105_4'), ('TR105_4_14', 'TR105_4', 'TR105_14'), ('TR105_4_6', 'TR105_4', 'TR105_6'), ('TR105_4_6', 'TR105_6', 'TR105_4'), ('TR105_5_15', 'TR105_15', 'TR105_5'), ('TR105_5_15', 'TR105_5', 'TR105_15'), ('TR105_6_8', 'TR105_6', 'TR105_8'), ('TR105_6_8', 'TR105_8', 'TR105_6'), ('TR105_7_16', 'TR105_16', 'TR105_7'), ('TR105_7_16', 'TR105_7', 'TR105_16'), ('TR105_7_9', 'TR105_7', 'TR105_9'), ('TR105_7_9', 'TR105_9', 'TR105_7'), ('TR105_8_17', 'TR105_17', 'TR105_8'), ('TR105_8_17', 'TR105_8', 'TR105_17'), ('TR105_8_18', 'TR105_18', 'TR105_8'), ('TR105_8_18', 'TR105_8', 'TR105_18'), ('TR105_8_19', 'TR105_19', 'TR105_8'), ('TR105_8_19', 'TR105_8', 'TR105_19'), ('TR105_9_10', 'TR105_10', 'TR105_9'), ('TR105_9_10', 'TR105_9', 'TR105_10'), ('TR106_1_2', 'TR106_1', 'TR106_2'), ('TR106_1_2', 'TR106_2', 'TR106_1'), ('TR106_2_3', 'TR106_2', 'TR106_3'), ('TR106_2_3', 'TR106_3', 'TR106_2'), ('TR106_2_4', 'TR106_2', 'TR106_4'), ('TR106_2_4', 'TR106_4', 'TR106_2'), ('TR106_2_5', 'TR106_2', 'TR106_5'), ('TR106_2_5', 'TR106_5', 'TR106_2'), ('TR107_10_11', 'TR107_10', 'TR107_11'), ('TR107_10_11', 'TR107_11', 'TR107_10'), ('TR107_11_17', 'TR107_11', 'TR107_17'), ('TR107_11_17', 'TR107_17', 'TR107_11'), ('TR107_11_18', 'TR107_11', 'TR107_18'), ('TR107_11_18', 'TR107_18', 'TR107_11'), ('TR107_11_19', 'TR107_11', 'TR107_19'), ('TR107_11_19', 'TR107_19', 'TR107_11'), ('TR107_1_2', 'TR107_1', 'TR107_2'), ('TR107_1_2', 'TR107_2', 'TR107_1'), ('TR107_1_4', 'TR107_1', 'TR107_4'), ('TR107_1_4', 'TR107_4', 'TR107_1'), ('TR107_4_6', 'TR107_4', 'TR107_6'), ('TR107_4_6', 'TR107_6', 'TR107_4'), ('TR107_5_12', 'TR107_12', 'TR107_5'), ('TR107_5_12', 'TR107_5', 'TR107_12'), ('TR107_5_7', 'TR107_5', 'TR107_7'), ('TR107_5_7', 'TR107_7', 'TR107_5'), ('TR107_6_13', 'TR107_13', 'TR107_6'), ('TR107_6_13', 'TR107_6', 'TR107_13'), ('TR107_7_9', 'TR107_7', 'TR107_9'), ('TR107_7_9', 'TR107_9', 'TR107_7'), ('TR107_8_10', 'TR107_10', 'TR107_8'), ('TR107_8_10', 'TR107_8', 'TR107_10'), ('TR107_8_14', 'TR107_14', 'TR107_8'), ('TR107_8_14', 'TR107_8', 'TR107_14'), ('TR107_9_15', 'TR107_15', 'TR107_9'), ('TR107_9_15', 'TR107_9', 'TR107_15'), ('TR107_9_16', 'TR107_16', 'TR107_9'), ('TR107_9_16', 'TR107_9', 'TR107_16'), ('TR109_10_11', 'TR109_10', 'TR109_11'), ('TR109_10_11', 'TR109_11', 'TR109_10'), ('TR109_11_13', 'TR109_11', 'TR109_13'), ('TR109_11_13', 'TR109_13', 'TR109_11'), ('TR109_13_19', 'TR109_13', 'TR109_19'), ('TR109_13_19', 'TR109_19', 'TR109_13'), ('TR109_1_2', 'TR109_1', 'TR109_2'), ('TR109_1_2', 'TR109_2', 'TR109_1'), ('TR109_1_4', 'TR109_1', 'TR109_4'), ('TR109_1_4', 'TR109_4', 'TR109_1'), ('TR109_4_6', 'TR109_4', 'TR109_6'), ('TR109_4_6', 'TR109_6', 'TR109_4'), ('TR109_5_14', 'TR109_14', 'TR109_5'), ('TR109_5_14', 'TR109_5', 'TR109_14'), ('TR109_5_7', 'TR109_5', 'TR109_7'), ('TR109_5_7', 'TR109_7', 'TR109_5'), ('TR109_6_15', 'TR109_15', 'TR109_6'), ('TR109_6_15', 'TR109_6', 'TR109_15'), ('TR109_7_9', 'TR109_7', 'TR109_9'), ('TR109_7_9', 'TR109_9', 'TR109_7'), ('TR109_8_10', 'TR109_10', 'TR109_8'), ('TR109_8_10', 'TR109_8', 'TR109_10'), ('TR109_8_16', 'TR109_16', 'TR109_8'), ('TR109_8_16', 'TR109_8', 'TR109_16'), ('TR109_9_17', 'TR109_17', 'TR109_9'), ('TR109_9_17', 'TR109_9', 'TR109_17'), ('TR109_9_18', 'TR109_18', 'TR109_9'), ('TR109_9_18', 'TR109_9', 'TR109_18'), ('TR110_1_2', 'TR110_1', 'TR110_2'), ('TR110_1_2', 'TR110_2', 'TR110_1'), ('TR110_1_3', 'TR110_1', 'TR110_3'), ('TR110_1_3', 'TR110_3', 'TR110_1'), ('TR110_1_4', 'TR110_1', 'TR110_4'), ('TR110_1_4', 'TR110_4', 'TR110_1'), ('TR110_1_5', 'TR110_1', 'TR110_5'), ('TR110_1_5', 'TR110_5', 'TR110_1'), ('TR111_10_20', 'TR111_10', 'TR111_20'), ('TR111_10_20', 'TR111_20', 'TR111_10'), ('TR111_11_21', 'TR111_11', 'TR111_21'), ('TR111_11_21', 'TR111_21', 'TR111_11'), ('TR111_11_22', 'TR111_11', 'TR111_22'), ('TR111_11_22', 'TR111_22', 'TR111_11'), ('TR111_12_16', 'TR111_12', 'TR111_16'), ('TR111_12_16', 'TR111_16', 'TR111_12'), ('TR111_12_17', 'TR111_12', 'TR111_17'), ('TR111_12_17', 'TR111_17', 'TR111_12'), ('TR111_13_23', 'TR111_13', 'TR111_23'), ('TR111_13_23', 'TR111_23', 'TR111_13'), ('TR111_14_18', 'TR111_14', 'TR111_18'), ('TR111_14_18', 'TR111_18', 'TR111_14'), ('TR111_14_24', 'TR111_14', 'TR111_24'), ('TR111_14_24', 'TR111_24', 'TR111_14'), ('TR111_16_25', 'TR111_16', 'TR111_25'), ('TR111_16_25', 'TR111_25', 'TR111_16'), ('TR111_17_26', 'TR111_17', 'TR111_26'), ('TR111_17_26', 'TR111_26', 'TR111_17'), ('TR111_17_27', 'TR111_17', 'TR111_27'), ('TR111_17_27', 'TR111_27', 'TR111_17'), ('TR111_17_28', 'TR111_17', 'TR111_28'), ('TR111_17_28', 'TR111_28', 'TR111_17'), ('TR111_18_29', 'TR111_18', 'TR111_29'), ('TR111_18_29', 'TR111_29', 'TR111_18'), ('TR111_2_3', 'TR111_2', 'TR111_3'), ('TR111_2_3', 'TR111_3', 'TR111_2'), ('TR111_2_4', 'TR111_2', 'TR111_4'), ('TR111_2_4', 'TR111_4', 'TR111_2'), ('TR111_3_6', 'TR111_3', 'TR111_6'), ('TR111_3_6', 'TR111_6', 'TR111_3'), ('TR111_4_8', 'TR111_4', 'TR111_8'), ('TR111_4_8', 'TR111_8', 'TR111_4'), ('TR111_5_10', 'TR111_10', 'TR111_5'), ('TR111_5_10', 'TR111_5', 'TR111_10'), ('TR111_5_9', 'TR111_5', 'TR111_9'), ('TR111_5_9', 'TR111_9', 'TR111_5'), ('TR111_6_11', 'TR111_11', 'TR111_6'), ('TR111_6_11', 'TR111_6', 'TR111_11'), ('TR111_7_13', 'TR111_13', 'TR111_7'), ('TR111_7_13', 'TR111_7', 'TR111_13'), ('TR111_7_9', 'TR111_7', 'TR111_9'), ('TR111_7_9', 'TR111_9', 'TR111_7'), ('TR111_8_19', 'TR111_19', 'TR111_8'), ('TR111_8_19', 'TR111_8', 'TR111_19'), ('TR112_11_22', 'TR112_11', 'TR112_22'), ('TR112_11_22', 'TR112_22', 'TR112_11'), ('TR112_11_23', 'TR112_11', 'TR112_23'), ('TR112_11_23', 'TR112_23', 'TR112_11'), ('TR112_12_13', 'TR112_12', 'TR112_13'), ('TR112_12_13', 'TR112_13', 'TR112_12'), ('TR112_13_14', 'TR112_13', 'TR112_14'), ('TR112_13_14', 'TR112_14', 'TR112_13'), ('TR112_13_24', 'TR112_13', 'TR112_24'), ('TR112_13_24', 'TR112_24', 'TR112_13'), ('TR112_13_25', 'TR112_13', 'TR112_25'), ('TR112_13_25', 'TR112_25', 'TR112_13'), ('TR112_14_26', 'TR112_14', 'TR112_26'), ('TR112_14_26', 'TR112_26', 'TR112_14'), ('TR112_14_27', 'TR112_14', 'TR112_27'), ('TR112_14_27', 'TR112_27', 'TR112_14'), ('TR112_14_28', 'TR112_14', 'TR112_28'), ('TR112_14_28', 'TR112_28', 'TR112_14'), ('TR112_1_11', 'TR112_1', 'TR112_11'), ('TR112_1_11', 'TR112_11', 'TR112_1'), ('TR112_1_6', 'TR112_1', 'TR112_6'), ('TR112_1_6', 'TR112_6', 'TR112_1'), ('TR112_2_12', 'TR112_12', 'TR112_2'), ('TR112_2_12', 'TR112_2', 'TR112_12'), ('TR112_2_3', 'TR112_2', 'TR112_3'), ('TR112_2_3', 'TR112_3', 'TR112_2'), ('TR112_3_15', 'TR112_15', 'TR112_3'), ('TR112_3_15', 'TR112_3', 'TR112_15'), ('TR112_4_16', 'TR112_16', 'TR112_4'), ('TR112_4_16', 'TR112_4', 'TR112_16'), ('TR112_4_5', 'TR112_4', 'TR112_5'), ('TR112_4_5', 'TR112_5', 'TR112_4'), ('TR112_5_7', 'TR112_5', 'TR112_7'), ('TR112_5_7', 'TR112_7', 'TR112_5'), ('TR112_6_17', 'TR112_17', 'TR112_6'), ('TR112_6_17', 'TR112_6', 'TR112_17'), ('TR112_7_18', 'TR112_18', 'TR112_7'), ('TR112_7_18', 'TR112_7', 'TR112_18'), ('TR112_7_8', 'TR112_7', 'TR112_8'), ('TR112_7_8', 'TR112_8', 'TR112_7'), ('TR112_8_9', 'TR112_8', 'TR112_9'), ('TR112_8_9', 'TR112_9', 'TR112_8'), ('TR112_9_19', 'TR112_19', 'TR112_9'), ('TR112_9_19', 'TR112_9', 'TR112_19'), ('TR112_9_20', 'TR112_20', 'TR112_9'), ('TR112_9_20', 'TR112_9', 'TR112_20'), ('TR112_9_21', 'TR112_21', 'TR112_9'), ('TR112_9_21', 'TR112_9', 'TR112_21'), ('TR113_17_18', 'TR113_17', 'TR113_18'), ('TR113_17_18', 'TR113_18', 'TR113_17'), ('TR113_17_22', 'TR113_17', 'TR113_22'), ('TR113_17_22', 'TR113_22', 'TR113_17'), ('TR113_18_19', 'TR113_18', 'TR113_19'), ('TR113_18_19', 'TR113_19', 'TR113_18'), ('TR113_19_23', 'TR113_19', 'TR113_23'), ('TR113_19_23', 'TR113_23', 'TR113_19'), ('TR113_1_10', 'TR113_1', 'TR113_10'), ('TR113_1_10', 'TR113_10', 'TR113_1'), ('TR113_1_6', 'TR113_1', 'TR113_6'), ('TR113_1_6', 'TR113_6', 'TR113_1'), ('TR113_2_11', 'TR113_11', 'TR113_2'), ('TR113_2_11', 'TR113_2', 'TR113_11'), ('TR113_2_3', 'TR113_2', 'TR113_3'), ('TR113_2_3', 'TR113_3', 'TR113_2'), ('TR113_3_8', 'TR113_3', 'TR113_8'), ('TR113_3_8', 'TR113_8', 'TR113_3'), ('TR113_4_12', 'TR113_12', 'TR113_4'), ('TR113_4_12', 'TR113_4', 'TR113_12'), ('TR113_4_5', 'TR113_4', 'TR113_5'), ('TR113_4_5', 'TR113_5', 'TR113_4'), ('TR113_5_9', 'TR113_5', 'TR113_9'), ('TR113_5_9', 'TR113_9', 'TR113_5'), ('TR113_6_7', 'TR113_6', 'TR113_7'), ('TR113_6_7', 'TR113_7', 'TR113_6'), ('TR113_7_13', 'TR113_13', 'TR113_7'), ('TR113_7_13', 'TR113_7', 'TR113_13'), ('TR113_7_14', 'TR113_14', 'TR113_7'), ('TR113_7_14', 'TR113_7', 'TR113_14'), ('TR113_8_15', 'TR113_15', 'TR113_8'), ('TR113_8_15', 'TR113_8', 'TR113_15'), ('TR113_8_16', 'TR113_16', 'TR113_8'), ('TR113_8_16', 'TR113_8', 'TR113_16'), ('TR114_10_12', 'TR114_10', 'TR114_12'), ('TR114_10_12', 'TR114_12', 'TR114_10'), ('TR114_10_13', 'TR114_10', 'TR114_13'), ('TR114_10_13', 'TR114_13', 'TR114_10'), ('TR114_12_14', 'TR114_12', 'TR114_14'), ('TR114_12_14', 'TR114_14', 'TR114_12'), ('TR114_14_15', 'TR114_14', 'TR114_15'), ('TR114_14_15', 'TR114_15', 'TR114_14'), ('TR114_15_16', 'TR114_15', 'TR114_16'), ('TR114_15_16', 'TR114_16', 'TR114_15'), ('TR114_15_17', 'TR114_15', 'TR114_17'), ('TR114_15_17', 'TR114_17', 'TR114_15'), ('TR114_15_18', 'TR114_15', 'TR114_18'), ('TR114_15_18', 'TR114_18', 'TR114_15'), ('TR114_1_2', 'TR114_1', 'TR114_2'), ('TR114_1_2', 'TR114_2', 'TR114_1'), ('TR114_1_4', 'TR114_1', 'TR114_4'), ('TR114_1_4', 'TR114_4', 'TR114_1'), ('TR114_4_6', 'TR114_4', 'TR114_6'), ('TR114_4_6', 'TR114_6', 'TR114_4'), ('TR114_5_7', 'TR114_5', 'TR114_7'), ('TR114_5_7', 'TR114_7', 'TR114_5'), ('TR114_5_8', 'TR114_5', 'TR114_8'), ('TR114_5_8', 'TR114_8', 'TR114_5'), ('TR114_6_9', 'TR114_6', 'TR114_9'), ('TR114_6_9', 'TR114_9', 'TR114_6'), ('TR114_8_11', 'TR114_11', 'TR114_8'), ('TR114_8_11', 'TR114_8', 'TR114_11'), ('TR115_10_12', 'TR115_10', 'TR115_12'), ('TR115_10_12', 'TR115_12', 'TR115_10'), ('TR115_11_25', 'TR115_11', 'TR115_25'), ('TR115_11_25', 'TR115_25', 'TR115_11'), ('TR115_11_26', 'TR115_11', 'TR115_26'), ('TR115_11_26', 'TR115_26', 'TR115_11'), ('TR115_1_2', 'TR115_1', 'TR115_2'), ('TR115_1_2', 'TR115_2', 'TR115_1'), ('TR115_1_3', 'TR115_1', 'TR115_3'), ('TR115_1_3', 'TR115_3', 'TR115_1'), ('TR115_1_4', 'TR115_1', 'TR115_4'), ('TR115_1_4', 'TR115_4', 'TR115_1'), ('TR115_2_5', 'TR115_2', 'TR115_5'), ('TR115_2_5', 'TR115_5', 'TR115_2'), ('TR115_3_13', 'TR115_13', 'TR115_3'), ('TR115_3_13', 'TR115_3', 'TR115_13'), ('TR115_3_14', 'TR115_14', 'TR115_3'), ('TR115_3_14', 'TR115_3', 'TR115_14'), ('TR115_3_7', 'TR115_3', 'TR115_7'), ('TR115_3_7', 'TR115_7', 'TR115_3'), ('TR115_4_15', 'TR115_15', 'TR115_4'), ('TR115_4_15', 'TR115_4', 'TR115_15'), ('TR115_4_16', 'TR115_16', 'TR115_4'), ('TR115_4_16', 'TR115_4', 'TR115_16'), ('TR115_4_8', 'TR115_4', 'TR115_8'), ('TR115_4_8', 'TR115_8', 'TR115_4'), ('TR115_5_9', 'TR115_5', 'TR115_9'), ('TR115_5_9', 'TR115_9', 'TR115_5'), ('TR115_7_17', 'TR115_17', 'TR115_7'), ('TR115_7_17', 'TR115_7', 'TR115_17'), ('TR115_7_18', 'TR115_18', 'TR115_7'), ('TR115_7_18', 'TR115_7', 'TR115_18'), ('TR115_7_19', 'TR115_19', 'TR115_7'), ('TR115_7_19', 'TR115_7', 'TR115_19'), ('TR115_8_20', 'TR115_20', 'TR115_8'), ('TR115_8_20', 'TR115_8', 'TR115_20'), ('TR115_8_21', 'TR115_21', 'TR115_8'), ('TR115_8_21', 'TR115_8', 'TR115_21'), ('TR115_8_22', 'TR115_22', 'TR115_8'), ('TR115_8_22', 'TR115_8', 'TR115_22'), ('TR115_9_10', 'TR115_10', 'TR115_9'), ('TR115_9_10', 'TR115_9', 'TR115_10'), ('TR115_9_23', 'TR115_23', 'TR115_9'), ('TR115_9_23', 'TR115_9', 'TR115_23'), ('TR115_9_24', 'TR115_24', 'TR115_9'), ('TR115_9_24', 'TR115_9', 'TR115_24'), ('TR116_19_20', 'TR116_19', 'TR116_20'), ('TR116_19_20', 'TR116_20', 'TR116_19'), ('TR116_1_10', 'TR116_1', 'TR116_10'), ('TR116_1_10', 'TR116_10', 'TR116_1'), ('TR116_1_6', 'TR116_1', 'TR116_6'), ('TR116_1_6', 'TR116_6', 'TR116_1'), ('TR116_2_11', 'TR116_11', 'TR116_2'), ('TR116_2_11', 'TR116_2', 'TR116_11'), ('TR116_2_3', 'TR116_2', 'TR116_3'), ('TR116_2_3', 'TR116_3', 'TR116_2'), ('TR116_3_8', 'TR116_3', 'TR116_8'), ('TR116_3_8', 'TR116_8', 'TR116_3'), ('TR116_4_12', 'TR116_12', 'TR116_4'), ('TR116_4_12', 'TR116_4', 'TR116_12'), ('TR116_4_5', 'TR116_4', 'TR116_5'), ('TR116_4_5', 'TR116_5', 'TR116_4'), ('TR116_5_13', 'TR116_13', 'TR116_5'), ('TR116_5_13', 'TR116_5', 'TR116_13'), ('TR116_6_7', 'TR116_6', 'TR116_7'), ('TR116_6_7', 'TR116_7', 'TR116_6'), ('TR116_7_14', 'TR116_14', 'TR116_7'), ('TR116_7_14', 'TR116_7', 'TR116_14'), ('TR116_7_15', 'TR116_15', 'TR116_7'), ('TR116_7_15', 'TR116_7', 'TR116_15'), ('TR116_8_9', 'TR116_8', 'TR116_9'), ('TR116_8_9', 'TR116_9', 'TR116_8'), ('TR116_9_16', 'TR116_16', 'TR116_9'), ('TR116_9_16', 'TR116_9', 'TR116_16'), ('TR116_9_17', 'TR116_17', 'TR116_9'), ('TR116_9_17', 'TR116_9', 'TR116_17'), ('TR116_9_18', 'TR116_18', 'TR116_9'), ('TR116_9_18', 'TR116_9', 'TR116_18'), ('TR117_10_12', 'TR117_10', 'TR117_12'), ('TR117_10_12', 'TR117_12', 'TR117_10'), ('TR117_10_16', 'TR117_10', 'TR117_16'), ('TR117_10_16', 'TR117_16', 'TR117_10'), ('TR117_12_17', 'TR117_12', 'TR117_17'), ('TR117_12_17', 'TR117_17', 'TR117_12'), ('TR117_1_2', 'TR117_1', 'TR117_2'), ('TR117_1_2', 'TR117_2', 'TR117_1'), ('TR117_1_4', 'TR117_1', 'TR117_4'), ('TR117_1_4', 'TR117_4', 'TR117_1'), ('TR117_4_6', 'TR117_4', 'TR117_6'), ('TR117_4_6', 'TR117_6', 'TR117_4'), ('TR117_5_13', 'TR117_13', 'TR117_5'), ('TR117_5_13', 'TR117_5', 'TR117_13'), ('TR117_5_7', 'TR117_5', 'TR117_7'), ('TR117_5_7', 'TR117_7', 'TR117_5'), ('TR117_6_14', 'TR117_14', 'TR117_6'), ('TR117_6_14', 'TR117_6', 'TR117_14'), ('TR117_7_10', 'TR117_10', 'TR117_7'), ('TR117_7_10', 'TR117_7', 'TR117_10'), ('TR117_8_15', 'TR117_15', 'TR117_8'), ('TR117_8_15', 'TR117_8', 'TR117_15'), ('TR117_8_9', 'TR117_8', 'TR117_9'), ('TR117_8_9', 'TR117_9', 'TR117_8'), ('TR117_9_11', 'TR117_11', 'TR117_9'), ('TR117_9_11', 'TR117_9', 'TR117_11'), ('TR118_10_13', 'TR118_10', 'TR118_13'), ('TR118_10_13', 'TR118_13', 'TR118_10'), ('TR118_11_14', 'TR118_11', 'TR118_14'), ('TR118_11_14', 'TR118_14', 'TR118_11'), ('TR118_12_15', 'TR118_12', 'TR118_15'), ('TR118_12_15', 'TR118_15', 'TR118_12'), ('TR118_12_19', 'TR118_12', 'TR118_19'), ('TR118_12_19', 'TR118_19', 'TR118_12'), ('TR118_13_14', 'TR118_13', 'TR118_14'), ('TR118_13_14', 'TR118_14', 'TR118_13'), ('TR118_13_20', 'TR118_13', 'TR118_20'), ('TR118_13_20', 'TR118_20', 'TR118_13'), ('TR118_13_21', 'TR118_13', 'TR118_21'), ('TR118_13_21', 'TR118_21', 'TR118_13'), ('TR118_14_22', 'TR118_14', 'TR118_22'), ('TR118_14_22', 'TR118_22', 'TR118_14'), ('TR118_14_23', 'TR118_14', 'TR118_23'), ('TR118_14_23', 'TR118_23', 'TR118_14'), ('TR118_15_24', 'TR118_15', 'TR118_24'), ('TR118_15_24', 'TR118_24', 'TR118_15'), ('TR118_1_2', 'TR118_1', 'TR118_2'), ('TR118_1_2', 'TR118_2', 'TR118_1'), ('TR118_1_4', 'TR118_1', 'TR118_4'), ('TR118_1_4', 'TR118_4', 'TR118_1'), ('TR118_4_6', 'TR118_4', 'TR118_6'), ('TR118_4_6', 'TR118_6', 'TR118_4'), ('TR118_5_7', 'TR118_5', 'TR118_7'), ('TR118_5_7', 'TR118_7', 'TR118_5'), ('TR118_5_8', 'TR118_5', 'TR118_8'), ('TR118_5_8', 'TR118_8', 'TR118_5'), ('TR118_6_16', 'TR118_16', 'TR118_6'), ('TR118_6_16', 'TR118_6', 'TR118_16'), ('TR118_7_11', 'TR118_11', 'TR118_7'), ('TR118_7_11', 'TR118_7', 'TR118_11'), ('TR118_8_17', 'TR118_17', 'TR118_8'), ('TR118_8_17', 'TR118_8', 'TR118_17'), ('TR118_9_10', 'TR118_10', 'TR118_9'), ('TR118_9_10', 'TR118_9', 'TR118_10'), ('TR118_9_18', 'TR118_18', 'TR118_9'), ('TR118_9_18', 'TR118_9', 'TR118_18'), ('TR120_10_12', 'TR120_10', 'TR120_12'), ('TR120_10_12', 'TR120_12', 'TR120_10'), ('TR120_10_34', 'TR120_10', 'TR120_34'), ('TR120_10_34', 'TR120_34', 'TR120_10'), ('TR120_11_15', 'TR120_11', 'TR120_15'), ('TR120_11_15', 'TR120_15', 'TR120_11'), ('TR120_12_16', 'TR120_12', 'TR120_16'), ('TR120_12_16', 'TR120_16', 'TR120_12'), ('TR120_13_17', 'TR120_13', 'TR120_17'), ('TR120_13_17', 'TR120_17', 'TR120_13'), ('TR120_14_18', 'TR120_14', 'TR120_18'), ('TR120_14_18', 'TR120_18', 'TR120_14'), ('TR120_14_35', 'TR120_14', 'TR120_35'), ('TR120_14_35', 'TR120_35', 'TR120_14'), ('TR120_14_36', 'TR120_14', 'TR120_36'), ('TR120_14_36', 'TR120_36', 'TR120_14'), ('TR120_15_19', 'TR120_15', 'TR120_19'), ('TR120_15_19', 'TR120_19', 'TR120_15'), ('TR120_15_37', 'TR120_15', 'TR120_37'), ('TR120_15_37', 'TR120_37', 'TR120_15'), ('TR120_15_38', 'TR120_15', 'TR120_38'), ('TR120_15_38', 'TR120_38', 'TR120_15'), ('TR120_16_17', 'TR120_16', 'TR120_17'), ('TR120_16_17', 'TR120_17', 'TR120_16'), ('TR120_17_39', 'TR120_17', 'TR120_39'), ('TR120_17_39', 'TR120_39', 'TR120_17'), ('TR120_17_40', 'TR120_17', 'TR120_40'), ('TR120_17_40', 'TR120_40', 'TR120_17'), ('TR120_18_41', 'TR120_18', 'TR120_41'), ('TR120_18_41', 'TR120_41', 'TR120_18'), ('TR120_18_42', 'TR120_18', 'TR120_42'), ('TR120_18_42', 'TR120_42', 'TR120_18'), ('TR120_18_43', 'TR120_18', 'TR120_43'), ('TR120_18_43', 'TR120_43', 'TR120_18'), ('TR120_19_20', 'TR120_19', 'TR120_20'), ('TR120_19_20', 'TR120_20', 'TR120_19'), ('TR120_19_44', 'TR120_19', 'TR120_44'), ('TR120_19_44', 'TR120_44', 'TR120_19'), ('TR120_19_45', 'TR120_19', 'TR120_45'), ('TR120_19_45', 'TR120_45', 'TR120_19'), ('TR120_1_2', 'TR120_1', 'TR120_2'), ('TR120_1_2', 'TR120_2', 'TR120_1'), ('TR120_1_25', 'TR120_1', 'TR120_25'), ('TR120_1_25', 'TR120_25', 'TR120_1'), ('TR120_1_26', 'TR120_1', 'TR120_26'), ('TR120_1_26', 'TR120_26', 'TR120_1'), ('TR120_1_3', 'TR120_1', 'TR120_3'), ('TR120_1_3', 'TR120_3', 'TR120_1'), ('TR120_20_21', 'TR120_20', 'TR120_21'), ('TR120_20_21', 'TR120_21', 'TR120_20'), ('TR120_21_22', 'TR120_21', 'TR120_22'), ('TR120_21_22', 'TR120_22', 'TR120_21'), ('TR120_21_46', 'TR120_21', 'TR120_46'), ('TR120_21_46', 'TR120_46', 'TR120_21'), ('TR120_21_47', 'TR120_21', 'TR120_47'), ('TR120_21_47', 'TR120_47', 'TR120_21'), ('TR120_22_23', 'TR120_22', 'TR120_23'), ('TR120_22_23', 'TR120_23', 'TR120_22'), ('TR120_22_48', 'TR120_22', 'TR120_48'), ('TR120_22_48', 'TR120_48', 'TR120_22'), ('TR120_22_49', 'TR120_22', 'TR120_49'), ('TR120_22_49', 'TR120_49', 'TR120_22'), ('TR120_23_24', 'TR120_23', 'TR120_24'), ('TR120_23_24', 'TR120_24', 'TR120_23'), ('TR120_23_50', 'TR120_23', 'TR120_50'), ('TR120_23_50', 'TR120_50', 'TR120_23'), ('TR120_23_51', 'TR120_23', 'TR120_51'), ('TR120_23_51', 'TR120_51', 'TR120_23'), ('TR120_24_52', 'TR120_24', 'TR120_52'), ('TR120_24_52', 'TR120_52', 'TR120_24'), ('TR120_24_53', 'TR120_24', 'TR120_53'), ('TR120_24_53', 'TR120_53', 'TR120_24'), ('TR120_24_54', 'TR120_24', 'TR120_54'), ('TR120_24_54', 'TR120_54', 'TR120_24'), ('TR120_2_4', 'TR120_2', 'TR120_4'), ('TR120_2_4', 'TR120_4', 'TR120_2'), ('TR120_3_6', 'TR120_3', 'TR120_6'), ('TR120_3_6', 'TR120_6', 'TR120_3'), ('TR120_4_27', 'TR120_27', 'TR120_4'), ('TR120_4_27', 'TR120_4', 'TR120_27'), ('TR120_4_28', 'TR120_28', 'TR120_4'), ('TR120_4_28', 'TR120_4', 'TR120_28'), ('TR120_4_7', 'TR120_4', 'TR120_7'), ('TR120_4_7', 'TR120_7', 'TR120_4'), ('TR120_5_29', 'TR120_29', 'TR120_5'), ('TR120_5_29', 'TR120_5', 'TR120_29'), ('TR120_5_8', 'TR120_5', 'TR120_8'), ('TR120_5_8', 'TR120_8', 'TR120_5'), ('TR120_6_9', 'TR120_6', 'TR120_9'), ('TR120_6_9', 'TR120_9', 'TR120_6'), ('TR120_7_11', 'TR120_11', 'TR120_7'), ('TR120_7_11', 'TR120_7', 'TR120_11'), ('TR120_7_30', 'TR120_30', 'TR120_7'), ('TR120_7_30', 'TR120_7', 'TR120_30'), ('TR120_7_31', 'TR120_31', 'TR120_7'), ('TR120_7_31', 'TR120_7', 'TR120_31'), ('TR120_8_13', 'TR120_13', 'TR120_8'), ('TR120_8_13', 'TR120_8', 'TR120_13'), ('TR120_9_14', 'TR120_14', 'TR120_9'), ('TR120_9_14', 'TR120_9', 'TR120_14'), ('TR120_9_32', 'TR120_32', 'TR120_9'), ('TR120_9_32', 'TR120_9', 'TR120_32'), ('TR120_9_33', 'TR120_33', 'TR120_9'), ('TR120_9_33', 'TR120_9', 'TR120_33'), ('TR121_10_12', 'TR121_10', 'TR121_12'), ('TR121_10_12', 'TR121_12', 'TR121_10'), ('TR121_12_14', 'TR121_12', 'TR121_14'), ('TR121_12_14', 'TR121_14', 'TR121_12'), ('TR121_13_19', 'TR121_13', 'TR121_19'), ('TR121_13_19', 'TR121_19', 'TR121_13'), ('TR121_13_20', 'TR121_13', 'TR121_20'), ('TR121_13_20', 'TR121_20', 'TR121_13'), ('TR121_13_21', 'TR121_13', 'TR121_21'), ('TR121_13_21', 'TR121_21', 'TR121_13'), ('TR121_14_22', 'TR121_14', 'TR121_22'), ('TR121_14_22', 'TR121_22', 'TR121_14'), ('TR121_14_23', 'TR121_14', 'TR121_23'), ('TR121_14_23', 'TR121_23', 'TR121_14'), ('TR121_14_24', 'TR121_14', 'TR121_24'), ('TR121_14_24', 'TR121_24', 'TR121_14'), ('TR121_1_15', 'TR121_1', 'TR121_15'), ('TR121_1_15', 'TR121_15', 'TR121_1'), ('TR121_1_6', 'TR121_1', 'TR121_6'), ('TR121_1_6', 'TR121_6', 'TR121_1'), ('TR121_2_16', 'TR121_16', 'TR121_2'), ('TR121_2_16', 'TR121_2', 'TR121_16'), ('TR121_2_3', 'TR121_2', 'TR121_3'), ('TR121_2_3', 'TR121_3', 'TR121_2'), ('TR121_3_10', 'TR121_10', 'TR121_3'), ('TR121_3_10', 'TR121_3', 'TR121_10'), ('TR121_4_17', 'TR121_17', 'TR121_4'), ('TR121_4_17', 'TR121_4', 'TR121_17'), ('TR121_4_5', 'TR121_4', 'TR121_5'), ('TR121_4_5', 'TR121_5', 'TR121_4'), ('TR121_5_18', 'TR121_18', 'TR121_5'), ('TR121_5_18', 'TR121_5', 'TR121_18'), ('TR121_6_7', 'TR121_6', 'TR121_7'), ('TR121_6_7', 'TR121_7', 'TR121_6'), ('TR121_7_8', 'TR121_7', 'TR121_8'), ('TR121_7_8', 'TR121_8', 'TR121_7'), ('TR121_8_13', 'TR121_13', 'TR121_8'), ('TR121_8_13', 'TR121_8', 'TR121_13'), ('TR122_10_18', 'TR122_10', 'TR122_18'), ('TR122_10_18', 'TR122_18', 'TR122_10'), ('TR122_11_19', 'TR122_11', 'TR122_19'), ('TR122_11_19', 'TR122_19', 'TR122_11'), ('TR122_12_13', 'TR122_12', 'TR122_13'), ('TR122_12_13', 'TR122_13', 'TR122_12'), ('TR122_12_20', 'TR122_12', 'TR122_20'), ('TR122_12_20', 'TR122_20', 'TR122_12'), ('TR122_13_21', 'TR122_13', 'TR122_21'), ('TR122_13_21', 'TR122_21', 'TR122_13'), ('TR122_14_22', 'TR122_14', 'TR122_22'), ('TR122_14_22', 'TR122_22', 'TR122_14'), ('TR122_1_11', 'TR122_1', 'TR122_11'), ('TR122_1_11', 'TR122_11', 'TR122_1'), ('TR122_1_6', 'TR122_1', 'TR122_6'), ('TR122_1_6', 'TR122_6', 'TR122_1'), ('TR122_2_14', 'TR122_14', 'TR122_2'), ('TR122_2_14', 'TR122_2', 'TR122_14'), ('TR122_2_3', 'TR122_2', 'TR122_3'), ('TR122_2_3', 'TR122_3', 'TR122_2'), ('TR122_3_4', 'TR122_3', 'TR122_4'), ('TR122_3_4', 'TR122_4', 'TR122_3'), ('TR122_4_7', 'TR122_4', 'TR122_7'), ('TR122_4_7', 'TR122_7', 'TR122_4'), ('TR122_5_10', 'TR122_10', 'TR122_5'), ('TR122_5_10', 'TR122_5', 'TR122_10'), ('TR122_5_6', 'TR122_5', 'TR122_6'), ('TR122_5_6', 'TR122_6', 'TR122_5'), ('TR122_7_15', 'TR122_15', 'TR122_7'), ('TR122_7_15', 'TR122_7', 'TR122_15'), ('TR122_8_16', 'TR122_16', 'TR122_8'), ('TR122_8_16', 'TR122_8', 'TR122_16'), ('TR122_8_9', 'TR122_8', 'TR122_9'), ('TR122_8_9', 'TR122_9', 'TR122_8'), ('TR122_9_17', 'TR122_17', 'TR122_9'), ('TR122_9_17', 'TR122_9', 'TR122_17'), ('TR123_10_19', 'TR123_10', 'TR123_19'), ('TR123_10_19', 'TR123_19', 'TR123_10'), ('TR123_11_20', 'TR123_11', 'TR123_20'), ('TR123_11_20', 'TR123_20', 'TR123_11'), ('TR123_12_13', 'TR123_12', 'TR123_13'), ('TR123_12_13', 'TR123_13', 'TR123_12'), ('TR123_12_15', 'TR123_12', 'TR123_15'), ('TR123_12_15', 'TR123_15', 'TR123_12'), ('TR123_13_21', 'TR123_13', 'TR123_21'), ('TR123_13_21', 'TR123_21', 'TR123_13'), ('TR123_14_22', 'TR123_14', 'TR123_22'), ('TR123_14_22', 'TR123_22', 'TR123_14'), ('TR123_1_11', 'TR123_1', 'TR123_11'), ('TR123_1_11', 'TR123_11', 'TR123_1'), ('TR123_1_6', 'TR123_1', 'TR123_6'), ('TR123_1_6', 'TR123_6', 'TR123_1'), ('TR123_2_14', 'TR123_14', 'TR123_2'), ('TR123_2_14', 'TR123_2', 'TR123_14'), ('TR123_2_3', 'TR123_2', 'TR123_3'), ('TR123_2_3', 'TR123_3', 'TR123_2'), ('TR123_3_4', 'TR123_3', 'TR123_4'), ('TR123_3_4', 'TR123_4', 'TR123_3'), ('TR123_4_7', 'TR123_4', 'TR123_7'), ('TR123_4_7', 'TR123_7', 'TR123_4'), ('TR123_5_10', 'TR123_10', 'TR123_5'), ('TR123_5_10', 'TR123_5', 'TR123_10'), ('TR123_5_6', 'TR123_5', 'TR123_6'), ('TR123_5_6', 'TR123_6', 'TR123_5'), ('TR123_7_17', 'TR123_17', 'TR123_7'), ('TR123_7_17', 'TR123_7', 'TR123_17'), ('TR123_8_16', 'TR123_16', 'TR123_8'), ('TR123_8_16', 'TR123_8', 'TR123_16'), ('TR123_8_9', 'TR123_8', 'TR123_9'), ('TR123_8_9', 'TR123_9', 'TR123_8'), ('TR123_9_18', 'TR123_18', 'TR123_9'), ('TR123_9_18', 'TR123_9', 'TR123_18'), ('TR124_10_14', 'TR124_10', 'TR124_14'), ('TR124_10_14', 'TR124_14', 'TR124_10'), ('TR124_11_13', 'TR124_11', 'TR124_13'), ('TR124_11_13', 'TR124_13', 'TR124_11'), ('TR124_11_33', 'TR124_11', 'TR124_33'), ('TR124_11_33', 'TR124_33', 'TR124_11'), ('TR124_12_15', 'TR124_12', 'TR124_15'), ('TR124_12_15', 'TR124_15', 'TR124_12'), ('TR124_12_34', 'TR124_12', 'TR124_34'), ('TR124_12_34', 'TR124_34', 'TR124_12'), ('TR124_12_35', 'TR124_12', 'TR124_35'), ('TR124_12_35', 'TR124_35', 'TR124_12'), ('TR124_13_16', 'TR124_13', 'TR124_16'), ('TR124_13_16', 'TR124_16', 'TR124_13'), ('TR124_14_17', 'TR124_14', 'TR124_17'), ('TR124_14_17', 'TR124_17', 'TR124_14'), ('TR124_15_18', 'TR124_15', 'TR124_18'), ('TR124_15_18', 'TR124_18', 'TR124_15'), ('TR124_15_36', 'TR124_15', 'TR124_36'), ('TR124_15_36', 'TR124_36', 'TR124_15'), ('TR124_15_37', 'TR124_15', 'TR124_37'), ('TR124_15_37', 'TR124_37', 'TR124_15'), ('TR124_16_17', 'TR124_16', 'TR124_17'), ('TR124_16_17', 'TR124_17', 'TR124_16'), ('TR124_17_38', 'TR124_17', 'TR124_38'), ('TR124_17_38', 'TR124_38', 'TR124_17'), ('TR124_17_39', 'TR124_17', 'TR124_39'), ('TR124_17_39', 'TR124_39', 'TR124_17'), ('TR124_18_19', 'TR124_18', 'TR124_19'), ('TR124_18_19', 'TR124_19', 'TR124_18'), ('TR124_18_40', 'TR124_18', 'TR124_40'), ('TR124_18_40', 'TR124_40', 'TR124_18'), ('TR124_18_41', 'TR124_18', 'TR124_41'), ('TR124_18_41', 'TR124_41', 'TR124_18'), ('TR124_19_20', 'TR124_19', 'TR124_20'), ('TR124_19_20', 'TR124_20', 'TR124_19'), ('TR124_19_42', 'TR124_19', 'TR124_42'), ('TR124_19_42', 'TR124_42', 'TR124_19'), ('TR124_19_43', 'TR124_19', 'TR124_43'), ('TR124_19_43', 'TR124_43', 'TR124_19'), ('TR124_1_2', 'TR124_1', 'TR124_2'), ('TR124_1_2', 'TR124_2', 'TR124_1'), ('TR124_1_23', 'TR124_1', 'TR124_23'), ('TR124_1_23', 'TR124_23', 'TR124_1'), ('TR124_1_24', 'TR124_1', 'TR124_24'), ('TR124_1_24', 'TR124_24', 'TR124_1'), ('TR124_1_3', 'TR124_1', 'TR124_3'), ('TR124_1_3', 'TR124_3', 'TR124_1'), ('TR124_20_21', 'TR124_20', 'TR124_21'), ('TR124_20_21', 'TR124_21', 'TR124_20'), ('TR124_20_44', 'TR124_20', 'TR124_44'), ('TR124_20_44', 'TR124_44', 'TR124_20'), ('TR124_20_45', 'TR124_20', 'TR124_45'), ('TR124_20_45', 'TR124_45', 'TR124_20'), ('TR124_21_22', 'TR124_21', 'TR124_22'), ('TR124_21_22', 'TR124_22', 'TR124_21'), ('TR124_21_46', 'TR124_21', 'TR124_46'), ('TR124_21_46', 'TR124_46', 'TR124_21'), ('TR124_21_47', 'TR124_21', 'TR124_47'), ('TR124_21_47', 'TR124_47', 'TR124_21'), ('TR124_22_48', 'TR124_22', 'TR124_48'), ('TR124_22_48', 'TR124_48', 'TR124_22'), ('TR124_22_49', 'TR124_22', 'TR124_49'), ('TR124_22_49', 'TR124_49', 'TR124_22'), ('TR124_22_50', 'TR124_22', 'TR124_50'), ('TR124_22_50', 'TR124_50', 'TR124_22'), ('TR124_2_25', 'TR124_2', 'TR124_25'), ('TR124_2_25', 'TR124_25', 'TR124_2'), ('TR124_2_4', 'TR124_2', 'TR124_4'), ('TR124_2_4', 'TR124_4', 'TR124_2'), ('TR124_2_5', 'TR124_2', 'TR124_5'), ('TR124_2_5', 'TR124_5', 'TR124_2'), ('TR124_3_7', 'TR124_3', 'TR124_7'), ('TR124_3_7', 'TR124_7', 'TR124_3'), ('TR124_4_8', 'TR124_4', 'TR124_8'), ('TR124_4_8', 'TR124_8', 'TR124_4'), ('TR124_5_26', 'TR124_26', 'TR124_5'), ('TR124_5_26', 'TR124_5', 'TR124_26'), ('TR124_5_27', 'TR124_27', 'TR124_5'), ('TR124_5_27', 'TR124_5', 'TR124_27'), ('TR124_5_28', 'TR124_28', 'TR124_5'), ('TR124_5_28', 'TR124_5', 'TR124_28'), ('TR124_6_10', 'TR124_10', 'TR124_6'), ('TR124_6_10', 'TR124_6', 'TR124_10'), ('TR124_6_29', 'TR124_29', 'TR124_6'), ('TR124_6_29', 'TR124_6', 'TR124_29'), ('TR124_7_30', 'TR124_30', 'TR124_7'), ('TR124_7_30', 'TR124_7', 'TR124_30'), ('TR124_8_12', 'TR124_12', 'TR124_8'), ('TR124_8_12', 'TR124_8', 'TR124_12'), ('TR124_8_31', 'TR124_31', 'TR124_8'), ('TR124_8_31', 'TR124_8', 'TR124_31'), ('TR124_8_32', 'TR124_32', 'TR124_8'), ('TR124_8_32', 'TR124_8', 'TR124_32'), ('TR125_10_12', 'TR125_10', 'TR125_12'), ('TR125_10_12', 'TR125_12', 'TR125_10'), ('TR125_10_19', 'TR125_10', 'TR125_19'), ('TR125_10_19', 'TR125_19', 'TR125_10'), ('TR125_10_20', 'TR125_10', 'TR125_20'), ('TR125_10_20', 'TR125_20', 'TR125_10'), ('TR125_13_15', 'TR125_13', 'TR125_15'), ('TR125_13_15', 'TR125_15', 'TR125_13'), ('TR125_14_16', 'TR125_14', 'TR125_16'), ('TR125_14_16', 'TR125_16', 'TR125_14'), ('TR125_15_17', 'TR125_15', 'TR125_17'), ('TR125_15_17', 'TR125_17', 'TR125_15'), ('TR125_15_31', 'TR125_15', 'TR125_31'), ('TR125_15_31', 'TR125_31', 'TR125_15'), ('TR125_15_32', 'TR125_15', 'TR125_32'), ('TR125_15_32', 'TR125_32', 'TR125_15'), ('TR125_16_18', 'TR125_16', 'TR125_18'), ('TR125_16_18', 'TR125_18', 'TR125_16'), ('TR125_16_33', 'TR125_16', 'TR125_33'), ('TR125_16_33', 'TR125_33', 'TR125_16'), ('TR125_16_34', 'TR125_16', 'TR125_34'), ('TR125_16_34', 'TR125_34', 'TR125_16'), ('TR125_17_35', 'TR125_17', 'TR125_35'), ('TR125_17_35', 'TR125_35', 'TR125_17'), ('TR125_17_36', 'TR125_17', 'TR125_36'), ('TR125_17_36', 'TR125_36', 'TR125_17'), ('TR125_17_37', 'TR125_17', 'TR125_37'), ('TR125_17_37', 'TR125_37', 'TR125_17'), ('TR125_18_38', 'TR125_18', 'TR125_38'), ('TR125_18_38', 'TR125_38', 'TR125_18'), ('TR125_18_39', 'TR125_18', 'TR125_39'), ('TR125_18_39', 'TR125_39', 'TR125_18'), ('TR125_18_40', 'TR125_18', 'TR125_40'), ('TR125_18_40', 'TR125_40', 'TR125_18'), ('TR125_19_21', 'TR125_19', 'TR125_21'), ('TR125_19_21', 'TR125_21', 'TR125_19'), ('TR125_1_2', 'TR125_1', 'TR125_2'), ('TR125_1_2', 'TR125_2', 'TR125_1'), ('TR125_1_25', 'TR125_1', 'TR125_25'), ('TR125_1_25', 'TR125_25', 'TR125_1'), ('TR125_1_26', 'TR125_1', 'TR125_26'), ('TR125_1_26', 'TR125_26', 'TR125_1'), ('TR125_1_6', 'TR125_1', 'TR125_6'), ('TR125_1_6', 'TR125_6', 'TR125_1'), ('TR125_20_22', 'TR125_20', 'TR125_22'), ('TR125_20_22', 'TR125_22', 'TR125_20'), ('TR125_21_23', 'TR125_21', 'TR125_23'), ('TR125_21_23', 'TR125_23', 'TR125_21'), ('TR125_21_41', 'TR125_21', 'TR125_41'), ('TR125_21_41', 'TR125_41', 'TR125_21'), ('TR125_21_42', 'TR125_21', 'TR125_42'), ('TR125_21_42', 'TR125_42', 'TR125_21'), ('TR125_22_24', 'TR125_22', 'TR125_24'), ('TR125_22_24', 'TR125_24', 'TR125_22'), ('TR125_22_43', 'TR125_22', 'TR125_43'), ('TR125_22_43', 'TR125_43', 'TR125_22'), ('TR125_22_44', 'TR125_22', 'TR125_44'), ('TR125_22_44', 'TR125_44', 'TR125_22'), ('TR125_23_45', 'TR125_23', 'TR125_45'), ('TR125_23_45', 'TR125_45', 'TR125_23'), ('TR125_23_46', 'TR125_23', 'TR125_46'), ('TR125_23_46', 'TR125_46', 'TR125_23'), ('TR125_23_47', 'TR125_23', 'TR125_47'), ('TR125_23_47', 'TR125_47', 'TR125_23'), ('TR125_24_48', 'TR125_24', 'TR125_48'), ('TR125_24_48', 'TR125_48', 'TR125_24'), ('TR125_24_49', 'TR125_24', 'TR125_49'), ('TR125_24_49', 'TR125_49', 'TR125_24'), ('TR125_24_50', 'TR125_24', 'TR125_50'), ('TR125_24_50', 'TR125_50', 'TR125_24'), ('TR125_2_27', 'TR125_2', 'TR125_27'), ('TR125_2_27', 'TR125_27', 'TR125_2'), ('TR125_2_28', 'TR125_2', 'TR125_28'), ('TR125_2_28', 'TR125_28', 'TR125_2'), ('TR125_2_3', 'TR125_2', 'TR125_3'), ('TR125_2_3', 'TR125_3', 'TR125_2'), ('TR125_3_4', 'TR125_3', 'TR125_4'), ('TR125_3_4', 'TR125_4', 'TR125_3'), ('TR125_4_29', 'TR125_29', 'TR125_4'), ('TR125_4_29', 'TR125_4', 'TR125_29'), ('TR125_4_5', 'TR125_4', 'TR125_5'), ('TR125_4_5', 'TR125_5', 'TR125_4'), ('TR125_4_8', 'TR125_4', 'TR125_8'), ('TR125_4_8', 'TR125_8', 'TR125_4'), ('TR125_5_30', 'TR125_30', 'TR125_5'), ('TR125_5_30', 'TR125_5', 'TR125_30'), ('TR125_5_6', 'TR125_5', 'TR125_6'), ('TR125_5_6', 'TR125_6', 'TR125_5'), ('TR125_5_7', 'TR125_5', 'TR125_7'), ('TR125_5_7', 'TR125_7', 'TR125_5'), ('TR125_7_9', 'TR125_7', 'TR125_9'), ('TR125_7_9', 'TR125_9', 'TR125_7'), ('TR125_8_10', 'TR125_10', 'TR125_8'), ('TR125_8_10', 'TR125_8', 'TR125_10'), ('TR125_9_11', 'TR125_11', 'TR125_9'), ('TR125_9_11', 'TR125_9', 'TR125_11'), ('TR125_9_13', 'TR125_13', 'TR125_9'), ('TR125_9_13', 'TR125_9', 'TR125_13'), ('TR125_9_14', 'TR125_14', 'TR125_9'), ('TR125_9_14', 'TR125_9', 'TR125_14'), ('TR126_1_10', 'TR126_1', 'TR126_10'), ('TR126_1_10', 'TR126_10', 'TR126_1'), ('TR126_1_6', 'TR126_1', 'TR126_6'), ('TR126_1_6', 'TR126_6', 'TR126_1'), ('TR126_20_21', 'TR126_20', 'TR126_21'), ('TR126_20_21', 'TR126_21', 'TR126_20'), ('TR126_20_22', 'TR126_20', 'TR126_22'), ('TR126_20_22', 'TR126_22', 'TR126_20'), ('TR126_21_25', 'TR126_21', 'TR126_25'), ('TR126_21_25', 'TR126_25', 'TR126_21'), ('TR126_22_26', 'TR126_22', 'TR126_26'), ('TR126_22_26', 'TR126_26', 'TR126_22'), ('TR126_2_11', 'TR126_11', 'TR126_2'), ('TR126_2_11', 'TR126_2', 'TR126_11'), ('TR126_2_3', 'TR126_2', 'TR126_3'), ('TR126_2_3', 'TR126_3', 'TR126_2'), ('TR126_3_9', 'TR126_3', 'TR126_9'), ('TR126_3_9', 'TR126_9', 'TR126_3'), ('TR126_4_12', 'TR126_12', 'TR126_4'), ('TR126_4_12', 'TR126_4', 'TR126_12'), ('TR126_4_5', 'TR126_4', 'TR126_5'), ('TR126_4_5', 'TR126_5', 'TR126_4'), ('TR126_5_8', 'TR126_5', 'TR126_8'), ('TR126_5_8', 'TR126_8', 'TR126_5'), ('TR126_6_7', 'TR126_6', 'TR126_7'), ('TR126_6_7', 'TR126_7', 'TR126_6'), ('TR126_7_13', 'TR126_13', 'TR126_7'), ('TR126_7_13', 'TR126_7', 'TR126_13'), ('TR126_7_14', 'TR126_14', 'TR126_7'), ('TR126_7_14', 'TR126_7', 'TR126_14'), ('TR126_8_15', 'TR126_15', 'TR126_8'), ('TR126_8_15', 'TR126_8', 'TR126_15'), ('TR126_8_16', 'TR126_16', 'TR126_8'), ('TR126_8_16', 'TR126_8', 'TR126_16'), ('TR126_8_17', 'TR126_17', 'TR126_8'), ('TR126_8_17', 'TR126_8', 'TR126_17'), ('TR126_9_18', 'TR126_18', 'TR126_9'), ('TR126_9_18', 'TR126_9', 'TR126_18'), ('TR126_9_19', 'TR126_19', 'TR126_9'), ('TR126_9_19', 'TR126_9', 'TR126_19'), ('TR127_10_12', 'TR127_10', 'TR127_12'), ('TR127_10_12', 'TR127_12', 'TR127_10'), ('TR127_1_13', 'TR127_1', 'TR127_13'), ('TR127_1_13', 'TR127_13', 'TR127_1'), ('TR127_1_6', 'TR127_1', 'TR127_6'), ('TR127_1_6', 'TR127_6', 'TR127_1'), ('TR127_2_10', 'TR127_10', 'TR127_2'), ('TR127_2_10', 'TR127_2', 'TR127_10'), ('TR127_2_3', 'TR127_2', 'TR127_3'), ('TR127_2_3', 'TR127_3', 'TR127_2'), ('TR127_3_14', 'TR127_14', 'TR127_3'), ('TR127_3_14', 'TR127_3', 'TR127_14'), ('TR127_4_15', 'TR127_15', 'TR127_4'), ('TR127_4_15', 'TR127_4', 'TR127_15'), ('TR127_4_5', 'TR127_4', 'TR127_5'), ('TR127_4_5', 'TR127_5', 'TR127_4'), ('TR127_5_8', 'TR127_5', 'TR127_8'), ('TR127_5_8', 'TR127_8', 'TR127_5'), ('TR127_6_7', 'TR127_6', 'TR127_7'), ('TR127_6_7', 'TR127_7', 'TR127_6'), ('TR127_7_16', 'TR127_16', 'TR127_7'), ('TR127_7_16', 'TR127_7', 'TR127_16'), ('TR127_7_17', 'TR127_17', 'TR127_7'), ('TR127_7_17', 'TR127_7', 'TR127_17'), ('TR127_8_9', 'TR127_8', 'TR127_9'), ('TR127_8_9', 'TR127_9', 'TR127_8'), ('TR127_9_18', 'TR127_18', 'TR127_9'), ('TR127_9_18', 'TR127_9', 'TR127_18'), ('TR127_9_19', 'TR127_19', 'TR127_9'), ('TR127_9_19', 'TR127_9', 'TR127_19'), ('TR127_9_20', 'TR127_20', 'TR127_9'), ('TR127_9_20', 'TR127_9', 'TR127_20'), ('TR128_10_11', 'TR128_10', 'TR128_11'), ('TR128_10_11', 'TR128_11', 'TR128_10'), ('TR128_10_18', 'TR128_10', 'TR128_18'), ('TR128_10_18', 'TR128_18', 'TR128_10'), ('TR128_11_21', 'TR128_11', 'TR128_21'), ('TR128_11_21', 'TR128_21', 'TR128_11'), ('TR128_12_28', 'TR128_12', 'TR128_28'), ('TR128_12_28', 'TR128_28', 'TR128_12'), ('TR128_13_14', 'TR128_13', 'TR128_14'), ('TR128_13_14', 'TR128_14', 'TR128_13'), ('TR128_14_29', 'TR128_14', 'TR128_29'), ('TR128_14_29', 'TR128_29', 'TR128_14'), ('TR128_14_30', 'TR128_14', 'TR128_30'), ('TR128_14_30', 'TR128_30', 'TR128_14'), ('TR128_14_31', 'TR128_14', 'TR128_31'), ('TR128_14_31', 'TR128_31', 'TR128_14'), ('TR128_1_2', 'TR128_1', 'TR128_2'), ('TR128_1_2', 'TR128_2', 'TR128_1'), ('TR128_1_7', 'TR128_1', 'TR128_7'), ('TR128_1_7', 'TR128_7', 'TR128_1'), ('TR128_21_22', 'TR128_21', 'TR128_22'), ('TR128_21_22', 'TR128_22', 'TR128_21'), ('TR128_22_32', 'TR128_22', 'TR128_32'), ('TR128_22_32', 'TR128_32', 'TR128_22'), ('TR128_22_33', 'TR128_22', 'TR128_33'), ('TR128_22_33', 'TR128_33', 'TR128_22'), ('TR128_22_34', 'TR128_22', 'TR128_34'), ('TR128_22_34', 'TR128_34', 'TR128_22'), ('TR128_2_12', 'TR128_12', 'TR128_2'), ('TR128_2_12', 'TR128_2', 'TR128_12'), ('TR128_3_23', 'TR128_23', 'TR128_3'), ('TR128_3_23', 'TR128_3', 'TR128_23'), ('TR128_3_4', 'TR128_3', 'TR128_4'), ('TR128_3_4', 'TR128_4', 'TR128_3'), ('TR128_4_13', 'TR128_13', 'TR128_4'), ('TR128_4_13', 'TR128_4', 'TR128_13'), ('TR128_5_15', 'TR128_15', 'TR128_5'), ('TR128_5_15', 'TR128_5', 'TR128_15'), ('TR128_5_6', 'TR128_5', 'TR128_6'), ('TR128_5_6', 'TR128_6', 'TR128_5'), ('TR128_6_24', 'TR128_24', 'TR128_6'), ('TR128_6_24', 'TR128_6', 'TR128_24'), ('TR128_7_25', 'TR128_25', 'TR128_7'), ('TR128_7_25', 'TR128_7', 'TR128_25'), ('TR128_8_26', 'TR128_26', 'TR128_8'), ('TR128_8_26', 'TR128_8', 'TR128_26'), ('TR128_8_9', 'TR128_8', 'TR128_9'), ('TR128_8_9', 'TR128_9', 'TR128_8'), ('TR128_9_27', 'TR128_27', 'TR128_9'), ('TR128_9_27', 'TR128_9', 'TR128_27'), ('TR129_1_2', 'TR129_1', 'TR129_2'), ('TR129_1_2', 'TR129_2', 'TR129_1'), ('TR129_1_3', 'TR129_1', 'TR129_3'), ('TR129_1_3', 'TR129_3', 'TR129_1'), ('TR129_2_5', 'TR129_2', 'TR129_5'), ('TR129_2_5', 'TR129_5', 'TR129_2'), ('TR129_2_6', 'TR129_2', 'TR129_6'), ('TR129_2_6', 'TR129_6', 'TR129_2'), ('TR129_3_7', 'TR129_3', 'TR129_7'), ('TR129_3_7', 'TR129_7', 'TR129_3'), ('TR129_3_8', 'TR129_3', 'TR129_8'), ('TR129_3_8', 'TR129_8', 'TR129_3'), ('TR129_5_10', 'TR129_10', 'TR129_5'), ('TR129_5_10', 'TR129_5', 'TR129_10'), ('TR129_5_11', 'TR129_11', 'TR129_5'), ('TR129_5_11', 'TR129_5', 'TR129_11'), ('TR129_5_9', 'TR129_5', 'TR129_9'), ('TR129_5_9', 'TR129_9', 'TR129_5'), ('TR129_6_12', 'TR129_12', 'TR129_6'), ('TR129_6_12', 'TR129_6', 'TR129_12'), ('TR129_6_13', 'TR129_13', 'TR129_6'), ('TR129_6_13', 'TR129_6', 'TR129_13'), ('TR129_6_14', 'TR129_14', 'TR129_6'), ('TR129_6_14', 'TR129_6', 'TR129_14'), ('TR129_7_15', 'TR129_15', 'TR129_7'), ('TR129_7_15', 'TR129_7', 'TR129_15'), ('TR129_7_16', 'TR129_16', 'TR129_7'), ('TR129_7_16', 'TR129_7', 'TR129_16'), ('TR129_7_17', 'TR129_17', 'TR129_7'), ('TR129_7_17', 'TR129_7', 'TR129_17'), ('TR130_15_16', 'TR130_15', 'TR130_16'), ('TR130_15_16', 'TR130_16', 'TR130_15'), ('TR130_1_6', 'TR130_1', 'TR130_6'), ('TR130_1_6', 'TR130_6', 'TR130_1'), ('TR130_1_8', 'TR130_1', 'TR130_8'), ('TR130_1_8', 'TR130_8', 'TR130_1'), ('TR130_2_3', 'TR130_2', 'TR130_3'), ('TR130_2_3', 'TR130_3', 'TR130_2'), ('TR130_2_9', 'TR130_2', 'TR130_9'), ('TR130_2_9', 'TR130_9', 'TR130_2'), ('TR130_3_10', 'TR130_10', 'TR130_3'), ('TR130_3_10', 'TR130_3', 'TR130_10'), ('TR130_4_11', 'TR130_11', 'TR130_4'), ('TR130_4_11', 'TR130_4', 'TR130_11'), ('TR130_4_5', 'TR130_4', 'TR130_5'), ('TR130_4_5', 'TR130_5', 'TR130_4'), ('TR130_5_12', 'TR130_12', 'TR130_5'), ('TR130_5_12', 'TR130_5', 'TR130_12'), ('TR130_6_7', 'TR130_6', 'TR130_7'), ('TR130_6_7', 'TR130_7', 'TR130_6'), ('TR130_7_13', 'TR130_13', 'TR130_7'), ('TR130_7_13', 'TR130_7', 'TR130_13'), ('TR130_7_14', 'TR130_14', 'TR130_7'), ('TR130_7_14', 'TR130_7', 'TR130_14'), ('TR131_10_15', 'TR131_10', 'TR131_15'), ('TR131_10_15', 'TR131_15', 'TR131_10'), ('TR131_11_12', 'TR131_11', 'TR131_12'), ('TR131_11_12', 'TR131_12', 'TR131_11'), ('TR131_11_25', 'TR131_11', 'TR131_25'), ('TR131_11_25', 'TR131_25', 'TR131_11'), ('TR131_12_26', 'TR131_12', 'TR131_26'), ('TR131_12_26', 'TR131_26', 'TR131_12'), ('TR131_13_14', 'TR131_13', 'TR131_14'), ('TR131_13_14', 'TR131_14', 'TR131_13'), ('TR131_13_16', 'TR131_13', 'TR131_16'), ('TR131_13_16', 'TR131_16', 'TR131_13'), ('TR131_14_27', 'TR131_14', 'TR131_27'), ('TR131_14_27', 'TR131_27', 'TR131_14'), ('TR131_15_28', 'TR131_15', 'TR131_28'), ('TR131_15_28', 'TR131_28', 'TR131_15'), ('TR131_1_10', 'TR131_1', 'TR131_10'), ('TR131_1_10', 'TR131_10', 'TR131_1'), ('TR131_1_2', 'TR131_1', 'TR131_2'), ('TR131_1_2', 'TR131_2', 'TR131_1'), ('TR131_1_20', 'TR131_1', 'TR131_20'), ('TR131_1_20', 'TR131_20', 'TR131_1'), ('TR131_1_3', 'TR131_1', 'TR131_3'), ('TR131_1_3', 'TR131_3', 'TR131_1'), ('TR131_29_30', 'TR131_29', 'TR131_30'), ('TR131_29_30', 'TR131_30', 'TR131_29'), ('TR131_29_31', 'TR131_29', 'TR131_31'), ('TR131_29_31', 'TR131_31', 'TR131_29'), ('TR131_29_32', 'TR131_29', 'TR131_32'), ('TR131_29_32', 'TR131_32', 'TR131_29'), ('TR131_29_47', 'TR131_29', 'TR131_47'), ('TR131_29_47', 'TR131_47', 'TR131_29'), ('TR131_2_17', 'TR131_17', 'TR131_2'), ('TR131_2_17', 'TR131_2', 'TR131_17'), ('TR131_2_18', 'TR131_18', 'TR131_2'), ('TR131_2_18', 'TR131_2', 'TR131_18'), ('TR131_2_19', 'TR131_19', 'TR131_2'), ('TR131_2_19', 'TR131_2', 'TR131_19'), ('TR131_30_33', 'TR131_30', 'TR131_33'), ('TR131_30_33', 'TR131_33', 'TR131_30'), ('TR131_30_34', 'TR131_30', 'TR131_34'), ('TR131_30_34', 'TR131_34', 'TR131_30'), ('TR131_30_48', 'TR131_30', 'TR131_48'), ('TR131_30_48', 'TR131_48', 'TR131_30'), ('TR131_31_36', 'TR131_31', 'TR131_36'), ('TR131_31_36', 'TR131_36', 'TR131_31'), ('TR131_32_38', 'TR131_32', 'TR131_38'), ('TR131_32_38', 'TR131_38', 'TR131_32'), ('TR131_35_39', 'TR131_35', 'TR131_39'), ('TR131_35_39', 'TR131_39', 'TR131_35'), ('TR131_35_49', 'TR131_35', 'TR131_49'), ('TR131_35_49', 'TR131_49', 'TR131_35'), ('TR131_36_50', 'TR131_36', 'TR131_50'), ('TR131_36_50', 'TR131_50', 'TR131_36'), ('TR131_37_41', 'TR131_37', 'TR131_41'), ('TR131_37_41', 'TR131_41', 'TR131_37'), ('TR131_37_51', 'TR131_37', 'TR131_51'), ('TR131_37_51', 'TR131_51', 'TR131_37'), ('TR131_38_52', 'TR131_38', 'TR131_52'), ('TR131_38_52', 'TR131_52', 'TR131_38'), ('TR131_39_53', 'TR131_39', 'TR131_53'), ('TR131_39_53', 'TR131_53', 'TR131_39'), ('TR131_3_8', 'TR131_3', 'TR131_8'), ('TR131_3_8', 'TR131_8', 'TR131_3'), ('TR131_40_43', 'TR131_40', 'TR131_43'), ('TR131_40_43', 'TR131_43', 'TR131_40'), ('TR131_40_54', 'TR131_40', 'TR131_54'), ('TR131_40_54', 'TR131_54', 'TR131_40'), ('TR131_41_55', 'TR131_41', 'TR131_55'), ('TR131_41_55', 'TR131_55', 'TR131_41'), ('TR131_42_44', 'TR131_42', 'TR131_44'), ('TR131_42_44', 'TR131_44', 'TR131_42'), ('TR131_42_56', 'TR131_42', 'TR131_56'), ('TR131_42_56', 'TR131_56', 'TR131_42'), ('TR131_43_45', 'TR131_43', 'TR131_45'), ('TR131_43_45', 'TR131_45', 'TR131_43'), ('TR131_44_46', 'TR131_44', 'TR131_46'), ('TR131_44_46', 'TR131_46', 'TR131_44'), ('TR131_4_21', 'TR131_21', 'TR131_4'), ('TR131_4_21', 'TR131_4', 'TR131_21'), ('TR131_4_5', 'TR131_4', 'TR131_5'), ('TR131_4_5', 'TR131_5', 'TR131_4'), ('TR131_57_59', 'TR131_57', 'TR131_59'), ('TR131_57_59', 'TR131_59', 'TR131_57'), ('TR131_57_60', 'TR131_57', 'TR131_60'), ('TR131_57_60', 'TR131_60', 'TR131_57'), ('TR131_58_61', 'TR131_58', 'TR131_61'), ('TR131_58_61', 'TR131_61', 'TR131_58'), ('TR131_58_62', 'TR131_58', 'TR131_62'), ('TR131_58_62', 'TR131_62', 'TR131_58'), ('TR131_59_64', 'TR131_59', 'TR131_64'), ('TR131_59_64', 'TR131_64', 'TR131_59'), ('TR131_5_22', 'TR131_22', 'TR131_5'), ('TR131_5_22', 'TR131_5', 'TR131_22'), ('TR131_60_66', 'TR131_60', 'TR131_66'), ('TR131_60_66', 'TR131_66', 'TR131_60'), ('TR131_63_67', 'TR131_63', 'TR131_67'), ('TR131_63_67', 'TR131_67', 'TR131_63'), ('TR131_63_75', 'TR131_63', 'TR131_75'), ('TR131_63_75', 'TR131_75', 'TR131_63'), ('TR131_64_76', 'TR131_64', 'TR131_76'), ('TR131_64_76', 'TR131_76', 'TR131_64'), ('TR131_65_69', 'TR131_65', 'TR131_69'), ('TR131_65_69', 'TR131_69', 'TR131_65'), ('TR131_65_77', 'TR131_65', 'TR131_77'), ('TR131_65_77', 'TR131_77', 'TR131_65'), ('TR131_66_78', 'TR131_66', 'TR131_78'), ('TR131_66_78', 'TR131_78', 'TR131_66'), ('TR131_67_79', 'TR131_67', 'TR131_79'), ('TR131_67_79', 'TR131_79', 'TR131_67'), ('TR131_68_71', 'TR131_68', 'TR131_71'), ('TR131_68_71', 'TR131_71', 'TR131_68'), ('TR131_68_80', 'TR131_68', 'TR131_80'), ('TR131_68_80', 'TR131_80', 'TR131_68'), ('TR131_69_81', 'TR131_69', 'TR131_81'), ('TR131_69_81', 'TR131_81', 'TR131_69'), ('TR131_6_7', 'TR131_6', 'TR131_7'), ('TR131_6_7', 'TR131_7', 'TR131_6'), ('TR131_6_9', 'TR131_6', 'TR131_9'), ('TR131_6_9', 'TR131_9', 'TR131_6'), ('TR131_70_72', 'TR131_70', 'TR131_72'), ('TR131_70_72', 'TR131_72', 'TR131_70'), ('TR131_70_82', 'TR131_70', 'TR131_82'), ('TR131_70_82', 'TR131_82', 'TR131_70'), ('TR131_71_73', 'TR131_71', 'TR131_73'), ('TR131_71_73', 'TR131_73', 'TR131_71'), ('TR131_72_74', 'TR131_72', 'TR131_74'), ('TR131_72_74', 'TR131_74', 'TR131_72'), ('TR131_7_23', 'TR131_23', 'TR131_7'), ('TR131_7_23', 'TR131_7', 'TR131_23'), ('TR131_8_24', 'TR131_24', 'TR131_8'), ('TR131_8_24', 'TR131_8', 'TR131_24'), ('TR132_1_2', 'TR132_1', 'TR132_2'), ('TR132_1_2', 'TR132_2', 'TR132_1'), ('TR132_1_3', 'TR132_1', 'TR132_3'), ('TR132_1_3', 'TR132_3', 'TR132_1'), ('TR132_1_9', 'TR132_1', 'TR132_9'), ('TR132_1_9', 'TR132_9', 'TR132_1'), ('TR132_2_10', 'TR132_10', 'TR132_2'), ('TR132_2_10', 'TR132_2', 'TR132_10'), ('TR132_2_4', 'TR132_2', 'TR132_4'), ('TR132_2_4', 'TR132_4', 'TR132_2'), ('TR132_3_5', 'TR132_3', 'TR132_5'), ('TR132_3_5', 'TR132_5', 'TR132_3'), ('TR132_4_7', 'TR132_4', 'TR132_7'), ('TR132_4_7', 'TR132_7', 'TR132_4'), ('TR132_5_11', 'TR132_11', 'TR132_5'), ('TR132_5_11', 'TR132_5', 'TR132_11'), ('TR132_5_12', 'TR132_12', 'TR132_5'), ('TR132_5_12', 'TR132_5', 'TR132_12'), ('TR132_7_13', 'TR132_13', 'TR132_7'), ('TR132_7_13', 'TR132_7', 'TR132_13'), ('TR132_7_14', 'TR132_14', 'TR132_7'), ('TR132_7_14', 'TR132_7', 'TR132_14'), ('TR133_12_13', 'TR133_12', 'TR133_13'), ('TR133_12_13', 'TR133_13', 'TR133_12'), ('TR133_12_21', 'TR133_12', 'TR133_21'), ('TR133_12_21', 'TR133_21', 'TR133_12'), ('TR133_12_22', 'TR133_12', 'TR133_22'), ('TR133_12_22', 'TR133_22', 'TR133_12'), ('TR133_13_23', 'TR133_13', 'TR133_23'), ('TR133_13_23', 'TR133_23', 'TR133_13'), ('TR133_13_24', 'TR133_13', 'TR133_24'), ('TR133_13_24', 'TR133_24', 'TR133_13'), ('TR133_13_25', 'TR133_13', 'TR133_25'), ('TR133_13_25', 'TR133_25', 'TR133_13'), ('TR133_14_16', 'TR133_14', 'TR133_16'), ('TR133_14_16', 'TR133_16', 'TR133_14'), ('TR133_16_26', 'TR133_16', 'TR133_26'), ('TR133_16_26', 'TR133_26', 'TR133_16'), ('TR133_16_27', 'TR133_16', 'TR133_27'), ('TR133_16_27', 'TR133_27', 'TR133_16'), ('TR133_16_28', 'TR133_16', 'TR133_28'), ('TR133_16_28', 'TR133_28', 'TR133_16'), ('TR133_1_17', 'TR133_1', 'TR133_17'), ('TR133_1_17', 'TR133_17', 'TR133_1'), ('TR133_1_6', 'TR133_1', 'TR133_6'), ('TR133_1_6', 'TR133_6', 'TR133_1'), ('TR133_2_3', 'TR133_2', 'TR133_3'), ('TR133_2_3', 'TR133_3', 'TR133_2'), ('TR133_2_9', 'TR133_2', 'TR133_9'), ('TR133_2_9', 'TR133_9', 'TR133_2'), ('TR133_3_7', 'TR133_3', 'TR133_7'), ('TR133_3_7', 'TR133_7', 'TR133_3'), ('TR133_4_18', 'TR133_18', 'TR133_4'), ('TR133_4_18', 'TR133_4', 'TR133_18'), ('TR133_4_5', 'TR133_4', 'TR133_5'), ('TR133_4_5', 'TR133_5', 'TR133_4'), ('TR133_5_19', 'TR133_19', 'TR133_5'), ('TR133_5_19', 'TR133_5', 'TR133_19'), ('TR133_6_8', 'TR133_6', 'TR133_8'), ('TR133_6_8', 'TR133_8', 'TR133_6'), ('TR133_7_12', 'TR133_12', 'TR133_7'), ('TR133_7_12', 'TR133_7', 'TR133_12'), ('TR133_8_14', 'TR133_14', 'TR133_8'), ('TR133_8_14', 'TR133_8', 'TR133_14'), ('TR133_8_20', 'TR133_20', 'TR133_8'), ('TR133_8_20', 'TR133_8', 'TR133_20'), ('TR133_9_11', 'TR133_11', 'TR133_9'), ('TR133_9_11', 'TR133_9', 'TR133_11'), ('TR134_11_14', 'TR134_11', 'TR134_14'), ('TR134_11_14', 'TR134_14', 'TR134_11'), ('TR134_11_29', 'TR134_11', 'TR134_29'), ('TR134_11_29', 'TR134_29', 'TR134_11'), ('TR134_12_30', 'TR134_12', 'TR134_30'), ('TR134_12_30', 'TR134_30', 'TR134_12'), ('TR134_13_17', 'TR134_13', 'TR134_17'), ('TR134_13_17', 'TR134_17', 'TR134_13'), ('TR134_13_31', 'TR134_13', 'TR134_31'), ('TR134_13_31', 'TR134_31', 'TR134_13'), ('TR134_14_18', 'TR134_14', 'TR134_18'), ('TR134_14_18', 'TR134_18', 'TR134_14'), ('TR134_15_19', 'TR134_15', 'TR134_19'), ('TR134_15_19', 'TR134_19', 'TR134_15'), ('TR134_16_20', 'TR134_16', 'TR134_20'), ('TR134_16_20', 'TR134_20', 'TR134_16'), ('TR134_16_32', 'TR134_16', 'TR134_32'), ('TR134_16_32', 'TR134_32', 'TR134_16'), ('TR134_17_33', 'TR134_17', 'TR134_33'), ('TR134_17_33', 'TR134_33', 'TR134_17'), ('TR134_18_22', 'TR134_18', 'TR134_22'), ('TR134_18_22', 'TR134_22', 'TR134_18'), ('TR134_19_21', 'TR134_19', 'TR134_21'), ('TR134_19_21', 'TR134_21', 'TR134_19'), ('TR134_20_34', 'TR134_20', 'TR134_34'), ('TR134_20_34', 'TR134_34', 'TR134_20'), ('TR134_21_24', 'TR134_21', 'TR134_24'), ('TR134_21_24', 'TR134_24', 'TR134_21'), ('TR134_22_35', 'TR134_22', 'TR134_35'), ('TR134_22_35', 'TR134_35', 'TR134_22'), ('TR134_24_36', 'TR134_24', 'TR134_36'), ('TR134_24_36', 'TR134_36', 'TR134_24'), ('TR134_25_26', 'TR134_25', 'TR134_26'), ('TR134_25_26', 'TR134_26', 'TR134_25'), ('TR134_25_37', 'TR134_25', 'TR134_37'), ('TR134_25_37', 'TR134_37', 'TR134_25'), ('TR134_26_38', 'TR134_26', 'TR134_38'), ('TR134_26_38', 'TR134_38', 'TR134_26'), ('TR134_2_3', 'TR134_2', 'TR134_3'), ('TR134_2_3', 'TR134_3', 'TR134_2'), ('TR134_2_4', 'TR134_2', 'TR134_4'), ('TR134_2_4', 'TR134_4', 'TR134_2'), ('TR134_3_6', 'TR134_3', 'TR134_6'), ('TR134_3_6', 'TR134_6', 'TR134_3'), ('TR134_4_8', 'TR134_4', 'TR134_8'), ('TR134_4_8', 'TR134_8', 'TR134_4'), ('TR134_5_10', 'TR134_10', 'TR134_5'), ('TR134_5_10', 'TR134_5', 'TR134_10'), ('TR134_5_9', 'TR134_5', 'TR134_9'), ('TR134_5_9', 'TR134_9', 'TR134_5'), ('TR134_6_27', 'TR134_27', 'TR134_6'), ('TR134_6_27', 'TR134_6', 'TR134_27'), ('TR134_7_10', 'TR134_10', 'TR134_7'), ('TR134_7_10', 'TR134_7', 'TR134_10'), ('TR134_7_12', 'TR134_12', 'TR134_7'), ('TR134_7_12', 'TR134_7', 'TR134_12'), ('TR134_8_28', 'TR134_28', 'TR134_8'), ('TR134_8_28', 'TR134_8', 'TR134_28'), ('TR134_9_15', 'TR134_15', 'TR134_9'), ('TR134_9_15', 'TR134_9', 'TR134_15'), ('TR135_10_15', 'TR135_10', 'TR135_15'), ('TR135_10_15', 'TR135_15', 'TR135_10'), ('TR135_12_16', 'TR135_12', 'TR135_16'), ('TR135_12_16', 'TR135_16', 'TR135_12'), ('TR135_13_17', 'TR135_13', 'TR135_17'), ('TR135_13_17', 'TR135_17', 'TR135_13'), ('TR135_13_23', 'TR135_13', 'TR135_23'), ('TR135_13_23', 'TR135_23', 'TR135_13'), ('TR135_13_24', 'TR135_13', 'TR135_24'), ('TR135_13_24', 'TR135_24', 'TR135_13'), ('TR135_14_25', 'TR135_14', 'TR135_25'), ('TR135_14_25', 'TR135_25', 'TR135_14'), ('TR135_14_26', 'TR135_14', 'TR135_26'), ('TR135_14_26', 'TR135_26', 'TR135_14'), ('TR135_14_27', 'TR135_14', 'TR135_27'), ('TR135_14_27', 'TR135_27', 'TR135_14'), ('TR135_15_28', 'TR135_15', 'TR135_28'), ('TR135_15_28', 'TR135_28', 'TR135_15'), ('TR135_15_29', 'TR135_15', 'TR135_29'), ('TR135_15_29', 'TR135_29', 'TR135_15'), ('TR135_15_30', 'TR135_15', 'TR135_30'), ('TR135_15_30', 'TR135_30', 'TR135_15'), ('TR135_16_18', 'TR135_16', 'TR135_18'), ('TR135_16_18', 'TR135_18', 'TR135_16'), ('TR135_16_31', 'TR135_16', 'TR135_31'), ('TR135_16_31', 'TR135_31', 'TR135_16'), ('TR135_16_32', 'TR135_16', 'TR135_32'), ('TR135_16_32', 'TR135_32', 'TR135_16'), ('TR135_17_33', 'TR135_17', 'TR135_33'), ('TR135_17_33', 'TR135_33', 'TR135_17'), ('TR135_17_34', 'TR135_17', 'TR135_34'), ('TR135_17_34', 'TR135_34', 'TR135_17'), ('TR135_17_35', 'TR135_17', 'TR135_35'), ('TR135_17_35', 'TR135_35', 'TR135_17'), ('TR135_18_36', 'TR135_18', 'TR135_36'), ('TR135_18_36', 'TR135_36', 'TR135_18'), ('TR135_18_37', 'TR135_18', 'TR135_37'), ('TR135_18_37', 'TR135_37', 'TR135_18'), ('TR135_18_38', 'TR135_18', 'TR135_38'), ('TR135_18_38', 'TR135_38', 'TR135_18'), ('TR135_1_2', 'TR135_1', 'TR135_2'), ('TR135_1_2', 'TR135_2', 'TR135_1'), ('TR135_1_20', 'TR135_1', 'TR135_20'), ('TR135_1_20', 'TR135_20', 'TR135_1'), ('TR135_1_3', 'TR135_1', 'TR135_3'), ('TR135_1_3', 'TR135_3', 'TR135_1'), ('TR135_1_4', 'TR135_1', 'TR135_4'), ('TR135_1_4', 'TR135_4', 'TR135_1'), ('TR135_2_5', 'TR135_2', 'TR135_5'), ('TR135_2_5', 'TR135_5', 'TR135_2'), ('TR135_3_21', 'TR135_21', 'TR135_3'), ('TR135_3_21', 'TR135_3', 'TR135_21'), ('TR135_3_22', 'TR135_22', 'TR135_3'), ('TR135_3_22', 'TR135_3', 'TR135_22'), ('TR135_3_6', 'TR135_3', 'TR135_6'), ('TR135_3_6', 'TR135_6', 'TR135_3'), ('TR135_4_7', 'TR135_4', 'TR135_7'), ('TR135_4_7', 'TR135_7', 'TR135_4'), ('TR135_5_10', 'TR135_10', 'TR135_5'), ('TR135_5_10', 'TR135_5', 'TR135_10'), ('TR135_5_11', 'TR135_11', 'TR135_5'), ('TR135_5_11', 'TR135_5', 'TR135_11'), ('TR135_5_9', 'TR135_5', 'TR135_9'), ('TR135_5_9', 'TR135_9', 'TR135_5'), ('TR135_6_12', 'TR135_12', 'TR135_6'), ('TR135_6_12', 'TR135_6', 'TR135_12'), ('TR135_7_13', 'TR135_13', 'TR135_7'), ('TR135_7_13', 'TR135_7', 'TR135_13'), ('TR135_9_14', 'TR135_14', 'TR135_9'), ('TR135_9_14', 'TR135_9', 'TR135_14'), ('TR136_10_12', 'TR136_10', 'TR136_12'), ('TR136_10_12', 'TR136_12', 'TR136_10'), ('TR136_10_23', 'TR136_10', 'TR136_23'), ('TR136_10_23', 'TR136_23', 'TR136_10'), ('TR136_12_24', 'TR136_12', 'TR136_24'), ('TR136_12_24', 'TR136_24', 'TR136_12'), ('TR136_12_25', 'TR136_12', 'TR136_25'), ('TR136_12_25', 'TR136_25', 'TR136_12'), ('TR136_12_26', 'TR136_12', 'TR136_26'), ('TR136_12_26', 'TR136_26', 'TR136_12'), ('TR136_1_2', 'TR136_1', 'TR136_2'), ('TR136_1_2', 'TR136_2', 'TR136_1'), ('TR136_1_3', 'TR136_1', 'TR136_3'), ('TR136_1_3', 'TR136_3', 'TR136_1'), ('TR136_1_4', 'TR136_1', 'TR136_4'), ('TR136_1_4', 'TR136_4', 'TR136_1'), ('TR136_1_5', 'TR136_1', 'TR136_5'), ('TR136_1_5', 'TR136_5', 'TR136_1'), ('TR136_2_13', 'TR136_13', 'TR136_2'), ('TR136_2_13', 'TR136_2', 'TR136_13'), ('TR136_3_7', 'TR136_3', 'TR136_7'), ('TR136_3_7', 'TR136_7', 'TR136_3'), ('TR136_4_14', 'TR136_14', 'TR136_4'), ('TR136_4_14', 'TR136_4', 'TR136_14'), ('TR136_4_15', 'TR136_15', 'TR136_4'), ('TR136_4_15', 'TR136_4', 'TR136_15'), ('TR136_4_16', 'TR136_16', 'TR136_4'), ('TR136_4_16', 'TR136_4', 'TR136_16'), ('TR136_5_17', 'TR136_17', 'TR136_5'), ('TR136_5_17', 'TR136_5', 'TR136_17'), ('TR136_5_18', 'TR136_18', 'TR136_5'), ('TR136_5_18', 'TR136_5', 'TR136_18'), ('TR136_5_19', 'TR136_19', 'TR136_5'), ('TR136_5_19', 'TR136_5', 'TR136_19'), ('TR136_6_8', 'TR136_6', 'TR136_8'), ('TR136_6_8', 'TR136_8', 'TR136_6'), ('TR136_7_20', 'TR136_20', 'TR136_7'), ('TR136_7_20', 'TR136_7', 'TR136_20'), ('TR136_7_21', 'TR136_21', 'TR136_7'), ('TR136_7_21', 'TR136_7', 'TR136_21'), ('TR136_7_22', 'TR136_22', 'TR136_7'), ('TR136_7_22', 'TR136_7', 'TR136_22'), ('TR136_8_9', 'TR136_8', 'TR136_9'), ('TR136_8_9', 'TR136_9', 'TR136_8'), ('TR136_9_10', 'TR136_10', 'TR136_9'), ('TR136_9_10', 'TR136_9', 'TR136_10'), ('TR137_10_14', 'TR137_10', 'TR137_14'), ('TR137_10_14', 'TR137_14', 'TR137_10'), ('TR137_10_23', 'TR137_10', 'TR137_23'), ('TR137_10_23', 'TR137_23', 'TR137_10'), ('TR137_10_24', 'TR137_10', 'TR137_24'), ('TR137_10_24', 'TR137_24', 'TR137_10'), ('TR137_11_15', 'TR137_11', 'TR137_15'), ('TR137_11_15', 'TR137_15', 'TR137_11'), ('TR137_12_16', 'TR137_12', 'TR137_16'), ('TR137_12_16', 'TR137_16', 'TR137_12'), ('TR137_12_17', 'TR137_12', 'TR137_17'), ('TR137_12_17', 'TR137_17', 'TR137_12'), ('TR137_13_25', 'TR137_13', 'TR137_25'), ('TR137_13_25', 'TR137_25', 'TR137_13'), ('TR137_13_26', 'TR137_13', 'TR137_26'), ('TR137_13_26', 'TR137_26', 'TR137_13'), ('TR137_13_27', 'TR137_13', 'TR137_27'), ('TR137_13_27', 'TR137_27', 'TR137_13'), ('TR137_14_28', 'TR137_14', 'TR137_28'), ('TR137_14_28', 'TR137_28', 'TR137_14'), ('TR137_14_29', 'TR137_14', 'TR137_29'), ('TR137_14_29', 'TR137_29', 'TR137_14'), ('TR137_14_30', 'TR137_14', 'TR137_30'), ('TR137_14_30', 'TR137_30', 'TR137_14'), ('TR137_15_18', 'TR137_15', 'TR137_18'), ('TR137_15_18', 'TR137_18', 'TR137_15'), ('TR137_15_19', 'TR137_15', 'TR137_19'), ('TR137_15_19', 'TR137_19', 'TR137_15'), ('TR137_15_31', 'TR137_15', 'TR137_31'), ('TR137_15_31', 'TR137_31', 'TR137_15'), ('TR137_17_32', 'TR137_17', 'TR137_32'), ('TR137_17_32', 'TR137_32', 'TR137_17'), ('TR137_17_33', 'TR137_17', 'TR137_33'), ('TR137_17_33', 'TR137_33', 'TR137_17'), ('TR137_17_34', 'TR137_17', 'TR137_34'), ('TR137_17_34', 'TR137_34', 'TR137_17'), ('TR137_18_35', 'TR137_18', 'TR137_35'), ('TR137_18_35', 'TR137_35', 'TR137_18'), ('TR137_18_36', 'TR137_18', 'TR137_36'), ('TR137_18_36', 'TR137_36', 'TR137_18'), ('TR137_18_37', 'TR137_18', 'TR137_37'), ('TR137_18_37', 'TR137_37', 'TR137_18'), ('TR137_19_38', 'TR137_19', 'TR137_38'), ('TR137_19_38', 'TR137_38', 'TR137_19'), ('TR137_19_39', 'TR137_19', 'TR137_39'), ('TR137_19_39', 'TR137_39', 'TR137_19'), ('TR137_19_40', 'TR137_19', 'TR137_40'), ('TR137_19_40', 'TR137_40', 'TR137_19'), ('TR137_1_2', 'TR137_1', 'TR137_2'), ('TR137_1_2', 'TR137_2', 'TR137_1'), ('TR137_1_3', 'TR137_1', 'TR137_3'), ('TR137_1_3', 'TR137_3', 'TR137_1'), ('TR137_2_4', 'TR137_2', 'TR137_4'), ('TR137_2_4', 'TR137_4', 'TR137_2'), ('TR137_2_5', 'TR137_2', 'TR137_5'), ('TR137_2_5', 'TR137_5', 'TR137_2'), ('TR137_2_6', 'TR137_2', 'TR137_6'), ('TR137_2_6', 'TR137_6', 'TR137_2'), ('TR137_3_8', 'TR137_3', 'TR137_8'), ('TR137_3_8', 'TR137_8', 'TR137_3'), ('TR137_4_9', 'TR137_4', 'TR137_9'), ('TR137_4_9', 'TR137_9', 'TR137_4'), ('TR137_5_10', 'TR137_10', 'TR137_5'), ('TR137_5_10', 'TR137_5', 'TR137_10'), ('TR137_7_11', 'TR137_11', 'TR137_7'), ('TR137_7_11', 'TR137_7', 'TR137_11'), ('TR137_8_20', 'TR137_20', 'TR137_8'), ('TR137_8_20', 'TR137_8', 'TR137_20'), ('TR137_9_13', 'TR137_13', 'TR137_9'), ('TR137_9_13', 'TR137_9', 'TR137_13'), ('TR137_9_21', 'TR137_21', 'TR137_9'), ('TR137_9_21', 'TR137_9', 'TR137_21'), ('TR137_9_22', 'TR137_22', 'TR137_9'), ('TR137_9_22', 'TR137_9', 'TR137_22'), ('TR138_10_15', 'TR138_10', 'TR138_15'), ('TR138_10_15', 'TR138_15', 'TR138_10'), ('TR138_11_22', 'TR138_11', 'TR138_22'), ('TR138_11_22', 'TR138_22', 'TR138_11'), ('TR138_12_16', 'TR138_12', 'TR138_16'), ('TR138_12_16', 'TR138_16', 'TR138_12'), ('TR138_12_23', 'TR138_12', 'TR138_23'), ('TR138_12_23', 'TR138_23', 'TR138_12'), ('TR138_13_24', 'TR138_13', 'TR138_24'), ('TR138_13_24', 'TR138_24', 'TR138_13'), ('TR138_13_25', 'TR138_13', 'TR138_25'), ('TR138_13_25', 'TR138_25', 'TR138_13'), ('TR138_13_26', 'TR138_13', 'TR138_26'), ('TR138_13_26', 'TR138_26', 'TR138_13'), ('TR138_14_17', 'TR138_14', 'TR138_17'), ('TR138_14_17', 'TR138_17', 'TR138_14'), ('TR138_16_18', 'TR138_16', 'TR138_18'), ('TR138_16_18', 'TR138_18', 'TR138_16'), ('TR138_17_27', 'TR138_17', 'TR138_27'), ('TR138_17_27', 'TR138_27', 'TR138_17'), ('TR138_17_28', 'TR138_17', 'TR138_28'), ('TR138_17_28', 'TR138_28', 'TR138_17'), ('TR138_17_29', 'TR138_17', 'TR138_29'), ('TR138_17_29', 'TR138_29', 'TR138_17'), ('TR138_18_30', 'TR138_18', 'TR138_30'), ('TR138_18_30', 'TR138_30', 'TR138_18'), ('TR138_18_31', 'TR138_18', 'TR138_31'), ('TR138_18_31', 'TR138_31', 'TR138_18'), ('TR138_1_2', 'TR138_1', 'TR138_2'), ('TR138_1_2', 'TR138_2', 'TR138_1'), ('TR138_1_5', 'TR138_1', 'TR138_5'), ('TR138_1_5', 'TR138_5', 'TR138_1'), ('TR138_2_19', 'TR138_19', 'TR138_2'), ('TR138_2_19', 'TR138_2', 'TR138_19'), ('TR138_2_6', 'TR138_2', 'TR138_6'), ('TR138_2_6', 'TR138_6', 'TR138_2'), ('TR138_5_8', 'TR138_5', 'TR138_8'), ('TR138_5_8', 'TR138_8', 'TR138_5'), ('TR138_6_10', 'TR138_10', 'TR138_6'), ('TR138_6_10', 'TR138_6', 'TR138_10'), ('TR138_7_11', 'TR138_11', 'TR138_7'), ('TR138_7_11', 'TR138_7', 'TR138_11'), ('TR138_7_20', 'TR138_20', 'TR138_7'), ('TR138_7_20', 'TR138_7', 'TR138_20'), ('TR138_8_21', 'TR138_21', 'TR138_8'), ('TR138_8_21', 'TR138_8', 'TR138_21'), ('TR138_9_13', 'TR138_13', 'TR138_9'), ('TR138_9_13', 'TR138_9', 'TR138_13'), ('TR138_9_14', 'TR138_14', 'TR138_9'), ('TR138_9_14', 'TR138_9', 'TR138_14'), ('TR139_10_16', 'TR139_10', 'TR139_16'), ('TR139_10_16', 'TR139_16', 'TR139_10'), ('TR139_10_26', 'TR139_10', 'TR139_26'), ('TR139_10_26', 'TR139_26', 'TR139_10'), ('TR139_11_27', 'TR139_11', 'TR139_27'), ('TR139_11_27', 'TR139_27', 'TR139_11'), ('TR139_12_28', 'TR139_12', 'TR139_28'), ('TR139_12_28', 'TR139_28', 'TR139_12'), ('TR139_13_18', 'TR139_13', 'TR139_18'), ('TR139_13_18', 'TR139_18', 'TR139_13'), ('TR139_13_29', 'TR139_13', 'TR139_29'), ('TR139_13_29', 'TR139_29', 'TR139_13'), ('TR139_14_30', 'TR139_14', 'TR139_30'), ('TR139_14_30', 'TR139_30', 'TR139_14'), ('TR139_15_19', 'TR139_15', 'TR139_19'), ('TR139_15_19', 'TR139_19', 'TR139_15'), ('TR139_15_31', 'TR139_15', 'TR139_31'), ('TR139_15_31', 'TR139_31', 'TR139_15'), ('TR139_16_32', 'TR139_16', 'TR139_32'), ('TR139_16_32', 'TR139_32', 'TR139_16'), ('TR139_17_20', 'TR139_17', 'TR139_20'), ('TR139_17_20', 'TR139_20', 'TR139_17'), ('TR139_17_33', 'TR139_17', 'TR139_33'), ('TR139_17_33', 'TR139_33', 'TR139_17'), ('TR139_18_34', 'TR139_18', 'TR139_34'), ('TR139_18_34', 'TR139_34', 'TR139_18'), ('TR139_19_35', 'TR139_19', 'TR139_35'), ('TR139_19_35', 'TR139_35', 'TR139_19'), ('TR139_1_2', 'TR139_1', 'TR139_2'), ('TR139_1_2', 'TR139_2', 'TR139_1'), ('TR139_1_3', 'TR139_1', 'TR139_3'), ('TR139_1_3', 'TR139_3', 'TR139_1'), ('TR139_1_4', 'TR139_1', 'TR139_4'), ('TR139_1_4', 'TR139_4', 'TR139_1'), ('TR139_1_5', 'TR139_1', 'TR139_5'), ('TR139_1_5', 'TR139_5', 'TR139_1'), ('TR139_20_36', 'TR139_20', 'TR139_36'), ('TR139_20_36', 'TR139_36', 'TR139_20'), ('TR139_2_21', 'TR139_2', 'TR139_21'), ('TR139_2_21', 'TR139_21', 'TR139_2'), ('TR139_3_7', 'TR139_3', 'TR139_7'), ('TR139_3_7', 'TR139_7', 'TR139_3'), ('TR139_4_9', 'TR139_4', 'TR139_9'), ('TR139_4_9', 'TR139_9', 'TR139_4'), ('TR139_5_11', 'TR139_11', 'TR139_5'), ('TR139_5_11', 'TR139_5', 'TR139_11'), ('TR139_6_12', 'TR139_12', 'TR139_6'), ('TR139_6_12', 'TR139_6', 'TR139_12'), ('TR139_6_22', 'TR139_22', 'TR139_6'), ('TR139_6_22', 'TR139_6', 'TR139_22'), ('TR139_7_23', 'TR139_23', 'TR139_7'), ('TR139_7_23', 'TR139_7', 'TR139_23'), ('TR139_8_14', 'TR139_14', 'TR139_8'), ('TR139_8_14', 'TR139_8', 'TR139_14'), ('TR139_8_24', 'TR139_24', 'TR139_8'), ('TR139_8_24', 'TR139_8', 'TR139_24'), ('TR139_9_25', 'TR139_25', 'TR139_9'), ('TR139_9_25', 'TR139_9', 'TR139_25'), ('TR140_1_2', 'TR140_1', 'TR140_2'), ('TR140_1_2', 'TR140_2', 'TR140_1'), ('TR140_1_4', 'TR140_1', 'TR140_4'), ('TR140_1_4', 'TR140_4', 'TR140_1'), ('TR140_2_3', 'TR140_2', 'TR140_3'), ('TR140_2_3', 'TR140_3', 'TR140_2'), ('TR140_2_8', 'TR140_2', 'TR140_8'), ('TR140_2_8', 'TR140_8', 'TR140_2'), ('TR140_2_9', 'TR140_2', 'TR140_9'), ('TR140_2_9', 'TR140_9', 'TR140_2'), ('TR140_3_4', 'TR140_3', 'TR140_4'), ('TR140_3_4', 'TR140_4', 'TR140_3'), ('TR140_3_6', 'TR140_3', 'TR140_6'), ('TR140_3_6', 'TR140_6', 'TR140_3'), ('TR140_3_7', 'TR140_3', 'TR140_7'), ('TR140_3_7', 'TR140_7', 'TR140_3'), ('TR140_6_10', 'TR140_10', 'TR140_6'), ('TR140_6_10', 'TR140_6', 'TR140_10'), ('TR140_6_11', 'TR140_11', 'TR140_6'), ('TR140_6_11', 'TR140_6', 'TR140_11'), ('TR140_6_12', 'TR140_12', 'TR140_6'), ('TR140_6_12', 'TR140_6', 'TR140_12'), ('TR140_7_13', 'TR140_13', 'TR140_7'), ('TR140_7_13', 'TR140_7', 'TR140_13'), ('TR140_7_14', 'TR140_14', 'TR140_7'), ('TR140_7_14', 'TR140_7', 'TR140_14'), ('TR140_7_15', 'TR140_15', 'TR140_7'), ('TR140_7_15', 'TR140_7', 'TR140_15'), ('TR141_10_18', 'TR141_10', 'TR141_18'), ('TR141_10_18', 'TR141_18', 'TR141_10'), ('TR141_10_19', 'TR141_10', 'TR141_19'), ('TR141_10_19', 'TR141_19', 'TR141_10'), ('TR141_10_20', 'TR141_10', 'TR141_20'), ('TR141_10_20', 'TR141_20', 'TR141_10'), ('TR141_11_21', 'TR141_11', 'TR141_21'), ('TR141_11_21', 'TR141_21', 'TR141_11'), ('TR141_12_13', 'TR141_12', 'TR141_13'), ('TR141_12_13', 'TR141_13', 'TR141_12'), ('TR141_12_22', 'TR141_12', 'TR141_22'), ('TR141_12_22', 'TR141_22', 'TR141_12'), ('TR141_13_23', 'TR141_13', 'TR141_23'), ('TR141_13_23', 'TR141_23', 'TR141_13'), ('TR141_2_3', 'TR141_2', 'TR141_3'), ('TR141_2_3', 'TR141_3', 'TR141_2'), ('TR141_2_4', 'TR141_2', 'TR141_4'), ('TR141_2_4', 'TR141_4', 'TR141_2'), ('TR141_3_5', 'TR141_3', 'TR141_5'), ('TR141_3_5', 'TR141_5', 'TR141_3'), ('TR141_3_6', 'TR141_3', 'TR141_6'), ('TR141_3_6', 'TR141_6', 'TR141_3'), ('TR141_4_14', 'TR141_14', 'TR141_4'), ('TR141_4_14', 'TR141_4', 'TR141_14'), ('TR141_4_15', 'TR141_15', 'TR141_4'), ('TR141_4_15', 'TR141_4', 'TR141_15'), ('TR141_4_7', 'TR141_4', 'TR141_7'), ('TR141_4_7', 'TR141_7', 'TR141_4'), ('TR141_6_9', 'TR141_6', 'TR141_9'), ('TR141_6_9', 'TR141_9', 'TR141_6'), ('TR141_7_10', 'TR141_10', 'TR141_7'), ('TR141_7_10', 'TR141_7', 'TR141_10'), ('TR141_8_11', 'TR141_11', 'TR141_8'), ('TR141_8_11', 'TR141_8', 'TR141_11'), ('TR141_8_16', 'TR141_16', 'TR141_8'), ('TR141_8_16', 'TR141_8', 'TR141_16'), ('TR141_9_17', 'TR141_17', 'TR141_9'), ('TR141_9_17', 'TR141_9', 'TR141_17'), ('TR142_10_19', 'TR142_10', 'TR142_19'), ('TR142_10_19', 'TR142_19', 'TR142_10'), ('TR142_10_20', 'TR142_10', 'TR142_20'), ('TR142_10_20', 'TR142_20', 'TR142_10'), ('TR142_10_21', 'TR142_10', 'TR142_21'), ('TR142_10_21', 'TR142_21', 'TR142_10'), ('TR142_1_2', 'TR142_1', 'TR142_2'), ('TR142_1_2', 'TR142_2', 'TR142_1'), ('TR142_1_3', 'TR142_1', 'TR142_3'), ('TR142_1_3', 'TR142_3', 'TR142_1'), ('TR142_2_11', 'TR142_11', 'TR142_2'), ('TR142_2_11', 'TR142_2', 'TR142_11'), ('TR142_2_12', 'TR142_12', 'TR142_2'), ('TR142_2_12', 'TR142_2', 'TR142_12'), ('TR142_2_13', 'TR142_13', 'TR142_2'), ('TR142_2_13', 'TR142_2', 'TR142_13'), ('TR142_3_5', 'TR142_3', 'TR142_5'), ('TR142_3_5', 'TR142_5', 'TR142_3'), ('TR142_4_6', 'TR142_4', 'TR142_6'), ('TR142_4_6', 'TR142_6', 'TR142_4'), ('TR142_4_7', 'TR142_4', 'TR142_7'), ('TR142_4_7', 'TR142_7', 'TR142_4'), ('TR142_5_14', 'TR142_14', 'TR142_5'), ('TR142_5_14', 'TR142_5', 'TR142_14'), ('TR142_6_15', 'TR142_15', 'TR142_6'), ('TR142_6_15', 'TR142_6', 'TR142_15'), ('TR142_6_16', 'TR142_16', 'TR142_6'), ('TR142_6_16', 'TR142_6', 'TR142_16'), ('TR142_7_17', 'TR142_17', 'TR142_7'), ('TR142_7_17', 'TR142_7', 'TR142_17'), ('TR142_8_18', 'TR142_18', 'TR142_8'), ('TR142_8_18', 'TR142_8', 'TR142_18'), ('TR142_8_9', 'TR142_8', 'TR142_9'), ('TR142_8_9', 'TR142_9', 'TR142_8'), ('TR142_9_10', 'TR142_10', 'TR142_9'), ('TR142_9_10', 'TR142_9', 'TR142_10'), ('TR143_10_12', 'TR143_10', 'TR143_12'), ('TR143_10_12', 'TR143_12', 'TR143_10'), ('TR143_10_19', 'TR143_10', 'TR143_19'), ('TR143_10_19', 'TR143_19', 'TR143_10'), ('TR143_11_20', 'TR143_11', 'TR143_20'), ('TR143_11_20', 'TR143_20', 'TR143_11'), ('TR143_11_21', 'TR143_11', 'TR143_21'), ('TR143_11_21', 'TR143_21', 'TR143_11'), ('TR143_12_22', 'TR143_12', 'TR143_22'), ('TR143_12_22', 'TR143_22', 'TR143_12'), ('TR143_1_13', 'TR143_1', 'TR143_13'), ('TR143_1_13', 'TR143_13', 'TR143_1'), ('TR143_1_14', 'TR143_1', 'TR143_14'), ('TR143_1_14', 'TR143_14', 'TR143_1'), ('TR143_1_2', 'TR143_1', 'TR143_2'), ('TR143_1_2', 'TR143_2', 'TR143_1'), ('TR143_2_4', 'TR143_2', 'TR143_4'), ('TR143_2_4', 'TR143_4', 'TR143_2'), ('TR143_3_5', 'TR143_3', 'TR143_5'), ('TR143_3_5', 'TR143_5', 'TR143_3'), ('TR143_3_6', 'TR143_3', 'TR143_6'), ('TR143_3_6', 'TR143_6', 'TR143_3'), ('TR143_4_15', 'TR143_15', 'TR143_4'), ('TR143_4_15', 'TR143_4', 'TR143_15'), ('TR143_5_8', 'TR143_5', 'TR143_8'), ('TR143_5_8', 'TR143_8', 'TR143_5'), ('TR143_6_16', 'TR143_16', 'TR143_6'), ('TR143_6_16', 'TR143_6', 'TR143_16'), ('TR143_7_17', 'TR143_17', 'TR143_7'), ('TR143_7_17', 'TR143_7', 'TR143_17'), ('TR143_7_9', 'TR143_7', 'TR143_9'), ('TR143_7_9', 'TR143_9', 'TR143_7'), ('TR143_8_11', 'TR143_11', 'TR143_8'), ('TR143_8_11', 'TR143_8', 'TR143_11'), ('TR143_9_18', 'TR143_18', 'TR143_9'), ('TR143_9_18', 'TR143_9', 'TR143_18'), ('TR144_10_20', 'TR144_10', 'TR144_20'), ('TR144_10_20', 'TR144_20', 'TR144_10'), ('TR144_11_15', 'TR144_11', 'TR144_15'), ('TR144_11_15', 'TR144_15', 'TR144_11'), ('TR144_11_16', 'TR144_11', 'TR144_16'), ('TR144_11_16', 'TR144_16', 'TR144_11'), ('TR144_12_21', 'TR144_12', 'TR144_21'), ('TR144_12_21', 'TR144_21', 'TR144_12'), ('TR144_13_17', 'TR144_13', 'TR144_17'), ('TR144_13_17', 'TR144_17', 'TR144_13'), ('TR144_13_22', 'TR144_13', 'TR144_22'), ('TR144_13_22', 'TR144_22', 'TR144_13'), ('TR144_15_23', 'TR144_15', 'TR144_23'), ('TR144_15_23', 'TR144_23', 'TR144_15'), ('TR144_16_24', 'TR144_16', 'TR144_24'), ('TR144_16_24', 'TR144_24', 'TR144_16'), ('TR144_16_25', 'TR144_16', 'TR144_25'), ('TR144_16_25', 'TR144_25', 'TR144_16'), ('TR144_17_26', 'TR144_17', 'TR144_26'), ('TR144_17_26', 'TR144_26', 'TR144_17'), ('TR144_2_3', 'TR144_2', 'TR144_3'), ('TR144_2_3', 'TR144_3', 'TR144_2'), ('TR144_2_4', 'TR144_2', 'TR144_4'), ('TR144_2_4', 'TR144_4', 'TR144_2'), ('TR144_3_6', 'TR144_3', 'TR144_6'), ('TR144_3_6', 'TR144_6', 'TR144_3'), ('TR144_4_8', 'TR144_4', 'TR144_8'), ('TR144_4_8', 'TR144_8', 'TR144_4'), ('TR144_5_10', 'TR144_10', 'TR144_5'), ('TR144_5_10', 'TR144_5', 'TR144_10'), ('TR144_5_9', 'TR144_5', 'TR144_9'), ('TR144_5_9', 'TR144_9', 'TR144_5'), ('TR144_6_18', 'TR144_18', 'TR144_6'), ('TR144_6_18', 'TR144_6', 'TR144_18'), ('TR144_7_12', 'TR144_12', 'TR144_7'), ('TR144_7_12', 'TR144_7', 'TR144_12'), ('TR144_7_9', 'TR144_7', 'TR144_9'), ('TR144_7_9', 'TR144_9', 'TR144_7'), ('TR144_8_19', 'TR144_19', 'TR144_8'), ('TR144_8_19', 'TR144_8', 'TR144_19'), ('TR145_1_10', 'TR145_1', 'TR145_10'), ('TR145_1_10', 'TR145_10', 'TR145_1'), ('TR145_1_6', 'TR145_1', 'TR145_6'), ('TR145_1_6', 'TR145_6', 'TR145_1'), ('TR145_2_11', 'TR145_11', 'TR145_2'), ('TR145_2_11', 'TR145_2', 'TR145_11'), ('TR145_2_3', 'TR145_2', 'TR145_3'), ('TR145_2_3', 'TR145_3', 'TR145_2'), ('TR145_3_8', 'TR145_3', 'TR145_8'), ('TR145_3_8', 'TR145_8', 'TR145_3'), ('TR145_4_5', 'TR145_4', 'TR145_5'), ('TR145_4_5', 'TR145_5', 'TR145_4'), ('TR145_4_9', 'TR145_4', 'TR145_9'), ('TR145_4_9', 'TR145_9', 'TR145_4'), ('TR145_5_12', 'TR145_12', 'TR145_5'), ('TR145_5_12', 'TR145_5', 'TR145_12'), ('TR145_6_7', 'TR145_6', 'TR145_7'), ('TR145_6_7', 'TR145_7', 'TR145_6'), ('TR145_7_13', 'TR145_13', 'TR145_7'), ('TR145_7_13', 'TR145_7', 'TR145_13'), ('TR145_7_14', 'TR145_14', 'TR145_7'), ('TR145_7_14', 'TR145_7', 'TR145_14'), ('TR145_8_15', 'TR145_15', 'TR145_8'), ('TR145_8_15', 'TR145_8', 'TR145_15'), ('TR145_8_16', 'TR145_16', 'TR145_8'), ('TR145_8_16', 'TR145_8', 'TR145_16'), ('TR145_8_17', 'TR145_17', 'TR145_8'), ('TR145_8_17', 'TR145_8', 'TR145_17'), ('TR146_10_11', 'TR146_10', 'TR146_11'), ('TR146_10_11', 'TR146_11', 'TR146_10'), ('TR146_10_18', 'TR146_10', 'TR146_18'), ('TR146_10_18', 'TR146_18', 'TR146_10'), ('TR146_10_19', 'TR146_10', 'TR146_19'), ('TR146_10_19', 'TR146_19', 'TR146_10'), ('TR146_11_20', 'TR146_11', 'TR146_20'), ('TR146_11_20', 'TR146_20', 'TR146_11'), ('TR146_11_21', 'TR146_11', 'TR146_21'), ('TR146_11_21', 'TR146_21', 'TR146_11'), ('TR146_11_22', 'TR146_11', 'TR146_22'), ('TR146_11_22', 'TR146_22', 'TR146_11'), ('TR146_12_13', 'TR146_12', 'TR146_13'), ('TR146_12_13', 'TR146_13', 'TR146_12'), ('TR146_1_15', 'TR146_1', 'TR146_15'), ('TR146_1_15', 'TR146_15', 'TR146_1'), ('TR146_1_2', 'TR146_1', 'TR146_2'), ('TR146_1_2', 'TR146_2', 'TR146_1'), ('TR146_3_4', 'TR146_3', 'TR146_4'), ('TR146_3_4', 'TR146_4', 'TR146_3'), ('TR146_3_6', 'TR146_3', 'TR146_6'), ('TR146_3_6', 'TR146_6', 'TR146_3'), ('TR146_4_5', 'TR146_4', 'TR146_5'), ('TR146_4_5', 'TR146_5', 'TR146_4'), ('TR146_5_12', 'TR146_12', 'TR146_5'), ('TR146_5_12', 'TR146_5', 'TR146_12'), ('TR146_6_16', 'TR146_16', 'TR146_6'), ('TR146_6_16', 'TR146_6', 'TR146_16'), ('TR146_6_7', 'TR146_6', 'TR146_7'), ('TR146_6_7', 'TR146_7', 'TR146_6'), ('TR146_7_8', 'TR146_7', 'TR146_8'), ('TR146_7_8', 'TR146_8', 'TR146_7'), ('TR146_8_10', 'TR146_10', 'TR146_8'), ('TR146_8_10', 'TR146_8', 'TR146_10'), ('TR146_8_17', 'TR146_17', 'TR146_8'), ('TR146_8_17', 'TR146_8', 'TR146_17'), ('TR147_10_12', 'TR147_10', 'TR147_12'), ('TR147_10_12', 'TR147_12', 'TR147_10'), ('TR147_11_22', 'TR147_11', 'TR147_22'), ('TR147_11_22', 'TR147_22', 'TR147_11'), ('TR147_12_23', 'TR147_12', 'TR147_23'), ('TR147_12_23', 'TR147_23', 'TR147_12'), ('TR147_12_24', 'TR147_12', 'TR147_24'), ('TR147_12_24', 'TR147_24', 'TR147_12'), ('TR147_12_25', 'TR147_12', 'TR147_25'), ('TR147_12_25', 'TR147_25', 'TR147_12'), ('TR147_13_26', 'TR147_13', 'TR147_26'), ('TR147_13_26', 'TR147_26', 'TR147_13'), ('TR147_13_27', 'TR147_13', 'TR147_27'), ('TR147_13_27', 'TR147_27', 'TR147_13'), ('TR147_13_28', 'TR147_13', 'TR147_28'), ('TR147_13_28', 'TR147_28', 'TR147_13'), ('TR147_14_15', 'TR147_14', 'TR147_15'), ('TR147_14_15', 'TR147_15', 'TR147_14'), ('TR147_14_16', 'TR147_14', 'TR147_16'), ('TR147_14_16', 'TR147_16', 'TR147_14'), ('TR147_15_29', 'TR147_15', 'TR147_29'), ('TR147_15_29', 'TR147_29', 'TR147_15'), ('TR147_15_30', 'TR147_15', 'TR147_30'), ('TR147_15_30', 'TR147_30', 'TR147_15'), ('TR147_15_31', 'TR147_15', 'TR147_31'), ('TR147_15_31', 'TR147_31', 'TR147_15'), ('TR147_16_32', 'TR147_16', 'TR147_32'), ('TR147_16_32', 'TR147_32', 'TR147_16'), ('TR147_16_33', 'TR147_16', 'TR147_33'), ('TR147_16_33', 'TR147_33', 'TR147_16'), ('TR147_16_34', 'TR147_16', 'TR147_34'), ('TR147_16_34', 'TR147_34', 'TR147_16'), ('TR147_2_3', 'TR147_2', 'TR147_3'), ('TR147_2_3', 'TR147_3', 'TR147_2'), ('TR147_2_5', 'TR147_2', 'TR147_5'), ('TR147_2_5', 'TR147_5', 'TR147_2'), ('TR147_3_17', 'TR147_17', 'TR147_3'), ('TR147_3_17', 'TR147_3', 'TR147_17'), ('TR147_3_4', 'TR147_3', 'TR147_4'), ('TR147_3_4', 'TR147_4', 'TR147_3'), ('TR147_4_18', 'TR147_18', 'TR147_4'), ('TR147_4_18', 'TR147_4', 'TR147_18'), ('TR147_4_19', 'TR147_19', 'TR147_4'), ('TR147_4_19', 'TR147_4', 'TR147_19'), ('TR147_4_20', 'TR147_20', 'TR147_4'), ('TR147_4_20', 'TR147_4', 'TR147_20'), ('TR147_5_6', 'TR147_5', 'TR147_6'), ('TR147_5_6', 'TR147_6', 'TR147_5'), ('TR147_6_11', 'TR147_11', 'TR147_6'), ('TR147_6_11', 'TR147_6', 'TR147_11'), ('TR147_7_21', 'TR147_21', 'TR147_7'), ('TR147_7_21', 'TR147_7', 'TR147_21'), ('TR147_7_8', 'TR147_7', 'TR147_8'), ('TR147_7_8', 'TR147_8', 'TR147_7'), ('TR147_8_13', 'TR147_13', 'TR147_8'), ('TR147_8_13', 'TR147_8', 'TR147_13'), ('TR147_9_10', 'TR147_10', 'TR147_9'), ('TR147_9_10', 'TR147_9', 'TR147_10'), ('TR147_9_14', 'TR147_14', 'TR147_9'), ('TR147_9_14', 'TR147_9', 'TR147_14'), ('TR148_10_18', 'TR148_10', 'TR148_18'), ('TR148_10_18', 'TR148_18', 'TR148_10'), ('TR148_1_11', 'TR148_1', 'TR148_11'), ('TR148_1_11', 'TR148_11', 'TR148_1'), ('TR148_1_2', 'TR148_1', 'TR148_2'), ('TR148_1_2', 'TR148_2', 'TR148_1'), ('TR148_1_3', 'TR148_1', 'TR148_3'), ('TR148_1_3', 'TR148_3', 'TR148_1'), ('TR148_2_4', 'TR148_2', 'TR148_4'), ('TR148_2_4', 'TR148_4', 'TR148_2'), ('TR148_3_7', 'TR148_3', 'TR148_7'), ('TR148_3_7', 'TR148_7', 'TR148_3'), ('TR148_4_12', 'TR148_12', 'TR148_4'), ('TR148_4_12', 'TR148_4', 'TR148_12'), ('TR148_4_13', 'TR148_13', 'TR148_4'), ('TR148_4_13', 'TR148_4', 'TR148_13'), ('TR148_6_14', 'TR148_14', 'TR148_6'), ('TR148_6_14', 'TR148_6', 'TR148_14'), ('TR148_6_8', 'TR148_6', 'TR148_8'), ('TR148_6_8', 'TR148_8', 'TR148_6'), ('TR148_7_15', 'TR148_15', 'TR148_7'), ('TR148_7_15', 'TR148_7', 'TR148_15'), ('TR148_8_16', 'TR148_16', 'TR148_8'), ('TR148_8_16', 'TR148_8', 'TR148_16'), ('TR148_9_10', 'TR148_10', 'TR148_9'), ('TR148_9_10', 'TR148_9', 'TR148_10'), ('TR148_9_17', 'TR148_17', 'TR148_9'), ('TR148_9_17', 'TR148_9', 'TR148_17'), ('TR149_1_2', 'TR149_1', 'TR149_2'), ('TR149_1_2', 'TR149_2', 'TR149_1'), ('TR149_1_3', 'TR149_1', 'TR149_3'), ('TR149_1_3', 'TR149_3', 'TR149_1'), ('TR149_2_5', 'TR149_2', 'TR149_5'), ('TR149_2_5', 'TR149_5', 'TR149_2'), ('TR149_2_9', 'TR149_2', 'TR149_9'), ('TR149_2_9', 'TR149_9', 'TR149_2'), ('TR149_3_10', 'TR149_10', 'TR149_3'), ('TR149_3_10', 'TR149_3', 'TR149_10'), ('TR149_3_6', 'TR149_3', 'TR149_6'), ('TR149_3_6', 'TR149_6', 'TR149_3'), ('TR149_5_11', 'TR149_11', 'TR149_5'), ('TR149_5_11', 'TR149_5', 'TR149_11'), ('TR149_5_12', 'TR149_12', 'TR149_5'), ('TR149_5_12', 'TR149_5', 'TR149_12'), ('TR149_5_7', 'TR149_5', 'TR149_7'), ('TR149_5_7', 'TR149_7', 'TR149_5'), ('TR149_6_13', 'TR149_13', 'TR149_6'), ('TR149_6_13', 'TR149_6', 'TR149_13'), ('TR149_6_14', 'TR149_14', 'TR149_6'), ('TR149_6_14', 'TR149_6', 'TR149_14'), ('TR149_6_8', 'TR149_6', 'TR149_8'), ('TR149_6_8', 'TR149_8', 'TR149_6'), ('TR149_7_15', 'TR149_15', 'TR149_7'), ('TR149_7_15', 'TR149_7', 'TR149_15'), ('TR149_7_16', 'TR149_16', 'TR149_7'), ('TR149_7_16', 'TR149_7', 'TR149_16'), ('TR149_7_17', 'TR149_17', 'TR149_7'), ('TR149_7_17', 'TR149_7', 'TR149_17'), ('TR149_8_18', 'TR149_18', 'TR149_8'), ('TR149_8_18', 'TR149_8', 'TR149_18'), ('TR149_8_19', 'TR149_19', 'TR149_8'), ('TR149_8_19', 'TR149_8', 'TR149_19'), ('TR149_8_20', 'TR149_20', 'TR149_8'), ('TR149_8_20', 'TR149_8', 'TR149_20'), ('TR150_10_12', 'TR150_10', 'TR150_12'), ('TR150_10_12', 'TR150_12', 'TR150_10'), ('TR150_10_13', 'TR150_10', 'TR150_13'), ('TR150_10_13', 'TR150_13', 'TR150_10'), ('TR150_11_14', 'TR150_11', 'TR150_14'), ('TR150_11_14', 'TR150_14', 'TR150_11'), ('TR150_11_15', 'TR150_11', 'TR150_15'), ('TR150_11_15', 'TR150_15', 'TR150_11'), ('TR150_11_16', 'TR150_11', 'TR150_16'), ('TR150_11_16', 'TR150_16', 'TR150_11'), ('TR150_12_28', 'TR150_12', 'TR150_28'), ('TR150_12_28', 'TR150_28', 'TR150_12'), ('TR150_13_29', 'TR150_13', 'TR150_29'), ('TR150_13_29', 'TR150_29', 'TR150_13'), ('TR150_13_30', 'TR150_13', 'TR150_30'), ('TR150_13_30', 'TR150_30', 'TR150_13'), ('TR150_13_31', 'TR150_13', 'TR150_31'), ('TR150_13_31', 'TR150_31', 'TR150_13'), ('TR150_14_32', 'TR150_14', 'TR150_32'), ('TR150_14_32', 'TR150_32', 'TR150_14'), ('TR150_14_33', 'TR150_14', 'TR150_33'), ('TR150_14_33', 'TR150_33', 'TR150_14'), ('TR150_14_34', 'TR150_14', 'TR150_34'), ('TR150_14_34', 'TR150_34', 'TR150_14'), ('TR150_15_35', 'TR150_15', 'TR150_35'), ('TR150_15_35', 'TR150_35', 'TR150_15'), ('TR150_15_36', 'TR150_15', 'TR150_36'), ('TR150_15_36', 'TR150_36', 'TR150_15'), ('TR150_15_37', 'TR150_15', 'TR150_37'), ('TR150_15_37', 'TR150_37', 'TR150_15'), ('TR150_16_38', 'TR150_16', 'TR150_38'), ('TR150_16_38', 'TR150_38', 'TR150_16'), ('TR150_16_39', 'TR150_16', 'TR150_39'), ('TR150_16_39', 'TR150_39', 'TR150_16'), ('TR150_16_40', 'TR150_16', 'TR150_40'), ('TR150_16_40', 'TR150_40', 'TR150_16'), ('TR150_1_2', 'TR150_1', 'TR150_2'), ('TR150_1_2', 'TR150_2', 'TR150_1'), ('TR150_1_3', 'TR150_1', 'TR150_3'), ('TR150_1_3', 'TR150_3', 'TR150_1'), ('TR150_1_4', 'TR150_1', 'TR150_4'), ('TR150_1_4', 'TR150_4', 'TR150_1'), ('TR150_1_5', 'TR150_1', 'TR150_5'), ('TR150_1_5', 'TR150_5', 'TR150_1'), ('TR150_2_17', 'TR150_17', 'TR150_2'), ('TR150_2_17', 'TR150_2', 'TR150_17'), ('TR150_2_18', 'TR150_18', 'TR150_2'), ('TR150_2_18', 'TR150_2', 'TR150_18'), ('TR150_2_19', 'TR150_19', 'TR150_2'), ('TR150_2_19', 'TR150_2', 'TR150_19'), ('TR150_3_20', 'TR150_20', 'TR150_3'), ('TR150_3_20', 'TR150_3', 'TR150_20'), ('TR150_3_21', 'TR150_21', 'TR150_3'), ('TR150_3_21', 'TR150_3', 'TR150_21'), ('TR150_3_22', 'TR150_22', 'TR150_3'), ('TR150_3_22', 'TR150_3', 'TR150_22'), ('TR150_4_23', 'TR150_23', 'TR150_4'), ('TR150_4_23', 'TR150_4', 'TR150_23'), ('TR150_4_24', 'TR150_24', 'TR150_4'), ('TR150_4_24', 'TR150_4', 'TR150_24'), ('TR150_4_25', 'TR150_25', 'TR150_4'), ('TR150_4_25', 'TR150_4', 'TR150_25'), ('TR150_5_7', 'TR150_5', 'TR150_7'), ('TR150_5_7', 'TR150_7', 'TR150_5'), ('TR150_6_8', 'TR150_6', 'TR150_8'), ('TR150_6_8', 'TR150_8', 'TR150_6'), ('TR150_6_9', 'TR150_6', 'TR150_9'), ('TR150_6_9', 'TR150_9', 'TR150_6'), ('TR150_7_26', 'TR150_26', 'TR150_7'), ('TR150_7_26', 'TR150_7', 'TR150_26'), ('TR150_8_27', 'TR150_27', 'TR150_8'), ('TR150_8_27', 'TR150_8', 'TR150_27'), ('TR150_9_11', 'TR150_11', 'TR150_9'), ('TR150_9_11', 'TR150_9', 'TR150_11'), ('TR151_14_15', 'TR151_14', 'TR151_15'), ('TR151_14_15', 'TR151_15', 'TR151_14'), ('TR151_14_16', 'TR151_14', 'TR151_16'), ('TR151_14_16', 'TR151_16', 'TR151_14'), ('TR151_14_17', 'TR151_14', 'TR151_17'), ('TR151_14_17', 'TR151_17', 'TR151_14'), ('TR151_14_18', 'TR151_14', 'TR151_18'), ('TR151_14_18', 'TR151_18', 'TR151_14'), ('TR151_19_21', 'TR151_19', 'TR151_21'), ('TR151_19_21', 'TR151_21', 'TR151_19'), ('TR151_19_25', 'TR151_19', 'TR151_25'), ('TR151_19_25', 'TR151_25', 'TR151_19'), ('TR151_1_2', 'TR151_1', 'TR151_2'), ('TR151_1_2', 'TR151_2', 'TR151_1'), ('TR151_1_3', 'TR151_1', 'TR151_3'), ('TR151_1_3', 'TR151_3', 'TR151_1'), ('TR151_1_4', 'TR151_1', 'TR151_4'), ('TR151_1_4', 'TR151_4', 'TR151_1'), ('TR151_21_22', 'TR151_21', 'TR151_22'), ('TR151_21_22', 'TR151_22', 'TR151_21'), ('TR151_22_23', 'TR151_22', 'TR151_23'), ('TR151_22_23', 'TR151_23', 'TR151_22'), ('TR151_22_24', 'TR151_22', 'TR151_24'), ('TR151_22_24', 'TR151_24', 'TR151_22'), ('TR151_23_26', 'TR151_23', 'TR151_26'), ('TR151_23_26', 'TR151_26', 'TR151_23'), ('TR151_23_27', 'TR151_23', 'TR151_27'), ('TR151_23_27', 'TR151_27', 'TR151_23'), ('TR151_23_28', 'TR151_23', 'TR151_28'), ('TR151_23_28', 'TR151_28', 'TR151_23'), ('TR151_24_29', 'TR151_24', 'TR151_29'), ('TR151_24_29', 'TR151_29', 'TR151_24'), ('TR151_24_30', 'TR151_24', 'TR151_30'), ('TR151_24_30', 'TR151_30', 'TR151_24'), ('TR151_24_31', 'TR151_24', 'TR151_31'), ('TR151_24_31', 'TR151_31', 'TR151_24'), ('TR151_2_7', 'TR151_2', 'TR151_7'), ('TR151_2_7', 'TR151_7', 'TR151_2'), ('TR151_2_8', 'TR151_2', 'TR151_8'), ('TR151_2_8', 'TR151_8', 'TR151_2'), ('TR151_2_9', 'TR151_2', 'TR151_9'), ('TR151_2_9', 'TR151_9', 'TR151_2'), ('TR151_3_10', 'TR151_10', 'TR151_3'), ('TR151_3_10', 'TR151_3', 'TR151_10'), ('TR151_3_11', 'TR151_11', 'TR151_3'), ('TR151_3_11', 'TR151_3', 'TR151_11'), ('TR151_3_12', 'TR151_12', 'TR151_3'), ('TR151_3_12', 'TR151_3', 'TR151_12'), ('TR151_4_5', 'TR151_4', 'TR151_5'), ('TR151_4_5', 'TR151_5', 'TR151_4'), ('TR151_5_13', 'TR151_13', 'TR151_5'), ('TR151_5_13', 'TR151_5', 'TR151_13'), ('TR152_1_3', 'TR152_1', 'TR152_3'), ('TR152_1_3', 'TR152_3', 'TR152_1'), ('TR152_1_4', 'TR152_1', 'TR152_4'), ('TR152_1_4', 'TR152_4', 'TR152_1'), ('TR152_20_21', 'TR152_20', 'TR152_21'), ('TR152_20_21', 'TR152_21', 'TR152_20'), ('TR152_20_22', 'TR152_20', 'TR152_22'), ('TR152_20_22', 'TR152_22', 'TR152_20'), ('TR152_23_24', 'TR152_23', 'TR152_24'), ('TR152_23_24', 'TR152_24', 'TR152_23'), ('TR152_23_26', 'TR152_23', 'TR152_26'), ('TR152_23_26', 'TR152_26', 'TR152_23'), ('TR152_24_31', 'TR152_24', 'TR152_31'), ('TR152_24_31', 'TR152_31', 'TR152_24'), ('TR152_26_27', 'TR152_26', 'TR152_27'), ('TR152_26_27', 'TR152_27', 'TR152_26'), ('TR152_26_28', 'TR152_26', 'TR152_28'), ('TR152_26_28', 'TR152_28', 'TR152_26'), ('TR152_27_30', 'TR152_27', 'TR152_30'), ('TR152_27_30', 'TR152_30', 'TR152_27'), ('TR152_27_32', 'TR152_27', 'TR152_32'), ('TR152_27_32', 'TR152_32', 'TR152_27'), ('TR152_27_33', 'TR152_27', 'TR152_33'), ('TR152_27_33', 'TR152_33', 'TR152_27'), ('TR152_28_29', 'TR152_28', 'TR152_29'), ('TR152_28_29', 'TR152_29', 'TR152_28'), ('TR152_28_34', 'TR152_28', 'TR152_34'), ('TR152_28_34', 'TR152_34', 'TR152_28'), ('TR152_28_35', 'TR152_28', 'TR152_35'), ('TR152_28_35', 'TR152_35', 'TR152_28'), ('TR152_29_36', 'TR152_29', 'TR152_36'), ('TR152_29_36', 'TR152_36', 'TR152_29'), ('TR152_29_37', 'TR152_29', 'TR152_37'), ('TR152_29_37', 'TR152_37', 'TR152_29'), ('TR152_29_38', 'TR152_29', 'TR152_38'), ('TR152_29_38', 'TR152_38', 'TR152_29'), ('TR152_30_39', 'TR152_30', 'TR152_39'), ('TR152_30_39', 'TR152_39', 'TR152_30'), ('TR152_30_40', 'TR152_30', 'TR152_40'), ('TR152_30_40', 'TR152_40', 'TR152_30'), ('TR152_30_41', 'TR152_30', 'TR152_41'), ('TR152_30_41', 'TR152_41', 'TR152_30'), ('TR152_3_9', 'TR152_3', 'TR152_9'), ('TR152_3_9', 'TR152_9', 'TR152_3'), ('TR152_42_43', 'TR152_42', 'TR152_43'), ('TR152_42_43', 'TR152_43', 'TR152_42'), ('TR152_42_45', 'TR152_42', 'TR152_45'), ('TR152_42_45', 'TR152_45', 'TR152_42'), ('TR152_43_50', 'TR152_43', 'TR152_50'), ('TR152_43_50', 'TR152_50', 'TR152_43'), ('TR152_45_46', 'TR152_45', 'TR152_46'), ('TR152_45_46', 'TR152_46', 'TR152_45'), ('TR152_45_47', 'TR152_45', 'TR152_47'), ('TR152_45_47', 'TR152_47', 'TR152_45'), ('TR152_46_49', 'TR152_46', 'TR152_49'), ('TR152_46_49', 'TR152_49', 'TR152_46'), ('TR152_46_51', 'TR152_46', 'TR152_51'), ('TR152_46_51', 'TR152_51', 'TR152_46'), ('TR152_46_52', 'TR152_46', 'TR152_52'), ('TR152_46_52', 'TR152_52', 'TR152_46'), ('TR152_47_48', 'TR152_47', 'TR152_48'), ('TR152_47_48', 'TR152_48', 'TR152_47'), ('TR152_47_53', 'TR152_47', 'TR152_53'), ('TR152_47_53', 'TR152_53', 'TR152_47'), ('TR152_47_54', 'TR152_47', 'TR152_54'), ('TR152_47_54', 'TR152_54', 'TR152_47'), ('TR152_48_55', 'TR152_48', 'TR152_55'), ('TR152_48_55', 'TR152_55', 'TR152_48'), ('TR152_48_56', 'TR152_48', 'TR152_56'), ('TR152_48_56', 'TR152_56', 'TR152_48'), ('TR152_48_57', 'TR152_48', 'TR152_57'), ('TR152_48_57', 'TR152_57', 'TR152_48'), ('TR152_49_58', 'TR152_49', 'TR152_58'), ('TR152_49_58', 'TR152_58', 'TR152_49'), ('TR152_49_59', 'TR152_49', 'TR152_59'), ('TR152_49_59', 'TR152_59', 'TR152_49'), ('TR152_49_60', 'TR152_49', 'TR152_60'), ('TR152_49_60', 'TR152_60', 'TR152_49'), ('TR152_4_5', 'TR152_4', 'TR152_5'), ('TR152_4_5', 'TR152_5', 'TR152_4'), ('TR152_4_6', 'TR152_4', 'TR152_6'), ('TR152_4_6', 'TR152_6', 'TR152_4'), ('TR152_5_10', 'TR152_10', 'TR152_5'), ('TR152_5_10', 'TR152_5', 'TR152_10'), ('TR152_5_11', 'TR152_11', 'TR152_5'), ('TR152_5_11', 'TR152_5', 'TR152_11'), ('TR152_5_7', 'TR152_5', 'TR152_7'), ('TR152_5_7', 'TR152_7', 'TR152_5'), ('TR152_61_62', 'TR152_61', 'TR152_62'), ('TR152_61_62', 'TR152_62', 'TR152_61'), ('TR152_61_64', 'TR152_61', 'TR152_64'), ('TR152_61_64', 'TR152_64', 'TR152_61'), ('TR152_62_69', 'TR152_62', 'TR152_69'), ('TR152_62_69', 'TR152_69', 'TR152_62'), ('TR152_64_65', 'TR152_64', 'TR152_65'), ('TR152_64_65', 'TR152_65', 'TR152_64'), ('TR152_64_66', 'TR152_64', 'TR152_66'), ('TR152_64_66', 'TR152_66', 'TR152_64'), ('TR152_65_68', 'TR152_65', 'TR152_68'), ('TR152_65_68', 'TR152_68', 'TR152_65'), ('TR152_65_70', 'TR152_65', 'TR152_70'), ('TR152_65_70', 'TR152_70', 'TR152_65'), ('TR152_65_71', 'TR152_65', 'TR152_71'), ('TR152_65_71', 'TR152_71', 'TR152_65'), ('TR152_66_67', 'TR152_66', 'TR152_67'), ('TR152_66_67', 'TR152_67', 'TR152_66'), ('TR152_66_72', 'TR152_66', 'TR152_72'), ('TR152_66_72', 'TR152_72', 'TR152_66'), ('TR152_66_73', 'TR152_66', 'TR152_73'), ('TR152_66_73', 'TR152_73', 'TR152_66'), ('TR152_67_74', 'TR152_67', 'TR152_74'), ('TR152_67_74', 'TR152_74', 'TR152_67'), ('TR152_67_75', 'TR152_67', 'TR152_75'), ('TR152_67_75', 'TR152_75', 'TR152_67'), ('TR152_67_76', 'TR152_67', 'TR152_76'), ('TR152_67_76', 'TR152_76', 'TR152_67'), ('TR152_68_77', 'TR152_68', 'TR152_77'), ('TR152_68_77', 'TR152_77', 'TR152_68'), ('TR152_68_78', 'TR152_68', 'TR152_78'), ('TR152_68_78', 'TR152_78', 'TR152_68'), ('TR152_68_79', 'TR152_68', 'TR152_79'), ('TR152_68_79', 'TR152_79', 'TR152_68'), ('TR152_6_12', 'TR152_12', 'TR152_6'), ('TR152_6_12', 'TR152_6', 'TR152_12'), ('TR152_6_13', 'TR152_13', 'TR152_6'), ('TR152_6_13', 'TR152_6', 'TR152_13'), ('TR152_6_8', 'TR152_6', 'TR152_8'), ('TR152_6_8', 'TR152_8', 'TR152_6'), ('TR152_7_14', 'TR152_14', 'TR152_7'), ('TR152_7_14', 'TR152_7', 'TR152_14'), ('TR152_7_15', 'TR152_15', 'TR152_7'), ('TR152_7_15', 'TR152_7', 'TR152_15'), ('TR152_7_16', 'TR152_16', 'TR152_7'), ('TR152_7_16', 'TR152_7', 'TR152_16'), ('TR152_8_17', 'TR152_17', 'TR152_8'), ('TR152_8_17', 'TR152_8', 'TR152_17'), ('TR152_8_18', 'TR152_18', 'TR152_8'), ('TR152_8_18', 'TR152_8', 'TR152_18'), ('TR152_8_19', 'TR152_19', 'TR152_8'), ('TR152_8_19', 'TR152_8', 'TR152_19'), ('TR153_18_19', 'TR153_18', 'TR153_19'), ('TR153_18_19', 'TR153_19', 'TR153_18'), ('TR153_1_6', 'TR153_1', 'TR153_6'), ('TR153_1_6', 'TR153_6', 'TR153_1'), ('TR153_1_9', 'TR153_1', 'TR153_9'), ('TR153_1_9', 'TR153_9', 'TR153_1'), ('TR153_2_10', 'TR153_10', 'TR153_2'), ('TR153_2_10', 'TR153_2', 'TR153_10'), ('TR153_2_3', 'TR153_2', 'TR153_3'), ('TR153_2_3', 'TR153_3', 'TR153_2'), ('TR153_3_11', 'TR153_11', 'TR153_3'), ('TR153_3_11', 'TR153_3', 'TR153_11'), ('TR153_4_12', 'TR153_12', 'TR153_4'), ('TR153_4_12', 'TR153_4', 'TR153_12'), ('TR153_4_5', 'TR153_4', 'TR153_5'), ('TR153_4_5', 'TR153_5', 'TR153_4'), ('TR153_5_8', 'TR153_5', 'TR153_8'), ('TR153_5_8', 'TR153_8', 'TR153_5'), ('TR153_6_7', 'TR153_6', 'TR153_7'), ('TR153_6_7', 'TR153_7', 'TR153_6'), ('TR153_7_13', 'TR153_13', 'TR153_7'), ('TR153_7_13', 'TR153_7', 'TR153_13'), ('TR153_7_14', 'TR153_14', 'TR153_7'), ('TR153_7_14', 'TR153_7', 'TR153_14'), ('TR153_8_15', 'TR153_15', 'TR153_8'), ('TR153_8_15', 'TR153_8', 'TR153_15'), ('TR153_8_16', 'TR153_16', 'TR153_8'), ('TR153_8_16', 'TR153_8', 'TR153_16'), ('TR153_8_17', 'TR153_17', 'TR153_8'), ('TR153_8_17', 'TR153_8', 'TR153_17'), ('TR154_10_11', 'TR154_10', 'TR154_11'), ('TR154_10_11', 'TR154_11', 'TR154_10'), ('TR154_10_20', 'TR154_10', 'TR154_20'), ('TR154_10_20', 'TR154_20', 'TR154_10'), ('TR154_11_21', 'TR154_11', 'TR154_21'), ('TR154_11_21', 'TR154_21', 'TR154_11'), ('TR154_12_13', 'TR154_12', 'TR154_13'), ('TR154_12_13', 'TR154_13', 'TR154_12'), ('TR154_12_22', 'TR154_12', 'TR154_22'), ('TR154_12_22', 'TR154_22', 'TR154_12'), ('TR154_13_23', 'TR154_13', 'TR154_23'), ('TR154_13_23', 'TR154_23', 'TR154_13'), ('TR154_14_24', 'TR154_14', 'TR154_24'), ('TR154_14_24', 'TR154_24', 'TR154_14'), ('TR154_1_3', 'TR154_1', 'TR154_3'), ('TR154_1_3', 'TR154_3', 'TR154_1'), ('TR154_2_4', 'TR154_2', 'TR154_4'), ('TR154_2_4', 'TR154_4', 'TR154_2'), ('TR154_3_9', 'TR154_3', 'TR154_9'), ('TR154_3_9', 'TR154_9', 'TR154_3'), ('TR154_4_14', 'TR154_14', 'TR154_4'), ('TR154_4_14', 'TR154_4', 'TR154_14'), ('TR154_5_15', 'TR154_15', 'TR154_5'), ('TR154_5_15', 'TR154_5', 'TR154_15'), ('TR154_5_6', 'TR154_5', 'TR154_6'), ('TR154_5_6', 'TR154_6', 'TR154_5'), ('TR154_6_16', 'TR154_16', 'TR154_6'), ('TR154_6_16', 'TR154_6', 'TR154_16'), ('TR154_7_17', 'TR154_17', 'TR154_7'), ('TR154_7_17', 'TR154_7', 'TR154_17'), ('TR154_7_8', 'TR154_7', 'TR154_8'), ('TR154_7_8', 'TR154_8', 'TR154_7'), ('TR154_8_18', 'TR154_18', 'TR154_8'), ('TR154_8_18', 'TR154_8', 'TR154_18'), ('TR154_9_19', 'TR154_19', 'TR154_9'), ('TR154_9_19', 'TR154_9', 'TR154_19'), ('TR155_1_11', 'TR155_1', 'TR155_11'), ('TR155_1_11', 'TR155_11', 'TR155_1'), ('TR155_1_6', 'TR155_1', 'TR155_6'), ('TR155_1_6', 'TR155_6', 'TR155_1'), ('TR155_2_10', 'TR155_10', 'TR155_2'), ('TR155_2_10', 'TR155_2', 'TR155_10'), ('TR155_2_3', 'TR155_2', 'TR155_3'), ('TR155_2_3', 'TR155_3', 'TR155_2'), ('TR155_3_12', 'TR155_12', 'TR155_3'), ('TR155_3_12', 'TR155_3', 'TR155_12'), ('TR155_4_5', 'TR155_4', 'TR155_5'), ('TR155_4_5', 'TR155_5', 'TR155_4'), ('TR155_4_8', 'TR155_4', 'TR155_8'), ('TR155_4_8', 'TR155_8', 'TR155_4'), ('TR155_5_7', 'TR155_5', 'TR155_7'), ('TR155_5_7', 'TR155_7', 'TR155_5'), ('TR155_6_9', 'TR155_6', 'TR155_9'), ('TR155_6_9', 'TR155_9', 'TR155_6'), ('TR155_7_13', 'TR155_13', 'TR155_7'), ('TR155_7_13', 'TR155_7', 'TR155_13'), ('TR156_10_25', 'TR156_10', 'TR156_25'), ('TR156_10_25', 'TR156_25', 'TR156_10'), ('TR156_11_26', 'TR156_11', 'TR156_26'), ('TR156_11_26', 'TR156_26', 'TR156_11'), ('TR156_12_13', 'TR156_12', 'TR156_13'), ('TR156_12_13', 'TR156_13', 'TR156_12'), ('TR156_12_27', 'TR156_12', 'TR156_27'), ('TR156_12_27', 'TR156_27', 'TR156_12'), ('TR156_13_28', 'TR156_13', 'TR156_28'), ('TR156_13_28', 'TR156_28', 'TR156_13'), ('TR156_14_15', 'TR156_14', 'TR156_15'), ('TR156_14_15', 'TR156_15', 'TR156_14'), ('TR156_14_19', 'TR156_14', 'TR156_19'), ('TR156_14_19', 'TR156_19', 'TR156_14'), ('TR156_15_29', 'TR156_15', 'TR156_29'), ('TR156_15_29', 'TR156_29', 'TR156_15'), ('TR156_16_30', 'TR156_16', 'TR156_30'), ('TR156_16_30', 'TR156_30', 'TR156_16'), ('TR156_17_18', 'TR156_17', 'TR156_18'), ('TR156_17_18', 'TR156_18', 'TR156_17'), ('TR156_17_31', 'TR156_17', 'TR156_31'), ('TR156_17_31', 'TR156_31', 'TR156_17'), ('TR156_17_32', 'TR156_17', 'TR156_32'), ('TR156_17_32', 'TR156_32', 'TR156_17'), ('TR156_18_33', 'TR156_18', 'TR156_33'), ('TR156_18_33', 'TR156_33', 'TR156_18'), ('TR156_18_34', 'TR156_18', 'TR156_34'), ('TR156_18_34', 'TR156_34', 'TR156_18'), ('TR156_18_35', 'TR156_18', 'TR156_35'), ('TR156_18_35', 'TR156_35', 'TR156_18'), ('TR156_19_20', 'TR156_19', 'TR156_20'), ('TR156_19_20', 'TR156_20', 'TR156_19'), ('TR156_19_36', 'TR156_19', 'TR156_36'), ('TR156_19_36', 'TR156_36', 'TR156_19'), ('TR156_19_37', 'TR156_19', 'TR156_37'), ('TR156_19_37', 'TR156_37', 'TR156_19'), ('TR156_1_2', 'TR156_1', 'TR156_2'), ('TR156_1_2', 'TR156_2', 'TR156_1'), ('TR156_1_21', 'TR156_1', 'TR156_21'), ('TR156_1_21', 'TR156_21', 'TR156_1'), ('TR156_1_3', 'TR156_1', 'TR156_3'), ('TR156_1_3', 'TR156_3', 'TR156_1'), ('TR156_1_4', 'TR156_1', 'TR156_4'), ('TR156_1_4', 'TR156_4', 'TR156_1'), ('TR156_20_38', 'TR156_20', 'TR156_38'), ('TR156_20_38', 'TR156_38', 'TR156_20'), ('TR156_20_39', 'TR156_20', 'TR156_39'), ('TR156_20_39', 'TR156_39', 'TR156_20'), ('TR156_20_40', 'TR156_20', 'TR156_40'), ('TR156_20_40', 'TR156_40', 'TR156_20'), ('TR156_2_22', 'TR156_2', 'TR156_22'), ('TR156_2_22', 'TR156_22', 'TR156_2'), ('TR156_2_5', 'TR156_2', 'TR156_5'), ('TR156_2_5', 'TR156_5', 'TR156_2'), ('TR156_2_6', 'TR156_2', 'TR156_6'), ('TR156_2_6', 'TR156_6', 'TR156_2'), ('TR156_5_11', 'TR156_11', 'TR156_5'), ('TR156_5_11', 'TR156_5', 'TR156_11'), ('TR156_6_16', 'TR156_16', 'TR156_6'), ('TR156_6_16', 'TR156_6', 'TR156_16'), ('TR156_7_23', 'TR156_23', 'TR156_7'), ('TR156_7_23', 'TR156_7', 'TR156_23'), ('TR156_7_8', 'TR156_7', 'TR156_8'), ('TR156_7_8', 'TR156_8', 'TR156_7'), ('TR156_8_24', 'TR156_24', 'TR156_8'), ('TR156_8_24', 'TR156_8', 'TR156_24'), ('TR156_9_10', 'TR156_10', 'TR156_9'), ('TR156_9_10', 'TR156_9', 'TR156_10'), ('TR156_9_17', 'TR156_17', 'TR156_9'), ('TR156_9_17', 'TR156_9', 'TR156_17'), ('TR157_10_24', 'TR157_10', 'TR157_24'), ('TR157_10_24', 'TR157_24', 'TR157_10'), ('TR157_11_12', 'TR157_11', 'TR157_12'), ('TR157_11_12', 'TR157_12', 'TR157_11'), ('TR157_11_14', 'TR157_11', 'TR157_14'), ('TR157_11_14', 'TR157_14', 'TR157_11'), ('TR157_12_25', 'TR157_12', 'TR157_25'), ('TR157_12_25', 'TR157_25', 'TR157_12'), ('TR157_13_26', 'TR157_13', 'TR157_26'), ('TR157_13_26', 'TR157_26', 'TR157_13'), ('TR157_14_15', 'TR157_14', 'TR157_15'), ('TR157_14_15', 'TR157_15', 'TR157_14'), ('TR157_1_2', 'TR157_1', 'TR157_2'), ('TR157_1_2', 'TR157_2', 'TR157_1'), ('TR157_2_3', 'TR157_2', 'TR157_3'), ('TR157_2_3', 'TR157_3', 'TR157_2'), ('TR157_2_4', 'TR157_2', 'TR157_4'), ('TR157_2_4', 'TR157_4', 'TR157_2'), ('TR157_2_5', 'TR157_2', 'TR157_5'), ('TR157_2_5', 'TR157_5', 'TR157_2'), ('TR157_3_8', 'TR157_3', 'TR157_8'), ('TR157_3_8', 'TR157_8', 'TR157_3'), ('TR157_4_7', 'TR157_4', 'TR157_7'), ('TR157_4_7', 'TR157_7', 'TR157_4'), ('TR157_5_6', 'TR157_5', 'TR157_6'), ('TR157_5_6', 'TR157_6', 'TR157_5'), ('TR157_6_17', 'TR157_17', 'TR157_6'), ('TR157_6_17', 'TR157_6', 'TR157_17'), ('TR157_6_18', 'TR157_18', 'TR157_6'), ('TR157_6_18', 'TR157_6', 'TR157_18'), ('TR157_6_19', 'TR157_19', 'TR157_6'), ('TR157_6_19', 'TR157_6', 'TR157_19'), ('TR157_7_20', 'TR157_20', 'TR157_7'), ('TR157_7_20', 'TR157_7', 'TR157_20'), ('TR157_7_21', 'TR157_21', 'TR157_7'), ('TR157_7_21', 'TR157_7', 'TR157_21'), ('TR157_7_22', 'TR157_22', 'TR157_7'), ('TR157_7_22', 'TR157_7', 'TR157_22'), ('TR157_8_13', 'TR157_13', 'TR157_8'), ('TR157_8_13', 'TR157_8', 'TR157_13'), ('TR157_9_10', 'TR157_10', 'TR157_9'), ('TR157_9_10', 'TR157_9', 'TR157_10'), ('TR157_9_23', 'TR157_23', 'TR157_9'), ('TR157_9_23', 'TR157_9', 'TR157_23'), ('TR158_1_2', 'TR158_1', 'TR158_2'), ('TR158_1_2', 'TR158_2', 'TR158_1'), ('TR158_1_3', 'TR158_1', 'TR158_3'), ('TR158_1_3', 'TR158_3', 'TR158_1'), ('TR158_1_8', 'TR158_1', 'TR158_8'), ('TR158_1_8', 'TR158_8', 'TR158_1'), ('TR158_1_9', 'TR158_1', 'TR158_9'), ('TR158_1_9', 'TR158_9', 'TR158_1'), ('TR158_2_4', 'TR158_2', 'TR158_4'), ('TR158_2_4', 'TR158_4', 'TR158_2'), ('TR158_2_5', 'TR158_2', 'TR158_5'), ('TR158_2_5', 'TR158_5', 'TR158_2'), ('TR158_2_6', 'TR158_2', 'TR158_6'), ('TR158_2_6', 'TR158_6', 'TR158_2'), ('TR158_3_10', 'TR158_10', 'TR158_3'), ('TR158_3_10', 'TR158_3', 'TR158_10'), ('TR158_3_11', 'TR158_11', 'TR158_3'), ('TR158_3_11', 'TR158_3', 'TR158_11'), ('TR158_3_7', 'TR158_3', 'TR158_7'), ('TR158_3_7', 'TR158_7', 'TR158_3'), ('TR158_4_12', 'TR158_12', 'TR158_4'), ('TR158_4_12', 'TR158_4', 'TR158_12'), ('TR158_4_13', 'TR158_13', 'TR158_4'), ('TR158_4_13', 'TR158_4', 'TR158_13'), ('TR158_4_14', 'TR158_14', 'TR158_4'), ('TR158_4_14', 'TR158_4', 'TR158_14'), ('TR158_5_15', 'TR158_15', 'TR158_5'), ('TR158_5_15', 'TR158_5', 'TR158_15'), ('TR158_5_16', 'TR158_16', 'TR158_5'), ('TR158_5_16', 'TR158_5', 'TR158_16'), ('TR158_5_17', 'TR158_17', 'TR158_5'), ('TR158_5_17', 'TR158_5', 'TR158_17'), ('TR158_6_18', 'TR158_18', 'TR158_6'), ('TR158_6_18', 'TR158_6', 'TR158_18'), ('TR158_6_19', 'TR158_19', 'TR158_6'), ('TR158_6_19', 'TR158_6', 'TR158_19'), ('TR158_6_20', 'TR158_20', 'TR158_6'), ('TR158_6_20', 'TR158_6', 'TR158_20'), ('TR159_1_12', 'TR159_1', 'TR159_12'), ('TR159_1_12', 'TR159_12', 'TR159_1'), ('TR159_1_6', 'TR159_1', 'TR159_6'), ('TR159_1_6', 'TR159_6', 'TR159_1'), ('TR159_2_13', 'TR159_13', 'TR159_2'), ('TR159_2_13', 'TR159_2', 'TR159_13'), ('TR159_2_3', 'TR159_2', 'TR159_3'), ('TR159_2_3', 'TR159_3', 'TR159_2'), ('TR159_3_14', 'TR159_14', 'TR159_3'), ('TR159_3_14', 'TR159_3', 'TR159_14'), ('TR159_4_5', 'TR159_4', 'TR159_5'), ('TR159_4_5', 'TR159_5', 'TR159_4'), ('TR159_4_7', 'TR159_4', 'TR159_7'), ('TR159_4_7', 'TR159_7', 'TR159_4'), ('TR159_5_9', 'TR159_5', 'TR159_9'), ('TR159_5_9', 'TR159_9', 'TR159_5'), ('TR159_6_15', 'TR159_15', 'TR159_6'), ('TR159_6_15', 'TR159_6', 'TR159_15'), ('TR159_7_8', 'TR159_7', 'TR159_8'), ('TR159_7_8', 'TR159_8', 'TR159_7'), ('TR159_8_9', 'TR159_8', 'TR159_9'), ('TR159_8_9', 'TR159_9', 'TR159_8'), ('TR160_10_21', 'TR160_10', 'TR160_21'), ('TR160_10_21', 'TR160_21', 'TR160_10'), ('TR160_10_22', 'TR160_10', 'TR160_22'), ('TR160_10_22', 'TR160_22', 'TR160_10'), ('TR160_10_23', 'TR160_10', 'TR160_23'), ('TR160_10_23', 'TR160_23', 'TR160_10'), ('TR160_1_11', 'TR160_1', 'TR160_11'), ('TR160_1_11', 'TR160_11', 'TR160_1'), ('TR160_1_6', 'TR160_1', 'TR160_6'), ('TR160_1_6', 'TR160_6', 'TR160_1'), ('TR160_2_10', 'TR160_10', 'TR160_2'), ('TR160_2_10', 'TR160_2', 'TR160_10'), ('TR160_2_3', 'TR160_2', 'TR160_3'), ('TR160_2_3', 'TR160_3', 'TR160_2'), ('TR160_3_9', 'TR160_3', 'TR160_9'), ('TR160_3_9', 'TR160_9', 'TR160_3'), ('TR160_4_12', 'TR160_12', 'TR160_4'), ('TR160_4_12', 'TR160_4', 'TR160_12'), ('TR160_4_5', 'TR160_4', 'TR160_5'), ('TR160_4_5', 'TR160_5', 'TR160_4'), ('TR160_5_8', 'TR160_5', 'TR160_8'), ('TR160_5_8', 'TR160_8', 'TR160_5'), ('TR160_6_7', 'TR160_6', 'TR160_7'), ('TR160_6_7', 'TR160_7', 'TR160_6'), ('TR160_7_13', 'TR160_13', 'TR160_7'), ('TR160_7_13', 'TR160_7', 'TR160_13'), ('TR160_7_14', 'TR160_14', 'TR160_7'), ('TR160_7_14', 'TR160_7', 'TR160_14'), ('TR160_8_15', 'TR160_15', 'TR160_8'), ('TR160_8_15', 'TR160_8', 'TR160_15'), ('TR160_8_16', 'TR160_16', 'TR160_8'), ('TR160_8_16', 'TR160_8', 'TR160_16'), ('TR160_8_17', 'TR160_17', 'TR160_8'), ('TR160_8_17', 'TR160_8', 'TR160_17'), ('TR160_9_18', 'TR160_18', 'TR160_9'), ('TR160_9_18', 'TR160_9', 'TR160_18'), ('TR160_9_19', 'TR160_19', 'TR160_9'), ('TR160_9_19', 'TR160_9', 'TR160_19'), ('TR160_9_20', 'TR160_20', 'TR160_9'), ('TR160_9_20', 'TR160_9', 'TR160_20'), ('TR161_10_18', 'TR161_10', 'TR161_18'), ('TR161_10_18', 'TR161_18', 'TR161_10'), ('TR161_10_19', 'TR161_10', 'TR161_19'), ('TR161_10_19', 'TR161_19', 'TR161_10'), ('TR161_12_20', 'TR161_12', 'TR161_20'), ('TR161_12_20', 'TR161_20', 'TR161_12'), ('TR161_1_2', 'TR161_1', 'TR161_2'), ('TR161_1_2', 'TR161_2', 'TR161_1'), ('TR161_1_4', 'TR161_1', 'TR161_4'), ('TR161_1_4', 'TR161_4', 'TR161_1'), ('TR161_2_13', 'TR161_13', 'TR161_2'), ('TR161_2_13', 'TR161_2', 'TR161_13'), ('TR161_2_14', 'TR161_14', 'TR161_2'), ('TR161_2_14', 'TR161_2', 'TR161_14'), ('TR161_4_6', 'TR161_4', 'TR161_6'), ('TR161_4_6', 'TR161_6', 'TR161_4'), ('TR161_5_7', 'TR161_5', 'TR161_7'), ('TR161_5_7', 'TR161_7', 'TR161_5'), ('TR161_5_8', 'TR161_5', 'TR161_8'), ('TR161_5_8', 'TR161_8', 'TR161_5'), ('TR161_6_15', 'TR161_15', 'TR161_6'), ('TR161_6_15', 'TR161_6', 'TR161_15'), ('TR161_7_10', 'TR161_10', 'TR161_7'), ('TR161_7_10', 'TR161_7', 'TR161_10'), ('TR161_8_16', 'TR161_16', 'TR161_8'), ('TR161_8_16', 'TR161_8', 'TR161_16'), ('TR161_9_12', 'TR161_12', 'TR161_9'), ('TR161_9_12', 'TR161_9', 'TR161_12'), ('TR161_9_17', 'TR161_17', 'TR161_9'), ('TR161_9_17', 'TR161_9', 'TR161_17'), ('TR162_1_10', 'TR162_1', 'TR162_10'), ('TR162_1_10', 'TR162_10', 'TR162_1'), ('TR162_1_6', 'TR162_1', 'TR162_6'), ('TR162_1_6', 'TR162_6', 'TR162_1'), ('TR162_2_11', 'TR162_11', 'TR162_2'), ('TR162_2_11', 'TR162_2', 'TR162_11'), ('TR162_2_3', 'TR162_2', 'TR162_3'), ('TR162_2_3', 'TR162_3', 'TR162_2'), ('TR162_3_7', 'TR162_3', 'TR162_7'), ('TR162_3_7', 'TR162_7', 'TR162_3'), ('TR162_4_5', 'TR162_4', 'TR162_5'), ('TR162_4_5', 'TR162_5', 'TR162_4'), ('TR162_4_8', 'TR162_4', 'TR162_8'), ('TR162_4_8', 'TR162_8', 'TR162_4'), ('TR162_5_12', 'TR162_12', 'TR162_5'), ('TR162_5_12', 'TR162_5', 'TR162_12'), ('TR162_6_9', 'TR162_6', 'TR162_9'), ('TR162_6_9', 'TR162_9', 'TR162_6'), ('TR162_7_13', 'TR162_13', 'TR162_7'), ('TR162_7_13', 'TR162_7', 'TR162_13'), ('TR162_7_14', 'TR162_14', 'TR162_7'), ('TR162_7_14', 'TR162_7', 'TR162_14'), ('TR162_7_15', 'TR162_15', 'TR162_7'), ('TR162_7_15', 'TR162_7', 'TR162_15'), ('TR162_8_16', 'TR162_16', 'TR162_8'), ('TR162_8_16', 'TR162_8', 'TR162_16'), ('TR162_8_17', 'TR162_17', 'TR162_8'), ('TR162_8_17', 'TR162_8', 'TR162_17'), ('TR162_9_18', 'TR162_18', 'TR162_9'), ('TR162_9_18', 'TR162_9', 'TR162_18'), ('TR162_9_19', 'TR162_19', 'TR162_9'), ('TR162_9_19', 'TR162_9', 'TR162_19'), ('TR164_10_20', 'TR164_10', 'TR164_20'), ('TR164_10_20', 'TR164_20', 'TR164_10'), ('TR164_11_14', 'TR164_11', 'TR164_14'), ('TR164_11_14', 'TR164_14', 'TR164_11'), ('TR164_11_21', 'TR164_11', 'TR164_21'), ('TR164_11_21', 'TR164_21', 'TR164_11'), ('TR164_12_22', 'TR164_12', 'TR164_22'), ('TR164_12_22', 'TR164_22', 'TR164_12'), ('TR164_13_15', 'TR164_13', 'TR164_15'), ('TR164_13_15', 'TR164_15', 'TR164_13'), ('TR164_13_23', 'TR164_13', 'TR164_23'), ('TR164_13_23', 'TR164_23', 'TR164_13'), ('TR164_14_24', 'TR164_14', 'TR164_24'), ('TR164_14_24', 'TR164_24', 'TR164_14'), ('TR164_15_25', 'TR164_15', 'TR164_25'), ('TR164_15_25', 'TR164_25', 'TR164_15'), ('TR164_1_2', 'TR164_1', 'TR164_2'), ('TR164_1_2', 'TR164_2', 'TR164_1'), ('TR164_1_3', 'TR164_1', 'TR164_3'), ('TR164_1_3', 'TR164_3', 'TR164_1'), ('TR164_1_4', 'TR164_1', 'TR164_4'), ('TR164_1_4', 'TR164_4', 'TR164_1'), ('TR164_3_7', 'TR164_3', 'TR164_7'), ('TR164_3_7', 'TR164_7', 'TR164_3'), ('TR164_4_9', 'TR164_4', 'TR164_9'), ('TR164_4_9', 'TR164_9', 'TR164_4'), ('TR164_6_10', 'TR164_10', 'TR164_6'), ('TR164_6_10', 'TR164_6', 'TR164_10'), ('TR164_6_16', 'TR164_16', 'TR164_6'), ('TR164_6_16', 'TR164_6', 'TR164_16'), ('TR164_7_17', 'TR164_17', 'TR164_7'), ('TR164_7_17', 'TR164_7', 'TR164_17'), ('TR164_8_12', 'TR164_12', 'TR164_8'), ('TR164_8_12', 'TR164_8', 'TR164_12'), ('TR164_8_18', 'TR164_18', 'TR164_8'), ('TR164_8_18', 'TR164_8', 'TR164_18'), ('TR164_9_19', 'TR164_19', 'TR164_9'), ('TR164_9_19', 'TR164_9', 'TR164_19'), ('TR165_18_19', 'TR165_18', 'TR165_19'), ('TR165_18_19', 'TR165_19', 'TR165_18'), ('TR165_1_10', 'TR165_1', 'TR165_10'), ('TR165_1_10', 'TR165_10', 'TR165_1'), ('TR165_1_11', 'TR165_1', 'TR165_11'), ('TR165_1_11', 'TR165_11', 'TR165_1'), ('TR165_1_12', 'TR165_1', 'TR165_12'), ('TR165_1_12', 'TR165_12', 'TR165_1'), ('TR165_1_2', 'TR165_1', 'TR165_2'), ('TR165_1_2', 'TR165_2', 'TR165_1'), ('TR165_2_4', 'TR165_2', 'TR165_4'), ('TR165_2_4', 'TR165_4', 'TR165_2'), ('TR165_3_5', 'TR165_3', 'TR165_5'), ('TR165_3_5', 'TR165_5', 'TR165_3'), ('TR165_3_6', 'TR165_3', 'TR165_6'), ('TR165_3_6', 'TR165_6', 'TR165_3'), ('TR165_4_13', 'TR165_13', 'TR165_4'), ('TR165_4_13', 'TR165_4', 'TR165_13'), ('TR165_5_14', 'TR165_14', 'TR165_5'), ('TR165_5_14', 'TR165_5', 'TR165_14'), ('TR165_5_15', 'TR165_15', 'TR165_5'), ('TR165_5_15', 'TR165_5', 'TR165_15'), ('TR165_6_16', 'TR165_16', 'TR165_6'), ('TR165_6_16', 'TR165_6', 'TR165_16'), ('TR165_7_8', 'TR165_7', 'TR165_8'), ('TR165_7_8', 'TR165_8', 'TR165_7'), ('TR165_7_9', 'TR165_7', 'TR165_9'), ('TR165_7_9', 'TR165_9', 'TR165_7'), ('TR165_8_17', 'TR165_17', 'TR165_8'), ('TR165_8_17', 'TR165_8', 'TR165_17'), ('TR166_10_11', 'TR166_10', 'TR166_11'), ('TR166_10_11', 'TR166_11', 'TR166_10'), ('TR166_11_13', 'TR166_11', 'TR166_13'), ('TR166_11_13', 'TR166_13', 'TR166_11'), ('TR166_11_14', 'TR166_11', 'TR166_14'), ('TR166_11_14', 'TR166_14', 'TR166_11'), ('TR166_13_15', 'TR166_13', 'TR166_15'), ('TR166_13_15', 'TR166_15', 'TR166_13'), ('TR166_13_27', 'TR166_13', 'TR166_27'), ('TR166_13_27', 'TR166_27', 'TR166_13'), ('TR166_13_28', 'TR166_13', 'TR166_28'), ('TR166_13_28', 'TR166_28', 'TR166_13'), ('TR166_14_16', 'TR166_14', 'TR166_16'), ('TR166_14_16', 'TR166_16', 'TR166_14'), ('TR166_14_29', 'TR166_14', 'TR166_29'), ('TR166_14_29', 'TR166_29', 'TR166_14'), ('TR166_14_30', 'TR166_14', 'TR166_30'), ('TR166_14_30', 'TR166_30', 'TR166_14'), ('TR166_15_31', 'TR166_15', 'TR166_31'), ('TR166_15_31', 'TR166_31', 'TR166_15'), ('TR166_15_32', 'TR166_15', 'TR166_32'), ('TR166_15_32', 'TR166_32', 'TR166_15'), ('TR166_15_33', 'TR166_15', 'TR166_33'), ('TR166_15_33', 'TR166_33', 'TR166_15'), ('TR166_16_34', 'TR166_16', 'TR166_34'), ('TR166_16_34', 'TR166_34', 'TR166_16'), ('TR166_16_35', 'TR166_16', 'TR166_35'), ('TR166_16_35', 'TR166_35', 'TR166_16'), ('TR166_16_36', 'TR166_16', 'TR166_36'), ('TR166_16_36', 'TR166_36', 'TR166_16'), ('TR166_1_2', 'TR166_1', 'TR166_2'), ('TR166_1_2', 'TR166_2', 'TR166_1'), ('TR166_1_3', 'TR166_1', 'TR166_3'), ('TR166_1_3', 'TR166_3', 'TR166_1'), ('TR166_1_4', 'TR166_1', 'TR166_4'), ('TR166_1_4', 'TR166_4', 'TR166_1'), ('TR166_2_5', 'TR166_2', 'TR166_5'), ('TR166_2_5', 'TR166_5', 'TR166_2'), ('TR166_3_17', 'TR166_17', 'TR166_3'), ('TR166_3_17', 'TR166_3', 'TR166_17'), ('TR166_3_18', 'TR166_18', 'TR166_3'), ('TR166_3_18', 'TR166_3', 'TR166_18'), ('TR166_3_7', 'TR166_3', 'TR166_7'), ('TR166_3_7', 'TR166_7', 'TR166_3'), ('TR166_4_19', 'TR166_19', 'TR166_4'), ('TR166_4_19', 'TR166_4', 'TR166_19'), ('TR166_4_20', 'TR166_20', 'TR166_4'), ('TR166_4_20', 'TR166_4', 'TR166_20'), ('TR166_4_8', 'TR166_4', 'TR166_8'), ('TR166_4_8', 'TR166_8', 'TR166_4'), ('TR166_5_9', 'TR166_5', 'TR166_9'), ('TR166_5_9', 'TR166_9', 'TR166_5'), ('TR166_7_21', 'TR166_21', 'TR166_7'), ('TR166_7_21', 'TR166_7', 'TR166_21'), ('TR166_7_22', 'TR166_22', 'TR166_7'), ('TR166_7_22', 'TR166_7', 'TR166_22'), ('TR166_7_23', 'TR166_23', 'TR166_7'), ('TR166_7_23', 'TR166_7', 'TR166_23'), ('TR166_8_24', 'TR166_24', 'TR166_8'), ('TR166_8_24', 'TR166_8', 'TR166_24'), ('TR166_8_25', 'TR166_25', 'TR166_8'), ('TR166_8_25', 'TR166_8', 'TR166_25'), ('TR166_8_26', 'TR166_26', 'TR166_8'), ('TR166_8_26', 'TR166_8', 'TR166_26'), ('TR166_9_10', 'TR166_10', 'TR166_9'), ('TR166_9_10', 'TR166_9', 'TR166_10'), ('TR168_10_21', 'TR168_10', 'TR168_21'), ('TR168_10_21', 'TR168_21', 'TR168_10'), ('TR168_11_12', 'TR168_11', 'TR168_12'), ('TR168_11_12', 'TR168_12', 'TR168_11'), ('TR168_11_22', 'TR168_11', 'TR168_22'), ('TR168_11_22', 'TR168_22', 'TR168_11'), ('TR168_12_13', 'TR168_12', 'TR168_13'), ('TR168_12_13', 'TR168_13', 'TR168_12'), ('TR168_12_23', 'TR168_12', 'TR168_23'), ('TR168_12_23', 'TR168_23', 'TR168_12'), ('TR168_12_24', 'TR168_12', 'TR168_24'), ('TR168_12_24', 'TR168_24', 'TR168_12'), ('TR168_13_14', 'TR168_13', 'TR168_14'), ('TR168_13_14', 'TR168_14', 'TR168_13'), ('TR168_13_25', 'TR168_13', 'TR168_25'), ('TR168_13_25', 'TR168_25', 'TR168_13'), ('TR168_13_26', 'TR168_13', 'TR168_26'), ('TR168_13_26', 'TR168_26', 'TR168_13'), ('TR168_14_27', 'TR168_14', 'TR168_27'), ('TR168_14_27', 'TR168_27', 'TR168_14'), ('TR168_14_28', 'TR168_14', 'TR168_28'), ('TR168_14_28', 'TR168_28', 'TR168_14'), ('TR168_1_6', 'TR168_1', 'TR168_6'), ('TR168_1_6', 'TR168_6', 'TR168_1'), ('TR168_1_7', 'TR168_1', 'TR168_7'), ('TR168_1_7', 'TR168_7', 'TR168_1'), ('TR168_29_30', 'TR168_29', 'TR168_30'), ('TR168_29_30', 'TR168_30', 'TR168_29'), ('TR168_2_10', 'TR168_10', 'TR168_2'), ('TR168_2_10', 'TR168_2', 'TR168_10'), ('TR168_2_3', 'TR168_2', 'TR168_3'), ('TR168_2_3', 'TR168_3', 'TR168_2'), ('TR168_31_32', 'TR168_31', 'TR168_32'), ('TR168_31_32', 'TR168_32', 'TR168_31'), ('TR168_3_15', 'TR168_15', 'TR168_3'), ('TR168_3_15', 'TR168_3', 'TR168_15'), ('TR168_4_16', 'TR168_16', 'TR168_4'), ('TR168_4_16', 'TR168_4', 'TR168_16'), ('TR168_4_5', 'TR168_4', 'TR168_5'), ('TR168_4_5', 'TR168_5', 'TR168_4'), ('TR168_5_17', 'TR168_17', 'TR168_5'), ('TR168_5_17', 'TR168_5', 'TR168_17'), ('TR168_6_11', 'TR168_11', 'TR168_6'), ('TR168_6_11', 'TR168_6', 'TR168_11'), ('TR168_7_18', 'TR168_18', 'TR168_7'), ('TR168_7_18', 'TR168_7', 'TR168_18'), ('TR168_8_19', 'TR168_19', 'TR168_8'), ('TR168_8_19', 'TR168_8', 'TR168_19'), ('TR168_8_9', 'TR168_8', 'TR168_9'), ('TR168_8_9', 'TR168_9', 'TR168_8'), ('TR168_9_20', 'TR168_20', 'TR168_9'), ('TR168_9_20', 'TR168_9', 'TR168_20'), ('TR169_1_12', 'TR169_1', 'TR169_12'), ('TR169_1_12', 'TR169_12', 'TR169_1'), ('TR169_1_6', 'TR169_1', 'TR169_6'), ('TR169_1_6', 'TR169_6', 'TR169_1'), ('TR169_2_13', 'TR169_13', 'TR169_2'), ('TR169_2_13', 'TR169_2', 'TR169_13'), ('TR169_2_3', 'TR169_2', 'TR169_3'), ('TR169_2_3', 'TR169_3', 'TR169_2'), ('TR169_3_7', 'TR169_3', 'TR169_7'), ('TR169_3_7', 'TR169_7', 'TR169_3'), ('TR169_4_5', 'TR169_4', 'TR169_5'), ('TR169_4_5', 'TR169_5', 'TR169_4'), ('TR169_4_8', 'TR169_4', 'TR169_8'), ('TR169_4_8', 'TR169_8', 'TR169_4'), ('TR169_5_14', 'TR169_14', 'TR169_5'), ('TR169_5_14', 'TR169_5', 'TR169_14'), ('TR169_6_9', 'TR169_6', 'TR169_9'), ('TR169_6_9', 'TR169_9', 'TR169_6'), ('TR169_7_15', 'TR169_15', 'TR169_7'), ('TR169_7_15', 'TR169_7', 'TR169_15'), ('TR169_7_16', 'TR169_16', 'TR169_7'), ('TR169_7_16', 'TR169_7', 'TR169_16'), ('TR169_8_11', 'TR169_11', 'TR169_8'), ('TR169_8_11', 'TR169_8', 'TR169_11'), ('TR169_9_17', 'TR169_17', 'TR169_9'), ('TR169_9_17', 'TR169_9', 'TR169_17'), ('TR169_9_18', 'TR169_18', 'TR169_9'), ('TR169_9_18', 'TR169_9', 'TR169_18'), ('TR170_19_24', 'TR170_19', 'TR170_24'), ('TR170_19_24', 'TR170_24', 'TR170_19'), ('TR170_19_27', 'TR170_19', 'TR170_27'), ('TR170_19_27', 'TR170_27', 'TR170_19'), ('TR170_1_12', 'TR170_1', 'TR170_12'), ('TR170_1_12', 'TR170_12', 'TR170_1'), ('TR170_1_6', 'TR170_1', 'TR170_6'), ('TR170_1_6', 'TR170_6', 'TR170_1'), ('TR170_20_21', 'TR170_20', 'TR170_21'), ('TR170_20_21', 'TR170_21', 'TR170_20'), ('TR170_20_28', 'TR170_20', 'TR170_28'), ('TR170_20_28', 'TR170_28', 'TR170_20'), ('TR170_21_29', 'TR170_21', 'TR170_29'), ('TR170_21_29', 'TR170_29', 'TR170_21'), ('TR170_22_23', 'TR170_22', 'TR170_23'), ('TR170_22_23', 'TR170_23', 'TR170_22'), ('TR170_22_30', 'TR170_22', 'TR170_30'), ('TR170_22_30', 'TR170_30', 'TR170_22'), ('TR170_23_31', 'TR170_23', 'TR170_31'), ('TR170_23_31', 'TR170_31', 'TR170_23'), ('TR170_24_25', 'TR170_24', 'TR170_25'), ('TR170_24_25', 'TR170_25', 'TR170_24'), ('TR170_25_32', 'TR170_25', 'TR170_32'), ('TR170_25_32', 'TR170_32', 'TR170_25'), ('TR170_26_33', 'TR170_26', 'TR170_33'), ('TR170_26_33', 'TR170_33', 'TR170_26'), ('TR170_26_34', 'TR170_26', 'TR170_34'), ('TR170_26_34', 'TR170_34', 'TR170_26'), ('TR170_2_13', 'TR170_13', 'TR170_2'), ('TR170_2_13', 'TR170_2', 'TR170_13'), ('TR170_2_3', 'TR170_2', 'TR170_3'), ('TR170_2_3', 'TR170_3', 'TR170_2'), ('TR170_3_14', 'TR170_14', 'TR170_3'), ('TR170_3_14', 'TR170_3', 'TR170_14'), ('TR170_4_15', 'TR170_15', 'TR170_4'), ('TR170_4_15', 'TR170_4', 'TR170_15'), ('TR170_4_5', 'TR170_4', 'TR170_5'), ('TR170_4_5', 'TR170_5', 'TR170_4'), ('TR170_5_7', 'TR170_5', 'TR170_7'), ('TR170_5_7', 'TR170_7', 'TR170_5'), ('TR170_6_16', 'TR170_16', 'TR170_6'), ('TR170_6_16', 'TR170_6', 'TR170_16'), ('TR170_7_17', 'TR170_17', 'TR170_7'), ('TR170_7_17', 'TR170_7', 'TR170_17'), ('TR170_8_18', 'TR170_18', 'TR170_8'), ('TR170_8_18', 'TR170_8', 'TR170_18'), ('TR170_8_9', 'TR170_8', 'TR170_9'), ('TR170_8_9', 'TR170_9', 'TR170_8'), ('TR170_9_10', 'TR170_10', 'TR170_9'), ('TR170_9_10', 'TR170_9', 'TR170_10'), ('TR171_10_17', 'TR171_10', 'TR171_17'), ('TR171_10_17', 'TR171_17', 'TR171_10'), ('TR171_10_18', 'TR171_10', 'TR171_18'), ('TR171_10_18', 'TR171_18', 'TR171_10'), ('TR171_10_19', 'TR171_10', 'TR171_19'), ('TR171_10_19', 'TR171_19', 'TR171_10'), ('TR171_11_20', 'TR171_11', 'TR171_20'), ('TR171_11_20', 'TR171_20', 'TR171_11'), ('TR171_11_21', 'TR171_11', 'TR171_21'), ('TR171_11_21', 'TR171_21', 'TR171_11'), ('TR171_11_22', 'TR171_11', 'TR171_22'), ('TR171_11_22', 'TR171_22', 'TR171_11'), ('TR171_1_12', 'TR171_1', 'TR171_12'), ('TR171_1_12', 'TR171_12', 'TR171_1'), ('TR171_1_6', 'TR171_1', 'TR171_6'), ('TR171_1_6', 'TR171_6', 'TR171_1'), ('TR171_23_24', 'TR171_23', 'TR171_24'), ('TR171_23_24', 'TR171_24', 'TR171_23'), ('TR171_2_13', 'TR171_13', 'TR171_2'), ('TR171_2_13', 'TR171_2', 'TR171_13'), ('TR171_2_3', 'TR171_2', 'TR171_3'), ('TR171_2_3', 'TR171_3', 'TR171_2'), ('TR171_3_9', 'TR171_3', 'TR171_9'), ('TR171_3_9', 'TR171_9', 'TR171_3'), ('TR171_4_14', 'TR171_14', 'TR171_4'), ('TR171_4_14', 'TR171_4', 'TR171_14'), ('TR171_4_5', 'TR171_4', 'TR171_5'), ('TR171_4_5', 'TR171_5', 'TR171_4'), ('TR171_5_8', 'TR171_5', 'TR171_8'), ('TR171_5_8', 'TR171_8', 'TR171_5'), ('TR171_6_7', 'TR171_6', 'TR171_7'), ('TR171_6_7', 'TR171_7', 'TR171_6'), ('TR171_7_15', 'TR171_15', 'TR171_7'), ('TR171_7_15', 'TR171_7', 'TR171_15'), ('TR171_7_16', 'TR171_16', 'TR171_7'), ('TR171_7_16', 'TR171_7', 'TR171_16'), ('TR171_8_11', 'TR171_11', 'TR171_8'), ('TR171_8_11', 'TR171_8', 'TR171_11'), ('TR171_9_10', 'TR171_10', 'TR171_9'), ('TR171_9_10', 'TR171_9', 'TR171_10'), ('TR172_1_2', 'TR172_1', 'TR172_2'), ('TR172_1_2', 'TR172_2', 'TR172_1'), ('TR172_1_5', 'TR172_1', 'TR172_5'), ('TR172_1_5', 'TR172_5', 'TR172_1'), ('TR172_1_6', 'TR172_1', 'TR172_6'), ('TR172_1_6', 'TR172_6', 'TR172_1'), ('TR172_20_21', 'TR172_20', 'TR172_21'), ('TR172_20_21', 'TR172_21', 'TR172_20'), ('TR172_20_22', 'TR172_20', 'TR172_22'), ('TR172_20_22', 'TR172_22', 'TR172_20'), ('TR172_23_24', 'TR172_23', 'TR172_24'), ('TR172_23_24', 'TR172_24', 'TR172_23'), ('TR172_23_25', 'TR172_23', 'TR172_25'), ('TR172_23_25', 'TR172_25', 'TR172_23'), ('TR172_26_27', 'TR172_26', 'TR172_27'), ('TR172_26_27', 'TR172_27', 'TR172_26'), ('TR172_26_28', 'TR172_26', 'TR172_28'), ('TR172_26_28', 'TR172_28', 'TR172_26'), ('TR172_2_3', 'TR172_2', 'TR172_3'), ('TR172_2_3', 'TR172_3', 'TR172_2'), ('TR172_3_9', 'TR172_3', 'TR172_9'), ('TR172_3_9', 'TR172_9', 'TR172_3'), ('TR172_5_10', 'TR172_10', 'TR172_5'), ('TR172_5_10', 'TR172_5', 'TR172_10'), ('TR172_5_11', 'TR172_11', 'TR172_5'), ('TR172_5_11', 'TR172_5', 'TR172_11'), ('TR172_5_7', 'TR172_5', 'TR172_7'), ('TR172_5_7', 'TR172_7', 'TR172_5'), ('TR172_6_12', 'TR172_12', 'TR172_6'), ('TR172_6_12', 'TR172_6', 'TR172_12'), ('TR172_6_13', 'TR172_13', 'TR172_6'), ('TR172_6_13', 'TR172_6', 'TR172_13'), ('TR172_6_8', 'TR172_6', 'TR172_8'), ('TR172_6_8', 'TR172_8', 'TR172_6'), ('TR172_7_14', 'TR172_14', 'TR172_7'), ('TR172_7_14', 'TR172_7', 'TR172_14'), ('TR172_7_15', 'TR172_15', 'TR172_7'), ('TR172_7_15', 'TR172_7', 'TR172_15'), ('TR172_7_16', 'TR172_16', 'TR172_7'), ('TR172_7_16', 'TR172_7', 'TR172_16'), ('TR172_8_17', 'TR172_17', 'TR172_8'), ('TR172_8_17', 'TR172_8', 'TR172_17'), ('TR172_8_18', 'TR172_18', 'TR172_8'), ('TR172_8_18', 'TR172_8', 'TR172_18'), ('TR172_8_19', 'TR172_19', 'TR172_8'), ('TR172_8_19', 'TR172_8', 'TR172_19'), ('TR173_10_11', 'TR173_10', 'TR173_11'), ('TR173_10_11', 'TR173_11', 'TR173_10'), ('TR173_11_24', 'TR173_11', 'TR173_24'), ('TR173_11_24', 'TR173_24', 'TR173_11'), ('TR173_11_25', 'TR173_11', 'TR173_25'), ('TR173_11_25', 'TR173_25', 'TR173_11'), ('TR173_1_2', 'TR173_1', 'TR173_2'), ('TR173_1_2', 'TR173_2', 'TR173_1'), ('TR173_1_3', 'TR173_1', 'TR173_3'), ('TR173_1_3', 'TR173_3', 'TR173_1'), ('TR173_1_4', 'TR173_1', 'TR173_4'), ('TR173_1_4', 'TR173_4', 'TR173_1'), ('TR173_1_5', 'TR173_1', 'TR173_5'), ('TR173_1_5', 'TR173_5', 'TR173_1'), ('TR173_2_6', 'TR173_2', 'TR173_6'), ('TR173_2_6', 'TR173_6', 'TR173_2'), ('TR173_3_13', 'TR173_13', 'TR173_3'), ('TR173_3_13', 'TR173_3', 'TR173_13'), ('TR173_3_14', 'TR173_14', 'TR173_3'), ('TR173_3_14', 'TR173_3', 'TR173_14'), ('TR173_3_8', 'TR173_3', 'TR173_8'), ('TR173_3_8', 'TR173_8', 'TR173_3'), ('TR173_4_15', 'TR173_15', 'TR173_4'), ('TR173_4_15', 'TR173_4', 'TR173_15'), ('TR173_4_16', 'TR173_16', 'TR173_4'), ('TR173_4_16', 'TR173_4', 'TR173_16'), ('TR173_4_9', 'TR173_4', 'TR173_9'), ('TR173_4_9', 'TR173_9', 'TR173_4'), ('TR173_6_10', 'TR173_10', 'TR173_6'), ('TR173_6_10', 'TR173_6', 'TR173_10'), ('TR173_6_17', 'TR173_17', 'TR173_6'), ('TR173_6_17', 'TR173_6', 'TR173_17'), ('TR173_8_18', 'TR173_18', 'TR173_8'), ('TR173_8_18', 'TR173_8', 'TR173_18'), ('TR173_8_19', 'TR173_19', 'TR173_8'), ('TR173_8_19', 'TR173_8', 'TR173_19'), ('TR173_8_20', 'TR173_20', 'TR173_8'), ('TR173_8_20', 'TR173_8', 'TR173_20'), ('TR173_9_21', 'TR173_21', 'TR173_9'), ('TR173_9_21', 'TR173_9', 'TR173_21'), ('TR173_9_22', 'TR173_22', 'TR173_9'), ('TR173_9_22', 'TR173_9', 'TR173_22'), ('TR173_9_23', 'TR173_23', 'TR173_9'), ('TR173_9_23', 'TR173_9', 'TR173_23'), ('TR174_17_18', 'TR174_17', 'TR174_18'), ('TR174_17_18', 'TR174_18', 'TR174_17'), ('TR174_19_20', 'TR174_19', 'TR174_20'), ('TR174_19_20', 'TR174_20', 'TR174_19'), ('TR174_1_6', 'TR174_1', 'TR174_6'), ('TR174_1_6', 'TR174_6', 'TR174_1'), ('TR174_1_9', 'TR174_1', 'TR174_9'), ('TR174_1_9', 'TR174_9', 'TR174_1'), ('TR174_2_10', 'TR174_10', 'TR174_2'), ('TR174_2_10', 'TR174_2', 'TR174_10'), ('TR174_2_3', 'TR174_2', 'TR174_3'), ('TR174_2_3', 'TR174_3', 'TR174_2'), ('TR174_3_8', 'TR174_3', 'TR174_8'), ('TR174_3_8', 'TR174_8', 'TR174_3'), ('TR174_4_11', 'TR174_11', 'TR174_4'), ('TR174_4_11', 'TR174_4', 'TR174_11'), ('TR174_4_5', 'TR174_4', 'TR174_5'), ('TR174_4_5', 'TR174_5', 'TR174_4'), ('TR174_5_12', 'TR174_12', 'TR174_5'), ('TR174_5_12', 'TR174_5', 'TR174_12'), ('TR174_6_7', 'TR174_6', 'TR174_7'), ('TR174_6_7', 'TR174_7', 'TR174_6'), ('TR174_7_13', 'TR174_13', 'TR174_7'), ('TR174_7_13', 'TR174_7', 'TR174_13'), ('TR174_7_14', 'TR174_14', 'TR174_7'), ('TR174_7_14', 'TR174_7', 'TR174_14'), ('TR174_8_15', 'TR174_15', 'TR174_8'), ('TR174_8_15', 'TR174_8', 'TR174_15'), ('TR174_8_16', 'TR174_16', 'TR174_8'), ('TR174_8_16', 'TR174_8', 'TR174_16'), ('TR175_10_11', 'TR175_10', 'TR175_11'), ('TR175_10_11', 'TR175_11', 'TR175_10'), ('TR175_10_13', 'TR175_10', 'TR175_13'), ('TR175_10_13', 'TR175_13', 'TR175_10'), ('TR175_10_41', 'TR175_10', 'TR175_41'), ('TR175_10_41', 'TR175_41', 'TR175_10'), ('TR175_10_42', 'TR175_10', 'TR175_42'), ('TR175_10_42', 'TR175_42', 'TR175_10'), ('TR175_11_12', 'TR175_11', 'TR175_12'), ('TR175_11_12', 'TR175_12', 'TR175_11'), ('TR175_11_43', 'TR175_11', 'TR175_43'), ('TR175_11_43', 'TR175_43', 'TR175_11'), ('TR175_11_44', 'TR175_11', 'TR175_44'), ('TR175_11_44', 'TR175_44', 'TR175_11'), ('TR175_12_45', 'TR175_12', 'TR175_45'), ('TR175_12_45', 'TR175_45', 'TR175_12'), ('TR175_13_14', 'TR175_13', 'TR175_14'), ('TR175_13_14', 'TR175_14', 'TR175_13'), ('TR175_13_17', 'TR175_13', 'TR175_17'), ('TR175_13_17', 'TR175_17', 'TR175_13'), ('TR175_13_26', 'TR175_13', 'TR175_26'), ('TR175_13_26', 'TR175_26', 'TR175_13'), ('TR175_14_15', 'TR175_14', 'TR175_15'), ('TR175_14_15', 'TR175_15', 'TR175_14'), ('TR175_14_46', 'TR175_14', 'TR175_46'), ('TR175_14_46', 'TR175_46', 'TR175_14'), ('TR175_15_16', 'TR175_15', 'TR175_16'), ('TR175_15_16', 'TR175_16', 'TR175_15'), ('TR175_15_47', 'TR175_15', 'TR175_47'), ('TR175_15_47', 'TR175_47', 'TR175_15'), ('TR175_15_48', 'TR175_15', 'TR175_48'), ('TR175_15_48', 'TR175_48', 'TR175_15'), ('TR175_16_17', 'TR175_16', 'TR175_17'), ('TR175_16_17', 'TR175_17', 'TR175_16'), ('TR175_16_49', 'TR175_16', 'TR175_49'), ('TR175_16_49', 'TR175_49', 'TR175_16'), ('TR175_16_50', 'TR175_16', 'TR175_50'), ('TR175_16_50', 'TR175_50', 'TR175_16'), ('TR175_17_18', 'TR175_17', 'TR175_18'), ('TR175_17_18', 'TR175_18', 'TR175_17'), ('TR175_17_51', 'TR175_17', 'TR175_51'), ('TR175_17_51', 'TR175_51', 'TR175_17'), ('TR175_18_19', 'TR175_18', 'TR175_19'), ('TR175_18_19', 'TR175_19', 'TR175_18'), ('TR175_18_20', 'TR175_18', 'TR175_20'), ('TR175_18_20', 'TR175_20', 'TR175_18'), ('TR175_18_52', 'TR175_18', 'TR175_52'), ('TR175_18_52', 'TR175_52', 'TR175_18'), ('TR175_19_21', 'TR175_19', 'TR175_21'), ('TR175_19_21', 'TR175_21', 'TR175_19'), ('TR175_19_53', 'TR175_19', 'TR175_53'), ('TR175_19_53', 'TR175_53', 'TR175_19'), ('TR175_19_54', 'TR175_19', 'TR175_54'), ('TR175_19_54', 'TR175_54', 'TR175_19'), ('TR175_1_2', 'TR175_1', 'TR175_2'), ('TR175_1_2', 'TR175_2', 'TR175_1'), ('TR175_1_28', 'TR175_1', 'TR175_28'), ('TR175_1_28', 'TR175_28', 'TR175_1'), ('TR175_1_29', 'TR175_1', 'TR175_29'), ('TR175_1_29', 'TR175_29', 'TR175_1'), ('TR175_1_4', 'TR175_1', 'TR175_4'), ('TR175_1_4', 'TR175_4', 'TR175_1'), ('TR175_20_55', 'TR175_20', 'TR175_55'), ('TR175_20_55', 'TR175_55', 'TR175_20'), ('TR175_20_56', 'TR175_20', 'TR175_56'), ('TR175_20_56', 'TR175_56', 'TR175_20'), ('TR175_20_57', 'TR175_20', 'TR175_57'), ('TR175_20_57', 'TR175_57', 'TR175_20'), ('TR175_21_22', 'TR175_21', 'TR175_22'), ('TR175_21_22', 'TR175_22', 'TR175_21'), ('TR175_21_58', 'TR175_21', 'TR175_58'), ('TR175_21_58', 'TR175_58', 'TR175_21'), ('TR175_21_59', 'TR175_21', 'TR175_59'), ('TR175_21_59', 'TR175_59', 'TR175_21'), ('TR175_22_23', 'TR175_22', 'TR175_23'), ('TR175_22_23', 'TR175_23', 'TR175_22'), ('TR175_23_60', 'TR175_23', 'TR175_60'), ('TR175_23_60', 'TR175_60', 'TR175_23'), ('TR175_25_61', 'TR175_25', 'TR175_61'), ('TR175_25_61', 'TR175_61', 'TR175_25'), ('TR175_25_62', 'TR175_25', 'TR175_62'), ('TR175_25_62', 'TR175_62', 'TR175_25'), ('TR175_25_63', 'TR175_25', 'TR175_63'), ('TR175_25_63', 'TR175_63', 'TR175_25'), ('TR175_26_64', 'TR175_26', 'TR175_64'), ('TR175_26_64', 'TR175_64', 'TR175_26'), ('TR175_26_65', 'TR175_26', 'TR175_65'), ('TR175_26_65', 'TR175_65', 'TR175_26'), ('TR175_26_66', 'TR175_26', 'TR175_66'), ('TR175_26_66', 'TR175_66', 'TR175_26'), ('TR175_27_67', 'TR175_27', 'TR175_67'), ('TR175_27_67', 'TR175_67', 'TR175_27'), ('TR175_2_27', 'TR175_2', 'TR175_27'), ('TR175_2_27', 'TR175_27', 'TR175_2'), ('TR175_2_3', 'TR175_2', 'TR175_3'), ('TR175_2_3', 'TR175_3', 'TR175_2'), ('TR175_2_30', 'TR175_2', 'TR175_30'), ('TR175_2_30', 'TR175_30', 'TR175_2'), ('TR175_3_31', 'TR175_3', 'TR175_31'), ('TR175_3_31', 'TR175_31', 'TR175_3'), ('TR175_3_32', 'TR175_3', 'TR175_32'), ('TR175_3_32', 'TR175_32', 'TR175_3'), ('TR175_3_5', 'TR175_3', 'TR175_5'), ('TR175_3_5', 'TR175_5', 'TR175_3'), ('TR175_4_33', 'TR175_33', 'TR175_4'), ('TR175_4_33', 'TR175_4', 'TR175_33'), ('TR175_4_34', 'TR175_34', 'TR175_4'), ('TR175_4_34', 'TR175_4', 'TR175_34'), ('TR175_4_8', 'TR175_4', 'TR175_8'), ('TR175_4_8', 'TR175_8', 'TR175_4'), ('TR175_5_35', 'TR175_35', 'TR175_5'), ('TR175_5_35', 'TR175_5', 'TR175_35'), ('TR175_5_6', 'TR175_5', 'TR175_6'), ('TR175_5_6', 'TR175_6', 'TR175_5'), ('TR175_5_8', 'TR175_5', 'TR175_8'), ('TR175_5_8', 'TR175_8', 'TR175_5'), ('TR175_6_36', 'TR175_36', 'TR175_6'), ('TR175_6_36', 'TR175_6', 'TR175_36'), ('TR175_6_37', 'TR175_37', 'TR175_6'), ('TR175_6_37', 'TR175_6', 'TR175_37'), ('TR175_6_7', 'TR175_6', 'TR175_7'), ('TR175_6_7', 'TR175_7', 'TR175_6'), ('TR175_7_38', 'TR175_38', 'TR175_7'), ('TR175_7_38', 'TR175_7', 'TR175_38'), ('TR175_7_39', 'TR175_39', 'TR175_7'), ('TR175_7_39', 'TR175_7', 'TR175_39'), ('TR175_7_9', 'TR175_7', 'TR175_9'), ('TR175_7_9', 'TR175_9', 'TR175_7'), ('TR175_8_12', 'TR175_12', 'TR175_8'), ('TR175_8_12', 'TR175_8', 'TR175_12'), ('TR175_8_25', 'TR175_25', 'TR175_8'), ('TR175_8_25', 'TR175_8', 'TR175_25'), ('TR175_9_12', 'TR175_12', 'TR175_9'), ('TR175_9_12', 'TR175_9', 'TR175_12'), ('TR175_9_14', 'TR175_14', 'TR175_9'), ('TR175_9_14', 'TR175_9', 'TR175_14'), ('TR175_9_40', 'TR175_40', 'TR175_9'), ('TR175_9_40', 'TR175_9', 'TR175_40'), ('TR177_10_11', 'TR177_10', 'TR177_11'), ('TR177_10_11', 'TR177_11', 'TR177_10'), ('TR177_11_12', 'TR177_11', 'TR177_12'), ('TR177_11_12', 'TR177_12', 'TR177_11'), ('TR177_12_14', 'TR177_12', 'TR177_14'), ('TR177_12_14', 'TR177_14', 'TR177_12'), ('TR177_12_23', 'TR177_12', 'TR177_23'), ('TR177_12_23', 'TR177_23', 'TR177_12'), ('TR177_12_24', 'TR177_12', 'TR177_24'), ('TR177_12_24', 'TR177_24', 'TR177_12'), ('TR177_1_15', 'TR177_1', 'TR177_15'), ('TR177_1_15', 'TR177_15', 'TR177_1'), ('TR177_1_2', 'TR177_1', 'TR177_2'), ('TR177_1_2', 'TR177_2', 'TR177_1'), ('TR177_1_3', 'TR177_1', 'TR177_3'), ('TR177_1_3', 'TR177_3', 'TR177_1'), ('TR177_2_4', 'TR177_2', 'TR177_4'), ('TR177_2_4', 'TR177_4', 'TR177_2'), ('TR177_3_7', 'TR177_3', 'TR177_7'), ('TR177_3_7', 'TR177_7', 'TR177_3'), ('TR177_4_16', 'TR177_16', 'TR177_4'), ('TR177_4_16', 'TR177_4', 'TR177_16'), ('TR177_4_17', 'TR177_17', 'TR177_4'), ('TR177_4_17', 'TR177_4', 'TR177_17'), ('TR177_4_18', 'TR177_18', 'TR177_4'), ('TR177_4_18', 'TR177_4', 'TR177_18'), ('TR177_6_19', 'TR177_19', 'TR177_6'), ('TR177_6_19', 'TR177_6', 'TR177_19'), ('TR177_6_8', 'TR177_6', 'TR177_8'), ('TR177_6_8', 'TR177_8', 'TR177_6'), ('TR177_7_20', 'TR177_20', 'TR177_7'), ('TR177_7_20', 'TR177_7', 'TR177_20'), ('TR177_8_21', 'TR177_21', 'TR177_8'), ('TR177_8_21', 'TR177_8', 'TR177_21'), ('TR177_9_10', 'TR177_10', 'TR177_9'), ('TR177_9_10', 'TR177_9', 'TR177_10'), ('TR177_9_22', 'TR177_22', 'TR177_9'), ('TR177_9_22', 'TR177_9', 'TR177_22'), ('TR178_15_16', 'TR178_15', 'TR178_16'), ('TR178_15_16', 'TR178_16', 'TR178_15'), ('TR178_1_10', 'TR178_1', 'TR178_10'), ('TR178_1_10', 'TR178_10', 'TR178_1'), ('TR178_1_2', 'TR178_1', 'TR178_2'), ('TR178_1_2', 'TR178_2', 'TR178_1'), ('TR178_1_3', 'TR178_1', 'TR178_3'), ('TR178_1_3', 'TR178_3', 'TR178_1'), ('TR178_1_9', 'TR178_1', 'TR178_9'), ('TR178_1_9', 'TR178_9', 'TR178_1'), ('TR178_3_5', 'TR178_3', 'TR178_5'), ('TR178_3_5', 'TR178_5', 'TR178_3'), ('TR178_4_11', 'TR178_11', 'TR178_4'), ('TR178_4_11', 'TR178_4', 'TR178_11'), ('TR178_4_6', 'TR178_4', 'TR178_6'), ('TR178_4_6', 'TR178_6', 'TR178_4'), ('TR178_6_12', 'TR178_12', 'TR178_6'), ('TR178_6_12', 'TR178_6', 'TR178_12'), ('TR178_7_13', 'TR178_13', 'TR178_7'), ('TR178_7_13', 'TR178_7', 'TR178_13'), ('TR178_7_8', 'TR178_7', 'TR178_8'), ('TR178_7_8', 'TR178_8', 'TR178_7'), ('TR178_8_14', 'TR178_14', 'TR178_8'), ('TR178_8_14', 'TR178_8', 'TR178_14'), ('TR179_10_16', 'TR179_10', 'TR179_16'), ('TR179_10_16', 'TR179_16', 'TR179_10'), ('TR179_1_2', 'TR179_1', 'TR179_2'), ('TR179_1_2', 'TR179_2', 'TR179_1'), ('TR179_2_11', 'TR179_11', 'TR179_2'), ('TR179_2_11', 'TR179_2', 'TR179_11'), ('TR179_3_4', 'TR179_3', 'TR179_4'), ('TR179_3_4', 'TR179_4', 'TR179_3'), ('TR179_3_5', 'TR179_3', 'TR179_5'), ('TR179_3_5', 'TR179_5', 'TR179_3'), ('TR179_4_12', 'TR179_12', 'TR179_4'), ('TR179_4_12', 'TR179_4', 'TR179_12'), ('TR179_5_13', 'TR179_13', 'TR179_5'), ('TR179_5_13', 'TR179_5', 'TR179_13'), ('TR179_6_14', 'TR179_14', 'TR179_6'), ('TR179_6_14', 'TR179_6', 'TR179_14'), ('TR179_6_8', 'TR179_6', 'TR179_8'), ('TR179_6_8', 'TR179_8', 'TR179_6'), ('TR179_7_15', 'TR179_15', 'TR179_7'), ('TR179_7_15', 'TR179_7', 'TR179_15'), ('TR179_7_8', 'TR179_7', 'TR179_8'), ('TR179_7_8', 'TR179_8', 'TR179_7'), ('TR179_9_10', 'TR179_10', 'TR179_9'), ('TR179_9_10', 'TR179_9', 'TR179_10'), ('TR180_10_11', 'TR180_10', 'TR180_11'), ('TR180_10_11', 'TR180_11', 'TR180_10'), ('TR180_11_17', 'TR180_11', 'TR180_17'), ('TR180_11_17', 'TR180_17', 'TR180_11'), ('TR180_11_18', 'TR180_11', 'TR180_18'), ('TR180_11_18', 'TR180_18', 'TR180_11'), ('TR180_1_2', 'TR180_1', 'TR180_2'), ('TR180_1_2', 'TR180_2', 'TR180_1'), ('TR180_1_4', 'TR180_1', 'TR180_4'), ('TR180_1_4', 'TR180_4', 'TR180_1'), ('TR180_4_6', 'TR180_4', 'TR180_6'), ('TR180_4_6', 'TR180_6', 'TR180_4'), ('TR180_5_12', 'TR180_12', 'TR180_5'), ('TR180_5_12', 'TR180_5', 'TR180_12'), ('TR180_5_7', 'TR180_5', 'TR180_7'), ('TR180_5_7', 'TR180_7', 'TR180_5'), ('TR180_6_13', 'TR180_13', 'TR180_6'), ('TR180_6_13', 'TR180_6', 'TR180_13'), ('TR180_7_9', 'TR180_7', 'TR180_9'), ('TR180_7_9', 'TR180_9', 'TR180_7'), ('TR180_8_10', 'TR180_10', 'TR180_8'), ('TR180_8_10', 'TR180_8', 'TR180_10'), ('TR180_8_14', 'TR180_14', 'TR180_8'), ('TR180_8_14', 'TR180_8', 'TR180_14'), ('TR180_9_15', 'TR180_15', 'TR180_9'), ('TR180_9_15', 'TR180_9', 'TR180_15'), ('TR180_9_16', 'TR180_16', 'TR180_9'), ('TR180_9_16', 'TR180_9', 'TR180_16'), ('TR181_10_13', 'TR181_10', 'TR181_13'), ('TR181_10_13', 'TR181_13', 'TR181_10'), ('TR181_10_26', 'TR181_10', 'TR181_26'), ('TR181_10_26', 'TR181_26', 'TR181_10'), ('TR181_11_27', 'TR181_11', 'TR181_27'), ('TR181_11_27', 'TR181_27', 'TR181_11'), ('TR181_12_14', 'TR181_12', 'TR181_14'), ('TR181_12_14', 'TR181_14', 'TR181_12'), ('TR181_12_28', 'TR181_12', 'TR181_28'), ('TR181_12_28', 'TR181_28', 'TR181_12'), ('TR181_13_15', 'TR181_13', 'TR181_15'), ('TR181_13_15', 'TR181_15', 'TR181_13'), ('TR181_14_16', 'TR181_14', 'TR181_16'), ('TR181_14_16', 'TR181_16', 'TR181_14'), ('TR181_15_17', 'TR181_15', 'TR181_17'), ('TR181_15_17', 'TR181_17', 'TR181_15'), ('TR181_15_18', 'TR181_15', 'TR181_18'), ('TR181_15_18', 'TR181_18', 'TR181_15'), ('TR181_16_19', 'TR181_16', 'TR181_19'), ('TR181_16_19', 'TR181_19', 'TR181_16'), ('TR181_16_20', 'TR181_16', 'TR181_20'), ('TR181_16_20', 'TR181_20', 'TR181_16'), ('TR181_17_29', 'TR181_17', 'TR181_29'), ('TR181_17_29', 'TR181_29', 'TR181_17'), ('TR181_17_30', 'TR181_17', 'TR181_30'), ('TR181_17_30', 'TR181_30', 'TR181_17'), ('TR181_17_31', 'TR181_17', 'TR181_31'), ('TR181_17_31', 'TR181_31', 'TR181_17'), ('TR181_18_32', 'TR181_18', 'TR181_32'), ('TR181_18_32', 'TR181_32', 'TR181_18'), ('TR181_18_33', 'TR181_18', 'TR181_33'), ('TR181_18_33', 'TR181_33', 'TR181_18'), ('TR181_18_34', 'TR181_18', 'TR181_34'), ('TR181_18_34', 'TR181_34', 'TR181_18'), ('TR181_19_35', 'TR181_19', 'TR181_35'), ('TR181_19_35', 'TR181_35', 'TR181_19'), ('TR181_19_36', 'TR181_19', 'TR181_36'), ('TR181_19_36', 'TR181_36', 'TR181_19'), ('TR181_19_37', 'TR181_19', 'TR181_37'), ('TR181_19_37', 'TR181_37', 'TR181_19'), ('TR181_1_3', 'TR181_1', 'TR181_3'), ('TR181_1_3', 'TR181_3', 'TR181_1'), ('TR181_1_4', 'TR181_1', 'TR181_4'), ('TR181_1_4', 'TR181_4', 'TR181_1'), ('TR181_20_38', 'TR181_20', 'TR181_38'), ('TR181_20_38', 'TR181_38', 'TR181_20'), ('TR181_20_39', 'TR181_20', 'TR181_39'), ('TR181_20_39', 'TR181_39', 'TR181_20'), ('TR181_20_40', 'TR181_20', 'TR181_40'), ('TR181_20_40', 'TR181_40', 'TR181_20'), ('TR181_3_6', 'TR181_3', 'TR181_6'), ('TR181_3_6', 'TR181_6', 'TR181_3'), ('TR181_4_8', 'TR181_4', 'TR181_8'), ('TR181_4_8', 'TR181_8', 'TR181_4'), ('TR181_5_21', 'TR181_21', 'TR181_5'), ('TR181_5_21', 'TR181_5', 'TR181_21'), ('TR181_5_9', 'TR181_5', 'TR181_9'), ('TR181_5_9', 'TR181_9', 'TR181_5'), ('TR181_6_22', 'TR181_22', 'TR181_6'), ('TR181_6_22', 'TR181_6', 'TR181_22'), ('TR181_7_11', 'TR181_11', 'TR181_7'), ('TR181_7_11', 'TR181_7', 'TR181_11'), ('TR181_7_23', 'TR181_23', 'TR181_7'), ('TR181_7_23', 'TR181_7', 'TR181_23'), ('TR181_8_24', 'TR181_24', 'TR181_8'), ('TR181_8_24', 'TR181_8', 'TR181_24'), ('TR181_9_25', 'TR181_25', 'TR181_9'), ('TR181_9_25', 'TR181_9', 'TR181_25'), ('TR183_10_26', 'TR183_10', 'TR183_26'), ('TR183_10_26', 'TR183_26', 'TR183_10'), ('TR183_10_27', 'TR183_10', 'TR183_27'), ('TR183_10_27', 'TR183_27', 'TR183_10'), ('TR183_10_28', 'TR183_10', 'TR183_28'), ('TR183_10_28', 'TR183_28', 'TR183_10'), ('TR183_12_29', 'TR183_12', 'TR183_29'), ('TR183_12_29', 'TR183_29', 'TR183_12'), ('TR183_12_30', 'TR183_12', 'TR183_30'), ('TR183_12_30', 'TR183_30', 'TR183_12'), ('TR183_12_31', 'TR183_12', 'TR183_31'), ('TR183_12_31', 'TR183_31', 'TR183_12'), ('TR183_14_16', 'TR183_14', 'TR183_16'), ('TR183_14_16', 'TR183_16', 'TR183_14'), ('TR183_14_32', 'TR183_14', 'TR183_32'), ('TR183_14_32', 'TR183_32', 'TR183_14'), ('TR183_14_33', 'TR183_14', 'TR183_33'), ('TR183_14_33', 'TR183_33', 'TR183_14'), ('TR183_15_17', 'TR183_15', 'TR183_17'), ('TR183_15_17', 'TR183_17', 'TR183_15'), ('TR183_15_34', 'TR183_15', 'TR183_34'), ('TR183_15_34', 'TR183_34', 'TR183_15'), ('TR183_15_35', 'TR183_15', 'TR183_35'), ('TR183_15_35', 'TR183_35', 'TR183_15'), ('TR183_16_36', 'TR183_16', 'TR183_36'), ('TR183_16_36', 'TR183_36', 'TR183_16'), ('TR183_16_37', 'TR183_16', 'TR183_37'), ('TR183_16_37', 'TR183_37', 'TR183_16'), ('TR183_16_38', 'TR183_16', 'TR183_38'), ('TR183_16_38', 'TR183_38', 'TR183_16'), ('TR183_17_39', 'TR183_17', 'TR183_39'), ('TR183_17_39', 'TR183_39', 'TR183_17'), ('TR183_17_40', 'TR183_17', 'TR183_40'), ('TR183_17_40', 'TR183_40', 'TR183_17'), ('TR183_17_41', 'TR183_17', 'TR183_41'), ('TR183_17_41', 'TR183_41', 'TR183_17'), ('TR183_1_2', 'TR183_1', 'TR183_2'), ('TR183_1_2', 'TR183_2', 'TR183_1'), ('TR183_1_3', 'TR183_1', 'TR183_3'), ('TR183_1_3', 'TR183_3', 'TR183_1'), ('TR183_1_4', 'TR183_1', 'TR183_4'), ('TR183_1_4', 'TR183_4', 'TR183_1'), ('TR183_1_5', 'TR183_1', 'TR183_5'), ('TR183_1_5', 'TR183_5', 'TR183_1'), ('TR183_2_6', 'TR183_2', 'TR183_6'), ('TR183_2_6', 'TR183_6', 'TR183_2'), ('TR183_3_7', 'TR183_3', 'TR183_7'), ('TR183_3_7', 'TR183_7', 'TR183_3'), ('TR183_4_18', 'TR183_18', 'TR183_4'), ('TR183_4_18', 'TR183_4', 'TR183_18'), ('TR183_4_19', 'TR183_19', 'TR183_4'), ('TR183_4_19', 'TR183_4', 'TR183_19'), ('TR183_4_8', 'TR183_4', 'TR183_8'), ('TR183_4_8', 'TR183_8', 'TR183_4'), ('TR183_5_20', 'TR183_20', 'TR183_5'), ('TR183_5_20', 'TR183_5', 'TR183_20'), ('TR183_5_21', 'TR183_21', 'TR183_5'), ('TR183_5_21', 'TR183_5', 'TR183_21'), ('TR183_5_9', 'TR183_5', 'TR183_9'), ('TR183_5_9', 'TR183_9', 'TR183_5'), ('TR183_6_10', 'TR183_10', 'TR183_6'), ('TR183_6_10', 'TR183_6', 'TR183_10'), ('TR183_7_12', 'TR183_12', 'TR183_7'), ('TR183_7_12', 'TR183_7', 'TR183_12'), ('TR183_8_14', 'TR183_14', 'TR183_8'), ('TR183_8_14', 'TR183_8', 'TR183_14'), ('TR183_8_22', 'TR183_22', 'TR183_8'), ('TR183_8_22', 'TR183_8', 'TR183_22'), ('TR183_8_23', 'TR183_23', 'TR183_8'), ('TR183_8_23', 'TR183_8', 'TR183_23'), ('TR183_9_15', 'TR183_15', 'TR183_9'), ('TR183_9_15', 'TR183_9', 'TR183_15'), ('TR183_9_24', 'TR183_24', 'TR183_9'), ('TR183_9_24', 'TR183_9', 'TR183_24'), ('TR183_9_25', 'TR183_25', 'TR183_9'), ('TR183_9_25', 'TR183_9', 'TR183_25'), ('TR184_11_12', 'TR184_11', 'TR184_12'), ('TR184_11_12', 'TR184_12', 'TR184_11'), ('TR184_11_22', 'TR184_11', 'TR184_22'), ('TR184_11_22', 'TR184_22', 'TR184_11'), ('TR184_12_23', 'TR184_12', 'TR184_23'), ('TR184_12_23', 'TR184_23', 'TR184_12'), ('TR184_13_14', 'TR184_13', 'TR184_14'), ('TR184_13_14', 'TR184_14', 'TR184_13'), ('TR184_13_16', 'TR184_13', 'TR184_16'), ('TR184_13_16', 'TR184_16', 'TR184_13'), ('TR184_14_24', 'TR184_14', 'TR184_24'), ('TR184_14_24', 'TR184_24', 'TR184_14'), ('TR184_15_25', 'TR184_15', 'TR184_25'), ('TR184_15_25', 'TR184_25', 'TR184_15'), ('TR184_16_18', 'TR184_16', 'TR184_18'), ('TR184_16_18', 'TR184_18', 'TR184_16'), ('TR184_1_19', 'TR184_1', 'TR184_19'), ('TR184_1_19', 'TR184_19', 'TR184_1'), ('TR184_1_6', 'TR184_1', 'TR184_6'), ('TR184_1_6', 'TR184_6', 'TR184_1'), ('TR184_2_20', 'TR184_2', 'TR184_20'), ('TR184_2_20', 'TR184_20', 'TR184_2'), ('TR184_2_3', 'TR184_2', 'TR184_3'), ('TR184_2_3', 'TR184_3', 'TR184_2'), ('TR184_3_10', 'TR184_10', 'TR184_3'), ('TR184_3_10', 'TR184_3', 'TR184_10'), ('TR184_4_21', 'TR184_21', 'TR184_4'), ('TR184_4_21', 'TR184_4', 'TR184_21'), ('TR184_4_5', 'TR184_4', 'TR184_5'), ('TR184_4_5', 'TR184_5', 'TR184_4'), ('TR184_5_9', 'TR184_5', 'TR184_9'), ('TR184_5_9', 'TR184_9', 'TR184_5'), ('TR184_6_7', 'TR184_6', 'TR184_7'), ('TR184_6_7', 'TR184_7', 'TR184_6'), ('TR184_7_8', 'TR184_7', 'TR184_8'), ('TR184_7_8', 'TR184_8', 'TR184_7'), ('TR184_8_15', 'TR184_15', 'TR184_8'), ('TR184_8_15', 'TR184_8', 'TR184_15'), ('TR185_1_6', 'TR185_1', 'TR185_6'), ('TR185_1_6', 'TR185_6', 'TR185_1'), ('TR185_1_9', 'TR185_1', 'TR185_9'), ('TR185_1_9', 'TR185_9', 'TR185_1'), ('TR185_2_10', 'TR185_10', 'TR185_2'), ('TR185_2_10', 'TR185_2', 'TR185_10'), ('TR185_2_3', 'TR185_2', 'TR185_3'), ('TR185_2_3', 'TR185_3', 'TR185_2'), ('TR185_3_11', 'TR185_11', 'TR185_3'), ('TR185_3_11', 'TR185_3', 'TR185_11'), ('TR185_4_12', 'TR185_12', 'TR185_4'), ('TR185_4_12', 'TR185_4', 'TR185_12'), ('TR185_4_5', 'TR185_4', 'TR185_5'), ('TR185_4_5', 'TR185_5', 'TR185_4'), ('TR185_5_13', 'TR185_13', 'TR185_5'), ('TR185_5_13', 'TR185_5', 'TR185_13'), ('TR185_6_7', 'TR185_6', 'TR185_7'), ('TR185_6_7', 'TR185_7', 'TR185_6'), ('TR185_7_14', 'TR185_14', 'TR185_7'), ('TR185_7_14', 'TR185_7', 'TR185_14'), ('TR185_8_15', 'TR185_15', 'TR185_8'), ('TR185_8_15', 'TR185_8', 'TR185_15'), ('TR185_8_16', 'TR185_16', 'TR185_8'), ('TR185_8_16', 'TR185_8', 'TR185_16'), ('TR186_10_28', 'TR186_10', 'TR186_28'), ('TR186_10_28', 'TR186_28', 'TR186_10'), ('TR186_11_13', 'TR186_11', 'TR186_13'), ('TR186_11_13', 'TR186_13', 'TR186_11'), ('TR186_11_29', 'TR186_11', 'TR186_29'), ('TR186_11_29', 'TR186_29', 'TR186_11'), ('TR186_12_14', 'TR186_12', 'TR186_14'), ('TR186_12_14', 'TR186_14', 'TR186_12'), ('TR186_13_15', 'TR186_13', 'TR186_15'), ('TR186_13_15', 'TR186_15', 'TR186_13'), ('TR186_14_16', 'TR186_14', 'TR186_16'), ('TR186_14_16', 'TR186_16', 'TR186_14'), ('TR186_14_17', 'TR186_14', 'TR186_17'), ('TR186_14_17', 'TR186_17', 'TR186_14'), ('TR186_15_18', 'TR186_15', 'TR186_18'), ('TR186_15_18', 'TR186_18', 'TR186_15'), ('TR186_15_19', 'TR186_15', 'TR186_19'), ('TR186_15_19', 'TR186_19', 'TR186_15'), ('TR186_16_30', 'TR186_16', 'TR186_30'), ('TR186_16_30', 'TR186_30', 'TR186_16'), ('TR186_16_31', 'TR186_16', 'TR186_31'), ('TR186_16_31', 'TR186_31', 'TR186_16'), ('TR186_16_32', 'TR186_16', 'TR186_32'), ('TR186_16_32', 'TR186_32', 'TR186_16'), ('TR186_17_33', 'TR186_17', 'TR186_33'), ('TR186_17_33', 'TR186_33', 'TR186_17'), ('TR186_17_34', 'TR186_17', 'TR186_34'), ('TR186_17_34', 'TR186_34', 'TR186_17'), ('TR186_17_35', 'TR186_17', 'TR186_35'), ('TR186_17_35', 'TR186_35', 'TR186_17'), ('TR186_18_36', 'TR186_18', 'TR186_36'), ('TR186_18_36', 'TR186_36', 'TR186_18'), ('TR186_18_37', 'TR186_18', 'TR186_37'), ('TR186_18_37', 'TR186_37', 'TR186_18'), ('TR186_18_38', 'TR186_18', 'TR186_38'), ('TR186_18_38', 'TR186_38', 'TR186_18'), ('TR186_19_39', 'TR186_19', 'TR186_39'), ('TR186_19_39', 'TR186_39', 'TR186_19'), ('TR186_19_40', 'TR186_19', 'TR186_40'), ('TR186_19_40', 'TR186_40', 'TR186_19'), ('TR186_19_41', 'TR186_19', 'TR186_41'), ('TR186_19_41', 'TR186_41', 'TR186_19'), ('TR186_1_2', 'TR186_1', 'TR186_2'), ('TR186_1_2', 'TR186_2', 'TR186_1'), ('TR186_1_20', 'TR186_1', 'TR186_20'), ('TR186_1_20', 'TR186_20', 'TR186_1'), ('TR186_1_21', 'TR186_1', 'TR186_21'), ('TR186_1_21', 'TR186_21', 'TR186_1'), ('TR186_1_3', 'TR186_1', 'TR186_3'), ('TR186_1_3', 'TR186_3', 'TR186_1'), ('TR186_2_5', 'TR186_2', 'TR186_5'), ('TR186_2_5', 'TR186_5', 'TR186_2'), ('TR186_3_7', 'TR186_3', 'TR186_7'), ('TR186_3_7', 'TR186_7', 'TR186_3'), ('TR186_4_22', 'TR186_22', 'TR186_4'), ('TR186_4_22', 'TR186_4', 'TR186_22'), ('TR186_4_8', 'TR186_4', 'TR186_8'), ('TR186_4_8', 'TR186_8', 'TR186_4'), ('TR186_5_23', 'TR186_23', 'TR186_5'), ('TR186_5_23', 'TR186_5', 'TR186_23'), ('TR186_6_10', 'TR186_10', 'TR186_6'), ('TR186_6_10', 'TR186_6', 'TR186_10'), ('TR186_6_24', 'TR186_24', 'TR186_6'), ('TR186_6_24', 'TR186_6', 'TR186_24'), ('TR186_7_25', 'TR186_25', 'TR186_7'), ('TR186_7_25', 'TR186_7', 'TR186_25'), ('TR186_8_26', 'TR186_26', 'TR186_8'), ('TR186_8_26', 'TR186_8', 'TR186_26'), ('TR186_9_12', 'TR186_12', 'TR186_9'), ('TR186_9_12', 'TR186_9', 'TR186_12'), ('TR186_9_27', 'TR186_27', 'TR186_9'), ('TR186_9_27', 'TR186_9', 'TR186_27'), ('TR187_1_10', 'TR187_1', 'TR187_10'), ('TR187_1_10', 'TR187_10', 'TR187_1'), ('TR187_1_11', 'TR187_1', 'TR187_11'), ('TR187_1_11', 'TR187_11', 'TR187_1'), ('TR187_1_2', 'TR187_1', 'TR187_2'), ('TR187_1_2', 'TR187_2', 'TR187_1'), ('TR187_2_4', 'TR187_2', 'TR187_4'), ('TR187_2_4', 'TR187_4', 'TR187_2'), ('TR187_3_5', 'TR187_3', 'TR187_5'), ('TR187_3_5', 'TR187_5', 'TR187_3'), ('TR187_3_6', 'TR187_3', 'TR187_6'), ('TR187_3_6', 'TR187_6', 'TR187_3'), ('TR187_4_12', 'TR187_12', 'TR187_4'), ('TR187_4_12', 'TR187_4', 'TR187_12'), ('TR187_5_13', 'TR187_13', 'TR187_5'), ('TR187_5_13', 'TR187_5', 'TR187_13'), ('TR187_5_14', 'TR187_14', 'TR187_5'), ('TR187_5_14', 'TR187_5', 'TR187_14'), ('TR187_5_15', 'TR187_15', 'TR187_5'), ('TR187_5_15', 'TR187_5', 'TR187_15'), ('TR187_6_16', 'TR187_16', 'TR187_6'), ('TR187_6_16', 'TR187_6', 'TR187_16'), ('TR187_7_8', 'TR187_7', 'TR187_8'), ('TR187_7_8', 'TR187_8', 'TR187_7'), ('TR187_7_9', 'TR187_7', 'TR187_9'), ('TR187_7_9', 'TR187_9', 'TR187_7'), ('TR187_8_17', 'TR187_17', 'TR187_8'), ('TR187_8_17', 'TR187_8', 'TR187_17'), ('TR189_1_2', 'TR189_1', 'TR189_2'), ('TR189_1_2', 'TR189_2', 'TR189_1'), ('TR189_2_4', 'TR189_2', 'TR189_4'), ('TR189_2_4', 'TR189_4', 'TR189_2'), ('TR189_3_5', 'TR189_3', 'TR189_5'), ('TR189_3_5', 'TR189_5', 'TR189_3'), ('TR189_3_9', 'TR189_3', 'TR189_9'), ('TR189_3_9', 'TR189_9', 'TR189_3'), ('TR189_4_10', 'TR189_10', 'TR189_4'), ('TR189_4_10', 'TR189_4', 'TR189_10'), ('TR189_5_11', 'TR189_11', 'TR189_5'), ('TR189_5_11', 'TR189_5', 'TR189_11'), ('TR189_6_12', 'TR189_12', 'TR189_6'), ('TR189_6_12', 'TR189_6', 'TR189_12'), ('TR189_6_7', 'TR189_6', 'TR189_7'), ('TR189_6_7', 'TR189_7', 'TR189_6'), ('TR189_7_8', 'TR189_7', 'TR189_8'), ('TR189_7_8', 'TR189_8', 'TR189_7'), ('TR189_8_13', 'TR189_13', 'TR189_8'), ('TR189_8_13', 'TR189_8', 'TR189_13'), ('TR189_8_14', 'TR189_14', 'TR189_8'), ('TR189_8_14', 'TR189_8', 'TR189_14'), ('TR190_10_23', 'TR190_10', 'TR190_23'), ('TR190_10_23', 'TR190_23', 'TR190_10'), ('TR190_11_13', 'TR190_11', 'TR190_13'), ('TR190_11_13', 'TR190_13', 'TR190_11'), ('TR190_11_24', 'TR190_11', 'TR190_24'), ('TR190_11_24', 'TR190_24', 'TR190_11'), ('TR190_12_14', 'TR190_12', 'TR190_14'), ('TR190_12_14', 'TR190_14', 'TR190_12'), ('TR190_13_25', 'TR190_13', 'TR190_25'), ('TR190_13_25', 'TR190_25', 'TR190_13'), ('TR190_1_16', 'TR190_1', 'TR190_16'), ('TR190_1_16', 'TR190_16', 'TR190_1'), ('TR190_1_2', 'TR190_1', 'TR190_2'), ('TR190_1_2', 'TR190_2', 'TR190_1'), ('TR190_1_3', 'TR190_1', 'TR190_3'), ('TR190_1_3', 'TR190_3', 'TR190_1'), ('TR190_2_5', 'TR190_2', 'TR190_5'), ('TR190_2_5', 'TR190_5', 'TR190_2'), ('TR190_3_7', 'TR190_3', 'TR190_7'), ('TR190_3_7', 'TR190_7', 'TR190_3'), ('TR190_4_17', 'TR190_17', 'TR190_4'), ('TR190_4_17', 'TR190_4', 'TR190_17'), ('TR190_4_8', 'TR190_4', 'TR190_8'), ('TR190_4_8', 'TR190_8', 'TR190_4'), ('TR190_5_18', 'TR190_18', 'TR190_5'), ('TR190_5_18', 'TR190_5', 'TR190_18'), ('TR190_6_10', 'TR190_10', 'TR190_6'), ('TR190_6_10', 'TR190_6', 'TR190_10'), ('TR190_6_19', 'TR190_19', 'TR190_6'), ('TR190_6_19', 'TR190_6', 'TR190_19'), ('TR190_7_20', 'TR190_20', 'TR190_7'), ('TR190_7_20', 'TR190_7', 'TR190_20'), ('TR190_8_21', 'TR190_21', 'TR190_8'), ('TR190_8_21', 'TR190_8', 'TR190_21'), ('TR190_9_12', 'TR190_12', 'TR190_9'), ('TR190_9_12', 'TR190_9', 'TR190_12'), ('TR190_9_22', 'TR190_22', 'TR190_9'), ('TR190_9_22', 'TR190_9', 'TR190_22'), ('TR191_1_2', 'TR191_1', 'TR191_2'), ('TR191_1_2', 'TR191_2', 'TR191_1'), ('TR191_1_3', 'TR191_1', 'TR191_3'), ('TR191_1_3', 'TR191_3', 'TR191_1'), ('TR191_2_10', 'TR191_10', 'TR191_2'), ('TR191_2_10', 'TR191_2', 'TR191_10'), ('TR191_2_4', 'TR191_2', 'TR191_4'), ('TR191_2_4', 'TR191_4', 'TR191_2'), ('TR191_2_5', 'TR191_2', 'TR191_5'), ('TR191_2_5', 'TR191_5', 'TR191_2'), ('TR191_3_11', 'TR191_11', 'TR191_3'), ('TR191_3_11', 'TR191_3', 'TR191_11'), ('TR191_3_6', 'TR191_3', 'TR191_6'), ('TR191_3_6', 'TR191_6', 'TR191_3'), ('TR191_3_7', 'TR191_3', 'TR191_7'), ('TR191_3_7', 'TR191_7', 'TR191_3'), ('TR191_4_12', 'TR191_12', 'TR191_4'), ('TR191_4_12', 'TR191_4', 'TR191_12'), ('TR191_4_13', 'TR191_13', 'TR191_4'), ('TR191_4_13', 'TR191_4', 'TR191_13'), ('TR191_4_8', 'TR191_4', 'TR191_8'), ('TR191_4_8', 'TR191_8', 'TR191_4'), ('TR191_5_14', 'TR191_14', 'TR191_5'), ('TR191_5_14', 'TR191_5', 'TR191_14'), ('TR191_5_15', 'TR191_15', 'TR191_5'), ('TR191_5_15', 'TR191_5', 'TR191_15'), ('TR191_5_16', 'TR191_16', 'TR191_5'), ('TR191_5_16', 'TR191_5', 'TR191_16'), ('TR191_6_17', 'TR191_17', 'TR191_6'), ('TR191_6_17', 'TR191_6', 'TR191_17'), ('TR191_6_18', 'TR191_18', 'TR191_6'), ('TR191_6_18', 'TR191_6', 'TR191_18'), ('TR191_6_9', 'TR191_6', 'TR191_9'), ('TR191_6_9', 'TR191_9', 'TR191_6'), ('TR191_7_19', 'TR191_19', 'TR191_7'), ('TR191_7_19', 'TR191_7', 'TR191_19'), ('TR191_7_20', 'TR191_20', 'TR191_7'), ('TR191_7_20', 'TR191_7', 'TR191_20'), ('TR191_7_21', 'TR191_21', 'TR191_7'), ('TR191_7_21', 'TR191_7', 'TR191_21'), ('TR192_10_16', 'TR192_10', 'TR192_16'), ('TR192_10_16', 'TR192_16', 'TR192_10'), ('TR192_12_17', 'TR192_12', 'TR192_17'), ('TR192_12_17', 'TR192_17', 'TR192_12'), ('TR192_14_18', 'TR192_14', 'TR192_18'), ('TR192_14_18', 'TR192_18', 'TR192_14'), ('TR192_14_23', 'TR192_14', 'TR192_23'), ('TR192_14_23', 'TR192_23', 'TR192_14'), ('TR192_14_24', 'TR192_14', 'TR192_24'), ('TR192_14_24', 'TR192_24', 'TR192_14'), ('TR192_15_25', 'TR192_15', 'TR192_25'), ('TR192_15_25', 'TR192_25', 'TR192_15'), ('TR192_15_26', 'TR192_15', 'TR192_26'), ('TR192_15_26', 'TR192_26', 'TR192_15'), ('TR192_15_27', 'TR192_15', 'TR192_27'), ('TR192_15_27', 'TR192_27', 'TR192_15'), ('TR192_16_28', 'TR192_16', 'TR192_28'), ('TR192_16_28', 'TR192_28', 'TR192_16'), ('TR192_16_29', 'TR192_16', 'TR192_29'), ('TR192_16_29', 'TR192_29', 'TR192_16'), ('TR192_16_30', 'TR192_16', 'TR192_30'), ('TR192_16_30', 'TR192_30', 'TR192_16'), ('TR192_17_19', 'TR192_17', 'TR192_19'), ('TR192_17_19', 'TR192_19', 'TR192_17'), ('TR192_17_31', 'TR192_17', 'TR192_31'), ('TR192_17_31', 'TR192_31', 'TR192_17'), ('TR192_17_32', 'TR192_17', 'TR192_32'), ('TR192_17_32', 'TR192_32', 'TR192_17'), ('TR192_18_33', 'TR192_18', 'TR192_33'), ('TR192_18_33', 'TR192_33', 'TR192_18'), ('TR192_18_34', 'TR192_18', 'TR192_34'), ('TR192_18_34', 'TR192_34', 'TR192_18'), ('TR192_18_35', 'TR192_18', 'TR192_35'), ('TR192_18_35', 'TR192_35', 'TR192_18'), ('TR192_19_36', 'TR192_19', 'TR192_36'), ('TR192_19_36', 'TR192_36', 'TR192_19'), ('TR192_19_37', 'TR192_19', 'TR192_37'), ('TR192_19_37', 'TR192_37', 'TR192_19'), ('TR192_19_38', 'TR192_19', 'TR192_38'), ('TR192_19_38', 'TR192_38', 'TR192_19'), ('TR192_1_2', 'TR192_1', 'TR192_2'), ('TR192_1_2', 'TR192_2', 'TR192_1'), ('TR192_1_20', 'TR192_1', 'TR192_20'), ('TR192_1_20', 'TR192_20', 'TR192_1'), ('TR192_1_3', 'TR192_1', 'TR192_3'), ('TR192_1_3', 'TR192_3', 'TR192_1'), ('TR192_1_4', 'TR192_1', 'TR192_4'), ('TR192_1_4', 'TR192_4', 'TR192_1'), ('TR192_2_5', 'TR192_2', 'TR192_5'), ('TR192_2_5', 'TR192_5', 'TR192_2'), ('TR192_3_21', 'TR192_21', 'TR192_3'), ('TR192_3_21', 'TR192_3', 'TR192_21'), ('TR192_3_22', 'TR192_22', 'TR192_3'), ('TR192_3_22', 'TR192_3', 'TR192_22'), ('TR192_3_6', 'TR192_3', 'TR192_6'), ('TR192_3_6', 'TR192_6', 'TR192_3'), ('TR192_4_7', 'TR192_4', 'TR192_7'), ('TR192_4_7', 'TR192_7', 'TR192_4'), ('TR192_5_10', 'TR192_10', 'TR192_5'), ('TR192_5_10', 'TR192_5', 'TR192_10'), ('TR192_5_11', 'TR192_11', 'TR192_5'), ('TR192_5_11', 'TR192_5', 'TR192_11'), ('TR192_5_9', 'TR192_5', 'TR192_9'), ('TR192_5_9', 'TR192_9', 'TR192_5'), ('TR192_6_12', 'TR192_12', 'TR192_6'), ('TR192_6_12', 'TR192_6', 'TR192_12'), ('TR192_7_14', 'TR192_14', 'TR192_7'), ('TR192_7_14', 'TR192_7', 'TR192_14'), ('TR192_9_15', 'TR192_15', 'TR192_9'), ('TR192_9_15', 'TR192_9', 'TR192_15'), ('TR193_10_11', 'TR193_10', 'TR193_11'), ('TR193_10_11', 'TR193_11', 'TR193_10'), ('TR193_10_14', 'TR193_10', 'TR193_14'), ('TR193_10_14', 'TR193_14', 'TR193_10'), ('TR193_10_49', 'TR193_10', 'TR193_49'), ('TR193_10_49', 'TR193_49', 'TR193_10'), ('TR193_11_12', 'TR193_11', 'TR193_12'), ('TR193_11_12', 'TR193_12', 'TR193_11'), ('TR193_11_17', 'TR193_11', 'TR193_17'), ('TR193_11_17', 'TR193_17', 'TR193_11'), ('TR193_12_13', 'TR193_12', 'TR193_13'), ('TR193_12_13', 'TR193_13', 'TR193_12'), ('TR193_12_50', 'TR193_12', 'TR193_50'), ('TR193_12_50', 'TR193_50', 'TR193_12'), ('TR193_12_51', 'TR193_12', 'TR193_51'), ('TR193_12_51', 'TR193_51', 'TR193_12'), ('TR193_13_52', 'TR193_13', 'TR193_52'), ('TR193_13_52', 'TR193_52', 'TR193_13'), ('TR193_13_53', 'TR193_13', 'TR193_53'), ('TR193_13_53', 'TR193_53', 'TR193_13'), ('TR193_14_15', 'TR193_14', 'TR193_15'), ('TR193_14_15', 'TR193_15', 'TR193_14'), ('TR193_14_54', 'TR193_14', 'TR193_54'), ('TR193_14_54', 'TR193_54', 'TR193_14'), ('TR193_14_55', 'TR193_14', 'TR193_55'), ('TR193_14_55', 'TR193_55', 'TR193_14'), ('TR193_15_16', 'TR193_15', 'TR193_16'), ('TR193_15_16', 'TR193_16', 'TR193_15'), ('TR193_15_18', 'TR193_15', 'TR193_18'), ('TR193_15_18', 'TR193_18', 'TR193_15'), ('TR193_15_56', 'TR193_15', 'TR193_56'), ('TR193_15_56', 'TR193_56', 'TR193_15'), ('TR193_16_17', 'TR193_16', 'TR193_17'), ('TR193_16_17', 'TR193_17', 'TR193_16'), ('TR193_16_21', 'TR193_16', 'TR193_21'), ('TR193_16_21', 'TR193_21', 'TR193_16'), ('TR193_16_57', 'TR193_16', 'TR193_57'), ('TR193_16_57', 'TR193_57', 'TR193_16'), ('TR193_17_58', 'TR193_17', 'TR193_58'), ('TR193_17_58', 'TR193_58', 'TR193_17'), ('TR193_17_59', 'TR193_17', 'TR193_59'), ('TR193_17_59', 'TR193_59', 'TR193_17'), ('TR193_18_19', 'TR193_18', 'TR193_19'), ('TR193_18_19', 'TR193_19', 'TR193_18'), ('TR193_18_22', 'TR193_18', 'TR193_22'), ('TR193_18_22', 'TR193_22', 'TR193_18'), ('TR193_18_60', 'TR193_18', 'TR193_60'), ('TR193_18_60', 'TR193_60', 'TR193_18'), ('TR193_19_20', 'TR193_19', 'TR193_20'), ('TR193_19_20', 'TR193_20', 'TR193_19'), ('TR193_19_34', 'TR193_19', 'TR193_34'), ('TR193_19_34', 'TR193_34', 'TR193_19'), ('TR193_19_61', 'TR193_19', 'TR193_61'), ('TR193_19_61', 'TR193_61', 'TR193_19'), ('TR193_1_6', 'TR193_1', 'TR193_6'), ('TR193_1_6', 'TR193_6', 'TR193_1'), ('TR193_1_7', 'TR193_1', 'TR193_7'), ('TR193_1_7', 'TR193_7', 'TR193_1'), ('TR193_20_21', 'TR193_20', 'TR193_21'), ('TR193_20_21', 'TR193_21', 'TR193_20'), ('TR193_20_23', 'TR193_20', 'TR193_23'), ('TR193_20_23', 'TR193_23', 'TR193_20'), ('TR193_20_62', 'TR193_20', 'TR193_62'), ('TR193_20_62', 'TR193_62', 'TR193_20'), ('TR193_21_63', 'TR193_21', 'TR193_63'), ('TR193_21_63', 'TR193_63', 'TR193_21'), ('TR193_21_64', 'TR193_21', 'TR193_64'), ('TR193_21_64', 'TR193_64', 'TR193_21'), ('TR193_22_36', 'TR193_22', 'TR193_36'), ('TR193_22_36', 'TR193_36', 'TR193_22'), ('TR193_23_24', 'TR193_23', 'TR193_24'), ('TR193_23_24', 'TR193_24', 'TR193_23'), ('TR193_24_25', 'TR193_24', 'TR193_25'), ('TR193_24_25', 'TR193_25', 'TR193_24'), ('TR193_25_30', 'TR193_25', 'TR193_30'), ('TR193_25_30', 'TR193_30', 'TR193_25'), ('TR193_26_27', 'TR193_26', 'TR193_27'), ('TR193_26_27', 'TR193_27', 'TR193_26'), ('TR193_26_65', 'TR193_26', 'TR193_65'), ('TR193_26_65', 'TR193_65', 'TR193_26'), ('TR193_27_35', 'TR193_27', 'TR193_35'), ('TR193_27_35', 'TR193_35', 'TR193_27'), ('TR193_28_29', 'TR193_28', 'TR193_29'), ('TR193_28_29', 'TR193_29', 'TR193_28'), ('TR193_28_31', 'TR193_28', 'TR193_31'), ('TR193_28_31', 'TR193_31', 'TR193_28'), ('TR193_29_32', 'TR193_29', 'TR193_32'), ('TR193_29_32', 'TR193_32', 'TR193_29'), ('TR193_2_3', 'TR193_2', 'TR193_3'), ('TR193_2_3', 'TR193_3', 'TR193_2'), ('TR193_2_9', 'TR193_2', 'TR193_9'), ('TR193_2_9', 'TR193_9', 'TR193_2'), ('TR193_30_66', 'TR193_30', 'TR193_66'), ('TR193_30_66', 'TR193_66', 'TR193_30'), ('TR193_31_39', 'TR193_31', 'TR193_39'), ('TR193_31_39', 'TR193_39', 'TR193_31'), ('TR193_32_40', 'TR193_32', 'TR193_40'), ('TR193_32_40', 'TR193_40', 'TR193_32'), ('TR193_34_41', 'TR193_34', 'TR193_41'), ('TR193_34_41', 'TR193_41', 'TR193_34'), ('TR193_35_42', 'TR193_35', 'TR193_42'), ('TR193_35_42', 'TR193_42', 'TR193_35'), ('TR193_36_43', 'TR193_36', 'TR193_43'), ('TR193_36_43', 'TR193_43', 'TR193_36'), ('TR193_38_44', 'TR193_38', 'TR193_44'), ('TR193_38_44', 'TR193_44', 'TR193_38'), ('TR193_39_67', 'TR193_39', 'TR193_67'), ('TR193_39_67', 'TR193_67', 'TR193_39'), ('TR193_39_68', 'TR193_39', 'TR193_68'), ('TR193_39_68', 'TR193_68', 'TR193_39'), ('TR193_39_69', 'TR193_39', 'TR193_69'), ('TR193_39_69', 'TR193_69', 'TR193_39'), ('TR193_3_45', 'TR193_3', 'TR193_45'), ('TR193_3_45', 'TR193_45', 'TR193_3'), ('TR193_40_70', 'TR193_40', 'TR193_70'), ('TR193_40_70', 'TR193_70', 'TR193_40'), ('TR193_40_71', 'TR193_40', 'TR193_71'), ('TR193_40_71', 'TR193_71', 'TR193_40'), ('TR193_40_72', 'TR193_40', 'TR193_72'), ('TR193_40_72', 'TR193_72', 'TR193_40'), ('TR193_41_73', 'TR193_41', 'TR193_73'), ('TR193_41_73', 'TR193_73', 'TR193_41'), ('TR193_41_74', 'TR193_41', 'TR193_74'), ('TR193_41_74', 'TR193_74', 'TR193_41'), ('TR193_41_75', 'TR193_41', 'TR193_75'), ('TR193_41_75', 'TR193_75', 'TR193_41'), ('TR193_42_76', 'TR193_42', 'TR193_76'), ('TR193_42_76', 'TR193_76', 'TR193_42'), ('TR193_42_77', 'TR193_42', 'TR193_77'), ('TR193_42_77', 'TR193_77', 'TR193_42'), ('TR193_42_78', 'TR193_42', 'TR193_78'), ('TR193_42_78', 'TR193_78', 'TR193_42'), ('TR193_43_79', 'TR193_43', 'TR193_79'), ('TR193_43_79', 'TR193_79', 'TR193_43'), ('TR193_43_80', 'TR193_43', 'TR193_80'), ('TR193_43_80', 'TR193_80', 'TR193_43'), ('TR193_43_81', 'TR193_43', 'TR193_81'), ('TR193_43_81', 'TR193_81', 'TR193_43'), ('TR193_44_82', 'TR193_44', 'TR193_82'), ('TR193_44_82', 'TR193_82', 'TR193_44'), ('TR193_44_83', 'TR193_44', 'TR193_83'), ('TR193_44_83', 'TR193_83', 'TR193_44'), ('TR193_44_84', 'TR193_44', 'TR193_84'), ('TR193_44_84', 'TR193_84', 'TR193_44'), ('TR193_4_46', 'TR193_4', 'TR193_46'), ('TR193_4_46', 'TR193_46', 'TR193_4'), ('TR193_4_5', 'TR193_4', 'TR193_5'), ('TR193_4_5', 'TR193_5', 'TR193_4'), ('TR193_5_38', 'TR193_38', 'TR193_5'), ('TR193_5_38', 'TR193_5', 'TR193_38'), ('TR193_6_47', 'TR193_47', 'TR193_6'), ('TR193_6_47', 'TR193_6', 'TR193_47'), ('TR193_7_48', 'TR193_48', 'TR193_7'), ('TR193_7_48', 'TR193_7', 'TR193_48'), ('TR193_7_8', 'TR193_7', 'TR193_8'), ('TR193_7_8', 'TR193_8', 'TR193_7'), ('TR193_8_10', 'TR193_10', 'TR193_8'), ('TR193_8_10', 'TR193_8', 'TR193_10'), ('TR193_9_13', 'TR193_13', 'TR193_9'), ('TR193_9_13', 'TR193_9', 'TR193_13'), ('TR195_10_11', 'TR195_10', 'TR195_11'), ('TR195_10_11', 'TR195_11', 'TR195_10'), ('TR195_10_25', 'TR195_10', 'TR195_25'), ('TR195_10_25', 'TR195_25', 'TR195_10'), ('TR195_11_26', 'TR195_11', 'TR195_26'), ('TR195_11_26', 'TR195_26', 'TR195_11'), ('TR195_12_27', 'TR195_12', 'TR195_27'), ('TR195_12_27', 'TR195_27', 'TR195_12'), ('TR195_13_14', 'TR195_13', 'TR195_14'), ('TR195_13_14', 'TR195_14', 'TR195_13'), ('TR195_13_15', 'TR195_13', 'TR195_15'), ('TR195_13_15', 'TR195_15', 'TR195_13'), ('TR195_13_16', 'TR195_13', 'TR195_16'), ('TR195_13_16', 'TR195_16', 'TR195_13'), ('TR195_2_3', 'TR195_2', 'TR195_3'), ('TR195_2_3', 'TR195_3', 'TR195_2'), ('TR195_2_4', 'TR195_2', 'TR195_4'), ('TR195_2_4', 'TR195_4', 'TR195_2'), ('TR195_3_5', 'TR195_3', 'TR195_5'), ('TR195_3_5', 'TR195_5', 'TR195_3'), ('TR195_3_6', 'TR195_3', 'TR195_6'), ('TR195_3_6', 'TR195_6', 'TR195_3'), ('TR195_4_17', 'TR195_17', 'TR195_4'), ('TR195_4_17', 'TR195_4', 'TR195_17'), ('TR195_4_7', 'TR195_4', 'TR195_7'), ('TR195_4_7', 'TR195_7', 'TR195_4'), ('TR195_5_18', 'TR195_18', 'TR195_5'), ('TR195_5_18', 'TR195_5', 'TR195_18'), ('TR195_5_19', 'TR195_19', 'TR195_5'), ('TR195_5_19', 'TR195_5', 'TR195_19'), ('TR195_5_20', 'TR195_20', 'TR195_5'), ('TR195_5_20', 'TR195_5', 'TR195_20'), ('TR195_6_21', 'TR195_21', 'TR195_6'), ('TR195_6_21', 'TR195_6', 'TR195_21'), ('TR195_6_22', 'TR195_22', 'TR195_6'), ('TR195_6_22', 'TR195_6', 'TR195_22'), ('TR195_6_23', 'TR195_23', 'TR195_6'), ('TR195_6_23', 'TR195_6', 'TR195_23'), ('TR195_7_12', 'TR195_12', 'TR195_7'), ('TR195_7_12', 'TR195_7', 'TR195_12'), ('TR195_8_24', 'TR195_24', 'TR195_8'), ('TR195_8_24', 'TR195_8', 'TR195_24'), ('TR195_8_9', 'TR195_8', 'TR195_9'), ('TR195_8_9', 'TR195_9', 'TR195_8'), ('TR195_9_13', 'TR195_13', 'TR195_9'), ('TR195_9_13', 'TR195_9', 'TR195_13'), ('TR196_10_11', 'TR196_10', 'TR196_11'), ('TR196_10_11', 'TR196_11', 'TR196_10'), ('TR196_11_12', 'TR196_11', 'TR196_12'), ('TR196_11_12', 'TR196_12', 'TR196_11'), ('TR196_12_18', 'TR196_12', 'TR196_18'), ('TR196_12_18', 'TR196_18', 'TR196_12'), ('TR196_14_15', 'TR196_14', 'TR196_15'), ('TR196_14_15', 'TR196_15', 'TR196_14'), ('TR196_14_29', 'TR196_14', 'TR196_29'), ('TR196_14_29', 'TR196_29', 'TR196_14'), ('TR196_15_30', 'TR196_15', 'TR196_30'), ('TR196_15_30', 'TR196_30', 'TR196_15'), ('TR196_16_17', 'TR196_16', 'TR196_17'), ('TR196_16_17', 'TR196_17', 'TR196_16'), ('TR196_16_31', 'TR196_16', 'TR196_31'), ('TR196_16_31', 'TR196_31', 'TR196_16'), ('TR196_17_32', 'TR196_17', 'TR196_32'), ('TR196_17_32', 'TR196_32', 'TR196_17'), ('TR196_18_19', 'TR196_18', 'TR196_19'), ('TR196_18_19', 'TR196_19', 'TR196_18'), ('TR196_19_33', 'TR196_19', 'TR196_33'), ('TR196_19_33', 'TR196_33', 'TR196_19'), ('TR196_19_34', 'TR196_19', 'TR196_34'), ('TR196_19_34', 'TR196_34', 'TR196_19'), ('TR196_1_20', 'TR196_1', 'TR196_20'), ('TR196_1_20', 'TR196_20', 'TR196_1'), ('TR196_1_6', 'TR196_1', 'TR196_6'), ('TR196_1_6', 'TR196_6', 'TR196_1'), ('TR196_2_21', 'TR196_2', 'TR196_21'), ('TR196_2_21', 'TR196_21', 'TR196_2'), ('TR196_2_3', 'TR196_2', 'TR196_3'), ('TR196_2_3', 'TR196_3', 'TR196_2'), ('TR196_3_22', 'TR196_22', 'TR196_3'), ('TR196_3_22', 'TR196_3', 'TR196_22'), ('TR196_4_23', 'TR196_23', 'TR196_4'), ('TR196_4_23', 'TR196_4', 'TR196_23'), ('TR196_4_5', 'TR196_4', 'TR196_5'), ('TR196_4_5', 'TR196_5', 'TR196_4'), ('TR196_5_7', 'TR196_5', 'TR196_7'), ('TR196_5_7', 'TR196_7', 'TR196_5'), ('TR196_6_24', 'TR196_24', 'TR196_6'), ('TR196_6_24', 'TR196_6', 'TR196_24'), ('TR196_7_25', 'TR196_25', 'TR196_7'), ('TR196_7_25', 'TR196_7', 'TR196_25'), ('TR196_8_26', 'TR196_26', 'TR196_8'), ('TR196_8_26', 'TR196_8', 'TR196_26'), ('TR196_8_9', 'TR196_8', 'TR196_9'), ('TR196_8_9', 'TR196_9', 'TR196_8'), ('TR196_9_10', 'TR196_10', 'TR196_9'), ('TR196_9_10', 'TR196_9', 'TR196_10'), ('TR196_9_27', 'TR196_27', 'TR196_9'), ('TR196_9_27', 'TR196_9', 'TR196_27'), ('TR196_9_28', 'TR196_28', 'TR196_9'), ('TR196_9_28', 'TR196_9', 'TR196_28'), ('TR198_10_15', 'TR198_10', 'TR198_15'), ('TR198_10_15', 'TR198_15', 'TR198_10'), ('TR198_11_22', 'TR198_11', 'TR198_22'), ('TR198_11_22', 'TR198_22', 'TR198_11'), ('TR198_12_13', 'TR198_12', 'TR198_13'), ('TR198_12_13', 'TR198_13', 'TR198_12'), ('TR198_12_20', 'TR198_12', 'TR198_20'), ('TR198_12_20', 'TR198_20', 'TR198_12'), ('TR198_13_19', 'TR198_13', 'TR198_19'), ('TR198_13_19', 'TR198_19', 'TR198_13'), ('TR198_14_18', 'TR198_14', 'TR198_18'), ('TR198_14_18', 'TR198_18', 'TR198_14'), ('TR198_1_11', 'TR198_1', 'TR198_11'), ('TR198_1_11', 'TR198_11', 'TR198_1'), ('TR198_1_6', 'TR198_1', 'TR198_6'), ('TR198_1_6', 'TR198_6', 'TR198_1'), ('TR198_23_28', 'TR198_23', 'TR198_28'), ('TR198_23_28', 'TR198_28', 'TR198_23'), ('TR198_23_33', 'TR198_23', 'TR198_33'), ('TR198_23_33', 'TR198_33', 'TR198_23'), ('TR198_24_25', 'TR198_24', 'TR198_25'), ('TR198_24_25', 'TR198_25', 'TR198_24'), ('TR198_24_36', 'TR198_24', 'TR198_36'), ('TR198_24_36', 'TR198_36', 'TR198_24'), ('TR198_25_26', 'TR198_25', 'TR198_26'), ('TR198_25_26', 'TR198_26', 'TR198_25'), ('TR198_26_29', 'TR198_26', 'TR198_29'), ('TR198_26_29', 'TR198_29', 'TR198_26'), ('TR198_27_28', 'TR198_27', 'TR198_28'), ('TR198_27_28', 'TR198_28', 'TR198_27'), ('TR198_27_32', 'TR198_27', 'TR198_32'), ('TR198_27_32', 'TR198_32', 'TR198_27'), ('TR198_29_43', 'TR198_29', 'TR198_43'), ('TR198_29_43', 'TR198_43', 'TR198_29'), ('TR198_2_14', 'TR198_14', 'TR198_2'), ('TR198_2_14', 'TR198_2', 'TR198_14'), ('TR198_2_3', 'TR198_2', 'TR198_3'), ('TR198_2_3', 'TR198_3', 'TR198_2'), ('TR198_30_31', 'TR198_30', 'TR198_31'), ('TR198_30_31', 'TR198_31', 'TR198_30'), ('TR198_30_39', 'TR198_30', 'TR198_39'), ('TR198_30_39', 'TR198_39', 'TR198_30'), ('TR198_31_38', 'TR198_31', 'TR198_38'), ('TR198_31_38', 'TR198_38', 'TR198_31'), ('TR198_32_37', 'TR198_32', 'TR198_37'), ('TR198_32_37', 'TR198_37', 'TR198_32'), ('TR198_33_42', 'TR198_33', 'TR198_42'), ('TR198_33_42', 'TR198_42', 'TR198_33'), ('TR198_34_35', 'TR198_34', 'TR198_35'), ('TR198_34_35', 'TR198_35', 'TR198_34'), ('TR198_34_41', 'TR198_34', 'TR198_41'), ('TR198_34_41', 'TR198_41', 'TR198_34'), ('TR198_35_40', 'TR198_35', 'TR198_40'), ('TR198_35_40', 'TR198_40', 'TR198_35'), ('TR198_36_44', 'TR198_36', 'TR198_44'), ('TR198_36_44', 'TR198_44', 'TR198_36'), ('TR198_3_4', 'TR198_3', 'TR198_4'), ('TR198_3_4', 'TR198_4', 'TR198_3'), ('TR198_4_7', 'TR198_4', 'TR198_7'), ('TR198_4_7', 'TR198_7', 'TR198_4'), ('TR198_5_10', 'TR198_10', 'TR198_5'), ('TR198_5_10', 'TR198_5', 'TR198_10'), ('TR198_5_6', 'TR198_5', 'TR198_6'), ('TR198_5_6', 'TR198_6', 'TR198_5'), ('TR198_7_21', 'TR198_21', 'TR198_7'), ('TR198_7_21', 'TR198_7', 'TR198_21'), ('TR198_8_17', 'TR198_17', 'TR198_8'), ('TR198_8_17', 'TR198_8', 'TR198_17'), ('TR198_8_9', 'TR198_8', 'TR198_9'), ('TR198_8_9', 'TR198_9', 'TR198_8'), ('TR198_9_16', 'TR198_16', 'TR198_9'), ('TR198_9_16', 'TR198_9', 'TR198_16'), ('TR200_1_6', 'TR200_1', 'TR200_6'), ('TR200_1_6', 'TR200_6', 'TR200_1'), ('TR200_1_7', 'TR200_1', 'TR200_7'), ('TR200_1_7', 'TR200_7', 'TR200_1'), ('TR200_20_21', 'TR200_20', 'TR200_21'), ('TR200_20_21', 'TR200_21', 'TR200_20'), ('TR200_22_23', 'TR200_22', 'TR200_23'), ('TR200_22_23', 'TR200_23', 'TR200_22'), ('TR200_2_10', 'TR200_10', 'TR200_2'), ('TR200_2_10', 'TR200_2', 'TR200_10'), ('TR200_2_3', 'TR200_2', 'TR200_3'), ('TR200_2_3', 'TR200_3', 'TR200_2'), ('TR200_3_11', 'TR200_11', 'TR200_3'), ('TR200_3_11', 'TR200_3', 'TR200_11'), ('TR200_4_12', 'TR200_12', 'TR200_4'), ('TR200_4_12', 'TR200_4', 'TR200_12'), ('TR200_4_5', 'TR200_4', 'TR200_5'), ('TR200_4_5', 'TR200_5', 'TR200_4'), ('TR200_5_8', 'TR200_5', 'TR200_8'), ('TR200_5_8', 'TR200_8', 'TR200_5'), ('TR200_6_9', 'TR200_6', 'TR200_9'), ('TR200_6_9', 'TR200_9', 'TR200_6'), ('TR200_7_13', 'TR200_13', 'TR200_7'), ('TR200_7_13', 'TR200_7', 'TR200_13'), ('TR200_7_14', 'TR200_14', 'TR200_7'), ('TR200_7_14', 'TR200_7', 'TR200_14'), ('TR200_8_15', 'TR200_15', 'TR200_8'), ('TR200_8_15', 'TR200_8', 'TR200_15'), ('TR200_8_16', 'TR200_16', 'TR200_8'), ('TR200_8_16', 'TR200_8', 'TR200_16'), ('TR200_9_17', 'TR200_17', 'TR200_9'), ('TR200_9_17', 'TR200_9', 'TR200_17'), ('TR200_9_18', 'TR200_18', 'TR200_9'), ('TR200_9_18', 'TR200_9', 'TR200_18'), ('TR200_9_19', 'TR200_19', 'TR200_9'), ('TR200_9_19', 'TR200_9', 'TR200_19'), ('TR201_10_20', 'TR201_10', 'TR201_20'), ('TR201_10_20', 'TR201_20', 'TR201_10'), ('TR201_11_21', 'TR201_11', 'TR201_21'), ('TR201_11_21', 'TR201_21', 'TR201_11'), ('TR201_12_13', 'TR201_12', 'TR201_13'), ('TR201_12_13', 'TR201_13', 'TR201_12'), ('TR201_12_17', 'TR201_12', 'TR201_17'), ('TR201_12_17', 'TR201_17', 'TR201_12'), ('TR201_13_18', 'TR201_13', 'TR201_18'), ('TR201_13_18', 'TR201_18', 'TR201_13'), ('TR201_14_22', 'TR201_14', 'TR201_22'), ('TR201_14_22', 'TR201_22', 'TR201_14'), ('TR201_1_6', 'TR201_1', 'TR201_6'), ('TR201_1_6', 'TR201_6', 'TR201_1'), ('TR201_1_7', 'TR201_1', 'TR201_7'), ('TR201_1_7', 'TR201_7', 'TR201_1'), ('TR201_2_10', 'TR201_10', 'TR201_2'), ('TR201_2_10', 'TR201_2', 'TR201_10'), ('TR201_2_3', 'TR201_2', 'TR201_3'), ('TR201_2_3', 'TR201_3', 'TR201_2'), ('TR201_3_4', 'TR201_3', 'TR201_4'), ('TR201_3_4', 'TR201_4', 'TR201_3'), ('TR201_4_11', 'TR201_11', 'TR201_4'), ('TR201_4_11', 'TR201_4', 'TR201_11'), ('TR201_5_14', 'TR201_14', 'TR201_5'), ('TR201_5_14', 'TR201_5', 'TR201_14'), ('TR201_5_6', 'TR201_5', 'TR201_6'), ('TR201_5_6', 'TR201_6', 'TR201_5'), ('TR201_7_19', 'TR201_19', 'TR201_7'), ('TR201_7_19', 'TR201_7', 'TR201_19'), ('TR201_8_15', 'TR201_15', 'TR201_8'), ('TR201_8_15', 'TR201_8', 'TR201_15'), ('TR201_8_9', 'TR201_8', 'TR201_9'), ('TR201_8_9', 'TR201_9', 'TR201_8'), ('TR201_9_16', 'TR201_16', 'TR201_9'), ('TR201_9_16', 'TR201_9', 'TR201_16'), ('TR202_10_15', 'TR202_10', 'TR202_15'), ('TR202_10_15', 'TR202_15', 'TR202_10'), ('TR202_11_22', 'TR202_11', 'TR202_22'), ('TR202_11_22', 'TR202_22', 'TR202_11'), ('TR202_12_13', 'TR202_12', 'TR202_13'), ('TR202_12_13', 'TR202_13', 'TR202_12'), ('TR202_12_20', 'TR202_12', 'TR202_20'), ('TR202_12_20', 'TR202_20', 'TR202_12'), ('TR202_13_19', 'TR202_13', 'TR202_19'), ('TR202_13_19', 'TR202_19', 'TR202_13'), ('TR202_14_18', 'TR202_14', 'TR202_18'), ('TR202_14_18', 'TR202_18', 'TR202_14'), ('TR202_1_11', 'TR202_1', 'TR202_11'), ('TR202_1_11', 'TR202_11', 'TR202_1'), ('TR202_1_6', 'TR202_1', 'TR202_6'), ('TR202_1_6', 'TR202_6', 'TR202_1'), ('TR202_23_28', 'TR202_23', 'TR202_28'), ('TR202_23_28', 'TR202_28', 'TR202_23'), ('TR202_23_33', 'TR202_23', 'TR202_33'), ('TR202_23_33', 'TR202_33', 'TR202_23'), ('TR202_24_25', 'TR202_24', 'TR202_25'), ('TR202_24_25', 'TR202_25', 'TR202_24'), ('TR202_24_36', 'TR202_24', 'TR202_36'), ('TR202_24_36', 'TR202_36', 'TR202_24'), ('TR202_25_26', 'TR202_25', 'TR202_26'), ('TR202_25_26', 'TR202_26', 'TR202_25'), ('TR202_26_29', 'TR202_26', 'TR202_29'), ('TR202_26_29', 'TR202_29', 'TR202_26'), ('TR202_27_28', 'TR202_27', 'TR202_28'), ('TR202_27_28', 'TR202_28', 'TR202_27'), ('TR202_27_32', 'TR202_27', 'TR202_32'), ('TR202_27_32', 'TR202_32', 'TR202_27'), ('TR202_29_43', 'TR202_29', 'TR202_43'), ('TR202_29_43', 'TR202_43', 'TR202_29'), ('TR202_2_14', 'TR202_14', 'TR202_2'), ('TR202_2_14', 'TR202_2', 'TR202_14'), ('TR202_2_3', 'TR202_2', 'TR202_3'), ('TR202_2_3', 'TR202_3', 'TR202_2'), ('TR202_30_31', 'TR202_30', 'TR202_31'), ('TR202_30_31', 'TR202_31', 'TR202_30'), ('TR202_30_39', 'TR202_30', 'TR202_39'), ('TR202_30_39', 'TR202_39', 'TR202_30'), ('TR202_31_38', 'TR202_31', 'TR202_38'), ('TR202_31_38', 'TR202_38', 'TR202_31'), ('TR202_32_37', 'TR202_32', 'TR202_37'), ('TR202_32_37', 'TR202_37', 'TR202_32'), ('TR202_33_42', 'TR202_33', 'TR202_42'), ('TR202_33_42', 'TR202_42', 'TR202_33'), ('TR202_34_35', 'TR202_34', 'TR202_35'), ('TR202_34_35', 'TR202_35', 'TR202_34'), ('TR202_34_41', 'TR202_34', 'TR202_41'), ('TR202_34_41', 'TR202_41', 'TR202_34'), ('TR202_35_40', 'TR202_35', 'TR202_40'), ('TR202_35_40', 'TR202_40', 'TR202_35'), ('TR202_36_44', 'TR202_36', 'TR202_44'), ('TR202_36_44', 'TR202_44', 'TR202_36'), ('TR202_3_4', 'TR202_3', 'TR202_4'), ('TR202_3_4', 'TR202_4', 'TR202_3'), ('TR202_4_7', 'TR202_4', 'TR202_7'), ('TR202_4_7', 'TR202_7', 'TR202_4'), ('TR202_5_10', 'TR202_10', 'TR202_5'), ('TR202_5_10', 'TR202_5', 'TR202_10'), ('TR202_5_6', 'TR202_5', 'TR202_6'), ('TR202_5_6', 'TR202_6', 'TR202_5'), ('TR202_7_21', 'TR202_21', 'TR202_7'), ('TR202_7_21', 'TR202_7', 'TR202_21'), ('TR202_8_17', 'TR202_17', 'TR202_8'), ('TR202_8_17', 'TR202_8', 'TR202_17'), ('TR202_8_9', 'TR202_8', 'TR202_9'), ('TR202_8_9', 'TR202_9', 'TR202_8'), ('TR202_9_16', 'TR202_16', 'TR202_9'), ('TR202_9_16', 'TR202_9', 'TR202_16'), ('TR203_1_6', 'TR203_1', 'TR203_6'), ('TR203_1_6', 'TR203_6', 'TR203_1'), ('TR203_1_8', 'TR203_1', 'TR203_8'), ('TR203_1_8', 'TR203_8', 'TR203_1'), ('TR203_2_3', 'TR203_2', 'TR203_3'), ('TR203_2_3', 'TR203_3', 'TR203_2'), ('TR203_2_9', 'TR203_2', 'TR203_9'), ('TR203_2_9', 'TR203_9', 'TR203_2'), ('TR203_3_10', 'TR203_10', 'TR203_3'), ('TR203_3_10', 'TR203_3', 'TR203_10'), ('TR203_4_11', 'TR203_11', 'TR203_4'), ('TR203_4_11', 'TR203_4', 'TR203_11'), ('TR203_4_5', 'TR203_4', 'TR203_5'), ('TR203_4_5', 'TR203_5', 'TR203_4'), ('TR203_5_7', 'TR203_5', 'TR203_7'), ('TR203_5_7', 'TR203_7', 'TR203_5'), ('TR203_6_12', 'TR203_12', 'TR203_6'), ('TR203_6_12', 'TR203_6', 'TR203_12'), ('TR203_7_13', 'TR203_13', 'TR203_7'), ('TR203_7_13', 'TR203_7', 'TR203_13'), ('TR204_10_16', 'TR204_10', 'TR204_16'), ('TR204_10_16', 'TR204_16', 'TR204_10'), ('TR204_12_13', 'TR204_12', 'TR204_13'), ('TR204_12_13', 'TR204_13', 'TR204_12'), ('TR204_12_24', 'TR204_12', 'TR204_24'), ('TR204_12_24', 'TR204_24', 'TR204_12'), ('TR204_13_25', 'TR204_13', 'TR204_25'), ('TR204_13_25', 'TR204_25', 'TR204_13'), ('TR204_14_15', 'TR204_14', 'TR204_15'), ('TR204_14_15', 'TR204_15', 'TR204_14'), ('TR204_14_26', 'TR204_14', 'TR204_26'), ('TR204_14_26', 'TR204_26', 'TR204_14'), ('TR204_15_27', 'TR204_15', 'TR204_27'), ('TR204_15_27', 'TR204_27', 'TR204_15'), ('TR204_16_28', 'TR204_16', 'TR204_28'), ('TR204_16_28', 'TR204_28', 'TR204_16'), ('TR204_1_17', 'TR204_1', 'TR204_17'), ('TR204_1_17', 'TR204_17', 'TR204_1'), ('TR204_1_6', 'TR204_1', 'TR204_6'), ('TR204_1_6', 'TR204_6', 'TR204_1'), ('TR204_2_18', 'TR204_18', 'TR204_2'), ('TR204_2_18', 'TR204_2', 'TR204_18'), ('TR204_2_3', 'TR204_2', 'TR204_3'), ('TR204_2_3', 'TR204_3', 'TR204_2'), ('TR204_3_19', 'TR204_19', 'TR204_3'), ('TR204_3_19', 'TR204_3', 'TR204_19'), ('TR204_4_20', 'TR204_20', 'TR204_4'), ('TR204_4_20', 'TR204_4', 'TR204_20'), ('TR204_4_5', 'TR204_4', 'TR204_5'), ('TR204_4_5', 'TR204_5', 'TR204_4'), ('TR204_5_7', 'TR204_5', 'TR204_7'), ('TR204_5_7', 'TR204_7', 'TR204_5'), ('TR204_6_21', 'TR204_21', 'TR204_6'), ('TR204_6_21', 'TR204_6', 'TR204_21'), ('TR204_7_22', 'TR204_22', 'TR204_7'), ('TR204_7_22', 'TR204_7', 'TR204_22'), ('TR204_7_8', 'TR204_7', 'TR204_8'), ('TR204_7_8', 'TR204_8', 'TR204_7'), ('TR204_7_9', 'TR204_7', 'TR204_9'), ('TR204_7_9', 'TR204_9', 'TR204_7'), ('TR204_8_10', 'TR204_10', 'TR204_8'), ('TR204_8_10', 'TR204_8', 'TR204_10'), ('TR204_9_23', 'TR204_23', 'TR204_9'), ('TR204_9_23', 'TR204_9', 'TR204_23'), ('TR205_10_22', 'TR205_10', 'TR205_22'), ('TR205_10_22', 'TR205_22', 'TR205_10'), ('TR205_11_13', 'TR205_11', 'TR205_13'), ('TR205_11_13', 'TR205_13', 'TR205_11'), ('TR205_11_23', 'TR205_11', 'TR205_23'), ('TR205_11_23', 'TR205_23', 'TR205_11'), ('TR205_12_14', 'TR205_12', 'TR205_14'), ('TR205_12_14', 'TR205_14', 'TR205_12'), ('TR205_13_15', 'TR205_13', 'TR205_15'), ('TR205_13_15', 'TR205_15', 'TR205_13'), ('TR205_14_24', 'TR205_14', 'TR205_24'), ('TR205_14_24', 'TR205_24', 'TR205_14'), ('TR205_14_25', 'TR205_14', 'TR205_25'), ('TR205_14_25', 'TR205_25', 'TR205_14'), ('TR205_15_26', 'TR205_15', 'TR205_26'), ('TR205_15_26', 'TR205_26', 'TR205_15'), ('TR205_15_27', 'TR205_15', 'TR205_27'), ('TR205_15_27', 'TR205_27', 'TR205_15'), ('TR205_1_2', 'TR205_1', 'TR205_2'), ('TR205_1_2', 'TR205_2', 'TR205_1'), ('TR205_1_3', 'TR205_1', 'TR205_3'), ('TR205_1_3', 'TR205_3', 'TR205_1'), ('TR205_2_5', 'TR205_2', 'TR205_5'), ('TR205_2_5', 'TR205_5', 'TR205_2'), ('TR205_3_7', 'TR205_3', 'TR205_7'), ('TR205_3_7', 'TR205_7', 'TR205_3'), ('TR205_4_16', 'TR205_16', 'TR205_4'), ('TR205_4_16', 'TR205_4', 'TR205_16'), ('TR205_4_8', 'TR205_4', 'TR205_8'), ('TR205_4_8', 'TR205_8', 'TR205_4'), ('TR205_5_17', 'TR205_17', 'TR205_5'), ('TR205_5_17', 'TR205_5', 'TR205_17'), ('TR205_6_10', 'TR205_10', 'TR205_6'), ('TR205_6_10', 'TR205_6', 'TR205_10'), ('TR205_6_18', 'TR205_18', 'TR205_6'), ('TR205_6_18', 'TR205_6', 'TR205_18'), ('TR205_7_19', 'TR205_19', 'TR205_7'), ('TR205_7_19', 'TR205_7', 'TR205_19'), ('TR205_8_20', 'TR205_20', 'TR205_8'), ('TR205_8_20', 'TR205_8', 'TR205_20'), ('TR205_9_12', 'TR205_12', 'TR205_9'), ('TR205_9_12', 'TR205_9', 'TR205_12'), ('TR205_9_21', 'TR205_21', 'TR205_9'), ('TR205_9_21', 'TR205_9', 'TR205_21'), ('TR206_1_2', 'TR206_1', 'TR206_2'), ('TR206_1_2', 'TR206_2', 'TR206_1'), ('TR206_1_3', 'TR206_1', 'TR206_3'), ('TR206_1_3', 'TR206_3', 'TR206_1'), ('TR206_1_4', 'TR206_1', 'TR206_4'), ('TR206_1_4', 'TR206_4', 'TR206_1'), ('TR206_1_7', 'TR206_1', 'TR206_7'), ('TR206_1_7', 'TR206_7', 'TR206_1'), ('TR206_2_5', 'TR206_2', 'TR206_5'), ('TR206_2_5', 'TR206_5', 'TR206_2'), ('TR206_2_8', 'TR206_2', 'TR206_8'), ('TR206_2_8', 'TR206_8', 'TR206_2'), ('TR206_2_9', 'TR206_2', 'TR206_9'), ('TR206_2_9', 'TR206_9', 'TR206_2'), ('TR206_3_10', 'TR206_10', 'TR206_3'), ('TR206_3_10', 'TR206_3', 'TR206_10'), ('TR206_3_11', 'TR206_11', 'TR206_3'), ('TR206_3_11', 'TR206_3', 'TR206_11'), ('TR206_3_6', 'TR206_3', 'TR206_6'), ('TR206_3_6', 'TR206_6', 'TR206_3'), ('TR207_10_19', 'TR207_10', 'TR207_19'), ('TR207_10_19', 'TR207_19', 'TR207_10'), ('TR207_11_12', 'TR207_11', 'TR207_12'), ('TR207_11_12', 'TR207_12', 'TR207_11'), ('TR207_11_14', 'TR207_11', 'TR207_14'), ('TR207_11_14', 'TR207_14', 'TR207_11'), ('TR207_12_20', 'TR207_12', 'TR207_20'), ('TR207_12_20', 'TR207_20', 'TR207_12'), ('TR207_13_21', 'TR207_13', 'TR207_21'), ('TR207_13_21', 'TR207_21', 'TR207_13'), ('TR207_14_15', 'TR207_14', 'TR207_15'), ('TR207_14_15', 'TR207_15', 'TR207_14'), ('TR207_15_22', 'TR207_15', 'TR207_22'), ('TR207_15_22', 'TR207_22', 'TR207_15'), ('TR207_15_23', 'TR207_15', 'TR207_23'), ('TR207_15_23', 'TR207_23', 'TR207_15'), ('TR207_15_24', 'TR207_15', 'TR207_24'), ('TR207_15_24', 'TR207_24', 'TR207_15'), ('TR207_2_3', 'TR207_2', 'TR207_3'), ('TR207_2_3', 'TR207_3', 'TR207_2'), ('TR207_2_4', 'TR207_2', 'TR207_4'), ('TR207_2_4', 'TR207_4', 'TR207_2'), ('TR207_3_17', 'TR207_17', 'TR207_3'), ('TR207_3_17', 'TR207_3', 'TR207_17'), ('TR207_5_16', 'TR207_16', 'TR207_5'), ('TR207_5_16', 'TR207_5', 'TR207_16'), ('TR207_5_6', 'TR207_5', 'TR207_6'), ('TR207_5_6', 'TR207_6', 'TR207_5'), ('TR207_6_8', 'TR207_6', 'TR207_8'), ('TR207_6_8', 'TR207_8', 'TR207_6'), ('TR207_8_13', 'TR207_13', 'TR207_8'), ('TR207_8_13', 'TR207_8', 'TR207_13'), ('TR207_9_10', 'TR207_10', 'TR207_9'), ('TR207_9_10', 'TR207_9', 'TR207_10'), ('TR207_9_18', 'TR207_18', 'TR207_9'), ('TR207_9_18', 'TR207_9', 'TR207_18'), ('TR208_10_11', 'TR208_10', 'TR208_11'), ('TR208_10_11', 'TR208_11', 'TR208_10'), ('TR208_10_15', 'TR208_10', 'TR208_15'), ('TR208_10_15', 'TR208_15', 'TR208_10'), ('TR208_11_18', 'TR208_11', 'TR208_18'), ('TR208_11_18', 'TR208_18', 'TR208_11'), ('TR208_12_13', 'TR208_12', 'TR208_13'), ('TR208_12_13', 'TR208_13', 'TR208_12'), ('TR208_12_32', 'TR208_12', 'TR208_32'), ('TR208_12_32', 'TR208_32', 'TR208_12'), ('TR208_13_33', 'TR208_13', 'TR208_33'), ('TR208_13_33', 'TR208_33', 'TR208_13'), ('TR208_14_19', 'TR208_14', 'TR208_19'), ('TR208_14_19', 'TR208_19', 'TR208_14'), ('TR208_15_34', 'TR208_15', 'TR208_34'), ('TR208_15_34', 'TR208_34', 'TR208_15'), ('TR208_16_17', 'TR208_16', 'TR208_17'), ('TR208_16_17', 'TR208_17', 'TR208_16'), ('TR208_16_35', 'TR208_16', 'TR208_35'), ('TR208_16_35', 'TR208_35', 'TR208_16'), ('TR208_17_20', 'TR208_17', 'TR208_20'), ('TR208_17_20', 'TR208_20', 'TR208_17'), ('TR208_18_36', 'TR208_18', 'TR208_36'), ('TR208_18_36', 'TR208_36', 'TR208_18'), ('TR208_19_37', 'TR208_19', 'TR208_37'), ('TR208_19_37', 'TR208_37', 'TR208_19'), ('TR208_1_3', 'TR208_1', 'TR208_3'), ('TR208_1_3', 'TR208_3', 'TR208_1'), ('TR208_20_21', 'TR208_20', 'TR208_21'), ('TR208_20_21', 'TR208_21', 'TR208_20'), ('TR208_24_25', 'TR208_24', 'TR208_25'), ('TR208_24_25', 'TR208_25', 'TR208_24'), ('TR208_2_4', 'TR208_2', 'TR208_4'), ('TR208_2_4', 'TR208_4', 'TR208_2'), ('TR208_3_9', 'TR208_3', 'TR208_9'), ('TR208_3_9', 'TR208_9', 'TR208_3'), ('TR208_4_14', 'TR208_14', 'TR208_4'), ('TR208_4_14', 'TR208_4', 'TR208_14'), ('TR208_5_28', 'TR208_28', 'TR208_5'), ('TR208_5_28', 'TR208_5', 'TR208_28'), ('TR208_5_6', 'TR208_5', 'TR208_6'), ('TR208_5_6', 'TR208_6', 'TR208_5'), ('TR208_6_29', 'TR208_29', 'TR208_6'), ('TR208_6_29', 'TR208_6', 'TR208_29'), ('TR208_7_24', 'TR208_24', 'TR208_7'), ('TR208_7_24', 'TR208_7', 'TR208_24'), ('TR208_7_8', 'TR208_7', 'TR208_8'), ('TR208_7_8', 'TR208_8', 'TR208_7'), ('TR208_8_30', 'TR208_30', 'TR208_8'), ('TR208_8_30', 'TR208_8', 'TR208_30'), ('TR208_9_31', 'TR208_31', 'TR208_9'), ('TR208_9_31', 'TR208_9', 'TR208_31'), ('TR209_10_20', 'TR209_10', 'TR209_20'), ('TR209_10_20', 'TR209_20', 'TR209_10'), ('TR209_11_21', 'TR209_11', 'TR209_21'), ('TR209_11_21', 'TR209_21', 'TR209_11'), ('TR209_12_13', 'TR209_12', 'TR209_13'), ('TR209_12_13', 'TR209_13', 'TR209_12'), ('TR209_12_17', 'TR209_12', 'TR209_17'), ('TR209_12_17', 'TR209_17', 'TR209_12'), ('TR209_13_18', 'TR209_13', 'TR209_18'), ('TR209_13_18', 'TR209_18', 'TR209_13'), ('TR209_14_22', 'TR209_14', 'TR209_22'), ('TR209_14_22', 'TR209_22', 'TR209_14'), ('TR209_1_6', 'TR209_1', 'TR209_6'), ('TR209_1_6', 'TR209_6', 'TR209_1'), ('TR209_1_7', 'TR209_1', 'TR209_7'), ('TR209_1_7', 'TR209_7', 'TR209_1'), ('TR209_2_10', 'TR209_10', 'TR209_2'), ('TR209_2_10', 'TR209_2', 'TR209_10'), ('TR209_2_3', 'TR209_2', 'TR209_3'), ('TR209_2_3', 'TR209_3', 'TR209_2'), ('TR209_3_4', 'TR209_3', 'TR209_4'), ('TR209_3_4', 'TR209_4', 'TR209_3'), ('TR209_4_11', 'TR209_11', 'TR209_4'), ('TR209_4_11', 'TR209_4', 'TR209_11'), ('TR209_5_14', 'TR209_14', 'TR209_5'), ('TR209_5_14', 'TR209_5', 'TR209_14'), ('TR209_5_6', 'TR209_5', 'TR209_6'), ('TR209_5_6', 'TR209_6', 'TR209_5'), ('TR209_7_19', 'TR209_19', 'TR209_7'), ('TR209_7_19', 'TR209_7', 'TR209_19'), ('TR209_8_15', 'TR209_15', 'TR209_8'), ('TR209_8_15', 'TR209_8', 'TR209_15'), ('TR209_8_9', 'TR209_8', 'TR209_9'), ('TR209_8_9', 'TR209_9', 'TR209_8'), ('TR209_9_16', 'TR209_16', 'TR209_9'), ('TR209_9_16', 'TR209_9', 'TR209_16'), ('TR210_1_2', 'TR210_1', 'TR210_2'), ('TR210_1_2', 'TR210_2', 'TR210_1'), ('TR210_1_4', 'TR210_1', 'TR210_4'), ('TR210_1_4', 'TR210_4', 'TR210_1'), ('TR210_1_5', 'TR210_1', 'TR210_5'), ('TR210_1_5', 'TR210_5', 'TR210_1'), ('TR210_1_6', 'TR210_1', 'TR210_6'), ('TR210_1_6', 'TR210_6', 'TR210_1'), ('TR210_2_3', 'TR210_2', 'TR210_3'), ('TR210_2_3', 'TR210_3', 'TR210_2'), ('TR210_2_7', 'TR210_2', 'TR210_7'), ('TR210_2_7', 'TR210_7', 'TR210_2'), ('TR210_2_8', 'TR210_2', 'TR210_8'), ('TR210_2_8', 'TR210_8', 'TR210_2'), ('TR211_10_11', 'TR211_10', 'TR211_11'), ('TR211_10_11', 'TR211_11', 'TR211_10'), ('TR211_10_15', 'TR211_10', 'TR211_15'), ('TR211_10_15', 'TR211_15', 'TR211_10'), ('TR211_11_18', 'TR211_11', 'TR211_18'), ('TR211_11_18', 'TR211_18', 'TR211_11'), ('TR211_12_13', 'TR211_12', 'TR211_13'), ('TR211_12_13', 'TR211_13', 'TR211_12'), ('TR211_12_33', 'TR211_12', 'TR211_33'), ('TR211_12_33', 'TR211_33', 'TR211_12'), ('TR211_13_34', 'TR211_13', 'TR211_34'), ('TR211_13_34', 'TR211_34', 'TR211_13'), ('TR211_14_19', 'TR211_14', 'TR211_19'), ('TR211_14_19', 'TR211_19', 'TR211_14'), ('TR211_15_20', 'TR211_15', 'TR211_20'), ('TR211_15_20', 'TR211_20', 'TR211_15'), ('TR211_16_17', 'TR211_16', 'TR211_17'), ('TR211_16_17', 'TR211_17', 'TR211_16'), ('TR211_16_35', 'TR211_16', 'TR211_35'), ('TR211_16_35', 'TR211_35', 'TR211_16'), ('TR211_17_24', 'TR211_17', 'TR211_24'), ('TR211_17_24', 'TR211_24', 'TR211_17'), ('TR211_18_36', 'TR211_18', 'TR211_36'), ('TR211_18_36', 'TR211_36', 'TR211_18'), ('TR211_19_37', 'TR211_19', 'TR211_37'), ('TR211_19_37', 'TR211_37', 'TR211_19'), ('TR211_1_28', 'TR211_1', 'TR211_28'), ('TR211_1_28', 'TR211_28', 'TR211_1'), ('TR211_1_6', 'TR211_1', 'TR211_6'), ('TR211_1_6', 'TR211_6', 'TR211_1'), ('TR211_20_21', 'TR211_20', 'TR211_21'), ('TR211_20_21', 'TR211_21', 'TR211_20'), ('TR211_24_25', 'TR211_24', 'TR211_25'), ('TR211_24_25', 'TR211_25', 'TR211_24'), ('TR211_2_29', 'TR211_2', 'TR211_29'), ('TR211_2_29', 'TR211_29', 'TR211_2'), ('TR211_2_3', 'TR211_2', 'TR211_3'), ('TR211_2_3', 'TR211_3', 'TR211_2'), ('TR211_3_7', 'TR211_3', 'TR211_7'), ('TR211_3_7', 'TR211_7', 'TR211_3'), ('TR211_4_30', 'TR211_30', 'TR211_4'), ('TR211_4_30', 'TR211_4', 'TR211_30'), ('TR211_4_5', 'TR211_4', 'TR211_5'), ('TR211_4_5', 'TR211_5', 'TR211_4'), ('TR211_5_31', 'TR211_31', 'TR211_5'), ('TR211_5_31', 'TR211_5', 'TR211_31'), ('TR211_6_32', 'TR211_32', 'TR211_6'), ('TR211_6_32', 'TR211_6', 'TR211_32'), ('TR211_8_9', 'TR211_8', 'TR211_9'), ('TR211_8_9', 'TR211_9', 'TR211_8'), ('TR211_9_14', 'TR211_14', 'TR211_9'), ('TR211_9_14', 'TR211_9', 'TR211_14'), ('TR212_11_12', 'TR212_11', 'TR212_12'), ('TR212_11_12', 'TR212_12', 'TR212_11'), ('TR212_11_35', 'TR212_11', 'TR212_35'), ('TR212_11_35', 'TR212_35', 'TR212_11'), ('TR212_11_36', 'TR212_11', 'TR212_36'), ('TR212_11_36', 'TR212_36', 'TR212_11'), ('TR212_12_13', 'TR212_12', 'TR212_13'), ('TR212_12_13', 'TR212_13', 'TR212_12'), ('TR212_12_23', 'TR212_12', 'TR212_23'), ('TR212_12_23', 'TR212_23', 'TR212_12'), ('TR212_12_37', 'TR212_12', 'TR212_37'), ('TR212_12_37', 'TR212_37', 'TR212_12'), ('TR212_13_14', 'TR212_13', 'TR212_14'), ('TR212_13_14', 'TR212_14', 'TR212_13'), ('TR212_13_38', 'TR212_13', 'TR212_38'), ('TR212_13_38', 'TR212_38', 'TR212_13'), ('TR212_13_39', 'TR212_13', 'TR212_39'), ('TR212_13_39', 'TR212_39', 'TR212_13'), ('TR212_14_15', 'TR212_14', 'TR212_15'), ('TR212_14_15', 'TR212_15', 'TR212_14'), ('TR212_14_40', 'TR212_14', 'TR212_40'), ('TR212_14_40', 'TR212_40', 'TR212_14'), ('TR212_14_41', 'TR212_14', 'TR212_41'), ('TR212_14_41', 'TR212_41', 'TR212_14'), ('TR212_15_16', 'TR212_15', 'TR212_16'), ('TR212_15_16', 'TR212_16', 'TR212_15'), ('TR212_15_42', 'TR212_15', 'TR212_42'), ('TR212_15_42', 'TR212_42', 'TR212_15'), ('TR212_15_43', 'TR212_15', 'TR212_43'), ('TR212_15_43', 'TR212_43', 'TR212_15'), ('TR212_16_44', 'TR212_16', 'TR212_44'), ('TR212_16_44', 'TR212_44', 'TR212_16'), ('TR212_16_45', 'TR212_16', 'TR212_45'), ('TR212_16_45', 'TR212_45', 'TR212_16'), ('TR212_16_46', 'TR212_16', 'TR212_46'), ('TR212_16_46', 'TR212_46', 'TR212_16'), ('TR212_17_18', 'TR212_17', 'TR212_18'), ('TR212_17_18', 'TR212_18', 'TR212_17'), ('TR212_17_47', 'TR212_17', 'TR212_47'), ('TR212_17_47', 'TR212_47', 'TR212_17'), ('TR212_17_48', 'TR212_17', 'TR212_48'), ('TR212_17_48', 'TR212_48', 'TR212_17'), ('TR212_18_19', 'TR212_18', 'TR212_19'), ('TR212_18_19', 'TR212_19', 'TR212_18'), ('TR212_18_25', 'TR212_18', 'TR212_25'), ('TR212_18_25', 'TR212_25', 'TR212_18'), ('TR212_18_49', 'TR212_18', 'TR212_49'), ('TR212_18_49', 'TR212_49', 'TR212_18'), ('TR212_19_20', 'TR212_19', 'TR212_20'), ('TR212_19_20', 'TR212_20', 'TR212_19'), ('TR212_19_50', 'TR212_19', 'TR212_50'), ('TR212_19_50', 'TR212_50', 'TR212_19'), ('TR212_19_51', 'TR212_19', 'TR212_51'), ('TR212_19_51', 'TR212_51', 'TR212_19'), ('TR212_1_11', 'TR212_1', 'TR212_11'), ('TR212_1_11', 'TR212_11', 'TR212_1'), ('TR212_1_2', 'TR212_1', 'TR212_2'), ('TR212_1_2', 'TR212_2', 'TR212_1'), ('TR212_20_21', 'TR212_20', 'TR212_21'), ('TR212_20_21', 'TR212_21', 'TR212_20'), ('TR212_20_52', 'TR212_20', 'TR212_52'), ('TR212_20_52', 'TR212_52', 'TR212_20'), ('TR212_20_53', 'TR212_20', 'TR212_53'), ('TR212_20_53', 'TR212_53', 'TR212_20'), ('TR212_21_22', 'TR212_21', 'TR212_22'), ('TR212_21_22', 'TR212_22', 'TR212_21'), ('TR212_21_54', 'TR212_21', 'TR212_54'), ('TR212_21_54', 'TR212_54', 'TR212_21'), ('TR212_21_55', 'TR212_21', 'TR212_55'), ('TR212_21_55', 'TR212_55', 'TR212_21'), ('TR212_22_56', 'TR212_22', 'TR212_56'), ('TR212_22_56', 'TR212_56', 'TR212_22'), ('TR212_22_57', 'TR212_22', 'TR212_57'), ('TR212_22_57', 'TR212_57', 'TR212_22'), ('TR212_22_58', 'TR212_22', 'TR212_58'), ('TR212_22_58', 'TR212_58', 'TR212_22'), ('TR212_23_24', 'TR212_23', 'TR212_24'), ('TR212_23_24', 'TR212_24', 'TR212_23'), ('TR212_23_59', 'TR212_23', 'TR212_59'), ('TR212_23_59', 'TR212_59', 'TR212_23'), ('TR212_23_60', 'TR212_23', 'TR212_60'), ('TR212_23_60', 'TR212_60', 'TR212_23'), ('TR212_24_61', 'TR212_24', 'TR212_61'), ('TR212_24_61', 'TR212_61', 'TR212_24'), ('TR212_24_62', 'TR212_24', 'TR212_62'), ('TR212_24_62', 'TR212_62', 'TR212_24'), ('TR212_24_63', 'TR212_24', 'TR212_63'), ('TR212_24_63', 'TR212_63', 'TR212_24'), ('TR212_25_26', 'TR212_25', 'TR212_26'), ('TR212_25_26', 'TR212_26', 'TR212_25'), ('TR212_25_64', 'TR212_25', 'TR212_64'), ('TR212_25_64', 'TR212_64', 'TR212_25'), ('TR212_25_65', 'TR212_25', 'TR212_65'), ('TR212_25_65', 'TR212_65', 'TR212_25'), ('TR212_26_66', 'TR212_26', 'TR212_66'), ('TR212_26_66', 'TR212_66', 'TR212_26'), ('TR212_26_67', 'TR212_26', 'TR212_67'), ('TR212_26_67', 'TR212_67', 'TR212_26'), ('TR212_26_68', 'TR212_26', 'TR212_68'), ('TR212_26_68', 'TR212_68', 'TR212_26'), ('TR212_2_3', 'TR212_2', 'TR212_3'), ('TR212_2_3', 'TR212_3', 'TR212_2'), ('TR212_3_27', 'TR212_27', 'TR212_3'), ('TR212_3_27', 'TR212_3', 'TR212_27'), ('TR212_3_28', 'TR212_28', 'TR212_3'), ('TR212_3_28', 'TR212_3', 'TR212_28'), ('TR212_3_5', 'TR212_3', 'TR212_5'), ('TR212_3_5', 'TR212_5', 'TR212_3'), ('TR212_5_29', 'TR212_29', 'TR212_5'), ('TR212_5_29', 'TR212_5', 'TR212_29'), ('TR212_5_30', 'TR212_30', 'TR212_5'), ('TR212_5_30', 'TR212_5', 'TR212_30'), ('TR212_5_6', 'TR212_5', 'TR212_6'), ('TR212_5_6', 'TR212_6', 'TR212_5'), ('TR212_6_31', 'TR212_31', 'TR212_6'), ('TR212_6_31', 'TR212_6', 'TR212_31'), ('TR212_6_32', 'TR212_32', 'TR212_6'), ('TR212_6_32', 'TR212_6', 'TR212_32'), ('TR212_6_7', 'TR212_6', 'TR212_7'), ('TR212_6_7', 'TR212_7', 'TR212_6'), ('TR212_7_33', 'TR212_33', 'TR212_7'), ('TR212_7_33', 'TR212_7', 'TR212_33'), ('TR212_7_34', 'TR212_34', 'TR212_7'), ('TR212_7_34', 'TR212_7', 'TR212_34'), ('TR212_7_8', 'TR212_7', 'TR212_8'), ('TR212_7_8', 'TR212_8', 'TR212_7'), ('TR212_8_9', 'TR212_8', 'TR212_9'), ('TR212_8_9', 'TR212_9', 'TR212_8'), ('TR212_9_17', 'TR212_17', 'TR212_9'), ('TR212_9_17', 'TR212_9', 'TR212_17'), ('TR213_10_13', 'TR213_10', 'TR213_13'), ('TR213_10_13', 'TR213_13', 'TR213_10'), ('TR213_12_14', 'TR213_12', 'TR213_14'), ('TR213_12_14', 'TR213_14', 'TR213_12'), ('TR213_13_15', 'TR213_13', 'TR213_15'), ('TR213_13_15', 'TR213_15', 'TR213_13'), ('TR213_13_28', 'TR213_13', 'TR213_28'), ('TR213_13_28', 'TR213_28', 'TR213_13'), ('TR213_13_29', 'TR213_13', 'TR213_29'), ('TR213_13_29', 'TR213_29', 'TR213_13'), ('TR213_14_16', 'TR213_14', 'TR213_16'), ('TR213_14_16', 'TR213_16', 'TR213_14'), ('TR213_14_30', 'TR213_14', 'TR213_30'), ('TR213_14_30', 'TR213_30', 'TR213_14'), ('TR213_14_31', 'TR213_14', 'TR213_31'), ('TR213_14_31', 'TR213_31', 'TR213_14'), ('TR213_15_23', 'TR213_15', 'TR213_23'), ('TR213_15_23', 'TR213_23', 'TR213_15'), ('TR213_16_17', 'TR213_16', 'TR213_17'), ('TR213_16_17', 'TR213_17', 'TR213_16'), ('TR213_16_32', 'TR213_16', 'TR213_32'), ('TR213_16_32', 'TR213_32', 'TR213_16'), ('TR213_16_33', 'TR213_16', 'TR213_33'), ('TR213_16_33', 'TR213_33', 'TR213_16'), ('TR213_17_18', 'TR213_17', 'TR213_18'), ('TR213_17_18', 'TR213_18', 'TR213_17'), ('TR213_17_34', 'TR213_17', 'TR213_34'), ('TR213_17_34', 'TR213_34', 'TR213_17'), ('TR213_17_35', 'TR213_17', 'TR213_35'), ('TR213_17_35', 'TR213_35', 'TR213_17'), ('TR213_18_36', 'TR213_18', 'TR213_36'), ('TR213_18_36', 'TR213_36', 'TR213_18'), ('TR213_18_37', 'TR213_18', 'TR213_37'), ('TR213_18_37', 'TR213_37', 'TR213_18'), ('TR213_18_38', 'TR213_18', 'TR213_38'), ('TR213_18_38', 'TR213_38', 'TR213_18'), ('TR213_19_20', 'TR213_19', 'TR213_20'), ('TR213_19_20', 'TR213_20', 'TR213_19'), ('TR213_19_39', 'TR213_19', 'TR213_39'), ('TR213_19_39', 'TR213_39', 'TR213_19'), ('TR213_1_24', 'TR213_1', 'TR213_24'), ('TR213_1_24', 'TR213_24', 'TR213_1'), ('TR213_1_6', 'TR213_1', 'TR213_6'), ('TR213_1_6', 'TR213_6', 'TR213_1'), ('TR213_20_40', 'TR213_20', 'TR213_40'), ('TR213_20_40', 'TR213_40', 'TR213_20'), ('TR213_21_22', 'TR213_21', 'TR213_22'), ('TR213_21_22', 'TR213_22', 'TR213_21'), ('TR213_21_41', 'TR213_21', 'TR213_41'), ('TR213_21_41', 'TR213_41', 'TR213_21'), ('TR213_22_42', 'TR213_22', 'TR213_42'), ('TR213_22_42', 'TR213_42', 'TR213_22'), ('TR213_23_43', 'TR213_23', 'TR213_43'), ('TR213_23_43', 'TR213_43', 'TR213_23'), ('TR213_2_25', 'TR213_2', 'TR213_25'), ('TR213_2_25', 'TR213_25', 'TR213_2'), ('TR213_2_3', 'TR213_2', 'TR213_3'), ('TR213_2_3', 'TR213_3', 'TR213_2'), ('TR213_3_26', 'TR213_26', 'TR213_3'), ('TR213_3_26', 'TR213_3', 'TR213_26'), ('TR213_4_5', 'TR213_4', 'TR213_5'), ('TR213_4_5', 'TR213_5', 'TR213_4'), ('TR213_4_8', 'TR213_4', 'TR213_8'), ('TR213_4_8', 'TR213_8', 'TR213_4'), ('TR213_5_7', 'TR213_5', 'TR213_7'), ('TR213_5_7', 'TR213_7', 'TR213_5'), ('TR213_6_27', 'TR213_27', 'TR213_6'), ('TR213_6_27', 'TR213_6', 'TR213_27'), ('TR213_7_10', 'TR213_10', 'TR213_7'), ('TR213_7_10', 'TR213_7', 'TR213_10'), ('TR213_8_12', 'TR213_12', 'TR213_8'), ('TR213_8_12', 'TR213_8', 'TR213_12'), ('TR214_2_3', 'TR214_2', 'TR214_3'), ('TR214_2_3', 'TR214_3', 'TR214_2'), ('TR214_2_4', 'TR214_2', 'TR214_4'), ('TR214_2_4', 'TR214_4', 'TR214_2'), ('TR214_3_10', 'TR214_10', 'TR214_3'), ('TR214_3_10', 'TR214_3', 'TR214_10'), ('TR214_3_5', 'TR214_3', 'TR214_5'), ('TR214_3_5', 'TR214_5', 'TR214_3'), ('TR214_3_9', 'TR214_3', 'TR214_9'), ('TR214_3_9', 'TR214_9', 'TR214_3'), ('TR214_4_11', 'TR214_11', 'TR214_4'), ('TR214_4_11', 'TR214_4', 'TR214_11'), ('TR214_4_6', 'TR214_4', 'TR214_6'), ('TR214_4_6', 'TR214_6', 'TR214_4'), ('TR214_5_12', 'TR214_12', 'TR214_5'), ('TR214_5_12', 'TR214_5', 'TR214_12'), ('TR214_5_13', 'TR214_13', 'TR214_5'), ('TR214_5_13', 'TR214_5', 'TR214_13'), ('TR214_5_7', 'TR214_5', 'TR214_7'), ('TR214_5_7', 'TR214_7', 'TR214_5'), ('TR214_6_14', 'TR214_14', 'TR214_6'), ('TR214_6_14', 'TR214_6', 'TR214_14'), ('TR214_6_15', 'TR214_15', 'TR214_6'), ('TR214_6_15', 'TR214_6', 'TR214_15'), ('TR214_6_8', 'TR214_6', 'TR214_8'), ('TR214_6_8', 'TR214_8', 'TR214_6'), ('TR214_7_16', 'TR214_16', 'TR214_7'), ('TR214_7_16', 'TR214_7', 'TR214_16'), ('TR214_7_17', 'TR214_17', 'TR214_7'), ('TR214_7_17', 'TR214_7', 'TR214_17'), ('TR214_7_8', 'TR214_7', 'TR214_8'), ('TR214_7_8', 'TR214_8', 'TR214_7'), ('TR214_8_18', 'TR214_18', 'TR214_8'), ('TR214_8_18', 'TR214_8', 'TR214_18'), ('TR214_8_19', 'TR214_19', 'TR214_8'), ('TR214_8_19', 'TR214_8', 'TR214_19'), ('TR215_10_27', 'TR215_10', 'TR215_27'), ('TR215_10_27', 'TR215_27', 'TR215_10'), ('TR215_11_12', 'TR215_11', 'TR215_12'), ('TR215_11_12', 'TR215_12', 'TR215_11'), ('TR215_11_28', 'TR215_11', 'TR215_28'), ('TR215_11_28', 'TR215_28', 'TR215_11'), ('TR215_12_29', 'TR215_12', 'TR215_29'), ('TR215_12_29', 'TR215_29', 'TR215_12'), ('TR215_13_14', 'TR215_13', 'TR215_14'), ('TR215_13_14', 'TR215_14', 'TR215_13'), ('TR215_13_16', 'TR215_13', 'TR215_16'), ('TR215_13_16', 'TR215_16', 'TR215_13'), ('TR215_14_30', 'TR215_14', 'TR215_30'), ('TR215_14_30', 'TR215_30', 'TR215_14'), ('TR215_15_31', 'TR215_15', 'TR215_31'), ('TR215_15_31', 'TR215_31', 'TR215_15'), ('TR215_16_32', 'TR215_16', 'TR215_32'), ('TR215_16_32', 'TR215_32', 'TR215_16'), ('TR215_17_33', 'TR215_17', 'TR215_33'), ('TR215_17_33', 'TR215_33', 'TR215_17'), ('TR215_1_10', 'TR215_1', 'TR215_10'), ('TR215_1_10', 'TR215_10', 'TR215_1'), ('TR215_1_3', 'TR215_1', 'TR215_3'), ('TR215_1_3', 'TR215_3', 'TR215_1'), ('TR215_2_15', 'TR215_15', 'TR215_2'), ('TR215_2_15', 'TR215_2', 'TR215_15'), ('TR215_2_3', 'TR215_2', 'TR215_3'), ('TR215_2_3', 'TR215_3', 'TR215_2'), ('TR215_3_4', 'TR215_3', 'TR215_4'), ('TR215_3_4', 'TR215_4', 'TR215_3'), ('TR215_3_5', 'TR215_3', 'TR215_5'), ('TR215_3_5', 'TR215_5', 'TR215_3'), ('TR215_4_18', 'TR215_18', 'TR215_4'), ('TR215_4_18', 'TR215_4', 'TR215_18'), ('TR215_4_19', 'TR215_19', 'TR215_4'), ('TR215_4_19', 'TR215_4', 'TR215_19'), ('TR215_4_20', 'TR215_20', 'TR215_4'), ('TR215_4_20', 'TR215_4', 'TR215_20'), ('TR215_5_21', 'TR215_21', 'TR215_5'), ('TR215_5_21', 'TR215_5', 'TR215_21'), ('TR215_5_22', 'TR215_22', 'TR215_5'), ('TR215_5_22', 'TR215_5', 'TR215_22'), ('TR215_5_23', 'TR215_23', 'TR215_5'), ('TR215_5_23', 'TR215_5', 'TR215_23'), ('TR215_6_24', 'TR215_24', 'TR215_6'), ('TR215_6_24', 'TR215_6', 'TR215_24'), ('TR215_6_7', 'TR215_6', 'TR215_7'), ('TR215_6_7', 'TR215_7', 'TR215_6'), ('TR215_7_25', 'TR215_25', 'TR215_7'), ('TR215_7_25', 'TR215_7', 'TR215_25'), ('TR215_8_17', 'TR215_17', 'TR215_8'), ('TR215_8_17', 'TR215_8', 'TR215_17'), ('TR215_8_9', 'TR215_8', 'TR215_9'), ('TR215_8_9', 'TR215_9', 'TR215_8'), ('TR215_9_26', 'TR215_26', 'TR215_9'), ('TR215_9_26', 'TR215_9', 'TR215_26'), ('TR216_10_29', 'TR216_10', 'TR216_29'), ('TR216_10_29', 'TR216_29', 'TR216_10'), ('TR216_11_12', 'TR216_11', 'TR216_12'), ('TR216_11_12', 'TR216_12', 'TR216_11'), ('TR216_11_30', 'TR216_11', 'TR216_30'), ('TR216_11_30', 'TR216_30', 'TR216_11'), ('TR216_11_31', 'TR216_11', 'TR216_31'), ('TR216_11_31', 'TR216_31', 'TR216_11'), ('TR216_12_13', 'TR216_12', 'TR216_13'), ('TR216_12_13', 'TR216_13', 'TR216_12'), ('TR216_12_32', 'TR216_12', 'TR216_32'), ('TR216_12_32', 'TR216_32', 'TR216_12'), ('TR216_12_33', 'TR216_12', 'TR216_33'), ('TR216_12_33', 'TR216_33', 'TR216_12'), ('TR216_13_14', 'TR216_13', 'TR216_14'), ('TR216_13_14', 'TR216_14', 'TR216_13'), ('TR216_13_34', 'TR216_13', 'TR216_34'), ('TR216_13_34', 'TR216_34', 'TR216_13'), ('TR216_13_35', 'TR216_13', 'TR216_35'), ('TR216_13_35', 'TR216_35', 'TR216_13'), ('TR216_14_36', 'TR216_14', 'TR216_36'), ('TR216_14_36', 'TR216_36', 'TR216_14'), ('TR216_14_37', 'TR216_14', 'TR216_37'), ('TR216_14_37', 'TR216_37', 'TR216_14'), ('TR216_1_15', 'TR216_1', 'TR216_15'), ('TR216_1_15', 'TR216_15', 'TR216_1'), ('TR216_1_16', 'TR216_1', 'TR216_16'), ('TR216_1_16', 'TR216_16', 'TR216_1'), ('TR216_1_2', 'TR216_1', 'TR216_2'), ('TR216_1_2', 'TR216_2', 'TR216_1'), ('TR216_1_3', 'TR216_1', 'TR216_3'), ('TR216_1_3', 'TR216_3', 'TR216_1'), ('TR216_2_17', 'TR216_17', 'TR216_2'), ('TR216_2_17', 'TR216_2', 'TR216_17'), ('TR216_2_18', 'TR216_18', 'TR216_2'), ('TR216_2_18', 'TR216_2', 'TR216_18'), ('TR216_2_4', 'TR216_2', 'TR216_4'), ('TR216_2_4', 'TR216_4', 'TR216_2'), ('TR216_3_19', 'TR216_19', 'TR216_3'), ('TR216_3_19', 'TR216_3', 'TR216_19'), ('TR216_3_20', 'TR216_20', 'TR216_3'), ('TR216_3_20', 'TR216_3', 'TR216_20'), ('TR216_3_5', 'TR216_3', 'TR216_5'), ('TR216_3_5', 'TR216_5', 'TR216_3'), ('TR216_4_21', 'TR216_21', 'TR216_4'), ('TR216_4_21', 'TR216_4', 'TR216_21'), ('TR216_4_22', 'TR216_22', 'TR216_4'), ('TR216_4_22', 'TR216_4', 'TR216_22'), ('TR216_4_6', 'TR216_4', 'TR216_6'), ('TR216_4_6', 'TR216_6', 'TR216_4'), ('TR216_5_23', 'TR216_23', 'TR216_5'), ('TR216_5_23', 'TR216_5', 'TR216_23'), ('TR216_5_24', 'TR216_24', 'TR216_5'), ('TR216_5_24', 'TR216_5', 'TR216_24'), ('TR216_5_7', 'TR216_5', 'TR216_7'), ('TR216_5_7', 'TR216_7', 'TR216_5'), ('TR216_6_25', 'TR216_25', 'TR216_6'), ('TR216_6_25', 'TR216_6', 'TR216_25'), ('TR216_6_26', 'TR216_26', 'TR216_6'), ('TR216_6_26', 'TR216_6', 'TR216_26'), ('TR216_6_8', 'TR216_6', 'TR216_8'), ('TR216_6_8', 'TR216_8', 'TR216_6'), ('TR216_7_10', 'TR216_10', 'TR216_7'), ('TR216_7_10', 'TR216_7', 'TR216_10'), ('TR216_8_11', 'TR216_11', 'TR216_8'), ('TR216_8_11', 'TR216_8', 'TR216_11'), ('TR216_8_27', 'TR216_27', 'TR216_8'), ('TR216_8_27', 'TR216_8', 'TR216_27'), ('TR216_8_28', 'TR216_28', 'TR216_8'), ('TR216_8_28', 'TR216_8', 'TR216_28'), ('TR217_11_13', 'TR217_11', 'TR217_13'), ('TR217_11_13', 'TR217_13', 'TR217_11'), ('TR217_12_14', 'TR217_12', 'TR217_14'), ('TR217_12_14', 'TR217_14', 'TR217_12'), ('TR217_13_18', 'TR217_13', 'TR217_18'), ('TR217_13_18', 'TR217_18', 'TR217_13'), ('TR217_13_33', 'TR217_13', 'TR217_33'), ('TR217_13_33', 'TR217_33', 'TR217_13'), ('TR217_13_34', 'TR217_13', 'TR217_34'), ('TR217_13_34', 'TR217_34', 'TR217_13'), ('TR217_14_15', 'TR217_14', 'TR217_15'), ('TR217_14_15', 'TR217_15', 'TR217_14'), ('TR217_14_35', 'TR217_14', 'TR217_35'), ('TR217_14_35', 'TR217_35', 'TR217_14'), ('TR217_14_36', 'TR217_14', 'TR217_36'), ('TR217_14_36', 'TR217_36', 'TR217_14'), ('TR217_15_16', 'TR217_15', 'TR217_16'), ('TR217_15_16', 'TR217_16', 'TR217_15'), ('TR217_15_23', 'TR217_15', 'TR217_23'), ('TR217_15_23', 'TR217_23', 'TR217_15'), ('TR217_15_37', 'TR217_15', 'TR217_37'), ('TR217_15_37', 'TR217_37', 'TR217_15'), ('TR217_16_17', 'TR217_16', 'TR217_17'), ('TR217_16_17', 'TR217_17', 'TR217_16'), ('TR217_16_38', 'TR217_16', 'TR217_38'), ('TR217_16_38', 'TR217_38', 'TR217_16'), ('TR217_16_39', 'TR217_16', 'TR217_39'), ('TR217_16_39', 'TR217_39', 'TR217_16'), ('TR217_17_22', 'TR217_17', 'TR217_22'), ('TR217_17_22', 'TR217_22', 'TR217_17'), ('TR217_17_40', 'TR217_17', 'TR217_40'), ('TR217_17_40', 'TR217_40', 'TR217_17'), ('TR217_17_41', 'TR217_17', 'TR217_41'), ('TR217_17_41', 'TR217_41', 'TR217_17'), ('TR217_18_19', 'TR217_18', 'TR217_19'), ('TR217_18_19', 'TR217_19', 'TR217_18'), ('TR217_18_25', 'TR217_18', 'TR217_25'), ('TR217_18_25', 'TR217_25', 'TR217_18'), ('TR217_18_42', 'TR217_18', 'TR217_42'), ('TR217_18_42', 'TR217_42', 'TR217_18'), ('TR217_19_20', 'TR217_19', 'TR217_20'), ('TR217_19_20', 'TR217_20', 'TR217_19'), ('TR217_19_43', 'TR217_19', 'TR217_43'), ('TR217_19_43', 'TR217_43', 'TR217_19'), ('TR217_19_44', 'TR217_19', 'TR217_44'), ('TR217_19_44', 'TR217_44', 'TR217_19'), ('TR217_1_29', 'TR217_1', 'TR217_29'), ('TR217_1_29', 'TR217_29', 'TR217_1'), ('TR217_1_6', 'TR217_1', 'TR217_6'), ('TR217_1_6', 'TR217_6', 'TR217_1'), ('TR217_20_21', 'TR217_20', 'TR217_21'), ('TR217_20_21', 'TR217_21', 'TR217_20'), ('TR217_20_45', 'TR217_20', 'TR217_45'), ('TR217_20_45', 'TR217_45', 'TR217_20'), ('TR217_20_46', 'TR217_20', 'TR217_46'), ('TR217_20_46', 'TR217_46', 'TR217_20'), ('TR217_21_27', 'TR217_21', 'TR217_27'), ('TR217_21_27', 'TR217_27', 'TR217_21'), ('TR217_21_47', 'TR217_21', 'TR217_47'), ('TR217_21_47', 'TR217_47', 'TR217_21'), ('TR217_21_48', 'TR217_21', 'TR217_48'), ('TR217_21_48', 'TR217_48', 'TR217_21'), ('TR217_22_28', 'TR217_22', 'TR217_28'), ('TR217_22_28', 'TR217_28', 'TR217_22'), ('TR217_22_49', 'TR217_22', 'TR217_49'), ('TR217_22_49', 'TR217_49', 'TR217_22'), ('TR217_22_50', 'TR217_22', 'TR217_50'), ('TR217_22_50', 'TR217_50', 'TR217_22'), ('TR217_23_24', 'TR217_23', 'TR217_24'), ('TR217_23_24', 'TR217_24', 'TR217_23'), ('TR217_23_51', 'TR217_23', 'TR217_51'), ('TR217_23_51', 'TR217_51', 'TR217_23'), ('TR217_23_52', 'TR217_23', 'TR217_52'), ('TR217_23_52', 'TR217_52', 'TR217_23'), ('TR217_24_53', 'TR217_24', 'TR217_53'), ('TR217_24_53', 'TR217_53', 'TR217_24'), ('TR217_24_54', 'TR217_24', 'TR217_54'), ('TR217_24_54', 'TR217_54', 'TR217_24'), ('TR217_24_55', 'TR217_24', 'TR217_55'), ('TR217_24_55', 'TR217_55', 'TR217_24'), ('TR217_25_26', 'TR217_25', 'TR217_26'), ('TR217_25_26', 'TR217_26', 'TR217_25'), ('TR217_25_56', 'TR217_25', 'TR217_56'), ('TR217_25_56', 'TR217_56', 'TR217_25'), ('TR217_25_57', 'TR217_25', 'TR217_57'), ('TR217_25_57', 'TR217_57', 'TR217_25'), ('TR217_26_58', 'TR217_26', 'TR217_58'), ('TR217_26_58', 'TR217_58', 'TR217_26'), ('TR217_26_59', 'TR217_26', 'TR217_59'), ('TR217_26_59', 'TR217_59', 'TR217_26'), ('TR217_26_60', 'TR217_26', 'TR217_60'), ('TR217_26_60', 'TR217_60', 'TR217_26'), ('TR217_27_61', 'TR217_27', 'TR217_61'), ('TR217_27_61', 'TR217_61', 'TR217_27'), ('TR217_27_62', 'TR217_27', 'TR217_62'), ('TR217_27_62', 'TR217_62', 'TR217_27'), ('TR217_27_63', 'TR217_27', 'TR217_63'), ('TR217_27_63', 'TR217_63', 'TR217_27'), ('TR217_28_64', 'TR217_28', 'TR217_64'), ('TR217_28_64', 'TR217_64', 'TR217_28'), ('TR217_28_65', 'TR217_28', 'TR217_65'), ('TR217_28_65', 'TR217_65', 'TR217_28'), ('TR217_28_66', 'TR217_28', 'TR217_66'), ('TR217_28_66', 'TR217_66', 'TR217_28'), ('TR217_2_3', 'TR217_2', 'TR217_3'), ('TR217_2_3', 'TR217_3', 'TR217_2'), ('TR217_2_30', 'TR217_2', 'TR217_30'), ('TR217_2_30', 'TR217_30', 'TR217_2'), ('TR217_3_31', 'TR217_3', 'TR217_31'), ('TR217_3_31', 'TR217_31', 'TR217_3'), ('TR217_4_5', 'TR217_4', 'TR217_5'), ('TR217_4_5', 'TR217_5', 'TR217_4'), ('TR217_4_8', 'TR217_4', 'TR217_8'), ('TR217_4_8', 'TR217_8', 'TR217_4'), ('TR217_5_7', 'TR217_5', 'TR217_7'), ('TR217_5_7', 'TR217_7', 'TR217_5'), ('TR217_6_32', 'TR217_32', 'TR217_6'), ('TR217_6_32', 'TR217_6', 'TR217_32'), ('TR217_7_11', 'TR217_11', 'TR217_7'), ('TR217_7_11', 'TR217_7', 'TR217_11'), ('TR217_8_12', 'TR217_12', 'TR217_8'), ('TR217_8_12', 'TR217_8', 'TR217_12'), ('TR219_10_15', 'TR219_10', 'TR219_15'), ('TR219_10_15', 'TR219_15', 'TR219_10'), ('TR219_10_16', 'TR219_10', 'TR219_16'), ('TR219_10_16', 'TR219_16', 'TR219_10'), ('TR219_1_11', 'TR219_1', 'TR219_11'), ('TR219_1_11', 'TR219_11', 'TR219_1'), ('TR219_1_12', 'TR219_1', 'TR219_12'), ('TR219_1_12', 'TR219_12', 'TR219_1'), ('TR219_1_2', 'TR219_1', 'TR219_2'), ('TR219_1_2', 'TR219_2', 'TR219_1'), ('TR219_2_4', 'TR219_2', 'TR219_4'), ('TR219_2_4', 'TR219_4', 'TR219_2'), ('TR219_3_5', 'TR219_3', 'TR219_5'), ('TR219_3_5', 'TR219_5', 'TR219_3'), ('TR219_3_6', 'TR219_3', 'TR219_6'), ('TR219_3_6', 'TR219_6', 'TR219_3'), ('TR219_4_7', 'TR219_4', 'TR219_7'), ('TR219_4_7', 'TR219_7', 'TR219_4'), ('TR219_6_13', 'TR219_13', 'TR219_6'), ('TR219_6_13', 'TR219_6', 'TR219_13'), ('TR219_8_14', 'TR219_14', 'TR219_8'), ('TR219_8_14', 'TR219_8', 'TR219_14'), ('TR219_8_9', 'TR219_8', 'TR219_9'), ('TR219_8_9', 'TR219_9', 'TR219_8'), ('TR219_9_10', 'TR219_10', 'TR219_9'), ('TR219_9_10', 'TR219_9', 'TR219_10'), ('TR220_11_37', 'TR220_11', 'TR220_37'), ('TR220_11_37', 'TR220_37', 'TR220_11'), ('TR220_12_13', 'TR220_12', 'TR220_13'), ('TR220_12_13', 'TR220_13', 'TR220_12'), ('TR220_13_15', 'TR220_13', 'TR220_15'), ('TR220_13_15', 'TR220_15', 'TR220_13'), ('TR220_14_16', 'TR220_14', 'TR220_16'), ('TR220_14_16', 'TR220_16', 'TR220_14'), ('TR220_14_17', 'TR220_14', 'TR220_17'), ('TR220_14_17', 'TR220_17', 'TR220_14'), ('TR220_15_38', 'TR220_15', 'TR220_38'), ('TR220_15_38', 'TR220_38', 'TR220_15'), ('TR220_16_39', 'TR220_16', 'TR220_39'), ('TR220_16_39', 'TR220_39', 'TR220_16'), ('TR220_17_20', 'TR220_17', 'TR220_20'), ('TR220_17_20', 'TR220_20', 'TR220_17'), ('TR220_18_19', 'TR220_18', 'TR220_19'), ('TR220_18_19', 'TR220_19', 'TR220_18'), ('TR220_18_24', 'TR220_18', 'TR220_24'), ('TR220_18_24', 'TR220_24', 'TR220_18'), ('TR220_19_21', 'TR220_19', 'TR220_21'), ('TR220_19_21', 'TR220_21', 'TR220_19'), ('TR220_1_28', 'TR220_1', 'TR220_28'), ('TR220_1_28', 'TR220_28', 'TR220_1'), ('TR220_1_3', 'TR220_1', 'TR220_3'), ('TR220_1_3', 'TR220_3', 'TR220_1'), ('TR220_20_40', 'TR220_20', 'TR220_40'), ('TR220_20_40', 'TR220_40', 'TR220_20'), ('TR220_21_41', 'TR220_21', 'TR220_41'), ('TR220_21_41', 'TR220_41', 'TR220_21'), ('TR220_22_23', 'TR220_22', 'TR220_23'), ('TR220_22_23', 'TR220_23', 'TR220_22'), ('TR220_22_42', 'TR220_22', 'TR220_42'), ('TR220_22_42', 'TR220_42', 'TR220_22'), ('TR220_23_43', 'TR220_23', 'TR220_43'), ('TR220_23_43', 'TR220_43', 'TR220_23'), ('TR220_24_25', 'TR220_24', 'TR220_25'), ('TR220_24_25', 'TR220_25', 'TR220_24'), ('TR220_28_29', 'TR220_28', 'TR220_29'), ('TR220_28_29', 'TR220_29', 'TR220_28'), ('TR220_2_4', 'TR220_2', 'TR220_4'), ('TR220_2_4', 'TR220_4', 'TR220_2'), ('TR220_2_5', 'TR220_2', 'TR220_5'), ('TR220_2_5', 'TR220_5', 'TR220_2'), ('TR220_3_32', 'TR220_3', 'TR220_32'), ('TR220_3_32', 'TR220_32', 'TR220_3'), ('TR220_4_8', 'TR220_4', 'TR220_8'), ('TR220_4_8', 'TR220_8', 'TR220_4'), ('TR220_5_33', 'TR220_33', 'TR220_5'), ('TR220_5_33', 'TR220_5', 'TR220_33'), ('TR220_6_34', 'TR220_34', 'TR220_6'), ('TR220_6_34', 'TR220_6', 'TR220_34'), ('TR220_6_7', 'TR220_6', 'TR220_7'), ('TR220_6_7', 'TR220_7', 'TR220_6'), ('TR220_7_10', 'TR220_10', 'TR220_7'), ('TR220_7_10', 'TR220_7', 'TR220_10'), ('TR220_8_35', 'TR220_35', 'TR220_8'), ('TR220_8_35', 'TR220_8', 'TR220_35'), ('TR220_9_11', 'TR220_11', 'TR220_9'), ('TR220_9_11', 'TR220_9', 'TR220_11'), ('TR220_9_36', 'TR220_36', 'TR220_9'), ('TR220_9_36', 'TR220_9', 'TR220_36'), ('TR222_10_15', 'TR222_10', 'TR222_15'), ('TR222_10_15', 'TR222_15', 'TR222_10'), ('TR222_11_12', 'TR222_11', 'TR222_12'), ('TR222_11_12', 'TR222_12', 'TR222_11'), ('TR222_11_19', 'TR222_11', 'TR222_19'), ('TR222_11_19', 'TR222_19', 'TR222_11'), ('TR222_12_26', 'TR222_12', 'TR222_26'), ('TR222_12_26', 'TR222_26', 'TR222_12'), ('TR222_13_14', 'TR222_13', 'TR222_14'), ('TR222_13_14', 'TR222_14', 'TR222_13'), ('TR222_13_27', 'TR222_13', 'TR222_27'), ('TR222_13_27', 'TR222_27', 'TR222_13'), ('TR222_14_20', 'TR222_14', 'TR222_20'), ('TR222_14_20', 'TR222_20', 'TR222_14'), ('TR222_15_28', 'TR222_15', 'TR222_28'), ('TR222_15_28', 'TR222_28', 'TR222_15'), ('TR222_16_17', 'TR222_16', 'TR222_17'), ('TR222_16_17', 'TR222_17', 'TR222_16'), ('TR222_17_29', 'TR222_17', 'TR222_29'), ('TR222_17_29', 'TR222_29', 'TR222_17'), ('TR222_17_30', 'TR222_17', 'TR222_30'), ('TR222_17_30', 'TR222_30', 'TR222_17'), ('TR222_17_31', 'TR222_17', 'TR222_31'), ('TR222_17_31', 'TR222_31', 'TR222_17'), ('TR222_19_32', 'TR222_19', 'TR222_32'), ('TR222_19_32', 'TR222_32', 'TR222_19'), ('TR222_1_21', 'TR222_1', 'TR222_21'), ('TR222_1_21', 'TR222_21', 'TR222_1'), ('TR222_1_6', 'TR222_1', 'TR222_6'), ('TR222_1_6', 'TR222_6', 'TR222_1'), ('TR222_20_33', 'TR222_20', 'TR222_33'), ('TR222_20_33', 'TR222_33', 'TR222_20'), ('TR222_20_34', 'TR222_20', 'TR222_34'), ('TR222_20_34', 'TR222_34', 'TR222_20'), ('TR222_20_35', 'TR222_20', 'TR222_35'), ('TR222_20_35', 'TR222_35', 'TR222_20'), ('TR222_2_22', 'TR222_2', 'TR222_22'), ('TR222_2_22', 'TR222_22', 'TR222_2'), ('TR222_2_3', 'TR222_2', 'TR222_3'), ('TR222_2_3', 'TR222_3', 'TR222_2'), ('TR222_3_7', 'TR222_3', 'TR222_7'), ('TR222_3_7', 'TR222_7', 'TR222_3'), ('TR222_4_23', 'TR222_23', 'TR222_4'), ('TR222_4_23', 'TR222_4', 'TR222_23'), ('TR222_4_5', 'TR222_4', 'TR222_5'), ('TR222_4_5', 'TR222_5', 'TR222_4'), ('TR222_5_24', 'TR222_24', 'TR222_5'), ('TR222_5_24', 'TR222_5', 'TR222_24'), ('TR222_6_8', 'TR222_6', 'TR222_8'), ('TR222_6_8', 'TR222_8', 'TR222_6'), ('TR222_8_16', 'TR222_16', 'TR222_8'), ('TR222_8_16', 'TR222_8', 'TR222_16'), ('TR222_8_25', 'TR222_25', 'TR222_8'), ('TR222_8_25', 'TR222_8', 'TR222_25'), ('TR222_9_10', 'TR222_10', 'TR222_9'), ('TR222_9_10', 'TR222_9', 'TR222_10'), ('TR223_10_12', 'TR223_10', 'TR223_12'), ('TR223_10_12', 'TR223_12', 'TR223_10'), ('TR223_10_20', 'TR223_10', 'TR223_20'), ('TR223_10_20', 'TR223_20', 'TR223_10'), ('TR223_10_21', 'TR223_10', 'TR223_21'), ('TR223_10_21', 'TR223_21', 'TR223_10'), ('TR223_11_22', 'TR223_11', 'TR223_22'), ('TR223_11_22', 'TR223_22', 'TR223_11'), ('TR223_11_23', 'TR223_11', 'TR223_23'), ('TR223_11_23', 'TR223_23', 'TR223_11'), ('TR223_12_24', 'TR223_12', 'TR223_24'), ('TR223_12_24', 'TR223_24', 'TR223_12'), ('TR223_1_13', 'TR223_1', 'TR223_13'), ('TR223_1_13', 'TR223_13', 'TR223_1'), ('TR223_1_6', 'TR223_1', 'TR223_6'), ('TR223_1_6', 'TR223_6', 'TR223_1'), ('TR223_2_14', 'TR223_14', 'TR223_2'), ('TR223_2_14', 'TR223_2', 'TR223_14'), ('TR223_2_3', 'TR223_2', 'TR223_3'), ('TR223_2_3', 'TR223_3', 'TR223_2'), ('TR223_3_10', 'TR223_10', 'TR223_3'), ('TR223_3_10', 'TR223_3', 'TR223_10'), ('TR223_4_15', 'TR223_15', 'TR223_4'), ('TR223_4_15', 'TR223_4', 'TR223_15'), ('TR223_4_5', 'TR223_4', 'TR223_5'), ('TR223_4_5', 'TR223_5', 'TR223_4'), ('TR223_5_8', 'TR223_5', 'TR223_8'), ('TR223_5_8', 'TR223_8', 'TR223_5'), ('TR223_6_7', 'TR223_6', 'TR223_7'), ('TR223_6_7', 'TR223_7', 'TR223_6'), ('TR223_7_16', 'TR223_16', 'TR223_7'), ('TR223_7_16', 'TR223_7', 'TR223_16'), ('TR223_8_9', 'TR223_8', 'TR223_9'), ('TR223_8_9', 'TR223_9', 'TR223_8'), ('TR223_9_17', 'TR223_17', 'TR223_9'), ('TR223_9_17', 'TR223_9', 'TR223_17'), ('TR223_9_18', 'TR223_18', 'TR223_9'), ('TR223_9_18', 'TR223_9', 'TR223_18'), ('TR223_9_19', 'TR223_19', 'TR223_9'), ('TR223_9_19', 'TR223_9', 'TR223_19'), ('TR225_10_12', 'TR225_10', 'TR225_12'), ('TR225_10_12', 'TR225_12', 'TR225_10'), ('TR225_11_32', 'TR225_11', 'TR225_32'), ('TR225_11_32', 'TR225_32', 'TR225_11'), ('TR225_13_14', 'TR225_13', 'TR225_14'), ('TR225_13_14', 'TR225_14', 'TR225_13'), ('TR225_14_19', 'TR225_14', 'TR225_19'), ('TR225_14_19', 'TR225_19', 'TR225_14'), ('TR225_15_16', 'TR225_15', 'TR225_16'), ('TR225_15_16', 'TR225_16', 'TR225_15'), ('TR225_15_33', 'TR225_15', 'TR225_33'), ('TR225_15_33', 'TR225_33', 'TR225_15'), ('TR225_16_20', 'TR225_16', 'TR225_20'), ('TR225_16_20', 'TR225_20', 'TR225_16'), ('TR225_17_18', 'TR225_17', 'TR225_18'), ('TR225_17_18', 'TR225_18', 'TR225_17'), ('TR225_17_21', 'TR225_17', 'TR225_21'), ('TR225_17_21', 'TR225_21', 'TR225_17'), ('TR225_18_34', 'TR225_18', 'TR225_34'), ('TR225_18_34', 'TR225_34', 'TR225_18'), ('TR225_19_22', 'TR225_19', 'TR225_22'), ('TR225_19_22', 'TR225_22', 'TR225_19'), ('TR225_1_26', 'TR225_1', 'TR225_26'), ('TR225_1_26', 'TR225_26', 'TR225_1'), ('TR225_1_9', 'TR225_1', 'TR225_9'), ('TR225_1_9', 'TR225_9', 'TR225_1'), ('TR225_20_35', 'TR225_20', 'TR225_35'), ('TR225_20_35', 'TR225_35', 'TR225_20'), ('TR225_20_36', 'TR225_20', 'TR225_36'), ('TR225_20_36', 'TR225_36', 'TR225_20'), ('TR225_20_37', 'TR225_20', 'TR225_37'), ('TR225_20_37', 'TR225_37', 'TR225_20'), ('TR225_22_25', 'TR225_22', 'TR225_25'), ('TR225_22_25', 'TR225_25', 'TR225_22'), ('TR225_2_7', 'TR225_2', 'TR225_7'), ('TR225_2_7', 'TR225_7', 'TR225_2'), ('TR225_2_8', 'TR225_2', 'TR225_8'), ('TR225_2_8', 'TR225_8', 'TR225_2'), ('TR225_38_46', 'TR225_38', 'TR225_46'), ('TR225_38_46', 'TR225_46', 'TR225_38'), ('TR225_38_63', 'TR225_38', 'TR225_63'), ('TR225_38_63', 'TR225_63', 'TR225_38'), ('TR225_39_44', 'TR225_39', 'TR225_44'), ('TR225_39_44', 'TR225_44', 'TR225_39'), ('TR225_39_45', 'TR225_39', 'TR225_45'), ('TR225_39_45', 'TR225_45', 'TR225_39'), ('TR225_3_10', 'TR225_10', 'TR225_3'), ('TR225_3_10', 'TR225_3', 'TR225_10'), ('TR225_3_4', 'TR225_3', 'TR225_4'), ('TR225_3_4', 'TR225_4', 'TR225_3'), ('TR225_40_41', 'TR225_40', 'TR225_41'), ('TR225_40_41', 'TR225_41', 'TR225_40'), ('TR225_40_47', 'TR225_40', 'TR225_47'), ('TR225_40_47', 'TR225_47', 'TR225_40'), ('TR225_41_64', 'TR225_41', 'TR225_64'), ('TR225_41_64', 'TR225_64', 'TR225_41'), ('TR225_42_43', 'TR225_42', 'TR225_43'), ('TR225_42_43', 'TR225_43', 'TR225_42'), ('TR225_42_65', 'TR225_42', 'TR225_65'), ('TR225_42_65', 'TR225_65', 'TR225_42'), ('TR225_43_66', 'TR225_43', 'TR225_66'), ('TR225_43_66', 'TR225_66', 'TR225_43'), ('TR225_44_67', 'TR225_44', 'TR225_67'), ('TR225_44_67', 'TR225_67', 'TR225_44'), ('TR225_45_68', 'TR225_45', 'TR225_68'), ('TR225_45_68', 'TR225_68', 'TR225_45'), ('TR225_46_48', 'TR225_46', 'TR225_48'), ('TR225_46_48', 'TR225_48', 'TR225_46'), ('TR225_47_49', 'TR225_47', 'TR225_49'), ('TR225_47_49', 'TR225_49', 'TR225_47'), ('TR225_48_69', 'TR225_48', 'TR225_69'), ('TR225_48_69', 'TR225_69', 'TR225_48'), ('TR225_4_27', 'TR225_27', 'TR225_4'), ('TR225_4_27', 'TR225_4', 'TR225_27'), ('TR225_50_51', 'TR225_50', 'TR225_51'), ('TR225_50_51', 'TR225_51', 'TR225_50'), ('TR225_51_56', 'TR225_51', 'TR225_56'), ('TR225_51_56', 'TR225_56', 'TR225_51'), ('TR225_52_53', 'TR225_52', 'TR225_53'), ('TR225_52_53', 'TR225_53', 'TR225_52'), ('TR225_52_70', 'TR225_52', 'TR225_70'), ('TR225_52_70', 'TR225_70', 'TR225_52'), ('TR225_53_57', 'TR225_53', 'TR225_57'), ('TR225_53_57', 'TR225_57', 'TR225_53'), ('TR225_54_55', 'TR225_54', 'TR225_55'), ('TR225_54_55', 'TR225_55', 'TR225_54'), ('TR225_54_58', 'TR225_54', 'TR225_58'), ('TR225_54_58', 'TR225_58', 'TR225_54'), ('TR225_55_71', 'TR225_55', 'TR225_71'), ('TR225_55_71', 'TR225_71', 'TR225_55'), ('TR225_56_59', 'TR225_56', 'TR225_59'), ('TR225_56_59', 'TR225_59', 'TR225_56'), ('TR225_57_72', 'TR225_57', 'TR225_72'), ('TR225_57_72', 'TR225_72', 'TR225_57'), ('TR225_57_73', 'TR225_57', 'TR225_73'), ('TR225_57_73', 'TR225_73', 'TR225_57'), ('TR225_57_74', 'TR225_57', 'TR225_74'), ('TR225_57_74', 'TR225_74', 'TR225_57'), ('TR225_59_62', 'TR225_59', 'TR225_62'), ('TR225_59_62', 'TR225_62', 'TR225_59'), ('TR225_5_28', 'TR225_28', 'TR225_5'), ('TR225_5_28', 'TR225_5', 'TR225_28'), ('TR225_5_6', 'TR225_5', 'TR225_6'), ('TR225_5_6', 'TR225_6', 'TR225_5'), ('TR225_6_29', 'TR225_29', 'TR225_6'), ('TR225_6_29', 'TR225_6', 'TR225_29'), ('TR225_7_30', 'TR225_30', 'TR225_7'), ('TR225_7_30', 'TR225_7', 'TR225_30'), ('TR225_8_31', 'TR225_31', 'TR225_8'), ('TR225_8_31', 'TR225_8', 'TR225_31'), ('TR225_9_11', 'TR225_11', 'TR225_9'), ('TR225_9_11', 'TR225_9', 'TR225_11'), ('TR226_10_22', 'TR226_10', 'TR226_22'), ('TR226_10_22', 'TR226_22', 'TR226_10'), ('TR226_11_23', 'TR226_11', 'TR226_23'), ('TR226_11_23', 'TR226_23', 'TR226_11'), ('TR226_12_15', 'TR226_12', 'TR226_15'), ('TR226_12_15', 'TR226_15', 'TR226_12'), ('TR226_12_24', 'TR226_12', 'TR226_24'), ('TR226_12_24', 'TR226_24', 'TR226_12'), ('TR226_13_25', 'TR226_13', 'TR226_25'), ('TR226_13_25', 'TR226_25', 'TR226_13'), ('TR226_14_18', 'TR226_14', 'TR226_18'), ('TR226_14_18', 'TR226_18', 'TR226_14'), ('TR226_14_26', 'TR226_14', 'TR226_26'), ('TR226_14_26', 'TR226_26', 'TR226_14'), ('TR226_15_27', 'TR226_15', 'TR226_27'), ('TR226_15_27', 'TR226_27', 'TR226_15'), ('TR226_16_28', 'TR226_16', 'TR226_28'), ('TR226_16_28', 'TR226_28', 'TR226_16'), ('TR226_17_19', 'TR226_17', 'TR226_19'), ('TR226_17_19', 'TR226_19', 'TR226_17'), ('TR226_17_29', 'TR226_17', 'TR226_29'), ('TR226_17_29', 'TR226_29', 'TR226_17'), ('TR226_18_30', 'TR226_18', 'TR226_30'), ('TR226_18_30', 'TR226_30', 'TR226_18'), ('TR226_19_31', 'TR226_19', 'TR226_31'), ('TR226_19_31', 'TR226_31', 'TR226_19'), ('TR226_1_3', 'TR226_1', 'TR226_3'), ('TR226_1_3', 'TR226_3', 'TR226_1'), ('TR226_2_4', 'TR226_2', 'TR226_4'), ('TR226_2_4', 'TR226_4', 'TR226_2'), ('TR226_3_6', 'TR226_3', 'TR226_6'), ('TR226_3_6', 'TR226_6', 'TR226_3'), ('TR226_4_8', 'TR226_4', 'TR226_8'), ('TR226_4_8', 'TR226_8', 'TR226_4'), ('TR226_5_10', 'TR226_10', 'TR226_5'), ('TR226_5_10', 'TR226_5', 'TR226_10'), ('TR226_5_9', 'TR226_5', 'TR226_9'), ('TR226_5_9', 'TR226_9', 'TR226_5'), ('TR226_6_11', 'TR226_11', 'TR226_6'), ('TR226_6_11', 'TR226_6', 'TR226_11'), ('TR226_7_13', 'TR226_13', 'TR226_7'), ('TR226_7_13', 'TR226_7', 'TR226_13'), ('TR226_7_20', 'TR226_20', 'TR226_7'), ('TR226_7_20', 'TR226_7', 'TR226_20'), ('TR226_8_21', 'TR226_21', 'TR226_8'), ('TR226_8_21', 'TR226_8', 'TR226_21'), ('TR226_9_16', 'TR226_16', 'TR226_9'), ('TR226_9_16', 'TR226_9', 'TR226_16'), ('TR228_1_3', 'TR228_1', 'TR228_3'), ('TR228_1_3', 'TR228_3', 'TR228_1'), ('TR228_1_4', 'TR228_1', 'TR228_4'), ('TR228_1_4', 'TR228_4', 'TR228_1'), ('TR228_2_5', 'TR228_2', 'TR228_5'), ('TR228_2_5', 'TR228_5', 'TR228_2'), ('TR228_2_6', 'TR228_2', 'TR228_6'), ('TR228_2_6', 'TR228_6', 'TR228_2'), ('TR232_1_2', 'TR232_1', 'TR232_2'), ('TR232_1_2', 'TR232_2', 'TR232_1'), ('TR232_1_5', 'TR232_1', 'TR232_5'), ('TR232_1_5', 'TR232_5', 'TR232_1'), ('TR232_1_6', 'TR232_1', 'TR232_6'), ('TR232_1_6', 'TR232_6', 'TR232_1'), ('TR232_1_7', 'TR232_1', 'TR232_7'), ('TR232_1_7', 'TR232_7', 'TR232_1'), ('TR232_2_3', 'TR232_2', 'TR232_3'), ('TR232_2_3', 'TR232_3', 'TR232_2'), ('TR232_2_4', 'TR232_2', 'TR232_4'), ('TR232_2_4', 'TR232_4', 'TR232_2'), ('TR232_2_8', 'TR232_2', 'TR232_8'), ('TR232_2_8', 'TR232_8', 'TR232_2'), ('TR233_10_11', 'TR233_10', 'TR233_11'), ('TR233_10_11', 'TR233_11', 'TR233_10'), ('TR233_10_20', 'TR233_10', 'TR233_20'), ('TR233_10_20', 'TR233_20', 'TR233_10'), ('TR233_11_21', 'TR233_11', 'TR233_21'), ('TR233_11_21', 'TR233_21', 'TR233_11'), ('TR233_12_22', 'TR233_12', 'TR233_22'), ('TR233_12_22', 'TR233_22', 'TR233_12'), ('TR233_13_23', 'TR233_13', 'TR233_23'), ('TR233_13_23', 'TR233_23', 'TR233_13'), ('TR233_13_24', 'TR233_13', 'TR233_24'), ('TR233_13_24', 'TR233_24', 'TR233_13'), ('TR233_1_2', 'TR233_1', 'TR233_2'), ('TR233_1_2', 'TR233_2', 'TR233_1'), ('TR233_1_7', 'TR233_1', 'TR233_7'), ('TR233_1_7', 'TR233_7', 'TR233_1'), ('TR233_25_26', 'TR233_25', 'TR233_26'), ('TR233_25_26', 'TR233_26', 'TR233_25'), ('TR233_2_12', 'TR233_12', 'TR233_2'), ('TR233_2_12', 'TR233_2', 'TR233_12'), ('TR233_3_14', 'TR233_14', 'TR233_3'), ('TR233_3_14', 'TR233_3', 'TR233_14'), ('TR233_3_4', 'TR233_3', 'TR233_4'), ('TR233_3_4', 'TR233_4', 'TR233_3'), ('TR233_4_15', 'TR233_15', 'TR233_4'), ('TR233_4_15', 'TR233_4', 'TR233_15'), ('TR233_5_16', 'TR233_16', 'TR233_5'), ('TR233_5_16', 'TR233_5', 'TR233_16'), ('TR233_5_6', 'TR233_5', 'TR233_6'), ('TR233_5_6', 'TR233_6', 'TR233_5'), ('TR233_6_17', 'TR233_17', 'TR233_6'), ('TR233_6_17', 'TR233_6', 'TR233_17'), ('TR233_7_18', 'TR233_18', 'TR233_7'), ('TR233_7_18', 'TR233_7', 'TR233_18'), ('TR233_8_13', 'TR233_13', 'TR233_8'), ('TR233_8_13', 'TR233_8', 'TR233_13'), ('TR233_8_9', 'TR233_8', 'TR233_9'), ('TR233_8_9', 'TR233_9', 'TR233_8'), ('TR233_9_19', 'TR233_19', 'TR233_9'), ('TR233_9_19', 'TR233_9', 'TR233_19'), ('TR234_1_7', 'TR234_1', 'TR234_7'), ('TR234_1_7', 'TR234_7', 'TR234_1'), ('TR234_1_8', 'TR234_1', 'TR234_8'), ('TR234_1_8', 'TR234_8', 'TR234_1'), ('TR234_2_3', 'TR234_2', 'TR234_3'), ('TR234_2_3', 'TR234_3', 'TR234_2'), ('TR234_2_9', 'TR234_2', 'TR234_9'), ('TR234_2_9', 'TR234_9', 'TR234_2'), ('TR234_3_10', 'TR234_10', 'TR234_3'), ('TR234_3_10', 'TR234_3', 'TR234_10'), ('TR234_3_11', 'TR234_11', 'TR234_3'), ('TR234_3_11', 'TR234_3', 'TR234_11'), ('TR234_3_4', 'TR234_3', 'TR234_4'), ('TR234_3_4', 'TR234_4', 'TR234_3'), ('TR235_11_12', 'TR235_11', 'TR235_12'), ('TR235_11_12', 'TR235_12', 'TR235_11'), ('TR235_11_28', 'TR235_11', 'TR235_28'), ('TR235_11_28', 'TR235_28', 'TR235_11'), ('TR235_11_29', 'TR235_11', 'TR235_29'), ('TR235_11_29', 'TR235_29', 'TR235_11'), ('TR235_12_15', 'TR235_12', 'TR235_15'), ('TR235_12_15', 'TR235_15', 'TR235_12'), ('TR235_12_30', 'TR235_12', 'TR235_30'), ('TR235_12_30', 'TR235_30', 'TR235_12'), ('TR235_12_31', 'TR235_12', 'TR235_31'), ('TR235_12_31', 'TR235_31', 'TR235_12'), ('TR235_13_14', 'TR235_13', 'TR235_14'), ('TR235_13_14', 'TR235_14', 'TR235_13'), ('TR235_13_18', 'TR235_13', 'TR235_18'), ('TR235_13_18', 'TR235_18', 'TR235_13'), ('TR235_13_32', 'TR235_13', 'TR235_32'), ('TR235_13_32', 'TR235_32', 'TR235_13'), ('TR235_13_33', 'TR235_13', 'TR235_33'), ('TR235_13_33', 'TR235_33', 'TR235_13'), ('TR235_14_19', 'TR235_14', 'TR235_19'), ('TR235_14_19', 'TR235_19', 'TR235_14'), ('TR235_14_34', 'TR235_14', 'TR235_34'), ('TR235_14_34', 'TR235_34', 'TR235_14'), ('TR235_15_16', 'TR235_15', 'TR235_16'), ('TR235_15_16', 'TR235_16', 'TR235_15'), ('TR235_15_35', 'TR235_15', 'TR235_35'), ('TR235_15_35', 'TR235_35', 'TR235_15'), ('TR235_15_36', 'TR235_15', 'TR235_36'), ('TR235_15_36', 'TR235_36', 'TR235_15'), ('TR235_16_17', 'TR235_16', 'TR235_17'), ('TR235_16_17', 'TR235_17', 'TR235_16'), ('TR235_17_18', 'TR235_17', 'TR235_18'), ('TR235_17_18', 'TR235_18', 'TR235_17'), ('TR235_17_37', 'TR235_17', 'TR235_37'), ('TR235_17_37', 'TR235_37', 'TR235_17'), ('TR235_17_38', 'TR235_17', 'TR235_38'), ('TR235_17_38', 'TR235_38', 'TR235_17'), ('TR235_18_39', 'TR235_18', 'TR235_39'), ('TR235_18_39', 'TR235_39', 'TR235_18'), ('TR235_18_40', 'TR235_18', 'TR235_40'), ('TR235_18_40', 'TR235_40', 'TR235_18'), ('TR235_19_41', 'TR235_19', 'TR235_41'), ('TR235_19_41', 'TR235_41', 'TR235_19'), ('TR235_19_42', 'TR235_19', 'TR235_42'), ('TR235_19_42', 'TR235_42', 'TR235_19'), ('TR235_19_43', 'TR235_19', 'TR235_43'), ('TR235_19_43', 'TR235_43', 'TR235_19'), ('TR235_1_24', 'TR235_1', 'TR235_24'), ('TR235_1_24', 'TR235_24', 'TR235_1'), ('TR235_1_6', 'TR235_1', 'TR235_6'), ('TR235_1_6', 'TR235_6', 'TR235_1'), ('TR235_22_44', 'TR235_22', 'TR235_44'), ('TR235_22_44', 'TR235_44', 'TR235_22'), ('TR235_23_45', 'TR235_23', 'TR235_45'), ('TR235_23_45', 'TR235_45', 'TR235_23'), ('TR235_2_23', 'TR235_2', 'TR235_23'), ('TR235_2_23', 'TR235_23', 'TR235_2'), ('TR235_2_3', 'TR235_2', 'TR235_3'), ('TR235_2_3', 'TR235_3', 'TR235_2'), ('TR235_3_25', 'TR235_25', 'TR235_3'), ('TR235_3_25', 'TR235_3', 'TR235_25'), ('TR235_4_5', 'TR235_4', 'TR235_5'), ('TR235_4_5', 'TR235_5', 'TR235_4'), ('TR235_4_7', 'TR235_4', 'TR235_7'), ('TR235_4_7', 'TR235_7', 'TR235_4'), ('TR235_5_10', 'TR235_10', 'TR235_5'), ('TR235_5_10', 'TR235_5', 'TR235_10'), ('TR235_6_22', 'TR235_22', 'TR235_6'), ('TR235_6_22', 'TR235_6', 'TR235_22'), ('TR235_7_26', 'TR235_26', 'TR235_7'), ('TR235_7_26', 'TR235_7', 'TR235_26'), ('TR235_8_11', 'TR235_11', 'TR235_8'), ('TR235_8_11', 'TR235_8', 'TR235_11'), ('TR235_8_27', 'TR235_27', 'TR235_8'), ('TR235_8_27', 'TR235_8', 'TR235_27'), ('TR235_9_10', 'TR235_10', 'TR235_9'), ('TR235_9_10', 'TR235_9', 'TR235_10'), ('TR235_9_14', 'TR235_14', 'TR235_9'), ('TR235_9_14', 'TR235_9', 'TR235_14'), ('TR236_10_24', 'TR236_10', 'TR236_24'), ('TR236_10_24', 'TR236_24', 'TR236_10'), ('TR236_11_25', 'TR236_11', 'TR236_25'), ('TR236_11_25', 'TR236_25', 'TR236_11'), ('TR236_12_26', 'TR236_12', 'TR236_26'), ('TR236_12_26', 'TR236_26', 'TR236_12'), ('TR236_1_10', 'TR236_1', 'TR236_10'), ('TR236_1_10', 'TR236_10', 'TR236_1'), ('TR236_1_13', 'TR236_1', 'TR236_13'), ('TR236_1_13', 'TR236_13', 'TR236_1'), ('TR236_1_2', 'TR236_1', 'TR236_2'), ('TR236_1_2', 'TR236_2', 'TR236_1'), ('TR236_1_6', 'TR236_1', 'TR236_6'), ('TR236_1_6', 'TR236_6', 'TR236_1'), ('TR236_2_11', 'TR236_11', 'TR236_2'), ('TR236_2_11', 'TR236_2', 'TR236_11'), ('TR236_2_14', 'TR236_14', 'TR236_2'), ('TR236_2_14', 'TR236_2', 'TR236_14'), ('TR236_2_3', 'TR236_2', 'TR236_3'), ('TR236_2_3', 'TR236_3', 'TR236_2'), ('TR236_3_12', 'TR236_12', 'TR236_3'), ('TR236_3_12', 'TR236_3', 'TR236_12'), ('TR236_3_15', 'TR236_15', 'TR236_3'), ('TR236_3_15', 'TR236_3', 'TR236_15'), ('TR236_3_4', 'TR236_3', 'TR236_4'), ('TR236_3_4', 'TR236_4', 'TR236_3'), ('TR236_4_16', 'TR236_16', 'TR236_4'), ('TR236_4_16', 'TR236_4', 'TR236_16'), ('TR236_4_17', 'TR236_17', 'TR236_4'), ('TR236_4_17', 'TR236_4', 'TR236_17'), ('TR236_4_8', 'TR236_4', 'TR236_8'), ('TR236_4_8', 'TR236_8', 'TR236_4'), ('TR236_5_18', 'TR236_18', 'TR236_5'), ('TR236_5_18', 'TR236_5', 'TR236_18'), ('TR236_5_19', 'TR236_19', 'TR236_5'), ('TR236_5_19', 'TR236_5', 'TR236_19'), ('TR236_5_6', 'TR236_5', 'TR236_6'), ('TR236_5_6', 'TR236_6', 'TR236_5'), ('TR236_5_7', 'TR236_5', 'TR236_7'), ('TR236_5_7', 'TR236_7', 'TR236_5'), ('TR236_6_20', 'TR236_20', 'TR236_6'), ('TR236_6_20', 'TR236_6', 'TR236_20'), ('TR236_6_9', 'TR236_6', 'TR236_9'), ('TR236_6_9', 'TR236_9', 'TR236_6'), ('TR236_7_21', 'TR236_21', 'TR236_7'), ('TR236_7_21', 'TR236_7', 'TR236_21'), ('TR236_8_22', 'TR236_22', 'TR236_8'), ('TR236_8_22', 'TR236_8', 'TR236_22'), ('TR236_9_23', 'TR236_23', 'TR236_9'), ('TR236_9_23', 'TR236_9', 'TR236_23'), ('TR237_1_3', 'TR237_1', 'TR237_3'), ('TR237_1_3', 'TR237_3', 'TR237_1'), ('TR237_1_6', 'TR237_1', 'TR237_6'), ('TR237_1_6', 'TR237_6', 'TR237_1'), ('TR237_1_7', 'TR237_1', 'TR237_7'), ('TR237_1_7', 'TR237_7', 'TR237_1'), ('TR237_1_8', 'TR237_1', 'TR237_8'), ('TR237_1_8', 'TR237_8', 'TR237_1'), ('TR237_2_3', 'TR237_2', 'TR237_3'), ('TR237_2_3', 'TR237_3', 'TR237_2'), ('TR237_3_4', 'TR237_3', 'TR237_4'), ('TR237_3_4', 'TR237_4', 'TR237_3'), ('TR237_3_5', 'TR237_3', 'TR237_5'), ('TR237_3_5', 'TR237_5', 'TR237_3'), ('TR238_16_17', 'TR238_16', 'TR238_17'), ('TR238_16_17', 'TR238_17', 'TR238_16'), ('TR238_16_21', 'TR238_16', 'TR238_21'), ('TR238_16_21', 'TR238_21', 'TR238_16'), ('TR238_17_18', 'TR238_17', 'TR238_18'), ('TR238_17_18', 'TR238_18', 'TR238_17'), ('TR238_18_19', 'TR238_18', 'TR238_19'), ('TR238_18_19', 'TR238_19', 'TR238_18'), ('TR238_18_20', 'TR238_18', 'TR238_20'), ('TR238_18_20', 'TR238_20', 'TR238_18'), ('TR238_19_22', 'TR238_19', 'TR238_22'), ('TR238_19_22', 'TR238_22', 'TR238_19'), ('TR238_19_23', 'TR238_19', 'TR238_23'), ('TR238_19_23', 'TR238_23', 'TR238_19'), ('TR238_19_24', 'TR238_19', 'TR238_24'), ('TR238_19_24', 'TR238_24', 'TR238_19'), ('TR238_1_2', 'TR238_1', 'TR238_2'), ('TR238_1_2', 'TR238_2', 'TR238_1'), ('TR238_1_3', 'TR238_1', 'TR238_3'), ('TR238_1_3', 'TR238_3', 'TR238_1'), ('TR238_1_4', 'TR238_1', 'TR238_4'), ('TR238_1_4', 'TR238_4', 'TR238_1'), ('TR238_20_25', 'TR238_20', 'TR238_25'), ('TR238_20_25', 'TR238_25', 'TR238_20'), ('TR238_20_26', 'TR238_20', 'TR238_26'), ('TR238_20_26', 'TR238_26', 'TR238_20'), ('TR238_20_27', 'TR238_20', 'TR238_27'), ('TR238_20_27', 'TR238_27', 'TR238_20'), ('TR238_2_7', 'TR238_2', 'TR238_7'), ('TR238_2_7', 'TR238_7', 'TR238_2'), ('TR238_2_8', 'TR238_2', 'TR238_8'), ('TR238_2_8', 'TR238_8', 'TR238_2'), ('TR238_2_9', 'TR238_2', 'TR238_9'), ('TR238_2_9', 'TR238_9', 'TR238_2'), ('TR238_3_10', 'TR238_10', 'TR238_3'), ('TR238_3_10', 'TR238_3', 'TR238_10'), ('TR238_3_11', 'TR238_11', 'TR238_3'), ('TR238_3_11', 'TR238_3', 'TR238_11'), ('TR238_3_12', 'TR238_12', 'TR238_3'), ('TR238_3_12', 'TR238_3', 'TR238_12'), ('TR238_4_6', 'TR238_4', 'TR238_6'), ('TR238_4_6', 'TR238_6', 'TR238_4'), ('TR238_6_13', 'TR238_13', 'TR238_6'), ('TR238_6_13', 'TR238_6', 'TR238_13'), ('TR239_1_2', 'TR239_1', 'TR239_2'), ('TR239_1_2', 'TR239_2', 'TR239_1'), ('TR239_1_3', 'TR239_1', 'TR239_3'), ('TR239_1_3', 'TR239_3', 'TR239_1'), ('TR239_22_23', 'TR239_22', 'TR239_23'), ('TR239_22_23', 'TR239_23', 'TR239_22'), ('TR239_22_24', 'TR239_22', 'TR239_24'), ('TR239_22_24', 'TR239_24', 'TR239_22'), ('TR239_23_28', 'TR239_23', 'TR239_28'), ('TR239_23_28', 'TR239_28', 'TR239_23'), ('TR239_23_31', 'TR239_23', 'TR239_31'), ('TR239_23_31', 'TR239_31', 'TR239_23'), ('TR239_23_32', 'TR239_23', 'TR239_32'), ('TR239_23_32', 'TR239_32', 'TR239_23'), ('TR239_24_25', 'TR239_24', 'TR239_25'), ('TR239_24_25', 'TR239_25', 'TR239_24'), ('TR239_24_26', 'TR239_24', 'TR239_26'), ('TR239_24_26', 'TR239_26', 'TR239_24'), ('TR239_24_33', 'TR239_24', 'TR239_33'), ('TR239_24_33', 'TR239_33', 'TR239_24'), ('TR239_25_27', 'TR239_25', 'TR239_27'), ('TR239_25_27', 'TR239_27', 'TR239_25'), ('TR239_25_34', 'TR239_25', 'TR239_34'), ('TR239_25_34', 'TR239_34', 'TR239_25'), ('TR239_25_35', 'TR239_25', 'TR239_35'), ('TR239_25_35', 'TR239_35', 'TR239_25'), ('TR239_26_36', 'TR239_26', 'TR239_36'), ('TR239_26_36', 'TR239_36', 'TR239_26'), ('TR239_26_37', 'TR239_26', 'TR239_37'), ('TR239_26_37', 'TR239_37', 'TR239_26'), ('TR239_26_38', 'TR239_26', 'TR239_38'), ('TR239_26_38', 'TR239_38', 'TR239_26'), ('TR239_28_29', 'TR239_28', 'TR239_29'), ('TR239_28_29', 'TR239_29', 'TR239_28'), ('TR239_28_30', 'TR239_28', 'TR239_30'), ('TR239_28_30', 'TR239_30', 'TR239_28'), ('TR239_28_39', 'TR239_28', 'TR239_39'), ('TR239_28_39', 'TR239_39', 'TR239_28'), ('TR239_29_40', 'TR239_29', 'TR239_40'), ('TR239_29_40', 'TR239_40', 'TR239_29'), ('TR239_29_41', 'TR239_29', 'TR239_41'), ('TR239_29_41', 'TR239_41', 'TR239_29'), ('TR239_29_42', 'TR239_29', 'TR239_42'), ('TR239_29_42', 'TR239_42', 'TR239_29'), ('TR239_2_10', 'TR239_10', 'TR239_2'), ('TR239_2_10', 'TR239_2', 'TR239_10'), ('TR239_2_4', 'TR239_2', 'TR239_4'), ('TR239_2_4', 'TR239_4', 'TR239_2'), ('TR239_2_5', 'TR239_2', 'TR239_5'), ('TR239_2_5', 'TR239_5', 'TR239_2'), ('TR239_3_11', 'TR239_11', 'TR239_3'), ('TR239_3_11', 'TR239_3', 'TR239_11'), ('TR239_3_6', 'TR239_3', 'TR239_6'), ('TR239_3_6', 'TR239_6', 'TR239_3'), ('TR239_3_7', 'TR239_3', 'TR239_7'), ('TR239_3_7', 'TR239_7', 'TR239_3'), ('TR239_4_12', 'TR239_12', 'TR239_4'), ('TR239_4_12', 'TR239_4', 'TR239_12'), ('TR239_4_13', 'TR239_13', 'TR239_4'), ('TR239_4_13', 'TR239_4', 'TR239_13'), ('TR239_4_8', 'TR239_4', 'TR239_8'), ('TR239_4_8', 'TR239_8', 'TR239_4'), ('TR239_5_14', 'TR239_14', 'TR239_5'), ('TR239_5_14', 'TR239_5', 'TR239_14'), ('TR239_5_15', 'TR239_15', 'TR239_5'), ('TR239_5_15', 'TR239_5', 'TR239_15'), ('TR239_5_16', 'TR239_16', 'TR239_5'), ('TR239_5_16', 'TR239_5', 'TR239_16'), ('TR239_6_17', 'TR239_17', 'TR239_6'), ('TR239_6_17', 'TR239_6', 'TR239_17'), ('TR239_6_18', 'TR239_18', 'TR239_6'), ('TR239_6_18', 'TR239_6', 'TR239_18'), ('TR239_6_9', 'TR239_6', 'TR239_9'), ('TR239_6_9', 'TR239_9', 'TR239_6'), ('TR239_7_19', 'TR239_19', 'TR239_7'), ('TR239_7_19', 'TR239_7', 'TR239_19'), ('TR239_7_20', 'TR239_20', 'TR239_7'), ('TR239_7_20', 'TR239_7', 'TR239_20'), ('TR239_7_21', 'TR239_21', 'TR239_7'), ('TR239_7_21', 'TR239_7', 'TR239_21'), ('TR240_10_18', 'TR240_10', 'TR240_18'), ('TR240_10_18', 'TR240_18', 'TR240_10'), ('TR240_11_19', 'TR240_11', 'TR240_19'), ('TR240_11_19', 'TR240_19', 'TR240_11'), ('TR240_12_20', 'TR240_12', 'TR240_20'), ('TR240_12_20', 'TR240_20', 'TR240_12'), ('TR240_13_14', 'TR240_13', 'TR240_14'), ('TR240_13_14', 'TR240_14', 'TR240_13'), ('TR240_13_21', 'TR240_13', 'TR240_21'), ('TR240_13_21', 'TR240_21', 'TR240_13'), ('TR240_13_22', 'TR240_13', 'TR240_22'), ('TR240_13_22', 'TR240_22', 'TR240_13'), ('TR240_14_15', 'TR240_14', 'TR240_15'), ('TR240_14_15', 'TR240_15', 'TR240_14'), ('TR240_14_23', 'TR240_14', 'TR240_23'), ('TR240_14_23', 'TR240_23', 'TR240_14'), ('TR240_14_24', 'TR240_14', 'TR240_24'), ('TR240_14_24', 'TR240_24', 'TR240_14'), ('TR240_15_25', 'TR240_15', 'TR240_25'), ('TR240_15_25', 'TR240_25', 'TR240_15'), ('TR240_15_26', 'TR240_15', 'TR240_26'), ('TR240_15_26', 'TR240_26', 'TR240_15'), ('TR240_15_27', 'TR240_15', 'TR240_27'), ('TR240_15_27', 'TR240_27', 'TR240_15'), ('TR240_1_12', 'TR240_1', 'TR240_12'), ('TR240_1_12', 'TR240_12', 'TR240_1'), ('TR240_1_6', 'TR240_1', 'TR240_6'), ('TR240_1_6', 'TR240_6', 'TR240_1'), ('TR240_2_11', 'TR240_11', 'TR240_2'), ('TR240_2_11', 'TR240_2', 'TR240_11'), ('TR240_2_3', 'TR240_2', 'TR240_3'), ('TR240_2_3', 'TR240_3', 'TR240_2'), ('TR240_3_10', 'TR240_10', 'TR240_3'), ('TR240_3_10', 'TR240_3', 'TR240_10'), ('TR240_4_16', 'TR240_16', 'TR240_4'), ('TR240_4_16', 'TR240_4', 'TR240_16'), ('TR240_4_5', 'TR240_4', 'TR240_5'), ('TR240_4_5', 'TR240_5', 'TR240_4'), ('TR240_5_7', 'TR240_5', 'TR240_7'), ('TR240_5_7', 'TR240_7', 'TR240_5'), ('TR240_6_17', 'TR240_17', 'TR240_6'), ('TR240_6_17', 'TR240_6', 'TR240_17'), ('TR240_7_8', 'TR240_7', 'TR240_8'), ('TR240_7_8', 'TR240_8', 'TR240_7'), ('TR240_8_13', 'TR240_13', 'TR240_8'), ('TR240_8_13', 'TR240_8', 'TR240_13'), ('TR242_10_23', 'TR242_10', 'TR242_23'), ('TR242_10_23', 'TR242_23', 'TR242_10'), ('TR242_11_15', 'TR242_11', 'TR242_15'), ('TR242_11_15', 'TR242_15', 'TR242_11'), ('TR242_11_24', 'TR242_11', 'TR242_24'), ('TR242_11_24', 'TR242_24', 'TR242_11'), ('TR242_12_25', 'TR242_12', 'TR242_25'), ('TR242_12_25', 'TR242_25', 'TR242_12'), ('TR242_12_26', 'TR242_12', 'TR242_26'), ('TR242_12_26', 'TR242_26', 'TR242_12'), ('TR242_13_16', 'TR242_13', 'TR242_16'), ('TR242_13_16', 'TR242_16', 'TR242_13'), ('TR242_15_27', 'TR242_15', 'TR242_27'), ('TR242_15_27', 'TR242_27', 'TR242_15'), ('TR242_16_17', 'TR242_16', 'TR242_17'), ('TR242_16_17', 'TR242_17', 'TR242_16'), ('TR242_16_28', 'TR242_16', 'TR242_28'), ('TR242_16_28', 'TR242_28', 'TR242_16'), ('TR242_16_29', 'TR242_16', 'TR242_29'), ('TR242_16_29', 'TR242_29', 'TR242_16'), ('TR242_17_30', 'TR242_17', 'TR242_30'), ('TR242_17_30', 'TR242_30', 'TR242_17'), ('TR242_18_31', 'TR242_18', 'TR242_31'), ('TR242_18_31', 'TR242_31', 'TR242_18'), ('TR242_18_32', 'TR242_18', 'TR242_32'), ('TR242_18_32', 'TR242_32', 'TR242_18'), ('TR242_1_2', 'TR242_1', 'TR242_2'), ('TR242_1_2', 'TR242_2', 'TR242_1'), ('TR242_1_4', 'TR242_1', 'TR242_4'), ('TR242_1_4', 'TR242_4', 'TR242_1'), ('TR242_2_5', 'TR242_2', 'TR242_5'), ('TR242_2_5', 'TR242_5', 'TR242_2'), ('TR242_4_7', 'TR242_4', 'TR242_7'), ('TR242_4_7', 'TR242_7', 'TR242_4'), ('TR242_5_19', 'TR242_19', 'TR242_5'), ('TR242_5_19', 'TR242_5', 'TR242_19'), ('TR242_5_20', 'TR242_20', 'TR242_5'), ('TR242_5_20', 'TR242_5', 'TR242_20'), ('TR242_5_8', 'TR242_5', 'TR242_8'), ('TR242_5_8', 'TR242_8', 'TR242_5'), ('TR242_6_10', 'TR242_10', 'TR242_6'), ('TR242_6_10', 'TR242_6', 'TR242_10'), ('TR242_6_9', 'TR242_6', 'TR242_9'), ('TR242_6_9', 'TR242_9', 'TR242_6'), ('TR242_7_21', 'TR242_21', 'TR242_7'), ('TR242_7_21', 'TR242_7', 'TR242_21'), ('TR242_8_22', 'TR242_22', 'TR242_8'), ('TR242_8_22', 'TR242_8', 'TR242_22'), ('TR242_9_13', 'TR242_13', 'TR242_9'), ('TR242_9_13', 'TR242_9', 'TR242_13'), ('TR243_1_3', 'TR243_1', 'TR243_3'), ('TR243_1_3', 'TR243_3', 'TR243_1'), ('TR243_1_6', 'TR243_1', 'TR243_6'), ('TR243_1_6', 'TR243_6', 'TR243_1'), ('TR243_2_4', 'TR243_2', 'TR243_4'), ('TR243_2_4', 'TR243_4', 'TR243_2'), ('TR243_2_5', 'TR243_2', 'TR243_5'), ('TR243_2_5', 'TR243_5', 'TR243_2'), ('TR245_1_10', 'TR245_1', 'TR245_10'), ('TR245_1_10', 'TR245_10', 'TR245_1'), ('TR245_1_11', 'TR245_1', 'TR245_11'), ('TR245_1_11', 'TR245_11', 'TR245_1'), ('TR245_1_2', 'TR245_1', 'TR245_2'), ('TR245_1_2', 'TR245_2', 'TR245_1'), ('TR245_2_4', 'TR245_2', 'TR245_4'), ('TR245_2_4', 'TR245_4', 'TR245_2'), ('TR245_3_5', 'TR245_3', 'TR245_5'), ('TR245_3_5', 'TR245_5', 'TR245_3'), ('TR245_5_7', 'TR245_5', 'TR245_7'), ('TR245_5_7', 'TR245_7', 'TR245_5'), ('TR245_6_8', 'TR245_6', 'TR245_8'), ('TR245_6_8', 'TR245_8', 'TR245_6'), ('TR245_6_9', 'TR245_6', 'TR245_9'), ('TR245_6_9', 'TR245_9', 'TR245_6'), ('TR245_7_12', 'TR245_12', 'TR245_7'), ('TR245_7_12', 'TR245_7', 'TR245_12'), ('TR245_7_13', 'TR245_13', 'TR245_7'), ('TR245_7_13', 'TR245_7', 'TR245_13'), ('TR245_9_14', 'TR245_14', 'TR245_9'), ('TR245_9_14', 'TR245_9', 'TR245_14'), ('TR245_9_15', 'TR245_15', 'TR245_9'), ('TR245_9_15', 'TR245_9', 'TR245_15'), ('TR246_10_11', 'TR246_10', 'TR246_11'), ('TR246_10_11', 'TR246_11', 'TR246_10'), ('TR246_10_12', 'TR246_10', 'TR246_12'), ('TR246_10_12', 'TR246_12', 'TR246_10'), ('TR246_10_13', 'TR246_10', 'TR246_13'), ('TR246_10_13', 'TR246_13', 'TR246_10'), ('TR246_10_14', 'TR246_10', 'TR246_14'), ('TR246_10_14', 'TR246_14', 'TR246_10'), ('TR246_11_15', 'TR246_11', 'TR246_15'), ('TR246_11_15', 'TR246_15', 'TR246_11'), ('TR246_12_16', 'TR246_12', 'TR246_16'), ('TR246_12_16', 'TR246_16', 'TR246_12'), ('TR246_13_17', 'TR246_13', 'TR246_17'), ('TR246_13_17', 'TR246_17', 'TR246_13'), ('TR246_14_18', 'TR246_14', 'TR246_18'), ('TR246_14_18', 'TR246_18', 'TR246_14'), ('TR246_1_2', 'TR246_1', 'TR246_2'), ('TR246_1_2', 'TR246_2', 'TR246_1'), ('TR246_1_3', 'TR246_1', 'TR246_3'), ('TR246_1_3', 'TR246_3', 'TR246_1'), ('TR246_1_4', 'TR246_1', 'TR246_4'), ('TR246_1_4', 'TR246_4', 'TR246_1'), ('TR246_1_5', 'TR246_1', 'TR246_5'), ('TR246_1_5', 'TR246_5', 'TR246_1'), ('TR246_22_23', 'TR246_22', 'TR246_23'), ('TR246_22_23', 'TR246_23', 'TR246_22'), ('TR246_22_24', 'TR246_22', 'TR246_24'), ('TR246_22_24', 'TR246_24', 'TR246_22'), ('TR246_2_6', 'TR246_2', 'TR246_6'), ('TR246_2_6', 'TR246_6', 'TR246_2'), ('TR246_3_7', 'TR246_3', 'TR246_7'), ('TR246_3_7', 'TR246_7', 'TR246_3'), ('TR246_4_8', 'TR246_4', 'TR246_8'), ('TR246_4_8', 'TR246_8', 'TR246_4'), ('TR246_5_9', 'TR246_5', 'TR246_9'), ('TR246_5_9', 'TR246_9', 'TR246_5'), ('TR247_10_12', 'TR247_10', 'TR247_12'), ('TR247_10_12', 'TR247_12', 'TR247_10'), ('TR247_10_17', 'TR247_10', 'TR247_17'), ('TR247_10_17', 'TR247_17', 'TR247_10'), ('TR247_10_18', 'TR247_10', 'TR247_18'), ('TR247_10_18', 'TR247_18', 'TR247_10'), ('TR247_11_19', 'TR247_11', 'TR247_19'), ('TR247_11_19', 'TR247_19', 'TR247_11'), ('TR247_12_20', 'TR247_12', 'TR247_20'), ('TR247_12_20', 'TR247_20', 'TR247_12'), ('TR247_1_5', 'TR247_1', 'TR247_5'), ('TR247_1_5', 'TR247_5', 'TR247_1'), ('TR247_1_8', 'TR247_1', 'TR247_8'), ('TR247_1_8', 'TR247_8', 'TR247_1'), ('TR247_2_3', 'TR247_2', 'TR247_3'), ('TR247_2_3', 'TR247_3', 'TR247_2'), ('TR247_2_7', 'TR247_2', 'TR247_7'), ('TR247_2_7', 'TR247_7', 'TR247_2'), ('TR247_3_4', 'TR247_3', 'TR247_4'), ('TR247_3_4', 'TR247_4', 'TR247_3'), ('TR247_4_5', 'TR247_4', 'TR247_5'), ('TR247_4_5', 'TR247_5', 'TR247_4'), ('TR247_5_13', 'TR247_13', 'TR247_5'), ('TR247_5_13', 'TR247_5', 'TR247_13'), ('TR247_5_9', 'TR247_5', 'TR247_9'), ('TR247_5_9', 'TR247_9', 'TR247_5'), ('TR247_7_14', 'TR247_14', 'TR247_7'), ('TR247_7_14', 'TR247_7', 'TR247_14'), ('TR247_8_15', 'TR247_15', 'TR247_8'), ('TR247_8_15', 'TR247_8', 'TR247_15'), ('TR247_9_10', 'TR247_10', 'TR247_9'), ('TR247_9_10', 'TR247_9', 'TR247_10'), ('TR247_9_11', 'TR247_11', 'TR247_9'), ('TR247_9_11', 'TR247_9', 'TR247_11'), ('TR247_9_16', 'TR247_16', 'TR247_9'), ('TR247_9_16', 'TR247_9', 'TR247_16'), ('TR248_10_23', 'TR248_10', 'TR248_23'), ('TR248_10_23', 'TR248_23', 'TR248_10'), ('TR248_11_12', 'TR248_11', 'TR248_12'), ('TR248_11_12', 'TR248_12', 'TR248_11'), ('TR248_11_15', 'TR248_11', 'TR248_15'), ('TR248_11_15', 'TR248_15', 'TR248_11'), ('TR248_12_24', 'TR248_12', 'TR248_24'), ('TR248_12_24', 'TR248_24', 'TR248_12'), ('TR248_13_25', 'TR248_13', 'TR248_25'), ('TR248_13_25', 'TR248_25', 'TR248_13'), ('TR248_14_26', 'TR248_14', 'TR248_26'), ('TR248_14_26', 'TR248_26', 'TR248_14'), ('TR248_14_27', 'TR248_14', 'TR248_27'), ('TR248_14_27', 'TR248_27', 'TR248_14'), ('TR248_15_28', 'TR248_15', 'TR248_28'), ('TR248_15_28', 'TR248_28', 'TR248_15'), ('TR248_15_29', 'TR248_15', 'TR248_29'), ('TR248_15_29', 'TR248_29', 'TR248_15'), ('TR248_1_16', 'TR248_1', 'TR248_16'), ('TR248_1_16', 'TR248_16', 'TR248_1'), ('TR248_1_17', 'TR248_1', 'TR248_17'), ('TR248_1_17', 'TR248_17', 'TR248_1'), ('TR248_1_2', 'TR248_1', 'TR248_2'), ('TR248_1_2', 'TR248_2', 'TR248_1'), ('TR248_1_3', 'TR248_1', 'TR248_3'), ('TR248_1_3', 'TR248_3', 'TR248_1'), ('TR248_2_13', 'TR248_13', 'TR248_2'), ('TR248_2_13', 'TR248_2', 'TR248_13'), ('TR248_30_31', 'TR248_30', 'TR248_31'), ('TR248_30_31', 'TR248_31', 'TR248_30'), ('TR248_32_33', 'TR248_32', 'TR248_33'), ('TR248_32_33', 'TR248_33', 'TR248_32'), ('TR248_3_8', 'TR248_3', 'TR248_8'), ('TR248_3_8', 'TR248_8', 'TR248_3'), ('TR248_4_18', 'TR248_18', 'TR248_4'), ('TR248_4_18', 'TR248_4', 'TR248_18'), ('TR248_4_5', 'TR248_4', 'TR248_5'), ('TR248_4_5', 'TR248_5', 'TR248_4'), ('TR248_5_19', 'TR248_19', 'TR248_5'), ('TR248_5_19', 'TR248_5', 'TR248_19'), ('TR248_6_14', 'TR248_14', 'TR248_6'), ('TR248_6_14', 'TR248_6', 'TR248_14'), ('TR248_6_7', 'TR248_6', 'TR248_7'), ('TR248_6_7', 'TR248_7', 'TR248_6'), ('TR248_7_20', 'TR248_20', 'TR248_7'), ('TR248_7_20', 'TR248_7', 'TR248_20'), ('TR248_8_21', 'TR248_21', 'TR248_8'), ('TR248_8_21', 'TR248_8', 'TR248_21'), ('TR248_9_10', 'TR248_10', 'TR248_9'), ('TR248_9_10', 'TR248_9', 'TR248_10'), ('TR248_9_22', 'TR248_22', 'TR248_9'), ('TR248_9_22', 'TR248_9', 'TR248_22'), ('TR250_10_20', 'TR250_10', 'TR250_20'), ('TR250_10_20', 'TR250_20', 'TR250_10'), ('TR250_11_21', 'TR250_11', 'TR250_21'), ('TR250_11_21', 'TR250_21', 'TR250_11'), ('TR250_1_12', 'TR250_1', 'TR250_12'), ('TR250_1_12', 'TR250_12', 'TR250_1'), ('TR250_1_13', 'TR250_1', 'TR250_13'), ('TR250_1_13', 'TR250_13', 'TR250_1'), ('TR250_1_14', 'TR250_1', 'TR250_14'), ('TR250_1_14', 'TR250_14', 'TR250_1'), ('TR250_1_2', 'TR250_1', 'TR250_2'), ('TR250_1_2', 'TR250_2', 'TR250_1'), ('TR250_2_3', 'TR250_2', 'TR250_3'), ('TR250_2_3', 'TR250_3', 'TR250_2'), ('TR250_3_4', 'TR250_3', 'TR250_4'), ('TR250_3_4', 'TR250_4', 'TR250_3'), ('TR250_4_15', 'TR250_15', 'TR250_4'), ('TR250_4_15', 'TR250_4', 'TR250_15'), ('TR250_4_16', 'TR250_16', 'TR250_4'), ('TR250_4_16', 'TR250_4', 'TR250_16'), ('TR250_4_5', 'TR250_4', 'TR250_5'), ('TR250_4_5', 'TR250_5', 'TR250_4'), ('TR250_5_11', 'TR250_11', 'TR250_5'), ('TR250_5_11', 'TR250_5', 'TR250_11'), ('TR250_6_17', 'TR250_17', 'TR250_6'), ('TR250_6_17', 'TR250_6', 'TR250_17'), ('TR250_6_8', 'TR250_6', 'TR250_8'), ('TR250_6_8', 'TR250_8', 'TR250_6'), ('TR250_8_18', 'TR250_18', 'TR250_8'), ('TR250_8_18', 'TR250_8', 'TR250_18'), ('TR250_9_10', 'TR250_10', 'TR250_9'), ('TR250_9_10', 'TR250_9', 'TR250_10'), ('TR250_9_19', 'TR250_19', 'TR250_9'), ('TR250_9_19', 'TR250_9', 'TR250_19'), ('TR251_1_14', 'TR251_1', 'TR251_14'), ('TR251_1_14', 'TR251_14', 'TR251_1'), ('TR251_1_6', 'TR251_1', 'TR251_6'), ('TR251_1_6', 'TR251_6', 'TR251_1'), ('TR251_20_25', 'TR251_20', 'TR251_25'), ('TR251_20_25', 'TR251_25', 'TR251_20'), ('TR251_20_30', 'TR251_20', 'TR251_30'), ('TR251_20_30', 'TR251_30', 'TR251_20'), ('TR251_21_22', 'TR251_21', 'TR251_22'), ('TR251_21_22', 'TR251_22', 'TR251_21'), ('TR251_21_33', 'TR251_21', 'TR251_33'), ('TR251_21_33', 'TR251_33', 'TR251_21'), ('TR251_22_34', 'TR251_22', 'TR251_34'), ('TR251_22_34', 'TR251_34', 'TR251_22'), ('TR251_23_24', 'TR251_23', 'TR251_24'), ('TR251_23_24', 'TR251_24', 'TR251_23'), ('TR251_23_35', 'TR251_23', 'TR251_35'), ('TR251_23_35', 'TR251_35', 'TR251_23'), ('TR251_24_27', 'TR251_24', 'TR251_27'), ('TR251_24_27', 'TR251_27', 'TR251_24'), ('TR251_25_26', 'TR251_25', 'TR251_26'), ('TR251_25_26', 'TR251_26', 'TR251_25'), ('TR251_26_36', 'TR251_26', 'TR251_36'), ('TR251_26_36', 'TR251_36', 'TR251_26'), ('TR251_26_37', 'TR251_26', 'TR251_37'), ('TR251_26_37', 'TR251_37', 'TR251_26'), ('TR251_26_38', 'TR251_26', 'TR251_38'), ('TR251_26_38', 'TR251_38', 'TR251_26'), ('TR251_2_15', 'TR251_15', 'TR251_2'), ('TR251_2_15', 'TR251_2', 'TR251_15'), ('TR251_2_3', 'TR251_2', 'TR251_3'), ('TR251_2_3', 'TR251_3', 'TR251_2'), ('TR251_3_11', 'TR251_11', 'TR251_3'), ('TR251_3_11', 'TR251_3', 'TR251_11'), ('TR251_4_16', 'TR251_16', 'TR251_4'), ('TR251_4_16', 'TR251_4', 'TR251_16'), ('TR251_4_5', 'TR251_4', 'TR251_5'), ('TR251_4_5', 'TR251_5', 'TR251_4'), ('TR251_5_8', 'TR251_5', 'TR251_8'), ('TR251_5_8', 'TR251_8', 'TR251_5'), ('TR251_6_7', 'TR251_6', 'TR251_7'), ('TR251_6_7', 'TR251_7', 'TR251_6'), ('TR251_7_17', 'TR251_17', 'TR251_7'), ('TR251_7_17', 'TR251_7', 'TR251_17'), ('TR251_7_18', 'TR251_18', 'TR251_7'), ('TR251_7_18', 'TR251_7', 'TR251_18'), ('TR251_7_19', 'TR251_19', 'TR251_7'), ('TR251_7_19', 'TR251_7', 'TR251_19'), ('TR252_10_11', 'TR252_10', 'TR252_11'), ('TR252_10_11', 'TR252_11', 'TR252_10'), ('TR252_11_26', 'TR252_11', 'TR252_26'), ('TR252_11_26', 'TR252_26', 'TR252_11'), ('TR252_11_27', 'TR252_11', 'TR252_27'), ('TR252_11_27', 'TR252_27', 'TR252_11'), ('TR252_11_28', 'TR252_11', 'TR252_28'), ('TR252_11_28', 'TR252_28', 'TR252_11'), ('TR252_13_29', 'TR252_13', 'TR252_29'), ('TR252_13_29', 'TR252_29', 'TR252_13'), ('TR252_13_30', 'TR252_13', 'TR252_30'), ('TR252_13_30', 'TR252_30', 'TR252_13'), ('TR252_13_31', 'TR252_13', 'TR252_31'), ('TR252_13_31', 'TR252_31', 'TR252_13'), ('TR252_14_32', 'TR252_14', 'TR252_32'), ('TR252_14_32', 'TR252_32', 'TR252_14'), ('TR252_14_33', 'TR252_14', 'TR252_33'), ('TR252_14_33', 'TR252_33', 'TR252_14'), ('TR252_14_34', 'TR252_14', 'TR252_34'), ('TR252_14_34', 'TR252_34', 'TR252_14'), ('TR252_1_15', 'TR252_1', 'TR252_15'), ('TR252_1_15', 'TR252_15', 'TR252_1'), ('TR252_1_16', 'TR252_1', 'TR252_16'), ('TR252_1_16', 'TR252_16', 'TR252_1'), ('TR252_1_17', 'TR252_1', 'TR252_17'), ('TR252_1_17', 'TR252_17', 'TR252_1'), ('TR252_1_2', 'TR252_1', 'TR252_2'), ('TR252_1_2', 'TR252_2', 'TR252_1'), ('TR252_2_14', 'TR252_14', 'TR252_2'), ('TR252_2_14', 'TR252_2', 'TR252_14'), ('TR252_35_36', 'TR252_35', 'TR252_36'), ('TR252_35_36', 'TR252_36', 'TR252_35'), ('TR252_35_49', 'TR252_35', 'TR252_49'), ('TR252_35_49', 'TR252_49', 'TR252_35'), ('TR252_35_50', 'TR252_35', 'TR252_50'), ('TR252_35_50', 'TR252_50', 'TR252_35'), ('TR252_35_51', 'TR252_35', 'TR252_51'), ('TR252_35_51', 'TR252_51', 'TR252_35'), ('TR252_36_48', 'TR252_36', 'TR252_48'), ('TR252_36_48', 'TR252_48', 'TR252_36'), ('TR252_37_38', 'TR252_37', 'TR252_38'), ('TR252_37_38', 'TR252_38', 'TR252_37'), ('TR252_37_52', 'TR252_37', 'TR252_52'), ('TR252_37_52', 'TR252_52', 'TR252_37'), ('TR252_38_39', 'TR252_38', 'TR252_39'), ('TR252_38_39', 'TR252_39', 'TR252_38'), ('TR252_38_53', 'TR252_38', 'TR252_53'), ('TR252_38_53', 'TR252_53', 'TR252_38'), ('TR252_38_54', 'TR252_38', 'TR252_54'), ('TR252_38_54', 'TR252_54', 'TR252_38'), ('TR252_39_40', 'TR252_39', 'TR252_40'), ('TR252_39_40', 'TR252_40', 'TR252_39'), ('TR252_39_55', 'TR252_39', 'TR252_55'), ('TR252_39_55', 'TR252_55', 'TR252_39'), ('TR252_39_56', 'TR252_39', 'TR252_56'), ('TR252_39_56', 'TR252_56', 'TR252_39'), ('TR252_3_18', 'TR252_18', 'TR252_3'), ('TR252_3_18', 'TR252_3', 'TR252_18'), ('TR252_3_4', 'TR252_3', 'TR252_4'), ('TR252_3_4', 'TR252_4', 'TR252_3'), ('TR252_40_41', 'TR252_40', 'TR252_41'), ('TR252_40_41', 'TR252_41', 'TR252_40'), ('TR252_40_47', 'TR252_40', 'TR252_47'), ('TR252_40_47', 'TR252_47', 'TR252_40'), ('TR252_40_57', 'TR252_40', 'TR252_57'), ('TR252_40_57', 'TR252_57', 'TR252_40'), ('TR252_41_42', 'TR252_41', 'TR252_42'), ('TR252_41_42', 'TR252_42', 'TR252_41'), ('TR252_41_58', 'TR252_41', 'TR252_58'), ('TR252_41_58', 'TR252_58', 'TR252_41'), ('TR252_41_59', 'TR252_41', 'TR252_59'), ('TR252_41_59', 'TR252_59', 'TR252_41'), ('TR252_42_43', 'TR252_42', 'TR252_43'), ('TR252_42_43', 'TR252_43', 'TR252_42'), ('TR252_42_60', 'TR252_42', 'TR252_60'), ('TR252_42_60', 'TR252_60', 'TR252_42'), ('TR252_42_61', 'TR252_42', 'TR252_61'), ('TR252_42_61', 'TR252_61', 'TR252_42'), ('TR252_43_44', 'TR252_43', 'TR252_44'), ('TR252_43_44', 'TR252_44', 'TR252_43'), ('TR252_44_45', 'TR252_44', 'TR252_45'), ('TR252_44_45', 'TR252_45', 'TR252_44'), ('TR252_45_62', 'TR252_45', 'TR252_62'), ('TR252_45_62', 'TR252_62', 'TR252_45'), ('TR252_45_63', 'TR252_45', 'TR252_63'), ('TR252_45_63', 'TR252_63', 'TR252_45'), ('TR252_45_64', 'TR252_45', 'TR252_64'), ('TR252_45_64', 'TR252_64', 'TR252_45'), ('TR252_47_65', 'TR252_47', 'TR252_65'), ('TR252_47_65', 'TR252_65', 'TR252_47'), ('TR252_47_66', 'TR252_47', 'TR252_66'), ('TR252_47_66', 'TR252_66', 'TR252_47'), ('TR252_47_67', 'TR252_47', 'TR252_67'), ('TR252_47_67', 'TR252_67', 'TR252_47'), ('TR252_48_68', 'TR252_48', 'TR252_68'), ('TR252_48_68', 'TR252_68', 'TR252_48'), ('TR252_48_69', 'TR252_48', 'TR252_69'), ('TR252_48_69', 'TR252_69', 'TR252_48'), ('TR252_48_70', 'TR252_48', 'TR252_70'), ('TR252_48_70', 'TR252_70', 'TR252_48'), ('TR252_4_19', 'TR252_19', 'TR252_4'), ('TR252_4_19', 'TR252_4', 'TR252_19'), ('TR252_4_20', 'TR252_20', 'TR252_4'), ('TR252_4_20', 'TR252_4', 'TR252_20'), ('TR252_4_5', 'TR252_4', 'TR252_5'), ('TR252_4_5', 'TR252_5', 'TR252_4'), ('TR252_5_21', 'TR252_21', 'TR252_5'), ('TR252_5_21', 'TR252_5', 'TR252_21'), ('TR252_5_22', 'TR252_22', 'TR252_5'), ('TR252_5_22', 'TR252_5', 'TR252_22'), ('TR252_5_6', 'TR252_5', 'TR252_6'), ('TR252_5_6', 'TR252_6', 'TR252_5'), ('TR252_6_13', 'TR252_13', 'TR252_6'), ('TR252_6_13', 'TR252_6', 'TR252_13'), ('TR252_7_23', 'TR252_23', 'TR252_7'), ('TR252_7_23', 'TR252_7', 'TR252_23'), ('TR252_7_8', 'TR252_7', 'TR252_8'), ('TR252_7_8', 'TR252_8', 'TR252_7'), ('TR252_8_24', 'TR252_24', 'TR252_8'), ('TR252_8_24', 'TR252_8', 'TR252_24'), ('TR252_8_25', 'TR252_25', 'TR252_8'), ('TR252_8_25', 'TR252_8', 'TR252_25'), ('TR252_8_9', 'TR252_8', 'TR252_9'), ('TR252_8_9', 'TR252_9', 'TR252_8'), ('TR252_9_10', 'TR252_10', 'TR252_9'), ('TR252_9_10', 'TR252_9', 'TR252_10'), ('TR253_10_23', 'TR253_10', 'TR253_23'), ('TR253_10_23', 'TR253_23', 'TR253_10'), ('TR253_10_24', 'TR253_10', 'TR253_24'), ('TR253_10_24', 'TR253_24', 'TR253_10'), ('TR253_1_11', 'TR253_1', 'TR253_11'), ('TR253_1_11', 'TR253_11', 'TR253_1'), ('TR253_1_12', 'TR253_1', 'TR253_12'), ('TR253_1_12', 'TR253_12', 'TR253_1'), ('TR253_1_13', 'TR253_1', 'TR253_13'), ('TR253_1_13', 'TR253_13', 'TR253_1'), ('TR253_1_2', 'TR253_1', 'TR253_2'), ('TR253_1_2', 'TR253_2', 'TR253_1'), ('TR253_2_14', 'TR253_14', 'TR253_2'), ('TR253_2_14', 'TR253_2', 'TR253_14'), ('TR253_2_3', 'TR253_2', 'TR253_3'), ('TR253_2_3', 'TR253_3', 'TR253_2'), ('TR253_2_7', 'TR253_2', 'TR253_7'), ('TR253_2_7', 'TR253_7', 'TR253_2'), ('TR253_3_15', 'TR253_15', 'TR253_3'), ('TR253_3_15', 'TR253_3', 'TR253_15'), ('TR253_3_16', 'TR253_16', 'TR253_3'), ('TR253_3_16', 'TR253_3', 'TR253_16'), ('TR253_3_4', 'TR253_3', 'TR253_4'), ('TR253_3_4', 'TR253_4', 'TR253_3'), ('TR253_4_5', 'TR253_4', 'TR253_5'), ('TR253_4_5', 'TR253_5', 'TR253_4'), ('TR253_5_8', 'TR253_5', 'TR253_8'), ('TR253_5_8', 'TR253_8', 'TR253_5'), ('TR253_7_17', 'TR253_17', 'TR253_7'), ('TR253_7_17', 'TR253_7', 'TR253_17'), ('TR253_7_18', 'TR253_18', 'TR253_7'), ('TR253_7_18', 'TR253_7', 'TR253_18'), ('TR253_7_19', 'TR253_19', 'TR253_7'), ('TR253_7_19', 'TR253_7', 'TR253_19'), ('TR253_8_20', 'TR253_20', 'TR253_8'), ('TR253_8_20', 'TR253_8', 'TR253_20'), ('TR253_8_21', 'TR253_21', 'TR253_8'), ('TR253_8_21', 'TR253_8', 'TR253_21'), ('TR253_8_9', 'TR253_8', 'TR253_9'), ('TR253_8_9', 'TR253_9', 'TR253_8'), ('TR253_9_22', 'TR253_22', 'TR253_9'), ('TR253_9_22', 'TR253_9', 'TR253_22'), ('TR254_1_2', 'TR254_1', 'TR254_2'), ('TR254_1_2', 'TR254_2', 'TR254_1'), ('TR254_1_3', 'TR254_1', 'TR254_3'), ('TR254_1_3', 'TR254_3', 'TR254_1'), ('TR254_1_4', 'TR254_1', 'TR254_4'), ('TR254_1_4', 'TR254_4', 'TR254_1'), ('TR254_1_5', 'TR254_1', 'TR254_5'), ('TR254_1_5', 'TR254_5', 'TR254_1'), ('TR255_1_6', 'TR255_1', 'TR255_6'), ('TR255_1_6', 'TR255_6', 'TR255_1'), ('TR255_1_9', 'TR255_1', 'TR255_9'), ('TR255_1_9', 'TR255_9', 'TR255_1'), ('TR255_2_10', 'TR255_10', 'TR255_2'), ('TR255_2_10', 'TR255_2', 'TR255_10'), ('TR255_2_3', 'TR255_2', 'TR255_3'), ('TR255_2_3', 'TR255_3', 'TR255_2'), ('TR255_3_11', 'TR255_11', 'TR255_3'), ('TR255_3_11', 'TR255_3', 'TR255_11'), ('TR255_4_12', 'TR255_12', 'TR255_4'), ('TR255_4_12', 'TR255_4', 'TR255_12'), ('TR255_4_5', 'TR255_4', 'TR255_5'), ('TR255_4_5', 'TR255_5', 'TR255_4'), ('TR255_5_8', 'TR255_5', 'TR255_8'), ('TR255_5_8', 'TR255_8', 'TR255_5'), ('TR255_6_7', 'TR255_6', 'TR255_7'), ('TR255_6_7', 'TR255_7', 'TR255_6'), ('TR257_10_12', 'TR257_10', 'TR257_12'), ('TR257_10_12', 'TR257_12', 'TR257_10'), ('TR257_10_24', 'TR257_10', 'TR257_24'), ('TR257_10_24', 'TR257_24', 'TR257_10'), ('TR257_11_13', 'TR257_11', 'TR257_13'), ('TR257_11_13', 'TR257_13', 'TR257_11'), ('TR257_12_25', 'TR257_12', 'TR257_25'), ('TR257_12_25', 'TR257_25', 'TR257_12'), ('TR257_13_14', 'TR257_13', 'TR257_14'), ('TR257_13_14', 'TR257_14', 'TR257_13'), ('TR257_13_26', 'TR257_13', 'TR257_26'), ('TR257_13_26', 'TR257_26', 'TR257_13'), ('TR257_13_27', 'TR257_13', 'TR257_27'), ('TR257_13_27', 'TR257_27', 'TR257_13'), ('TR257_14_15', 'TR257_14', 'TR257_15'), ('TR257_14_15', 'TR257_15', 'TR257_14'), ('TR257_14_16', 'TR257_14', 'TR257_16'), ('TR257_14_16', 'TR257_16', 'TR257_14'), ('TR257_14_28', 'TR257_14', 'TR257_28'), ('TR257_14_28', 'TR257_28', 'TR257_14'), ('TR257_15_16', 'TR257_15', 'TR257_16'), ('TR257_15_16', 'TR257_16', 'TR257_15'), ('TR257_15_29', 'TR257_15', 'TR257_29'), ('TR257_15_29', 'TR257_29', 'TR257_15'), ('TR257_15_30', 'TR257_15', 'TR257_30'), ('TR257_15_30', 'TR257_30', 'TR257_15'), ('TR257_1_2', 'TR257_1', 'TR257_2'), ('TR257_1_2', 'TR257_2', 'TR257_1'), ('TR257_1_3', 'TR257_1', 'TR257_3'), ('TR257_1_3', 'TR257_3', 'TR257_1'), ('TR257_2_17', 'TR257_17', 'TR257_2'), ('TR257_2_17', 'TR257_2', 'TR257_17'), ('TR257_2_18', 'TR257_18', 'TR257_2'), ('TR257_2_18', 'TR257_2', 'TR257_18'), ('TR257_2_4', 'TR257_2', 'TR257_4'), ('TR257_2_4', 'TR257_4', 'TR257_2'), ('TR257_3_6', 'TR257_3', 'TR257_6'), ('TR257_3_6', 'TR257_6', 'TR257_3'), ('TR257_4_19', 'TR257_19', 'TR257_4'), ('TR257_4_19', 'TR257_4', 'TR257_19'), ('TR257_4_7', 'TR257_4', 'TR257_7'), ('TR257_4_7', 'TR257_7', 'TR257_4'), ('TR257_4_8', 'TR257_4', 'TR257_8'), ('TR257_4_8', 'TR257_8', 'TR257_4'), ('TR257_5_20', 'TR257_20', 'TR257_5'), ('TR257_5_20', 'TR257_5', 'TR257_20'), ('TR257_5_9', 'TR257_5', 'TR257_9'), ('TR257_5_9', 'TR257_9', 'TR257_5'), ('TR257_6_21', 'TR257_21', 'TR257_6'), ('TR257_6_21', 'TR257_6', 'TR257_21'), ('TR257_7_22', 'TR257_22', 'TR257_7'), ('TR257_7_22', 'TR257_7', 'TR257_22'), ('TR257_7_23', 'TR257_23', 'TR257_7'), ('TR257_7_23', 'TR257_7', 'TR257_23'), ('TR257_7_8', 'TR257_7', 'TR257_8'), ('TR257_7_8', 'TR257_8', 'TR257_7'), ('TR257_9_11', 'TR257_11', 'TR257_9'), ('TR257_9_11', 'TR257_9', 'TR257_11'), ('TR259_1_2', 'TR259_1', 'TR259_2'), ('TR259_1_2', 'TR259_2', 'TR259_1'), ('TR259_1_3', 'TR259_1', 'TR259_3'), ('TR259_1_3', 'TR259_3', 'TR259_1'), ('TR259_2_5', 'TR259_2', 'TR259_5'), ('TR259_2_5', 'TR259_5', 'TR259_2'), ('TR259_3_8', 'TR259_3', 'TR259_8'), ('TR259_3_8', 'TR259_8', 'TR259_3'), ('TR259_5_10', 'TR259_10', 'TR259_5'), ('TR259_5_10', 'TR259_5', 'TR259_10'), ('TR259_5_7', 'TR259_5', 'TR259_7'), ('TR259_5_7', 'TR259_7', 'TR259_5'), ('TR259_5_9', 'TR259_5', 'TR259_9'), ('TR259_5_9', 'TR259_9', 'TR259_5'), ('TR259_6_11', 'TR259_11', 'TR259_6'), ('TR259_6_11', 'TR259_6', 'TR259_11'), ('TR259_6_12', 'TR259_12', 'TR259_6'), ('TR259_6_12', 'TR259_6', 'TR259_12'), ('TR259_7_13', 'TR259_13', 'TR259_7'), ('TR259_7_13', 'TR259_7', 'TR259_13'), ('TR259_7_14', 'TR259_14', 'TR259_7'), ('TR259_7_14', 'TR259_7', 'TR259_14'), ('TR259_7_15', 'TR259_15', 'TR259_7'), ('TR259_7_15', 'TR259_7', 'TR259_15'), ('TR261_1_6', 'TR261_1', 'TR261_6'), ('TR261_1_6', 'TR261_6', 'TR261_1'), ('TR261_1_8', 'TR261_1', 'TR261_8'), ('TR261_1_8', 'TR261_8', 'TR261_1'), ('TR261_2_3', 'TR261_2', 'TR261_3'), ('TR261_2_3', 'TR261_3', 'TR261_2'), ('TR261_2_9', 'TR261_2', 'TR261_9'), ('TR261_2_9', 'TR261_9', 'TR261_2'), ('TR261_3_10', 'TR261_10', 'TR261_3'), ('TR261_3_10', 'TR261_3', 'TR261_10'), ('TR261_4_11', 'TR261_11', 'TR261_4'), ('TR261_4_11', 'TR261_4', 'TR261_11'), ('TR261_4_5', 'TR261_4', 'TR261_5'), ('TR261_4_5', 'TR261_5', 'TR261_4'), ('TR261_5_12', 'TR261_12', 'TR261_5'), ('TR261_5_12', 'TR261_5', 'TR261_12'), ('TR261_6_7', 'TR261_6', 'TR261_7'), ('TR261_6_7', 'TR261_7', 'TR261_6'), ('TR263_1_2', 'TR263_1', 'TR263_2'), ('TR263_1_2', 'TR263_2', 'TR263_1'), ('TR263_1_3', 'TR263_1', 'TR263_3'), ('TR263_1_3', 'TR263_3', 'TR263_1'), ('TR263_1_4', 'TR263_1', 'TR263_4'), ('TR263_1_4', 'TR263_4', 'TR263_1'), ('TR263_1_6', 'TR263_1', 'TR263_6'), ('TR263_1_6', 'TR263_6', 'TR263_1'), ('TR263_2_5', 'TR263_2', 'TR263_5'), ('TR263_2_5', 'TR263_5', 'TR263_2'), ('TR263_2_7', 'TR263_2', 'TR263_7'), ('TR263_2_7', 'TR263_7', 'TR263_2'), ('TR263_2_8', 'TR263_2', 'TR263_8'), ('TR263_2_8', 'TR263_8', 'TR263_2'), ('TR263_3_10', 'TR263_10', 'TR263_3'), ('TR263_3_10', 'TR263_3', 'TR263_10'), ('TR263_3_11', 'TR263_11', 'TR263_3'), ('TR263_3_11', 'TR263_3', 'TR263_11'), ('TR263_3_9', 'TR263_3', 'TR263_9'), ('TR263_3_9', 'TR263_9', 'TR263_3'), ('TR265_10_28', 'TR265_10', 'TR265_28'), ('TR265_10_28', 'TR265_28', 'TR265_10'), ('TR265_11_29', 'TR265_11', 'TR265_29'), ('TR265_11_29', 'TR265_29', 'TR265_11'), ('TR265_12_13', 'TR265_12', 'TR265_13'), ('TR265_12_13', 'TR265_13', 'TR265_12'), ('TR265_12_30', 'TR265_12', 'TR265_30'), ('TR265_12_30', 'TR265_30', 'TR265_12'), ('TR265_13_23', 'TR265_13', 'TR265_23'), ('TR265_13_23', 'TR265_23', 'TR265_13'), ('TR265_14_31', 'TR265_14', 'TR265_31'), ('TR265_14_31', 'TR265_31', 'TR265_14'), ('TR265_15_19', 'TR265_15', 'TR265_19'), ('TR265_15_19', 'TR265_19', 'TR265_15'), ('TR265_16_17', 'TR265_16', 'TR265_17'), ('TR265_16_17', 'TR265_17', 'TR265_16'), ('TR265_16_22', 'TR265_16', 'TR265_22'), ('TR265_16_22', 'TR265_22', 'TR265_16'), ('TR265_17_18', 'TR265_17', 'TR265_18'), ('TR265_17_18', 'TR265_18', 'TR265_17'), ('TR265_19_32', 'TR265_19', 'TR265_32'), ('TR265_19_32', 'TR265_32', 'TR265_19'), ('TR265_1_6', 'TR265_1', 'TR265_6'), ('TR265_1_6', 'TR265_6', 'TR265_1'), ('TR265_1_7', 'TR265_1', 'TR265_7'), ('TR265_1_7', 'TR265_7', 'TR265_1'), ('TR265_20_21', 'TR265_20', 'TR265_21'), ('TR265_20_21', 'TR265_21', 'TR265_20'), ('TR265_20_33', 'TR265_20', 'TR265_33'), ('TR265_20_33', 'TR265_33', 'TR265_20'), ('TR265_21_34', 'TR265_21', 'TR265_34'), ('TR265_21_34', 'TR265_34', 'TR265_21'), ('TR265_22_35', 'TR265_22', 'TR265_35'), ('TR265_22_35', 'TR265_35', 'TR265_22'), ('TR265_2_10', 'TR265_10', 'TR265_2'), ('TR265_2_10', 'TR265_2', 'TR265_10'), ('TR265_2_3', 'TR265_2', 'TR265_3'), ('TR265_2_3', 'TR265_3', 'TR265_2'), ('TR265_3_15', 'TR265_15', 'TR265_3'), ('TR265_3_15', 'TR265_3', 'TR265_15'), ('TR265_3_18', 'TR265_18', 'TR265_3'), ('TR265_3_18', 'TR265_3', 'TR265_18'), ('TR265_3_4', 'TR265_3', 'TR265_4'), ('TR265_3_4', 'TR265_4', 'TR265_3'), ('TR265_4_11', 'TR265_11', 'TR265_4'), ('TR265_4_11', 'TR265_4', 'TR265_11'), ('TR265_5_14', 'TR265_14', 'TR265_5'), ('TR265_5_14', 'TR265_5', 'TR265_14'), ('TR265_5_6', 'TR265_5', 'TR265_6'), ('TR265_5_6', 'TR265_6', 'TR265_5'), ('TR265_7_26', 'TR265_26', 'TR265_7'), ('TR265_7_26', 'TR265_7', 'TR265_26'), ('TR265_8_24', 'TR265_24', 'TR265_8'), ('TR265_8_24', 'TR265_8', 'TR265_24'), ('TR265_8_9', 'TR265_8', 'TR265_9'), ('TR265_8_9', 'TR265_9', 'TR265_8'), ('TR265_9_27', 'TR265_27', 'TR265_9'), ('TR265_9_27', 'TR265_9', 'TR265_27'), ('TR266_10_23', 'TR266_10', 'TR266_23'), ('TR266_10_23', 'TR266_23', 'TR266_10'), ('TR266_11_12', 'TR266_11', 'TR266_12'), ('TR266_11_12', 'TR266_12', 'TR266_11'), ('TR266_11_24', 'TR266_11', 'TR266_24'), ('TR266_11_24', 'TR266_24', 'TR266_11'), ('TR266_12_13', 'TR266_12', 'TR266_13'), ('TR266_12_13', 'TR266_13', 'TR266_12'), ('TR266_1_14', 'TR266_1', 'TR266_14'), ('TR266_1_14', 'TR266_14', 'TR266_1'), ('TR266_1_2', 'TR266_1', 'TR266_2'), ('TR266_1_2', 'TR266_2', 'TR266_1'), ('TR266_1_3', 'TR266_1', 'TR266_3'), ('TR266_1_3', 'TR266_3', 'TR266_1'), ('TR266_2_4', 'TR266_2', 'TR266_4'), ('TR266_2_4', 'TR266_4', 'TR266_2'), ('TR266_3_7', 'TR266_3', 'TR266_7'), ('TR266_3_7', 'TR266_7', 'TR266_3'), ('TR266_4_8', 'TR266_4', 'TR266_8'), ('TR266_4_8', 'TR266_8', 'TR266_4'), ('TR266_4_9', 'TR266_4', 'TR266_9'), ('TR266_4_9', 'TR266_9', 'TR266_4'), ('TR266_6_10', 'TR266_10', 'TR266_6'), ('TR266_6_10', 'TR266_6', 'TR266_10'), ('TR266_6_15', 'TR266_15', 'TR266_6'), ('TR266_6_15', 'TR266_6', 'TR266_15'), ('TR266_7_16', 'TR266_16', 'TR266_7'), ('TR266_7_16', 'TR266_7', 'TR266_16'), ('TR266_8_17', 'TR266_17', 'TR266_8'), ('TR266_8_17', 'TR266_8', 'TR266_17'), ('TR266_8_18', 'TR266_18', 'TR266_8'), ('TR266_8_18', 'TR266_8', 'TR266_18'), ('TR266_8_19', 'TR266_19', 'TR266_8'), ('TR266_8_19', 'TR266_8', 'TR266_19'), ('TR266_9_20', 'TR266_20', 'TR266_9'), ('TR266_9_20', 'TR266_9', 'TR266_20'), ('TR266_9_21', 'TR266_21', 'TR266_9'), ('TR266_9_21', 'TR266_9', 'TR266_21'), ('TR266_9_22', 'TR266_22', 'TR266_9'), ('TR266_9_22', 'TR266_9', 'TR266_22'), ('TR267_1_2', 'TR267_1', 'TR267_2'), ('TR267_1_2', 'TR267_2', 'TR267_1'), ('TR267_1_5', 'TR267_1', 'TR267_5'), ('TR267_1_5', 'TR267_5', 'TR267_1'), ('TR267_1_6', 'TR267_1', 'TR267_6'), ('TR267_1_6', 'TR267_6', 'TR267_1'), ('TR267_1_7', 'TR267_1', 'TR267_7'), ('TR267_1_7', 'TR267_7', 'TR267_1'), ('TR267_2_3', 'TR267_2', 'TR267_3'), ('TR267_2_3', 'TR267_3', 'TR267_2'), ('TR267_2_4', 'TR267_2', 'TR267_4'), ('TR267_2_4', 'TR267_4', 'TR267_2'), ('TR267_2_8', 'TR267_2', 'TR267_8'), ('TR267_2_8', 'TR267_8', 'TR267_2'), ('TR267_3_10', 'TR267_10', 'TR267_3'), ('TR267_3_10', 'TR267_3', 'TR267_10'), ('TR267_3_4', 'TR267_3', 'TR267_4'), ('TR267_3_4', 'TR267_4', 'TR267_3'), ('TR267_3_9', 'TR267_3', 'TR267_9'), ('TR267_3_9', 'TR267_9', 'TR267_3'), ('TR268_10_11', 'TR268_10', 'TR268_11'), ('TR268_10_11', 'TR268_11', 'TR268_10'), ('TR268_10_37', 'TR268_10', 'TR268_37'), ('TR268_10_37', 'TR268_37', 'TR268_10'), ('TR268_10_38', 'TR268_10', 'TR268_38'), ('TR268_10_38', 'TR268_38', 'TR268_10'), ('TR268_11_12', 'TR268_11', 'TR268_12'), ('TR268_11_12', 'TR268_12', 'TR268_11'), ('TR268_11_39', 'TR268_11', 'TR268_39'), ('TR268_11_39', 'TR268_39', 'TR268_11'), ('TR268_11_40', 'TR268_11', 'TR268_40'), ('TR268_11_40', 'TR268_40', 'TR268_11'), ('TR268_12_13', 'TR268_12', 'TR268_13'), ('TR268_12_13', 'TR268_13', 'TR268_12'), ('TR268_12_41', 'TR268_12', 'TR268_41'), ('TR268_12_41', 'TR268_41', 'TR268_12'), ('TR268_12_42', 'TR268_12', 'TR268_42'), ('TR268_12_42', 'TR268_42', 'TR268_12'), ('TR268_13_14', 'TR268_13', 'TR268_14'), ('TR268_13_14', 'TR268_14', 'TR268_13'), ('TR268_14_15', 'TR268_14', 'TR268_15'), ('TR268_14_15', 'TR268_15', 'TR268_14'), ('TR268_1_18', 'TR268_1', 'TR268_18'), ('TR268_1_18', 'TR268_18', 'TR268_1'), ('TR268_1_19', 'TR268_1', 'TR268_19'), ('TR268_1_19', 'TR268_19', 'TR268_1'), ('TR268_1_2', 'TR268_1', 'TR268_2'), ('TR268_1_2', 'TR268_2', 'TR268_1'), ('TR268_1_20', 'TR268_1', 'TR268_20'), ('TR268_1_20', 'TR268_20', 'TR268_1'), ('TR268_2_21', 'TR268_2', 'TR268_21'), ('TR268_2_21', 'TR268_21', 'TR268_2'), ('TR268_2_22', 'TR268_2', 'TR268_22'), ('TR268_2_22', 'TR268_22', 'TR268_2'), ('TR268_2_3', 'TR268_2', 'TR268_3'), ('TR268_2_3', 'TR268_3', 'TR268_2'), ('TR268_3_23', 'TR268_23', 'TR268_3'), ('TR268_3_23', 'TR268_3', 'TR268_23'), ('TR268_3_24', 'TR268_24', 'TR268_3'), ('TR268_3_24', 'TR268_3', 'TR268_24'), ('TR268_3_4', 'TR268_3', 'TR268_4'), ('TR268_3_4', 'TR268_4', 'TR268_3'), ('TR268_4_25', 'TR268_25', 'TR268_4'), ('TR268_4_25', 'TR268_4', 'TR268_25'), ('TR268_4_26', 'TR268_26', 'TR268_4'), ('TR268_4_26', 'TR268_4', 'TR268_26'), ('TR268_4_5', 'TR268_4', 'TR268_5'), ('TR268_4_5', 'TR268_5', 'TR268_4'), ('TR268_5_27', 'TR268_27', 'TR268_5'), ('TR268_5_27', 'TR268_5', 'TR268_27'), ('TR268_5_28', 'TR268_28', 'TR268_5'), ('TR268_5_28', 'TR268_5', 'TR268_28'), ('TR268_5_6', 'TR268_5', 'TR268_6'), ('TR268_5_6', 'TR268_6', 'TR268_5'), ('TR268_6_29', 'TR268_29', 'TR268_6'), ('TR268_6_29', 'TR268_6', 'TR268_29'), ('TR268_6_30', 'TR268_30', 'TR268_6'), ('TR268_6_30', 'TR268_6', 'TR268_30'), ('TR268_6_7', 'TR268_6', 'TR268_7'), ('TR268_6_7', 'TR268_7', 'TR268_6'), ('TR268_7_31', 'TR268_31', 'TR268_7'), ('TR268_7_31', 'TR268_7', 'TR268_31'), ('TR268_7_32', 'TR268_32', 'TR268_7'), ('TR268_7_32', 'TR268_7', 'TR268_32'), ('TR268_7_8', 'TR268_7', 'TR268_8'), ('TR268_7_8', 'TR268_8', 'TR268_7'), ('TR268_8_33', 'TR268_33', 'TR268_8'), ('TR268_8_33', 'TR268_8', 'TR268_33'), ('TR268_8_34', 'TR268_34', 'TR268_8'), ('TR268_8_34', 'TR268_8', 'TR268_34'), ('TR268_8_9', 'TR268_8', 'TR268_9'), ('TR268_8_9', 'TR268_9', 'TR268_8'), ('TR268_9_10', 'TR268_10', 'TR268_9'), ('TR268_9_10', 'TR268_9', 'TR268_10'), ('TR268_9_35', 'TR268_35', 'TR268_9'), ('TR268_9_35', 'TR268_9', 'TR268_35'), ('TR268_9_36', 'TR268_36', 'TR268_9'), ('TR268_9_36', 'TR268_9', 'TR268_36'), ('TR269_1_2', 'TR269_1', 'TR269_2'), ('TR269_1_2', 'TR269_2', 'TR269_1'), ('TR269_1_6', 'TR269_1', 'TR269_6'), ('TR269_1_6', 'TR269_6', 'TR269_1'), ('TR269_2_4', 'TR269_2', 'TR269_4'), ('TR269_2_4', 'TR269_4', 'TR269_2'), ('TR269_2_7', 'TR269_2', 'TR269_7'), ('TR269_2_7', 'TR269_7', 'TR269_2'), ('TR269_2_8', 'TR269_2', 'TR269_8'), ('TR269_2_8', 'TR269_8', 'TR269_2'), ('TR269_3_5', 'TR269_3', 'TR269_5'), ('TR269_3_5', 'TR269_5', 'TR269_3'), ('TR269_3_9', 'TR269_3', 'TR269_9'), ('TR269_3_9', 'TR269_9', 'TR269_3'), ('TR271_12_23', 'TR271_12', 'TR271_23'), ('TR271_12_23', 'TR271_23', 'TR271_12'), ('TR271_12_24', 'TR271_12', 'TR271_24'), ('TR271_12_24', 'TR271_24', 'TR271_12'), ('TR271_12_25', 'TR271_12', 'TR271_25'), ('TR271_12_25', 'TR271_25', 'TR271_12'), ('TR271_13_17', 'TR271_13', 'TR271_17'), ('TR271_13_17', 'TR271_17', 'TR271_13'), ('TR271_13_26', 'TR271_13', 'TR271_26'), ('TR271_13_26', 'TR271_26', 'TR271_13'), ('TR271_13_27', 'TR271_13', 'TR271_27'), ('TR271_13_27', 'TR271_27', 'TR271_13'), ('TR271_14_15', 'TR271_14', 'TR271_15'), ('TR271_14_15', 'TR271_15', 'TR271_14'), ('TR271_14_28', 'TR271_14', 'TR271_28'), ('TR271_14_28', 'TR271_28', 'TR271_14'), ('TR271_14_29', 'TR271_14', 'TR271_29'), ('TR271_14_29', 'TR271_29', 'TR271_14'), ('TR271_15_16', 'TR271_15', 'TR271_16'), ('TR271_15_16', 'TR271_16', 'TR271_15'), ('TR271_15_30', 'TR271_15', 'TR271_30'), ('TR271_15_30', 'TR271_30', 'TR271_15'), ('TR271_15_31', 'TR271_15', 'TR271_31'), ('TR271_15_31', 'TR271_31', 'TR271_15'), ('TR271_16_32', 'TR271_16', 'TR271_32'), ('TR271_16_32', 'TR271_32', 'TR271_16'), ('TR271_17_18', 'TR271_17', 'TR271_18'), ('TR271_17_18', 'TR271_18', 'TR271_17'), ('TR271_17_33', 'TR271_17', 'TR271_33'), ('TR271_17_33', 'TR271_33', 'TR271_17'), ('TR271_17_34', 'TR271_17', 'TR271_34'), ('TR271_17_34', 'TR271_34', 'TR271_17'), ('TR271_18_35', 'TR271_18', 'TR271_35'), ('TR271_18_35', 'TR271_35', 'TR271_18'), ('TR271_1_6', 'TR271_1', 'TR271_6'), ('TR271_1_6', 'TR271_6', 'TR271_1'), ('TR271_1_9', 'TR271_1', 'TR271_9'), ('TR271_1_9', 'TR271_9', 'TR271_1'), ('TR271_2_3', 'TR271_2', 'TR271_3'), ('TR271_2_3', 'TR271_3', 'TR271_2'), ('TR271_2_8', 'TR271_2', 'TR271_8'), ('TR271_2_8', 'TR271_8', 'TR271_2'), ('TR271_3_19', 'TR271_19', 'TR271_3'), ('TR271_3_19', 'TR271_3', 'TR271_19'), ('TR271_4_20', 'TR271_20', 'TR271_4'), ('TR271_4_20', 'TR271_4', 'TR271_20'), ('TR271_4_5', 'TR271_4', 'TR271_5'), ('TR271_4_5', 'TR271_5', 'TR271_4'), ('TR271_5_7', 'TR271_5', 'TR271_7'), ('TR271_5_7', 'TR271_7', 'TR271_5'), ('TR271_6_21', 'TR271_21', 'TR271_6'), ('TR271_6_21', 'TR271_6', 'TR271_21'), ('TR271_7_13', 'TR271_13', 'TR271_7'), ('TR271_7_13', 'TR271_7', 'TR271_13'), ('TR271_7_14', 'TR271_14', 'TR271_7'), ('TR271_7_14', 'TR271_7', 'TR271_14'), ('TR271_8_12', 'TR271_12', 'TR271_8'), ('TR271_8_12', 'TR271_8', 'TR271_12'), ('TR271_8_22', 'TR271_22', 'TR271_8'), ('TR271_8_22', 'TR271_8', 'TR271_22'), ('TR271_9_10', 'TR271_10', 'TR271_9'), ('TR271_9_10', 'TR271_9', 'TR271_10'), ('TR272_1_4', 'TR272_1', 'TR272_4'), ('TR272_1_4', 'TR272_4', 'TR272_1'), ('TR272_1_5', 'TR272_1', 'TR272_5'), ('TR272_1_5', 'TR272_5', 'TR272_1'), ('TR272_2_3', 'TR272_2', 'TR272_3'), ('TR272_2_3', 'TR272_3', 'TR272_2'), ('TR272_2_6', 'TR272_2', 'TR272_6'), ('TR272_2_6', 'TR272_6', 'TR272_2'), ('TR272_3_7', 'TR272_3', 'TR272_7'), ('TR272_3_7', 'TR272_7', 'TR272_3'), ('TR272_3_8', 'TR272_3', 'TR272_8'), ('TR272_3_8', 'TR272_8', 'TR272_3'), ('TR272_3_9', 'TR272_3', 'TR272_9'), ('TR272_3_9', 'TR272_9', 'TR272_3'), ('TR273_1_3', 'TR273_1', 'TR273_3'), ('TR273_1_3', 'TR273_3', 'TR273_1'), ('TR273_1_6', 'TR273_1', 'TR273_6'), ('TR273_1_6', 'TR273_6', 'TR273_1'), ('TR273_2_4', 'TR273_2', 'TR273_4'), ('TR273_2_4', 'TR273_4', 'TR273_2'), ('TR273_2_5', 'TR273_2', 'TR273_5'), ('TR273_2_5', 'TR273_5', 'TR273_2'), ('TR274_10_14', 'TR274_10', 'TR274_14'), ('TR274_10_14', 'TR274_14', 'TR274_10'), ('TR274_10_15', 'TR274_10', 'TR274_15'), ('TR274_10_15', 'TR274_15', 'TR274_10'), ('TR274_10_37', 'TR274_10', 'TR274_37'), ('TR274_10_37', 'TR274_37', 'TR274_10'), ('TR274_11_16', 'TR274_11', 'TR274_16'), ('TR274_11_16', 'TR274_16', 'TR274_11'), ('TR274_11_17', 'TR274_11', 'TR274_17'), ('TR274_11_17', 'TR274_17', 'TR274_11'), ('TR274_11_38', 'TR274_11', 'TR274_38'), ('TR274_11_38', 'TR274_38', 'TR274_11'), ('TR274_12_18', 'TR274_12', 'TR274_18'), ('TR274_12_18', 'TR274_18', 'TR274_12'), ('TR274_12_39', 'TR274_12', 'TR274_39'), ('TR274_12_39', 'TR274_39', 'TR274_12'), ('TR274_12_40', 'TR274_12', 'TR274_40'), ('TR274_12_40', 'TR274_40', 'TR274_12'), ('TR274_13_19', 'TR274_13', 'TR274_19'), ('TR274_13_19', 'TR274_19', 'TR274_13'), ('TR274_13_41', 'TR274_13', 'TR274_41'), ('TR274_13_41', 'TR274_41', 'TR274_13'), ('TR274_13_42', 'TR274_13', 'TR274_42'), ('TR274_13_42', 'TR274_42', 'TR274_13'), ('TR274_14_20', 'TR274_14', 'TR274_20'), ('TR274_14_20', 'TR274_20', 'TR274_14'), ('TR274_14_43', 'TR274_14', 'TR274_43'), ('TR274_14_43', 'TR274_43', 'TR274_14'), ('TR274_14_44', 'TR274_14', 'TR274_44'), ('TR274_14_44', 'TR274_44', 'TR274_14'), ('TR274_15_21', 'TR274_15', 'TR274_21'), ('TR274_15_21', 'TR274_21', 'TR274_15'), ('TR274_15_45', 'TR274_15', 'TR274_45'), ('TR274_15_45', 'TR274_45', 'TR274_15'), ('TR274_15_46', 'TR274_15', 'TR274_46'), ('TR274_15_46', 'TR274_46', 'TR274_15'), ('TR274_16_22', 'TR274_16', 'TR274_22'), ('TR274_16_22', 'TR274_22', 'TR274_16'), ('TR274_16_47', 'TR274_16', 'TR274_47'), ('TR274_16_47', 'TR274_47', 'TR274_16'), ('TR274_16_48', 'TR274_16', 'TR274_48'), ('TR274_16_48', 'TR274_48', 'TR274_16'), ('TR274_17_23', 'TR274_17', 'TR274_23'), ('TR274_17_23', 'TR274_23', 'TR274_17'), ('TR274_17_49', 'TR274_17', 'TR274_49'), ('TR274_17_49', 'TR274_49', 'TR274_17'), ('TR274_17_50', 'TR274_17', 'TR274_50'), ('TR274_17_50', 'TR274_50', 'TR274_17'), ('TR274_18_24', 'TR274_18', 'TR274_24'), ('TR274_18_24', 'TR274_24', 'TR274_18'), ('TR274_18_51', 'TR274_18', 'TR274_51'), ('TR274_18_51', 'TR274_51', 'TR274_18'), ('TR274_18_52', 'TR274_18', 'TR274_52'), ('TR274_18_52', 'TR274_52', 'TR274_18'), ('TR274_19_53', 'TR274_19', 'TR274_53'), ('TR274_19_53', 'TR274_53', 'TR274_19'), ('TR274_19_54', 'TR274_19', 'TR274_54'), ('TR274_19_54', 'TR274_54', 'TR274_19'), ('TR274_19_55', 'TR274_19', 'TR274_55'), ('TR274_19_55', 'TR274_55', 'TR274_19'), ('TR274_1_2', 'TR274_1', 'TR274_2'), ('TR274_1_2', 'TR274_2', 'TR274_1'), ('TR274_1_3', 'TR274_1', 'TR274_3'), ('TR274_1_3', 'TR274_3', 'TR274_1'), ('TR274_1_4', 'TR274_1', 'TR274_4'), ('TR274_1_4', 'TR274_4', 'TR274_1'), ('TR274_1_5', 'TR274_1', 'TR274_5'), ('TR274_1_5', 'TR274_5', 'TR274_1'), ('TR274_20_25', 'TR274_20', 'TR274_25'), ('TR274_20_25', 'TR274_25', 'TR274_20'), ('TR274_20_56', 'TR274_20', 'TR274_56'), ('TR274_20_56', 'TR274_56', 'TR274_20'), ('TR274_20_57', 'TR274_20', 'TR274_57'), ('TR274_20_57', 'TR274_57', 'TR274_20'), ('TR274_21_58', 'TR274_21', 'TR274_58'), ('TR274_21_58', 'TR274_58', 'TR274_21'), ('TR274_21_59', 'TR274_21', 'TR274_59'), ('TR274_21_59', 'TR274_59', 'TR274_21'), ('TR274_21_60', 'TR274_21', 'TR274_60'), ('TR274_21_60', 'TR274_60', 'TR274_21'), ('TR274_22_26', 'TR274_22', 'TR274_26'), ('TR274_22_26', 'TR274_26', 'TR274_22'), ('TR274_22_61', 'TR274_22', 'TR274_61'), ('TR274_22_61', 'TR274_61', 'TR274_22'), ('TR274_22_62', 'TR274_22', 'TR274_62'), ('TR274_22_62', 'TR274_62', 'TR274_22'), ('TR274_23_63', 'TR274_23', 'TR274_63'), ('TR274_23_63', 'TR274_63', 'TR274_23'), ('TR274_23_64', 'TR274_23', 'TR274_64'), ('TR274_23_64', 'TR274_64', 'TR274_23'), ('TR274_23_65', 'TR274_23', 'TR274_65'), ('TR274_23_65', 'TR274_65', 'TR274_23'), ('TR274_24_27', 'TR274_24', 'TR274_27'), ('TR274_24_27', 'TR274_27', 'TR274_24'), ('TR274_24_66', 'TR274_24', 'TR274_66'), ('TR274_24_66', 'TR274_66', 'TR274_24'), ('TR274_24_67', 'TR274_24', 'TR274_67'), ('TR274_24_67', 'TR274_67', 'TR274_24'), ('TR274_25_28', 'TR274_25', 'TR274_28'), ('TR274_25_28', 'TR274_28', 'TR274_25'), ('TR274_25_68', 'TR274_25', 'TR274_68'), ('TR274_25_68', 'TR274_68', 'TR274_25'), ('TR274_25_69', 'TR274_25', 'TR274_69'), ('TR274_25_69', 'TR274_69', 'TR274_25'), ('TR274_26_29', 'TR274_26', 'TR274_29'), ('TR274_26_29', 'TR274_29', 'TR274_26'), ('TR274_26_70', 'TR274_26', 'TR274_70'), ('TR274_26_70', 'TR274_70', 'TR274_26'), ('TR274_26_71', 'TR274_26', 'TR274_71'), ('TR274_26_71', 'TR274_71', 'TR274_26'), ('TR274_27_72', 'TR274_27', 'TR274_72'), ('TR274_27_72', 'TR274_72', 'TR274_27'), ('TR274_27_73', 'TR274_27', 'TR274_73'), ('TR274_27_73', 'TR274_73', 'TR274_27'), ('TR274_27_74', 'TR274_27', 'TR274_74'), ('TR274_27_74', 'TR274_74', 'TR274_27'), ('TR274_28_75', 'TR274_28', 'TR274_75'), ('TR274_28_75', 'TR274_75', 'TR274_28'), ('TR274_28_76', 'TR274_28', 'TR274_76'), ('TR274_28_76', 'TR274_76', 'TR274_28'), ('TR274_28_77', 'TR274_28', 'TR274_77'), ('TR274_28_77', 'TR274_77', 'TR274_28'), ('TR274_29_78', 'TR274_29', 'TR274_78'), ('TR274_29_78', 'TR274_78', 'TR274_29'), ('TR274_29_79', 'TR274_29', 'TR274_79'), ('TR274_29_79', 'TR274_79', 'TR274_29'), ('TR274_29_80', 'TR274_29', 'TR274_80'), ('TR274_29_80', 'TR274_80', 'TR274_29'), ('TR274_2_6', 'TR274_2', 'TR274_6'), ('TR274_2_6', 'TR274_6', 'TR274_2'), ('TR274_3_7', 'TR274_3', 'TR274_7'), ('TR274_3_7', 'TR274_7', 'TR274_3'), ('TR274_4_8', 'TR274_4', 'TR274_8'), ('TR274_4_8', 'TR274_8', 'TR274_4'), ('TR274_6_30', 'TR274_30', 'TR274_6'), ('TR274_6_30', 'TR274_6', 'TR274_30'), ('TR274_6_31', 'TR274_31', 'TR274_6'), ('TR274_6_31', 'TR274_6', 'TR274_31'), ('TR274_6_9', 'TR274_6', 'TR274_9'), ('TR274_6_9', 'TR274_9', 'TR274_6'), ('TR274_7_10', 'TR274_10', 'TR274_7'), ('TR274_7_10', 'TR274_7', 'TR274_10'), ('TR274_7_32', 'TR274_32', 'TR274_7'), ('TR274_7_32', 'TR274_7', 'TR274_32'), ('TR274_7_33', 'TR274_33', 'TR274_7'), ('TR274_7_33', 'TR274_7', 'TR274_33'), ('TR274_8_11', 'TR274_11', 'TR274_8'), ('TR274_8_11', 'TR274_8', 'TR274_11'), ('TR274_8_34', 'TR274_34', 'TR274_8'), ('TR274_8_34', 'TR274_8', 'TR274_34'), ('TR274_8_35', 'TR274_35', 'TR274_8'), ('TR274_8_35', 'TR274_8', 'TR274_35'), ('TR274_9_12', 'TR274_12', 'TR274_9'), ('TR274_9_12', 'TR274_9', 'TR274_12'), ('TR274_9_13', 'TR274_13', 'TR274_9'), ('TR274_9_13', 'TR274_9', 'TR274_13'), ('TR274_9_36', 'TR274_36', 'TR274_9'), ('TR274_9_36', 'TR274_9', 'TR274_36'), ('TR275_1_2', 'TR275_1', 'TR275_2'), ('TR275_1_2', 'TR275_2', 'TR275_1'), ('TR275_1_3', 'TR275_1', 'TR275_3'), ('TR275_1_3', 'TR275_3', 'TR275_1'), ('TR275_1_5', 'TR275_1', 'TR275_5'), ('TR275_1_5', 'TR275_5', 'TR275_1'), ('TR275_1_6', 'TR275_1', 'TR275_6'), ('TR275_1_6', 'TR275_6', 'TR275_1'), ('TR275_2_4', 'TR275_2', 'TR275_4'), ('TR275_2_4', 'TR275_4', 'TR275_2'), ('TR275_2_7', 'TR275_2', 'TR275_7'), ('TR275_2_7', 'TR275_7', 'TR275_2'), ('TR275_2_8', 'TR275_2', 'TR275_8'), ('TR275_2_8', 'TR275_8', 'TR275_2'), ('TR275_4_9', 'TR275_4', 'TR275_9'), ('TR275_4_9', 'TR275_9', 'TR275_4'), ('TR276_10_17', 'TR276_10', 'TR276_17'), ('TR276_10_17', 'TR276_17', 'TR276_10'), ('TR276_11_18', 'TR276_11', 'TR276_18'), ('TR276_11_18', 'TR276_18', 'TR276_11'), ('TR276_1_12', 'TR276_1', 'TR276_12'), ('TR276_1_12', 'TR276_12', 'TR276_1'), ('TR276_1_6', 'TR276_1', 'TR276_6'), ('TR276_1_6', 'TR276_6', 'TR276_1'), ('TR276_2_13', 'TR276_13', 'TR276_2'), ('TR276_2_13', 'TR276_2', 'TR276_13'), ('TR276_2_3', 'TR276_2', 'TR276_3'), ('TR276_2_3', 'TR276_3', 'TR276_2'), ('TR276_3_11', 'TR276_11', 'TR276_3'), ('TR276_3_11', 'TR276_3', 'TR276_11'), ('TR276_4_5', 'TR276_4', 'TR276_5'), ('TR276_4_5', 'TR276_5', 'TR276_4'), ('TR276_4_7', 'TR276_4', 'TR276_7'), ('TR276_4_7', 'TR276_7', 'TR276_4'), ('TR276_5_10', 'TR276_10', 'TR276_5'), ('TR276_5_10', 'TR276_5', 'TR276_10'), ('TR276_6_14', 'TR276_14', 'TR276_6'), ('TR276_6_14', 'TR276_6', 'TR276_14'), ('TR276_8_15', 'TR276_15', 'TR276_8'), ('TR276_8_15', 'TR276_8', 'TR276_15'), ('TR276_8_9', 'TR276_8', 'TR276_9'), ('TR276_8_9', 'TR276_9', 'TR276_8'), ('TR276_9_16', 'TR276_16', 'TR276_9'), ('TR276_9_16', 'TR276_9', 'TR276_16'), ('TR278_1_10', 'TR278_1', 'TR278_10'), ('TR278_1_10', 'TR278_10', 'TR278_1'), ('TR278_1_11', 'TR278_1', 'TR278_11'), ('TR278_1_11', 'TR278_11', 'TR278_1'), ('TR278_1_2', 'TR278_1', 'TR278_2'), ('TR278_1_2', 'TR278_2', 'TR278_1'), ('TR278_2_4', 'TR278_2', 'TR278_4'), ('TR278_2_4', 'TR278_4', 'TR278_2'), ('TR278_3_5', 'TR278_3', 'TR278_5'), ('TR278_3_5', 'TR278_5', 'TR278_3'), ('TR278_3_6', 'TR278_3', 'TR278_6'), ('TR278_3_6', 'TR278_6', 'TR278_3'), ('TR278_4_7', 'TR278_4', 'TR278_7'), ('TR278_4_7', 'TR278_7', 'TR278_4'), ('TR278_5_12', 'TR278_12', 'TR278_5'), ('TR278_5_12', 'TR278_5', 'TR278_12'), ('TR278_5_13', 'TR278_13', 'TR278_5'), ('TR278_5_13', 'TR278_5', 'TR278_13'), ('TR278_5_14', 'TR278_14', 'TR278_5'), ('TR278_5_14', 'TR278_5', 'TR278_14'), ('TR278_6_15', 'TR278_15', 'TR278_6'), ('TR278_6_15', 'TR278_6', 'TR278_15'), ('TR278_7_16', 'TR278_16', 'TR278_7'), ('TR278_7_16', 'TR278_7', 'TR278_16'), ('TR278_7_17', 'TR278_17', 'TR278_7'), ('TR278_7_17', 'TR278_7', 'TR278_17'), ('TR278_7_18', 'TR278_18', 'TR278_7'), ('TR278_7_18', 'TR278_7', 'TR278_18'), ('TR278_8_19', 'TR278_19', 'TR278_8'), ('TR278_8_19', 'TR278_8', 'TR278_19'), ('TR278_8_9', 'TR278_8', 'TR278_9'), ('TR278_8_9', 'TR278_9', 'TR278_8'), ('TR278_9_20', 'TR278_20', 'TR278_9'), ('TR278_9_20', 'TR278_9', 'TR278_20'), ('TR281_10_11', 'TR281_10', 'TR281_11'), ('TR281_10_11', 'TR281_11', 'TR281_10'), ('TR281_10_23', 'TR281_10', 'TR281_23'), ('TR281_10_23', 'TR281_23', 'TR281_10'), ('TR281_10_24', 'TR281_10', 'TR281_24'), ('TR281_10_24', 'TR281_24', 'TR281_10'), ('TR281_11_25', 'TR281_11', 'TR281_25'), ('TR281_11_25', 'TR281_25', 'TR281_11'), ('TR281_12_13', 'TR281_12', 'TR281_13'), ('TR281_12_13', 'TR281_13', 'TR281_12'), ('TR281_1_15', 'TR281_1', 'TR281_15'), ('TR281_1_15', 'TR281_15', 'TR281_1'), ('TR281_1_6', 'TR281_1', 'TR281_6'), ('TR281_1_6', 'TR281_6', 'TR281_1'), ('TR281_2_3', 'TR281_2', 'TR281_3'), ('TR281_2_3', 'TR281_3', 'TR281_2'), ('TR281_2_8', 'TR281_2', 'TR281_8'), ('TR281_2_8', 'TR281_8', 'TR281_2'), ('TR281_3_16', 'TR281_16', 'TR281_3'), ('TR281_3_16', 'TR281_3', 'TR281_16'), ('TR281_4_12', 'TR281_12', 'TR281_4'), ('TR281_4_12', 'TR281_4', 'TR281_12'), ('TR281_4_5', 'TR281_4', 'TR281_5'), ('TR281_4_5', 'TR281_5', 'TR281_4'), ('TR281_5_7', 'TR281_5', 'TR281_7'), ('TR281_5_7', 'TR281_7', 'TR281_5'), ('TR281_6_17', 'TR281_17', 'TR281_6'), ('TR281_6_17', 'TR281_6', 'TR281_17'), ('TR281_7_18', 'TR281_18', 'TR281_7'), ('TR281_7_18', 'TR281_7', 'TR281_18'), ('TR281_7_9', 'TR281_7', 'TR281_9'), ('TR281_7_9', 'TR281_9', 'TR281_7'), ('TR281_8_19', 'TR281_19', 'TR281_8'), ('TR281_8_19', 'TR281_8', 'TR281_19'), ('TR281_8_20', 'TR281_20', 'TR281_8'), ('TR281_8_20', 'TR281_8', 'TR281_20'), ('TR281_9_10', 'TR281_10', 'TR281_9'), ('TR281_9_10', 'TR281_9', 'TR281_10'), ('TR281_9_21', 'TR281_21', 'TR281_9'), ('TR281_9_21', 'TR281_9', 'TR281_21'), ('TR281_9_22', 'TR281_22', 'TR281_9'), ('TR281_9_22', 'TR281_9', 'TR281_22'), ('TR282_1_2', 'TR282_1', 'TR282_2'), ('TR282_1_2', 'TR282_2', 'TR282_1'), ('TR282_2_3', 'TR282_2', 'TR282_3'), ('TR282_2_3', 'TR282_3', 'TR282_2'), ('TR282_2_4', 'TR282_2', 'TR282_4'), ('TR282_2_4', 'TR282_4', 'TR282_2'), ('TR282_2_5', 'TR282_2', 'TR282_5'), ('TR282_2_5', 'TR282_5', 'TR282_2'), ('TR283_1_6', 'TR283_1', 'TR283_6'), ('TR283_1_6', 'TR283_6', 'TR283_1'), ('TR283_1_7', 'TR283_1', 'TR283_7'), ('TR283_1_7', 'TR283_7', 'TR283_1'), ('TR283_2_3', 'TR283_2', 'TR283_3'), ('TR283_2_3', 'TR283_3', 'TR283_2'), ('TR283_2_8', 'TR283_2', 'TR283_8'), ('TR283_2_8', 'TR283_8', 'TR283_2'), ('TR283_4_5', 'TR283_4', 'TR283_5'), ('TR283_4_5', 'TR283_5', 'TR283_4'), ('TR283_4_9', 'TR283_4', 'TR283_9'), ('TR283_4_9', 'TR283_9', 'TR283_4'), ('TR283_5_10', 'TR283_10', 'TR283_5'), ('TR283_5_10', 'TR283_5', 'TR283_10'), ('TR283_6_11', 'TR283_11', 'TR283_6'), ('TR283_6_11', 'TR283_6', 'TR283_11'), ('TR284_10_23', 'TR284_10', 'TR284_23'), ('TR284_10_23', 'TR284_23', 'TR284_10'), ('TR284_11_15', 'TR284_11', 'TR284_15'), ('TR284_11_15', 'TR284_15', 'TR284_11'), ('TR284_11_24', 'TR284_11', 'TR284_24'), ('TR284_11_24', 'TR284_24', 'TR284_11'), ('TR284_12_25', 'TR284_12', 'TR284_25'), ('TR284_12_25', 'TR284_25', 'TR284_12'), ('TR284_12_26', 'TR284_12', 'TR284_26'), ('TR284_12_26', 'TR284_26', 'TR284_12'), ('TR284_13_16', 'TR284_13', 'TR284_16'), ('TR284_13_16', 'TR284_16', 'TR284_13'), ('TR284_15_27', 'TR284_15', 'TR284_27'), ('TR284_15_27', 'TR284_27', 'TR284_15'), ('TR284_16_17', 'TR284_16', 'TR284_17'), ('TR284_16_17', 'TR284_17', 'TR284_16'), ('TR284_16_28', 'TR284_16', 'TR284_28'), ('TR284_16_28', 'TR284_28', 'TR284_16'), ('TR284_16_29', 'TR284_16', 'TR284_29'), ('TR284_16_29', 'TR284_29', 'TR284_16'), ('TR284_17_30', 'TR284_17', 'TR284_30'), ('TR284_17_30', 'TR284_30', 'TR284_17'), ('TR284_18_31', 'TR284_18', 'TR284_31'), ('TR284_18_31', 'TR284_31', 'TR284_18'), ('TR284_18_32', 'TR284_18', 'TR284_32'), ('TR284_18_32', 'TR284_32', 'TR284_18'), ('TR284_1_2', 'TR284_1', 'TR284_2'), ('TR284_1_2', 'TR284_2', 'TR284_1'), ('TR284_1_4', 'TR284_1', 'TR284_4'), ('TR284_1_4', 'TR284_4', 'TR284_1'), ('TR284_2_5', 'TR284_2', 'TR284_5'), ('TR284_2_5', 'TR284_5', 'TR284_2'), ('TR284_4_7', 'TR284_4', 'TR284_7'), ('TR284_4_7', 'TR284_7', 'TR284_4'), ('TR284_5_19', 'TR284_19', 'TR284_5'), ('TR284_5_19', 'TR284_5', 'TR284_19'), ('TR284_5_20', 'TR284_20', 'TR284_5'), ('TR284_5_20', 'TR284_5', 'TR284_20'), ('TR284_5_8', 'TR284_5', 'TR284_8'), ('TR284_5_8', 'TR284_8', 'TR284_5'), ('TR284_6_10', 'TR284_10', 'TR284_6'), ('TR284_6_10', 'TR284_6', 'TR284_10'), ('TR284_6_9', 'TR284_6', 'TR284_9'), ('TR284_6_9', 'TR284_9', 'TR284_6'), ('TR284_7_21', 'TR284_21', 'TR284_7'), ('TR284_7_21', 'TR284_7', 'TR284_21'), ('TR284_8_22', 'TR284_22', 'TR284_8'), ('TR284_8_22', 'TR284_8', 'TR284_22'), ('TR284_9_13', 'TR284_13', 'TR284_9'), ('TR284_9_13', 'TR284_9', 'TR284_13'), ('TR285_10_11', 'TR285_10', 'TR285_11'), ('TR285_10_11', 'TR285_11', 'TR285_10'), ('TR285_10_27', 'TR285_10', 'TR285_27'), ('TR285_10_27', 'TR285_27', 'TR285_10'), ('TR285_11_28', 'TR285_11', 'TR285_28'), ('TR285_11_28', 'TR285_28', 'TR285_11'), ('TR285_12_13', 'TR285_12', 'TR285_13'), ('TR285_12_13', 'TR285_13', 'TR285_12'), ('TR285_12_21', 'TR285_12', 'TR285_21'), ('TR285_12_21', 'TR285_21', 'TR285_12'), ('TR285_13_29', 'TR285_13', 'TR285_29'), ('TR285_13_29', 'TR285_29', 'TR285_13'), ('TR285_14_30', 'TR285_14', 'TR285_30'), ('TR285_14_30', 'TR285_30', 'TR285_14'), ('TR285_15_16', 'TR285_15', 'TR285_16'), ('TR285_15_16', 'TR285_16', 'TR285_15'), ('TR285_15_31', 'TR285_15', 'TR285_31'), ('TR285_15_31', 'TR285_31', 'TR285_15'), ('TR285_16_32', 'TR285_16', 'TR285_32'), ('TR285_16_32', 'TR285_32', 'TR285_16'), ('TR285_17_18', 'TR285_17', 'TR285_18'), ('TR285_17_18', 'TR285_18', 'TR285_17'), ('TR285_17_22', 'TR285_17', 'TR285_22'), ('TR285_17_22', 'TR285_22', 'TR285_17'), ('TR285_18_33', 'TR285_18', 'TR285_33'), ('TR285_18_33', 'TR285_33', 'TR285_18'), ('TR285_19_34', 'TR285_19', 'TR285_34'), ('TR285_19_34', 'TR285_34', 'TR285_19'), ('TR285_1_3', 'TR285_1', 'TR285_3'), ('TR285_1_3', 'TR285_3', 'TR285_1'), ('TR285_1_4', 'TR285_1', 'TR285_4'), ('TR285_1_4', 'TR285_4', 'TR285_1'), ('TR285_20_35', 'TR285_20', 'TR285_35'), ('TR285_20_35', 'TR285_35', 'TR285_20'), ('TR285_20_36', 'TR285_20', 'TR285_36'), ('TR285_20_36', 'TR285_36', 'TR285_20'), ('TR285_21_37', 'TR285_21', 'TR285_37'), ('TR285_21_37', 'TR285_37', 'TR285_21'), ('TR285_21_38', 'TR285_21', 'TR285_38'), ('TR285_21_38', 'TR285_38', 'TR285_21'), ('TR285_22_39', 'TR285_22', 'TR285_39'), ('TR285_22_39', 'TR285_39', 'TR285_22'), ('TR285_22_40', 'TR285_22', 'TR285_40'), ('TR285_22_40', 'TR285_40', 'TR285_22'), ('TR285_2_5', 'TR285_2', 'TR285_5'), ('TR285_2_5', 'TR285_5', 'TR285_2'), ('TR285_2_9', 'TR285_2', 'TR285_9'), ('TR285_2_9', 'TR285_9', 'TR285_2'), ('TR285_3_19', 'TR285_19', 'TR285_3'), ('TR285_3_19', 'TR285_3', 'TR285_19'), ('TR285_4_14', 'TR285_14', 'TR285_4'), ('TR285_4_14', 'TR285_4', 'TR285_14'), ('TR285_5_23', 'TR285_23', 'TR285_5'), ('TR285_5_23', 'TR285_5', 'TR285_23'), ('TR285_6_24', 'TR285_24', 'TR285_6'), ('TR285_6_24', 'TR285_6', 'TR285_24'), ('TR285_6_7', 'TR285_6', 'TR285_7'), ('TR285_6_7', 'TR285_7', 'TR285_6'), ('TR285_7_8', 'TR285_7', 'TR285_8'), ('TR285_7_8', 'TR285_8', 'TR285_7'), ('TR285_8_25', 'TR285_25', 'TR285_8'), ('TR285_8_25', 'TR285_8', 'TR285_25'), ('TR285_9_26', 'TR285_26', 'TR285_9'), ('TR285_9_26', 'TR285_9', 'TR285_26'), ('TR287_1_2', 'TR287_1', 'TR287_2'), ('TR287_1_2', 'TR287_2', 'TR287_1'), ('TR287_1_7', 'TR287_1', 'TR287_7'), ('TR287_1_7', 'TR287_7', 'TR287_1'), ('TR287_2_3', 'TR287_2', 'TR287_3'), ('TR287_2_3', 'TR287_3', 'TR287_2'), ('TR287_2_4', 'TR287_2', 'TR287_4'), ('TR287_2_4', 'TR287_4', 'TR287_2'), ('TR287_2_8', 'TR287_2', 'TR287_8'), ('TR287_2_8', 'TR287_8', 'TR287_2'), ('TR287_3_5', 'TR287_3', 'TR287_5'), ('TR287_3_5', 'TR287_5', 'TR287_3'), ('TR287_4_6', 'TR287_4', 'TR287_6'), ('TR287_4_6', 'TR287_6', 'TR287_4'), ('TR287_5_10', 'TR287_10', 'TR287_5'), ('TR287_5_10', 'TR287_5', 'TR287_10'), ('TR287_5_11', 'TR287_11', 'TR287_5'), ('TR287_5_11', 'TR287_5', 'TR287_11'), ('TR287_5_9', 'TR287_5', 'TR287_9'), ('TR287_5_9', 'TR287_9', 'TR287_5'), ('TR287_6_12', 'TR287_12', 'TR287_6'), ('TR287_6_12', 'TR287_6', 'TR287_12'), ('TR287_6_13', 'TR287_13', 'TR287_6'), ('TR287_6_13', 'TR287_6', 'TR287_13'), ('TR287_6_14', 'TR287_14', 'TR287_6'), ('TR287_6_14', 'TR287_6', 'TR287_14'), ('TR288_1_5', 'TR288_1', 'TR288_5'), ('TR288_1_5', 'TR288_5', 'TR288_1'), ('TR288_1_6', 'TR288_1', 'TR288_6'), ('TR288_1_6', 'TR288_6', 'TR288_1'), ('TR288_2_3', 'TR288_2', 'TR288_3'), ('TR288_2_3', 'TR288_3', 'TR288_2'), ('TR288_2_7', 'TR288_2', 'TR288_7'), ('TR288_2_7', 'TR288_7', 'TR288_2'), ('TR288_3_8', 'TR288_3', 'TR288_8'), ('TR288_3_8', 'TR288_8', 'TR288_3'), ('TR288_4_10', 'TR288_10', 'TR288_4'), ('TR288_4_10', 'TR288_4', 'TR288_10'), ('TR288_4_9', 'TR288_4', 'TR288_9'), ('TR288_4_9', 'TR288_9', 'TR288_4'), ('TR289_1_6', 'TR289_1', 'TR289_6'), ('TR289_1_6', 'TR289_6', 'TR289_1'), ('TR289_1_7', 'TR289_1', 'TR289_7'), ('TR289_1_7', 'TR289_7', 'TR289_1'), ('TR289_2_3', 'TR289_2', 'TR289_3'), ('TR289_2_3', 'TR289_3', 'TR289_2'), ('TR289_2_8', 'TR289_2', 'TR289_8'), ('TR289_2_8', 'TR289_8', 'TR289_2'), ('TR289_3_9', 'TR289_3', 'TR289_9'), ('TR289_3_9', 'TR289_9', 'TR289_3'), ('TR289_4_10', 'TR289_10', 'TR289_4'), ('TR289_4_10', 'TR289_4', 'TR289_10'), ('TR289_4_5', 'TR289_4', 'TR289_5'), ('TR289_4_5', 'TR289_5', 'TR289_4'), ('TR289_5_11', 'TR289_11', 'TR289_5'), ('TR289_5_11', 'TR289_5', 'TR289_11'), ('TR289_6_12', 'TR289_12', 'TR289_6'), ('TR289_6_12', 'TR289_6', 'TR289_12'), ('TR291_1_11', 'TR291_1', 'TR291_11'), ('TR291_1_11', 'TR291_11', 'TR291_1'), ('TR291_1_12', 'TR291_1', 'TR291_12'), ('TR291_1_12', 'TR291_12', 'TR291_1'), ('TR291_1_13', 'TR291_1', 'TR291_13'), ('TR291_1_13', 'TR291_13', 'TR291_1'), ('TR291_1_2', 'TR291_1', 'TR291_2'), ('TR291_1_2', 'TR291_2', 'TR291_1'), ('TR291_2_3', 'TR291_2', 'TR291_3'), ('TR291_2_3', 'TR291_3', 'TR291_2'), ('TR291_2_4', 'TR291_2', 'TR291_4'), ('TR291_2_4', 'TR291_4', 'TR291_2'), ('TR291_2_5', 'TR291_2', 'TR291_5'), ('TR291_2_5', 'TR291_5', 'TR291_2'), ('TR291_3_14', 'TR291_14', 'TR291_3'), ('TR291_3_14', 'TR291_3', 'TR291_14'), ('TR291_3_15', 'TR291_15', 'TR291_3'), ('TR291_3_15', 'TR291_3', 'TR291_15'), ('TR291_3_16', 'TR291_16', 'TR291_3'), ('TR291_3_16', 'TR291_3', 'TR291_16'), ('TR291_4_17', 'TR291_17', 'TR291_4'), ('TR291_4_17', 'TR291_4', 'TR291_17'), ('TR291_4_18', 'TR291_18', 'TR291_4'), ('TR291_4_18', 'TR291_4', 'TR291_18'), ('TR291_4_6', 'TR291_4', 'TR291_6'), ('TR291_4_6', 'TR291_6', 'TR291_4'), ('TR291_5_19', 'TR291_19', 'TR291_5'), ('TR291_5_19', 'TR291_5', 'TR291_19'), ('TR291_5_20', 'TR291_20', 'TR291_5'), ('TR291_5_20', 'TR291_5', 'TR291_20'), ('TR291_5_7', 'TR291_5', 'TR291_7'), ('TR291_5_7', 'TR291_7', 'TR291_5'), ('TR291_6_8', 'TR291_6', 'TR291_8'), ('TR291_6_8', 'TR291_8', 'TR291_6'), ('TR291_7_9', 'TR291_7', 'TR291_9'), ('TR291_7_9', 'TR291_9', 'TR291_7'), ('TR291_8_21', 'TR291_21', 'TR291_8'), ('TR291_8_21', 'TR291_8', 'TR291_21'), ('TR291_8_22', 'TR291_22', 'TR291_8'), ('TR291_8_22', 'TR291_8', 'TR291_22'), ('TR291_8_23', 'TR291_23', 'TR291_8'), ('TR291_8_23', 'TR291_8', 'TR291_23'), ('TR291_9_24', 'TR291_24', 'TR291_9'), ('TR291_9_24', 'TR291_9', 'TR291_24'), ('TR292_11_16', 'TR292_11', 'TR292_16'), ('TR292_11_16', 'TR292_16', 'TR292_11'), ('TR292_11_17', 'TR292_11', 'TR292_17'), ('TR292_11_17', 'TR292_17', 'TR292_11'), ('TR292_11_18', 'TR292_11', 'TR292_18'), ('TR292_11_18', 'TR292_18', 'TR292_11'), ('TR292_12_19', 'TR292_12', 'TR292_19'), ('TR292_12_19', 'TR292_19', 'TR292_12'), ('TR292_12_20', 'TR292_12', 'TR292_20'), ('TR292_12_20', 'TR292_20', 'TR292_12'), ('TR292_12_21', 'TR292_12', 'TR292_21'), ('TR292_12_21', 'TR292_21', 'TR292_12'), ('TR292_1_13', 'TR292_1', 'TR292_13'), ('TR292_1_13', 'TR292_13', 'TR292_1'), ('TR292_1_2', 'TR292_1', 'TR292_2'), ('TR292_1_2', 'TR292_2', 'TR292_1'), ('TR292_1_3', 'TR292_1', 'TR292_3'), ('TR292_1_3', 'TR292_3', 'TR292_1'), ('TR292_1_4', 'TR292_1', 'TR292_4'), ('TR292_1_4', 'TR292_4', 'TR292_1'), ('TR292_2_5', 'TR292_2', 'TR292_5'), ('TR292_2_5', 'TR292_5', 'TR292_2'), ('TR292_2_6', 'TR292_2', 'TR292_6'), ('TR292_2_6', 'TR292_6', 'TR292_2'), ('TR292_2_7', 'TR292_2', 'TR292_7'), ('TR292_2_7', 'TR292_7', 'TR292_2'), ('TR292_3_10', 'TR292_10', 'TR292_3'), ('TR292_3_10', 'TR292_3', 'TR292_10'), ('TR292_3_8', 'TR292_3', 'TR292_8'), ('TR292_3_8', 'TR292_8', 'TR292_3'), ('TR292_3_9', 'TR292_3', 'TR292_9'), ('TR292_3_9', 'TR292_9', 'TR292_3'), ('TR292_4_14', 'TR292_14', 'TR292_4'), ('TR292_4_14', 'TR292_4', 'TR292_14'), ('TR292_5_11', 'TR292_11', 'TR292_5'), ('TR292_5_11', 'TR292_5', 'TR292_11'), ('TR292_6_12', 'TR292_12', 'TR292_6'), ('TR292_6_12', 'TR292_6', 'TR292_12'), ('TR292_7_15', 'TR292_15', 'TR292_7'), ('TR292_7_15', 'TR292_7', 'TR292_15'), ('TR293_12_13', 'TR293_12', 'TR293_13'), ('TR293_12_13', 'TR293_13', 'TR293_12'), ('TR293_12_25', 'TR293_12', 'TR293_25'), ('TR293_12_25', 'TR293_25', 'TR293_12'), ('TR293_12_26', 'TR293_12', 'TR293_26'), ('TR293_12_26', 'TR293_26', 'TR293_12'), ('TR293_13_14', 'TR293_13', 'TR293_14'), ('TR293_13_14', 'TR293_14', 'TR293_13'), ('TR293_13_27', 'TR293_13', 'TR293_27'), ('TR293_13_27', 'TR293_27', 'TR293_13'), ('TR293_13_28', 'TR293_13', 'TR293_28'), ('TR293_13_28', 'TR293_28', 'TR293_13'), ('TR293_14_29', 'TR293_14', 'TR293_29'), ('TR293_14_29', 'TR293_29', 'TR293_14'), ('TR293_15_19', 'TR293_15', 'TR293_19'), ('TR293_15_19', 'TR293_19', 'TR293_15'), ('TR293_15_30', 'TR293_15', 'TR293_30'), ('TR293_15_30', 'TR293_30', 'TR293_15'), ('TR293_15_31', 'TR293_15', 'TR293_31'), ('TR293_15_31', 'TR293_31', 'TR293_15'), ('TR293_16_17', 'TR293_16', 'TR293_17'), ('TR293_16_17', 'TR293_17', 'TR293_16'), ('TR293_16_32', 'TR293_16', 'TR293_32'), ('TR293_16_32', 'TR293_32', 'TR293_16'), ('TR293_16_33', 'TR293_16', 'TR293_33'), ('TR293_16_33', 'TR293_33', 'TR293_16'), ('TR293_17_18', 'TR293_17', 'TR293_18'), ('TR293_17_18', 'TR293_18', 'TR293_17'), ('TR293_17_34', 'TR293_17', 'TR293_34'), ('TR293_17_34', 'TR293_34', 'TR293_17'), ('TR293_17_35', 'TR293_17', 'TR293_35'), ('TR293_17_35', 'TR293_35', 'TR293_17'), ('TR293_18_36', 'TR293_18', 'TR293_36'), ('TR293_18_36', 'TR293_36', 'TR293_18'), ('TR293_19_20', 'TR293_19', 'TR293_20'), ('TR293_19_20', 'TR293_20', 'TR293_19'), ('TR293_19_37', 'TR293_19', 'TR293_37'), ('TR293_19_37', 'TR293_37', 'TR293_19'), ('TR293_19_38', 'TR293_19', 'TR293_38'), ('TR293_19_38', 'TR293_38', 'TR293_19'), ('TR293_1_21', 'TR293_1', 'TR293_21'), ('TR293_1_21', 'TR293_21', 'TR293_1'), ('TR293_1_6', 'TR293_1', 'TR293_6'), ('TR293_1_6', 'TR293_6', 'TR293_1'), ('TR293_20_39', 'TR293_20', 'TR293_39'), ('TR293_20_39', 'TR293_39', 'TR293_20'), ('TR293_2_3', 'TR293_2', 'TR293_3'), ('TR293_2_3', 'TR293_3', 'TR293_2'), ('TR293_2_8', 'TR293_2', 'TR293_8'), ('TR293_2_8', 'TR293_8', 'TR293_2'), ('TR293_3_22', 'TR293_22', 'TR293_3'), ('TR293_3_22', 'TR293_3', 'TR293_22'), ('TR293_4_5', 'TR293_4', 'TR293_5'), ('TR293_4_5', 'TR293_5', 'TR293_4'), ('TR293_4_9', 'TR293_4', 'TR293_9'), ('TR293_4_9', 'TR293_9', 'TR293_4'), ('TR293_5_7', 'TR293_5', 'TR293_7'), ('TR293_5_7', 'TR293_7', 'TR293_5'), ('TR293_6_23', 'TR293_23', 'TR293_6'), ('TR293_6_23', 'TR293_6', 'TR293_23'), ('TR293_7_12', 'TR293_12', 'TR293_7'), ('TR293_7_12', 'TR293_7', 'TR293_12'), ('TR293_7_24', 'TR293_24', 'TR293_7'), ('TR293_7_24', 'TR293_7', 'TR293_24'), ('TR293_8_15', 'TR293_15', 'TR293_8'), ('TR293_8_15', 'TR293_8', 'TR293_15'), ('TR293_8_16', 'TR293_16', 'TR293_8'), ('TR293_8_16', 'TR293_8', 'TR293_16'), ('TR293_9_10', 'TR293_10', 'TR293_9'), ('TR293_9_10', 'TR293_9', 'TR293_10'), ('TR295_10_11', 'TR295_10', 'TR295_11'), ('TR295_10_11', 'TR295_11', 'TR295_10'), ('TR295_10_12', 'TR295_10', 'TR295_12'), ('TR295_10_12', 'TR295_12', 'TR295_10'), ('TR295_10_13', 'TR295_10', 'TR295_13'), ('TR295_10_13', 'TR295_13', 'TR295_10'), ('TR295_10_14', 'TR295_10', 'TR295_14'), ('TR295_10_14', 'TR295_14', 'TR295_10'), ('TR295_11_15', 'TR295_11', 'TR295_15'), ('TR295_11_15', 'TR295_15', 'TR295_11'), ('TR295_12_16', 'TR295_12', 'TR295_16'), ('TR295_12_16', 'TR295_16', 'TR295_12'), ('TR295_13_17', 'TR295_13', 'TR295_17'), ('TR295_13_17', 'TR295_17', 'TR295_13'), ('TR295_14_18', 'TR295_14', 'TR295_18'), ('TR295_14_18', 'TR295_18', 'TR295_14'), ('TR295_1_2', 'TR295_1', 'TR295_2'), ('TR295_1_2', 'TR295_2', 'TR295_1'), ('TR295_1_3', 'TR295_1', 'TR295_3'), ('TR295_1_3', 'TR295_3', 'TR295_1'), ('TR295_1_4', 'TR295_1', 'TR295_4'), ('TR295_1_4', 'TR295_4', 'TR295_1'), ('TR295_1_5', 'TR295_1', 'TR295_5'), ('TR295_1_5', 'TR295_5', 'TR295_1'), ('TR295_22_23', 'TR295_22', 'TR295_23'), ('TR295_22_23', 'TR295_23', 'TR295_22'), ('TR295_22_24', 'TR295_22', 'TR295_24'), ('TR295_22_24', 'TR295_24', 'TR295_22'), ('TR295_2_6', 'TR295_2', 'TR295_6'), ('TR295_2_6', 'TR295_6', 'TR295_2'), ('TR295_3_7', 'TR295_3', 'TR295_7'), ('TR295_3_7', 'TR295_7', 'TR295_3'), ('TR295_4_8', 'TR295_4', 'TR295_8'), ('TR295_4_8', 'TR295_8', 'TR295_4'), ('TR295_5_9', 'TR295_5', 'TR295_9'), ('TR295_5_9', 'TR295_9', 'TR295_5'), ('TR296_10_14', 'TR296_10', 'TR296_14'), ('TR296_10_14', 'TR296_14', 'TR296_10'), ('TR296_10_21', 'TR296_10', 'TR296_21'), ('TR296_10_21', 'TR296_21', 'TR296_10'), ('TR296_10_22', 'TR296_10', 'TR296_22'), ('TR296_10_22', 'TR296_22', 'TR296_10'), ('TR296_11_23', 'TR296_11', 'TR296_23'), ('TR296_11_23', 'TR296_23', 'TR296_11'), ('TR296_12_24', 'TR296_12', 'TR296_24'), ('TR296_12_24', 'TR296_24', 'TR296_12'), ('TR296_13_25', 'TR296_13', 'TR296_25'), ('TR296_13_25', 'TR296_25', 'TR296_13'), ('TR296_14_26', 'TR296_14', 'TR296_26'), ('TR296_14_26', 'TR296_26', 'TR296_14'), ('TR296_1_4', 'TR296_1', 'TR296_4'), ('TR296_1_4', 'TR296_4', 'TR296_1'), ('TR296_1_5', 'TR296_1', 'TR296_5'), ('TR296_1_5', 'TR296_5', 'TR296_1'), ('TR296_27_28', 'TR296_27', 'TR296_28'), ('TR296_27_28', 'TR296_28', 'TR296_27'), ('TR296_27_29', 'TR296_27', 'TR296_29'), ('TR296_27_29', 'TR296_29', 'TR296_27'), ('TR296_27_30', 'TR296_27', 'TR296_30'), ('TR296_27_30', 'TR296_30', 'TR296_27'), ('TR296_27_31', 'TR296_27', 'TR296_31'), ('TR296_27_31', 'TR296_31', 'TR296_27'), ('TR296_28_32', 'TR296_28', 'TR296_32'), ('TR296_28_32', 'TR296_32', 'TR296_28'), ('TR296_28_36', 'TR296_28', 'TR296_36'), ('TR296_28_36', 'TR296_36', 'TR296_28'), ('TR296_28_37', 'TR296_28', 'TR296_37'), ('TR296_28_37', 'TR296_37', 'TR296_28'), ('TR296_29_33', 'TR296_29', 'TR296_33'), ('TR296_29_33', 'TR296_33', 'TR296_29'), ('TR296_29_38', 'TR296_29', 'TR296_38'), ('TR296_29_38', 'TR296_38', 'TR296_29'), ('TR296_29_39', 'TR296_29', 'TR296_39'), ('TR296_29_39', 'TR296_39', 'TR296_29'), ('TR296_30_34', 'TR296_30', 'TR296_34'), ('TR296_30_34', 'TR296_34', 'TR296_30'), ('TR296_30_40', 'TR296_30', 'TR296_40'), ('TR296_30_40', 'TR296_40', 'TR296_30'), ('TR296_30_41', 'TR296_30', 'TR296_41'), ('TR296_30_41', 'TR296_41', 'TR296_30'), ('TR296_31_35', 'TR296_31', 'TR296_35'), ('TR296_31_35', 'TR296_35', 'TR296_31'), ('TR296_31_42', 'TR296_31', 'TR296_42'), ('TR296_31_42', 'TR296_42', 'TR296_31'), ('TR296_31_43', 'TR296_31', 'TR296_43'), ('TR296_31_43', 'TR296_43', 'TR296_31'), ('TR296_32_44', 'TR296_32', 'TR296_44'), ('TR296_32_44', 'TR296_44', 'TR296_32'), ('TR296_33_45', 'TR296_33', 'TR296_45'), ('TR296_33_45', 'TR296_45', 'TR296_33'), ('TR296_34_46', 'TR296_34', 'TR296_46'), ('TR296_34_46', 'TR296_46', 'TR296_34'), ('TR296_35_47', 'TR296_35', 'TR296_47'), ('TR296_35_47', 'TR296_47', 'TR296_35'), ('TR296_48_49', 'TR296_48', 'TR296_49'), ('TR296_48_49', 'TR296_49', 'TR296_48'), ('TR296_48_50', 'TR296_48', 'TR296_50'), ('TR296_48_50', 'TR296_50', 'TR296_48'), ('TR296_48_51', 'TR296_48', 'TR296_51'), ('TR296_48_51', 'TR296_51', 'TR296_48'), ('TR296_48_52', 'TR296_48', 'TR296_52'), ('TR296_48_52', 'TR296_52', 'TR296_48'), ('TR296_49_53', 'TR296_49', 'TR296_53'), ('TR296_49_53', 'TR296_53', 'TR296_49'), ('TR296_49_57', 'TR296_49', 'TR296_57'), ('TR296_49_57', 'TR296_57', 'TR296_49'), ('TR296_49_58', 'TR296_49', 'TR296_58'), ('TR296_49_58', 'TR296_58', 'TR296_49'), ('TR296_50_54', 'TR296_50', 'TR296_54'), ('TR296_50_54', 'TR296_54', 'TR296_50'), ('TR296_50_59', 'TR296_50', 'TR296_59'), ('TR296_50_59', 'TR296_59', 'TR296_50'), ('TR296_50_60', 'TR296_50', 'TR296_60'), ('TR296_50_60', 'TR296_60', 'TR296_50'), ('TR296_51_55', 'TR296_51', 'TR296_55'), ('TR296_51_55', 'TR296_55', 'TR296_51'), ('TR296_51_61', 'TR296_51', 'TR296_61'), ('TR296_51_61', 'TR296_61', 'TR296_51'), ('TR296_51_62', 'TR296_51', 'TR296_62'), ('TR296_51_62', 'TR296_62', 'TR296_51'), ('TR296_52_56', 'TR296_52', 'TR296_56'), ('TR296_52_56', 'TR296_56', 'TR296_52'), ('TR296_52_63', 'TR296_52', 'TR296_63'), ('TR296_52_63', 'TR296_63', 'TR296_52'), ('TR296_52_64', 'TR296_52', 'TR296_64'), ('TR296_52_64', 'TR296_64', 'TR296_52'), ('TR296_53_65', 'TR296_53', 'TR296_65'), ('TR296_53_65', 'TR296_65', 'TR296_53'), ('TR296_54_66', 'TR296_54', 'TR296_66'), ('TR296_54_66', 'TR296_66', 'TR296_54'), ('TR296_55_67', 'TR296_55', 'TR296_67'), ('TR296_55_67', 'TR296_67', 'TR296_55'), ('TR296_56_68', 'TR296_56', 'TR296_68'), ('TR296_56_68', 'TR296_68', 'TR296_56'), ('TR296_6_10', 'TR296_10', 'TR296_6'), ('TR296_6_10', 'TR296_6', 'TR296_10'), ('TR296_6_7', 'TR296_6', 'TR296_7'), ('TR296_6_7', 'TR296_7', 'TR296_6'), ('TR296_6_8', 'TR296_6', 'TR296_8'), ('TR296_6_8', 'TR296_8', 'TR296_6'), ('TR296_6_9', 'TR296_6', 'TR296_9'), ('TR296_6_9', 'TR296_9', 'TR296_6'), ('TR296_7_11', 'TR296_11', 'TR296_7'), ('TR296_7_11', 'TR296_7', 'TR296_11'), ('TR296_7_15', 'TR296_15', 'TR296_7'), ('TR296_7_15', 'TR296_7', 'TR296_15'), ('TR296_7_16', 'TR296_16', 'TR296_7'), ('TR296_7_16', 'TR296_7', 'TR296_16'), ('TR296_8_12', 'TR296_12', 'TR296_8'), ('TR296_8_12', 'TR296_8', 'TR296_12'), ('TR296_8_17', 'TR296_17', 'TR296_8'), ('TR296_8_17', 'TR296_8', 'TR296_17'), ('TR296_8_18', 'TR296_18', 'TR296_8'), ('TR296_8_18', 'TR296_8', 'TR296_18'), ('TR296_9_13', 'TR296_13', 'TR296_9'), ('TR296_9_13', 'TR296_9', 'TR296_13'), ('TR296_9_19', 'TR296_19', 'TR296_9'), ('TR296_9_19', 'TR296_9', 'TR296_19'), ('TR296_9_20', 'TR296_20', 'TR296_9'), ('TR296_9_20', 'TR296_9', 'TR296_20'), ('TR297_1_6', 'TR297_1', 'TR297_6'), ('TR297_1_6', 'TR297_6', 'TR297_1'), ('TR297_1_9', 'TR297_1', 'TR297_9'), ('TR297_1_9', 'TR297_9', 'TR297_1'), ('TR297_2_10', 'TR297_10', 'TR297_2'), ('TR297_2_10', 'TR297_2', 'TR297_10'), ('TR297_2_3', 'TR297_2', 'TR297_3'), ('TR297_2_3', 'TR297_3', 'TR297_2'), ('TR297_3_11', 'TR297_11', 'TR297_3'), ('TR297_3_11', 'TR297_3', 'TR297_11'), ('TR297_4_12', 'TR297_12', 'TR297_4'), ('TR297_4_12', 'TR297_4', 'TR297_12'), ('TR297_4_5', 'TR297_4', 'TR297_5'), ('TR297_4_5', 'TR297_5', 'TR297_4'), ('TR297_5_7', 'TR297_5', 'TR297_7'), ('TR297_5_7', 'TR297_7', 'TR297_5'), ('TR297_6_13', 'TR297_13', 'TR297_6'), ('TR297_6_13', 'TR297_6', 'TR297_13'), ('TR297_7_14', 'TR297_14', 'TR297_7'), ('TR297_7_14', 'TR297_7', 'TR297_14'), ('TR297_7_15', 'TR297_15', 'TR297_7'), ('TR297_7_15', 'TR297_7', 'TR297_15'), ('TR297_7_8', 'TR297_7', 'TR297_8'), ('TR297_7_8', 'TR297_8', 'TR297_7'), ('TR298_11_22', 'TR298_11', 'TR298_22'), ('TR298_11_22', 'TR298_22', 'TR298_11'), ('TR298_11_23', 'TR298_11', 'TR298_23'), ('TR298_11_23', 'TR298_23', 'TR298_11'), ('TR298_11_24', 'TR298_11', 'TR298_24'), ('TR298_11_24', 'TR298_24', 'TR298_11'), ('TR298_12_25', 'TR298_12', 'TR298_25'), ('TR298_12_25', 'TR298_25', 'TR298_12'), ('TR298_12_26', 'TR298_12', 'TR298_26'), ('TR298_12_26', 'TR298_26', 'TR298_12'), ('TR298_12_27', 'TR298_12', 'TR298_27'), ('TR298_12_27', 'TR298_27', 'TR298_12'), ('TR298_1_2', 'TR298_1', 'TR298_2'), ('TR298_1_2', 'TR298_2', 'TR298_1'), ('TR298_1_3', 'TR298_1', 'TR298_3'), ('TR298_1_3', 'TR298_3', 'TR298_1'), ('TR298_1_4', 'TR298_1', 'TR298_4'), ('TR298_1_4', 'TR298_4', 'TR298_1'), ('TR298_1_5', 'TR298_1', 'TR298_5'), ('TR298_1_5', 'TR298_5', 'TR298_1'), ('TR298_2_13', 'TR298_13', 'TR298_2'), ('TR298_2_13', 'TR298_2', 'TR298_13'), ('TR298_3_12', 'TR298_12', 'TR298_3'), ('TR298_3_12', 'TR298_3', 'TR298_12'), ('TR298_4_11', 'TR298_11', 'TR298_4'), ('TR298_4_11', 'TR298_4', 'TR298_11'), ('TR298_5_6', 'TR298_5', 'TR298_6'), ('TR298_5_6', 'TR298_6', 'TR298_5'), ('TR298_5_7', 'TR298_5', 'TR298_7'), ('TR298_5_7', 'TR298_7', 'TR298_5'), ('TR298_6_14', 'TR298_14', 'TR298_6'), ('TR298_6_14', 'TR298_6', 'TR298_14'), ('TR298_6_15', 'TR298_15', 'TR298_6'), ('TR298_6_15', 'TR298_6', 'TR298_15'), ('TR298_6_8', 'TR298_6', 'TR298_8'), ('TR298_6_8', 'TR298_8', 'TR298_6'), ('TR298_7_16', 'TR298_16', 'TR298_7'), ('TR298_7_16', 'TR298_7', 'TR298_16'), ('TR298_7_17', 'TR298_17', 'TR298_7'), ('TR298_7_17', 'TR298_7', 'TR298_17'), ('TR298_7_9', 'TR298_7', 'TR298_9'), ('TR298_7_9', 'TR298_9', 'TR298_7'), ('TR298_8_10', 'TR298_10', 'TR298_8'), ('TR298_8_10', 'TR298_8', 'TR298_10'), ('TR298_8_18', 'TR298_18', 'TR298_8'), ('TR298_8_18', 'TR298_8', 'TR298_18'), ('TR298_8_19', 'TR298_19', 'TR298_8'), ('TR298_8_19', 'TR298_8', 'TR298_19'), ('TR298_9_10', 'TR298_10', 'TR298_9'), ('TR298_9_10', 'TR298_9', 'TR298_10'), ('TR298_9_20', 'TR298_20', 'TR298_9'), ('TR298_9_20', 'TR298_9', 'TR298_20'), ('TR298_9_21', 'TR298_21', 'TR298_9'), ('TR298_9_21', 'TR298_9', 'TR298_21'), ('TR299_10_17', 'TR299_10', 'TR299_17'), ('TR299_10_17', 'TR299_17', 'TR299_10'), ('TR299_11_21', 'TR299_11', 'TR299_21'), ('TR299_11_21', 'TR299_21', 'TR299_11'), ('TR299_11_22', 'TR299_11', 'TR299_22'), ('TR299_11_22', 'TR299_22', 'TR299_11'), ('TR299_12_18', 'TR299_12', 'TR299_18'), ('TR299_12_18', 'TR299_18', 'TR299_12'), ('TR299_12_23', 'TR299_12', 'TR299_23'), ('TR299_12_23', 'TR299_23', 'TR299_12'), ('TR299_13_19', 'TR299_13', 'TR299_19'), ('TR299_13_19', 'TR299_19', 'TR299_13'), ('TR299_14_24', 'TR299_14', 'TR299_24'), ('TR299_14_24', 'TR299_24', 'TR299_14'), ('TR299_14_25', 'TR299_14', 'TR299_25'), ('TR299_14_25', 'TR299_25', 'TR299_14'), ('TR299_15_20', 'TR299_15', 'TR299_20'), ('TR299_15_20', 'TR299_20', 'TR299_15'), ('TR299_15_26', 'TR299_15', 'TR299_26'), ('TR299_15_26', 'TR299_26', 'TR299_15'), ('TR299_17_27', 'TR299_17', 'TR299_27'), ('TR299_17_27', 'TR299_27', 'TR299_17'), ('TR299_17_28', 'TR299_17', 'TR299_28'), ('TR299_17_28', 'TR299_28', 'TR299_17'), ('TR299_18_29', 'TR299_18', 'TR299_29'), ('TR299_18_29', 'TR299_29', 'TR299_18'), ('TR299_19_30', 'TR299_19', 'TR299_30'), ('TR299_19_30', 'TR299_30', 'TR299_19'), ('TR299_19_31', 'TR299_19', 'TR299_31'), ('TR299_19_31', 'TR299_31', 'TR299_19'), ('TR299_20_32', 'TR299_20', 'TR299_32'), ('TR299_20_32', 'TR299_32', 'TR299_20'), ('TR299_2_3', 'TR299_2', 'TR299_3'), ('TR299_2_3', 'TR299_3', 'TR299_2'), ('TR299_2_4', 'TR299_2', 'TR299_4'), ('TR299_2_4', 'TR299_4', 'TR299_2'), ('TR299_3_6', 'TR299_3', 'TR299_6'), ('TR299_3_6', 'TR299_6', 'TR299_3'), ('TR299_4_8', 'TR299_4', 'TR299_8'), ('TR299_4_8', 'TR299_8', 'TR299_4'), ('TR299_5_10', 'TR299_10', 'TR299_5'), ('TR299_5_10', 'TR299_5', 'TR299_10'), ('TR299_5_9', 'TR299_5', 'TR299_9'), ('TR299_5_9', 'TR299_9', 'TR299_5'), ('TR299_6_11', 'TR299_11', 'TR299_6'), ('TR299_6_11', 'TR299_6', 'TR299_11'), ('TR299_7_13', 'TR299_13', 'TR299_7'), ('TR299_7_13', 'TR299_7', 'TR299_13'), ('TR299_7_9', 'TR299_7', 'TR299_9'), ('TR299_7_9', 'TR299_9', 'TR299_7'), ('TR299_8_14', 'TR299_14', 'TR299_8'), ('TR299_8_14', 'TR299_8', 'TR299_14'), ('TR300_1_2', 'TR300_1', 'TR300_2'), ('TR300_1_2', 'TR300_2', 'TR300_1'), ('TR300_1_3', 'TR300_1', 'TR300_3'), ('TR300_1_3', 'TR300_3', 'TR300_1'), ('TR300_2_5', 'TR300_2', 'TR300_5'), ('TR300_2_5', 'TR300_5', 'TR300_2'), ('TR300_2_6', 'TR300_2', 'TR300_6'), ('TR300_2_6', 'TR300_6', 'TR300_2'), ('TR300_2_7', 'TR300_2', 'TR300_7'), ('TR300_2_7', 'TR300_7', 'TR300_2'), ('TR300_3_10', 'TR300_10', 'TR300_3'), ('TR300_3_10', 'TR300_3', 'TR300_10'), ('TR300_3_8', 'TR300_3', 'TR300_8'), ('TR300_3_8', 'TR300_8', 'TR300_3'), ('TR300_3_9', 'TR300_3', 'TR300_9'), ('TR300_3_9', 'TR300_9', 'TR300_3'), ('TR300_4_11', 'TR300_11', 'TR300_4'), ('TR300_4_11', 'TR300_4', 'TR300_11'), ('TR300_4_12', 'TR300_12', 'TR300_4'), ('TR300_4_12', 'TR300_4', 'TR300_12'), ('TR301_10_11', 'TR301_10', 'TR301_11'), ('TR301_10_11', 'TR301_11', 'TR301_10'), ('TR301_10_20', 'TR301_10', 'TR301_20'), ('TR301_10_20', 'TR301_20', 'TR301_10'), ('TR301_11_21', 'TR301_11', 'TR301_21'), ('TR301_11_21', 'TR301_21', 'TR301_11'), ('TR301_12_22', 'TR301_12', 'TR301_22'), ('TR301_12_22', 'TR301_22', 'TR301_12'), ('TR301_13_23', 'TR301_13', 'TR301_23'), ('TR301_13_23', 'TR301_23', 'TR301_13'), ('TR301_1_2', 'TR301_1', 'TR301_2'), ('TR301_1_2', 'TR301_2', 'TR301_1'), ('TR301_1_7', 'TR301_1', 'TR301_7'), ('TR301_1_7', 'TR301_7', 'TR301_1'), ('TR301_24_25', 'TR301_24', 'TR301_25'), ('TR301_24_25', 'TR301_25', 'TR301_24'), ('TR301_24_44', 'TR301_24', 'TR301_44'), ('TR301_24_44', 'TR301_44', 'TR301_24'), ('TR301_24_45', 'TR301_24', 'TR301_45'), ('TR301_24_45', 'TR301_45', 'TR301_24'), ('TR301_24_46', 'TR301_24', 'TR301_46'), ('TR301_24_46', 'TR301_46', 'TR301_24'), ('TR301_25_27', 'TR301_25', 'TR301_27'), ('TR301_25_27', 'TR301_27', 'TR301_25'), ('TR301_26_28', 'TR301_26', 'TR301_28'), ('TR301_26_28', 'TR301_28', 'TR301_26'), ('TR301_26_29', 'TR301_26', 'TR301_29'), ('TR301_26_29', 'TR301_29', 'TR301_26'), ('TR301_27_31', 'TR301_27', 'TR301_31'), ('TR301_27_31', 'TR301_31', 'TR301_27'), ('TR301_28_33', 'TR301_28', 'TR301_33'), ('TR301_28_33', 'TR301_33', 'TR301_28'), ('TR301_29_35', 'TR301_29', 'TR301_35'), ('TR301_29_35', 'TR301_35', 'TR301_29'), ('TR301_2_12', 'TR301_12', 'TR301_2'), ('TR301_2_12', 'TR301_2', 'TR301_12'), ('TR301_30_32', 'TR301_30', 'TR301_32'), ('TR301_30_32', 'TR301_32', 'TR301_30'), ('TR301_30_36', 'TR301_30', 'TR301_36'), ('TR301_30_36', 'TR301_36', 'TR301_30'), ('TR301_31_47', 'TR301_31', 'TR301_47'), ('TR301_31_47', 'TR301_47', 'TR301_31'), ('TR301_32_38', 'TR301_32', 'TR301_38'), ('TR301_32_38', 'TR301_38', 'TR301_32'), ('TR301_33_48', 'TR301_33', 'TR301_48'), ('TR301_33_48', 'TR301_48', 'TR301_33'), ('TR301_34_39', 'TR301_34', 'TR301_39'), ('TR301_34_39', 'TR301_39', 'TR301_34'), ('TR301_34_40', 'TR301_34', 'TR301_40'), ('TR301_34_40', 'TR301_40', 'TR301_34'), ('TR301_35_49', 'TR301_35', 'TR301_49'), ('TR301_35_49', 'TR301_49', 'TR301_35'), ('TR301_36_50', 'TR301_36', 'TR301_50'), ('TR301_36_50', 'TR301_50', 'TR301_36'), ('TR301_37_42', 'TR301_37', 'TR301_42'), ('TR301_37_42', 'TR301_42', 'TR301_37'), ('TR301_37_51', 'TR301_37', 'TR301_51'), ('TR301_37_51', 'TR301_51', 'TR301_37'), ('TR301_38_52', 'TR301_38', 'TR301_52'), ('TR301_38_52', 'TR301_52', 'TR301_38'), ('TR301_38_53', 'TR301_38', 'TR301_53'), ('TR301_38_53', 'TR301_53', 'TR301_38'), ('TR301_38_54', 'TR301_38', 'TR301_54'), ('TR301_38_54', 'TR301_54', 'TR301_38'), ('TR301_39_55', 'TR301_39', 'TR301_55'), ('TR301_39_55', 'TR301_55', 'TR301_39'), ('TR301_3_13', 'TR301_13', 'TR301_3'), ('TR301_3_13', 'TR301_3', 'TR301_13'), ('TR301_3_4', 'TR301_3', 'TR301_4'), ('TR301_3_4', 'TR301_4', 'TR301_3'), ('TR301_40_56', 'TR301_40', 'TR301_56'), ('TR301_40_56', 'TR301_56', 'TR301_40'), ('TR301_41_43', 'TR301_41', 'TR301_43'), ('TR301_41_43', 'TR301_43', 'TR301_41'), ('TR301_41_57', 'TR301_41', 'TR301_57'), ('TR301_41_57', 'TR301_57', 'TR301_41'), ('TR301_42_58', 'TR301_42', 'TR301_58'), ('TR301_42_58', 'TR301_58', 'TR301_42'), ('TR301_43_59', 'TR301_43', 'TR301_59'), ('TR301_43_59', 'TR301_59', 'TR301_43'), ('TR301_4_14', 'TR301_14', 'TR301_4'), ('TR301_4_14', 'TR301_4', 'TR301_14'), ('TR301_5_15', 'TR301_15', 'TR301_5'), ('TR301_5_15', 'TR301_5', 'TR301_15'), ('TR301_5_6', 'TR301_5', 'TR301_6'), ('TR301_5_6', 'TR301_6', 'TR301_5'), ('TR301_6_16', 'TR301_16', 'TR301_6'), ('TR301_6_16', 'TR301_6', 'TR301_16'), ('TR301_7_17', 'TR301_17', 'TR301_7'), ('TR301_7_17', 'TR301_7', 'TR301_17'), ('TR301_8_18', 'TR301_18', 'TR301_8'), ('TR301_8_18', 'TR301_8', 'TR301_18'), ('TR301_8_9', 'TR301_8', 'TR301_9'), ('TR301_8_9', 'TR301_9', 'TR301_8'), ('TR301_9_19', 'TR301_19', 'TR301_9'), ('TR301_9_19', 'TR301_9', 'TR301_19'), ('TR302_10_11', 'TR302_10', 'TR302_11'), ('TR302_10_11', 'TR302_11', 'TR302_10'), ('TR302_10_35', 'TR302_10', 'TR302_35'), ('TR302_10_35', 'TR302_35', 'TR302_10'), ('TR302_10_36', 'TR302_10', 'TR302_36'), ('TR302_10_36', 'TR302_36', 'TR302_10'), ('TR302_11_12', 'TR302_11', 'TR302_12'), ('TR302_11_12', 'TR302_12', 'TR302_11'), ('TR302_11_37', 'TR302_11', 'TR302_37'), ('TR302_11_37', 'TR302_37', 'TR302_11'), ('TR302_11_38', 'TR302_11', 'TR302_38'), ('TR302_11_38', 'TR302_38', 'TR302_11'), ('TR302_12_13', 'TR302_12', 'TR302_13'), ('TR302_12_13', 'TR302_13', 'TR302_12'), ('TR302_12_39', 'TR302_12', 'TR302_39'), ('TR302_12_39', 'TR302_39', 'TR302_12'), ('TR302_12_40', 'TR302_12', 'TR302_40'), ('TR302_12_40', 'TR302_40', 'TR302_12'), ('TR302_13_14', 'TR302_13', 'TR302_14'), ('TR302_13_14', 'TR302_14', 'TR302_13'), ('TR302_13_41', 'TR302_13', 'TR302_41'), ('TR302_13_41', 'TR302_41', 'TR302_13'), ('TR302_13_42', 'TR302_13', 'TR302_42'), ('TR302_13_42', 'TR302_42', 'TR302_13'), ('TR302_14_15', 'TR302_14', 'TR302_15'), ('TR302_14_15', 'TR302_15', 'TR302_14'), ('TR302_14_43', 'TR302_14', 'TR302_43'), ('TR302_14_43', 'TR302_43', 'TR302_14'), ('TR302_14_44', 'TR302_14', 'TR302_44'), ('TR302_14_44', 'TR302_44', 'TR302_14'), ('TR302_15_16', 'TR302_15', 'TR302_16'), ('TR302_15_16', 'TR302_16', 'TR302_15'), ('TR302_15_45', 'TR302_15', 'TR302_45'), ('TR302_15_45', 'TR302_45', 'TR302_15'), ('TR302_15_46', 'TR302_15', 'TR302_46'), ('TR302_15_46', 'TR302_46', 'TR302_15'), ('TR302_16_47', 'TR302_16', 'TR302_47'), ('TR302_16_47', 'TR302_47', 'TR302_16'), ('TR302_16_48', 'TR302_16', 'TR302_48'), ('TR302_16_48', 'TR302_48', 'TR302_16'), ('TR302_16_49', 'TR302_16', 'TR302_49'), ('TR302_16_49', 'TR302_49', 'TR302_16'), ('TR302_1_17', 'TR302_1', 'TR302_17'), ('TR302_1_17', 'TR302_17', 'TR302_1'), ('TR302_1_18', 'TR302_1', 'TR302_18'), ('TR302_1_18', 'TR302_18', 'TR302_1'), ('TR302_1_19', 'TR302_1', 'TR302_19'), ('TR302_1_19', 'TR302_19', 'TR302_1'), ('TR302_1_2', 'TR302_1', 'TR302_2'), ('TR302_1_2', 'TR302_2', 'TR302_1'), ('TR302_2_17', 'TR302_17', 'TR302_2'), ('TR302_2_17', 'TR302_2', 'TR302_17'), ('TR302_2_20', 'TR302_2', 'TR302_20'), ('TR302_2_20', 'TR302_20', 'TR302_2'), ('TR302_2_3', 'TR302_2', 'TR302_3'), ('TR302_2_3', 'TR302_3', 'TR302_2'), ('TR302_3_21', 'TR302_21', 'TR302_3'), ('TR302_3_21', 'TR302_3', 'TR302_21'), ('TR302_3_22', 'TR302_22', 'TR302_3'), ('TR302_3_22', 'TR302_3', 'TR302_22'), ('TR302_3_4', 'TR302_3', 'TR302_4'), ('TR302_3_4', 'TR302_4', 'TR302_3'), ('TR302_4_23', 'TR302_23', 'TR302_4'), ('TR302_4_23', 'TR302_4', 'TR302_23'), ('TR302_4_24', 'TR302_24', 'TR302_4'), ('TR302_4_24', 'TR302_4', 'TR302_24'), ('TR302_4_5', 'TR302_4', 'TR302_5'), ('TR302_4_5', 'TR302_5', 'TR302_4'), ('TR302_5_25', 'TR302_25', 'TR302_5'), ('TR302_5_25', 'TR302_5', 'TR302_25'), ('TR302_5_26', 'TR302_26', 'TR302_5'), ('TR302_5_26', 'TR302_5', 'TR302_26'), ('TR302_5_6', 'TR302_5', 'TR302_6'), ('TR302_5_6', 'TR302_6', 'TR302_5'), ('TR302_6_27', 'TR302_27', 'TR302_6'), ('TR302_6_27', 'TR302_6', 'TR302_27'), ('TR302_6_28', 'TR302_28', 'TR302_6'), ('TR302_6_28', 'TR302_6', 'TR302_28'), ('TR302_6_7', 'TR302_6', 'TR302_7'), ('TR302_6_7', 'TR302_7', 'TR302_6'), ('TR302_7_29', 'TR302_29', 'TR302_7'), ('TR302_7_29', 'TR302_7', 'TR302_29'), ('TR302_7_30', 'TR302_30', 'TR302_7'), ('TR302_7_30', 'TR302_7', 'TR302_30'), ('TR302_7_8', 'TR302_7', 'TR302_8'), ('TR302_7_8', 'TR302_8', 'TR302_7'), ('TR302_8_31', 'TR302_31', 'TR302_8'), ('TR302_8_31', 'TR302_8', 'TR302_31'), ('TR302_8_32', 'TR302_32', 'TR302_8'), ('TR302_8_32', 'TR302_8', 'TR302_32'), ('TR302_8_9', 'TR302_8', 'TR302_9'), ('TR302_8_9', 'TR302_9', 'TR302_8'), ('TR302_9_10', 'TR302_10', 'TR302_9'), ('TR302_9_10', 'TR302_9', 'TR302_10'), ('TR302_9_33', 'TR302_33', 'TR302_9'), ('TR302_9_33', 'TR302_9', 'TR302_33'), ('TR302_9_34', 'TR302_34', 'TR302_9'), ('TR302_9_34', 'TR302_9', 'TR302_34'), ('TR303_1_3', 'TR303_1', 'TR303_3'), ('TR303_1_3', 'TR303_3', 'TR303_1'), ('TR303_1_9', 'TR303_1', 'TR303_9'), ('TR303_1_9', 'TR303_9', 'TR303_1'), ('TR303_2_10', 'TR303_10', 'TR303_2'), ('TR303_2_10', 'TR303_2', 'TR303_10'), ('TR303_2_11', 'TR303_11', 'TR303_2'), ('TR303_2_11', 'TR303_2', 'TR303_11'), ('TR303_3_12', 'TR303_12', 'TR303_3'), ('TR303_3_12', 'TR303_3', 'TR303_12'), ('TR303_3_4', 'TR303_3', 'TR303_4'), ('TR303_3_4', 'TR303_4', 'TR303_3'), ('TR303_3_5', 'TR303_3', 'TR303_5'), ('TR303_3_5', 'TR303_5', 'TR303_3'), ('TR303_4_13', 'TR303_13', 'TR303_4'), ('TR303_4_13', 'TR303_4', 'TR303_13'), ('TR303_4_14', 'TR303_14', 'TR303_4'), ('TR303_4_14', 'TR303_4', 'TR303_14'), ('TR303_4_6', 'TR303_4', 'TR303_6'), ('TR303_4_6', 'TR303_6', 'TR303_4'), ('TR303_5_15', 'TR303_15', 'TR303_5'), ('TR303_5_15', 'TR303_5', 'TR303_15'), ('TR303_5_16', 'TR303_16', 'TR303_5'), ('TR303_5_16', 'TR303_5', 'TR303_16'), ('TR303_5_7', 'TR303_5', 'TR303_7'), ('TR303_5_7', 'TR303_7', 'TR303_5'), ('TR303_6_17', 'TR303_17', 'TR303_6'), ('TR303_6_17', 'TR303_6', 'TR303_17'), ('TR303_6_18', 'TR303_18', 'TR303_6'), ('TR303_6_18', 'TR303_6', 'TR303_18'), ('TR303_6_8', 'TR303_6', 'TR303_8'), ('TR303_6_8', 'TR303_8', 'TR303_6'), ('TR303_7_19', 'TR303_19', 'TR303_7'), ('TR303_7_19', 'TR303_7', 'TR303_19'), ('TR303_8_20', 'TR303_20', 'TR303_8'), ('TR303_8_20', 'TR303_8', 'TR303_20'), ('TR304_10_12', 'TR304_10', 'TR304_12'), ('TR304_10_12', 'TR304_12', 'TR304_10'), ('TR304_10_16', 'TR304_10', 'TR304_16'), ('TR304_10_16', 'TR304_16', 'TR304_10'), ('TR304_12_17', 'TR304_12', 'TR304_17'), ('TR304_12_17', 'TR304_17', 'TR304_12'), ('TR304_14_22', 'TR304_14', 'TR304_22'), ('TR304_14_22', 'TR304_22', 'TR304_14'), ('TR304_15_19', 'TR304_15', 'TR304_19'), ('TR304_15_19', 'TR304_19', 'TR304_15'), ('TR304_19_23', 'TR304_19', 'TR304_23'), ('TR304_19_23', 'TR304_23', 'TR304_19'), ('TR304_1_2', 'TR304_1', 'TR304_2'), ('TR304_1_2', 'TR304_2', 'TR304_1'), ('TR304_2_3', 'TR304_2', 'TR304_3'), ('TR304_2_3', 'TR304_3', 'TR304_2'), ('TR304_2_4', 'TR304_2', 'TR304_4'), ('TR304_2_4', 'TR304_4', 'TR304_2'), ('TR304_2_5', 'TR304_2', 'TR304_5'), ('TR304_2_5', 'TR304_5', 'TR304_2'), ('TR304_3_20', 'TR304_20', 'TR304_3'), ('TR304_3_20', 'TR304_3', 'TR304_20'), ('TR304_3_6', 'TR304_3', 'TR304_6'), ('TR304_3_6', 'TR304_6', 'TR304_3'), ('TR304_3_7', 'TR304_3', 'TR304_7'), ('TR304_3_7', 'TR304_7', 'TR304_3'), ('TR304_4_10', 'TR304_10', 'TR304_4'), ('TR304_4_10', 'TR304_4', 'TR304_10'), ('TR304_4_8', 'TR304_4', 'TR304_8'), ('TR304_4_8', 'TR304_8', 'TR304_4'), ('TR304_4_9', 'TR304_4', 'TR304_9'), ('TR304_4_9', 'TR304_9', 'TR304_4'), ('TR304_5_11', 'TR304_11', 'TR304_5'), ('TR304_5_11', 'TR304_5', 'TR304_11'), ('TR304_6_14', 'TR304_14', 'TR304_6'), ('TR304_6_14', 'TR304_6', 'TR304_14'), ('TR304_7_10', 'TR304_10', 'TR304_7'), ('TR304_7_10', 'TR304_7', 'TR304_10'), ('TR304_7_15', 'TR304_15', 'TR304_7'), ('TR304_7_15', 'TR304_7', 'TR304_15'), ('TR304_7_21', 'TR304_21', 'TR304_7'), ('TR304_7_21', 'TR304_7', 'TR304_21'), ('TR305_10_11', 'TR305_10', 'TR305_11'), ('TR305_10_11', 'TR305_11', 'TR305_10'), ('TR305_10_47', 'TR305_10', 'TR305_47'), ('TR305_10_47', 'TR305_47', 'TR305_10'), ('TR305_10_48', 'TR305_10', 'TR305_48'), ('TR305_10_48', 'TR305_48', 'TR305_10'), ('TR305_11_12', 'TR305_11', 'TR305_12'), ('TR305_11_12', 'TR305_12', 'TR305_11'), ('TR305_11_28', 'TR305_11', 'TR305_28'), ('TR305_11_28', 'TR305_28', 'TR305_11'), ('TR305_11_49', 'TR305_11', 'TR305_49'), ('TR305_11_49', 'TR305_49', 'TR305_11'), ('TR305_12_13', 'TR305_12', 'TR305_13'), ('TR305_12_13', 'TR305_13', 'TR305_12'), ('TR305_12_50', 'TR305_12', 'TR305_50'), ('TR305_12_50', 'TR305_50', 'TR305_12'), ('TR305_12_51', 'TR305_12', 'TR305_51'), ('TR305_12_51', 'TR305_51', 'TR305_12'), ('TR305_13_14', 'TR305_13', 'TR305_14'), ('TR305_13_14', 'TR305_14', 'TR305_13'), ('TR305_13_52', 'TR305_13', 'TR305_52'), ('TR305_13_52', 'TR305_52', 'TR305_13'), ('TR305_13_53', 'TR305_13', 'TR305_53'), ('TR305_13_53', 'TR305_53', 'TR305_13'), ('TR305_14_15', 'TR305_14', 'TR305_15'), ('TR305_14_15', 'TR305_15', 'TR305_14'), ('TR305_14_54', 'TR305_14', 'TR305_54'), ('TR305_14_54', 'TR305_54', 'TR305_14'), ('TR305_14_55', 'TR305_14', 'TR305_55'), ('TR305_14_55', 'TR305_55', 'TR305_14'), ('TR305_15_16', 'TR305_15', 'TR305_16'), ('TR305_15_16', 'TR305_16', 'TR305_15'), ('TR305_15_29', 'TR305_15', 'TR305_29'), ('TR305_15_29', 'TR305_29', 'TR305_15'), ('TR305_15_56', 'TR305_15', 'TR305_56'), ('TR305_15_56', 'TR305_56', 'TR305_15'), ('TR305_16_17', 'TR305_16', 'TR305_17'), ('TR305_16_17', 'TR305_17', 'TR305_16'), ('TR305_16_57', 'TR305_16', 'TR305_57'), ('TR305_16_57', 'TR305_57', 'TR305_16'), ('TR305_16_58', 'TR305_16', 'TR305_58'), ('TR305_16_58', 'TR305_58', 'TR305_16'), ('TR305_17_18', 'TR305_17', 'TR305_18'), ('TR305_17_18', 'TR305_18', 'TR305_17'), ('TR305_17_59', 'TR305_17', 'TR305_59'), ('TR305_17_59', 'TR305_59', 'TR305_17'), ('TR305_17_60', 'TR305_17', 'TR305_60'), ('TR305_17_60', 'TR305_60', 'TR305_17'), ('TR305_18_19', 'TR305_18', 'TR305_19'), ('TR305_18_19', 'TR305_19', 'TR305_18'), ('TR305_18_61', 'TR305_18', 'TR305_61'), ('TR305_18_61', 'TR305_61', 'TR305_18'), ('TR305_18_62', 'TR305_18', 'TR305_62'), ('TR305_18_62', 'TR305_62', 'TR305_18'), ('TR305_19_20', 'TR305_19', 'TR305_20'), ('TR305_19_20', 'TR305_20', 'TR305_19'), ('TR305_19_30', 'TR305_19', 'TR305_30'), ('TR305_19_30', 'TR305_30', 'TR305_19'), ('TR305_19_63', 'TR305_19', 'TR305_63'), ('TR305_19_63', 'TR305_63', 'TR305_19'), ('TR305_1_2', 'TR305_1', 'TR305_2'), ('TR305_1_2', 'TR305_2', 'TR305_1'), ('TR305_1_31', 'TR305_1', 'TR305_31'), ('TR305_1_31', 'TR305_31', 'TR305_1'), ('TR305_1_32', 'TR305_1', 'TR305_32'), ('TR305_1_32', 'TR305_32', 'TR305_1'), ('TR305_1_33', 'TR305_1', 'TR305_33'), ('TR305_1_33', 'TR305_33', 'TR305_1'), ('TR305_20_21', 'TR305_20', 'TR305_21'), ('TR305_20_21', 'TR305_21', 'TR305_20'), ('TR305_20_64', 'TR305_20', 'TR305_64'), ('TR305_20_64', 'TR305_64', 'TR305_20'), ('TR305_20_65', 'TR305_20', 'TR305_65'), ('TR305_20_65', 'TR305_65', 'TR305_20'), ('TR305_21_22', 'TR305_21', 'TR305_22'), ('TR305_21_22', 'TR305_22', 'TR305_21'), ('TR305_21_66', 'TR305_21', 'TR305_66'), ('TR305_21_66', 'TR305_66', 'TR305_21'), ('TR305_21_67', 'TR305_21', 'TR305_67'), ('TR305_21_67', 'TR305_67', 'TR305_21'), ('TR305_22_23', 'TR305_22', 'TR305_23'), ('TR305_22_23', 'TR305_23', 'TR305_22'), ('TR305_22_68', 'TR305_22', 'TR305_68'), ('TR305_22_68', 'TR305_68', 'TR305_22'), ('TR305_22_69', 'TR305_22', 'TR305_69'), ('TR305_22_69', 'TR305_69', 'TR305_22'), ('TR305_23_24', 'TR305_23', 'TR305_24'), ('TR305_23_24', 'TR305_24', 'TR305_23'), ('TR305_23_70', 'TR305_23', 'TR305_70'), ('TR305_23_70', 'TR305_70', 'TR305_23'), ('TR305_23_71', 'TR305_23', 'TR305_71'), ('TR305_23_71', 'TR305_71', 'TR305_23'), ('TR305_2_25', 'TR305_2', 'TR305_25'), ('TR305_2_25', 'TR305_25', 'TR305_2'), ('TR305_2_3', 'TR305_2', 'TR305_3'), ('TR305_2_3', 'TR305_3', 'TR305_2'), ('TR305_2_34', 'TR305_2', 'TR305_34'), ('TR305_2_34', 'TR305_34', 'TR305_2'), ('TR305_3_26', 'TR305_26', 'TR305_3'), ('TR305_3_26', 'TR305_3', 'TR305_26'), ('TR305_3_35', 'TR305_3', 'TR305_35'), ('TR305_3_35', 'TR305_35', 'TR305_3'), ('TR305_3_4', 'TR305_3', 'TR305_4'), ('TR305_3_4', 'TR305_4', 'TR305_3'), ('TR305_4_36', 'TR305_36', 'TR305_4'), ('TR305_4_36', 'TR305_4', 'TR305_36'), ('TR305_4_37', 'TR305_37', 'TR305_4'), ('TR305_4_37', 'TR305_4', 'TR305_37'), ('TR305_4_5', 'TR305_4', 'TR305_5'), ('TR305_4_5', 'TR305_5', 'TR305_4'), ('TR305_5_38', 'TR305_38', 'TR305_5'), ('TR305_5_38', 'TR305_5', 'TR305_38'), ('TR305_5_39', 'TR305_39', 'TR305_5'), ('TR305_5_39', 'TR305_5', 'TR305_39'), ('TR305_5_6', 'TR305_5', 'TR305_6'), ('TR305_5_6', 'TR305_6', 'TR305_5'), ('TR305_6_40', 'TR305_40', 'TR305_6'), ('TR305_6_40', 'TR305_6', 'TR305_40'), ('TR305_6_41', 'TR305_41', 'TR305_6'), ('TR305_6_41', 'TR305_6', 'TR305_41'), ('TR305_6_7', 'TR305_6', 'TR305_7'), ('TR305_6_7', 'TR305_7', 'TR305_6'), ('TR305_7_27', 'TR305_27', 'TR305_7'), ('TR305_7_27', 'TR305_7', 'TR305_27'), ('TR305_7_42', 'TR305_42', 'TR305_7'), ('TR305_7_42', 'TR305_7', 'TR305_42'), ('TR305_7_8', 'TR305_7', 'TR305_8'), ('TR305_7_8', 'TR305_8', 'TR305_7'), ('TR305_8_43', 'TR305_43', 'TR305_8'), ('TR305_8_43', 'TR305_8', 'TR305_43'), ('TR305_8_44', 'TR305_44', 'TR305_8'), ('TR305_8_44', 'TR305_8', 'TR305_44'), ('TR305_8_9', 'TR305_8', 'TR305_9'), ('TR305_8_9', 'TR305_9', 'TR305_8'), ('TR305_9_10', 'TR305_10', 'TR305_9'), ('TR305_9_10', 'TR305_9', 'TR305_10'), ('TR305_9_45', 'TR305_45', 'TR305_9'), ('TR305_9_45', 'TR305_9', 'TR305_45'), ('TR305_9_46', 'TR305_46', 'TR305_9'), ('TR305_9_46', 'TR305_9', 'TR305_46'), ('TR306_1_2', 'TR306_1', 'TR306_2'), ('TR306_1_2', 'TR306_2', 'TR306_1'), ('TR306_1_3', 'TR306_1', 'TR306_3'), ('TR306_1_3', 'TR306_3', 'TR306_1'), ('TR306_1_4', 'TR306_1', 'TR306_4'), ('TR306_1_4', 'TR306_4', 'TR306_1'), ('TR306_1_5', 'TR306_1', 'TR306_5'), ('TR306_1_5', 'TR306_5', 'TR306_1'), ('TR307_10_12', 'TR307_10', 'TR307_12'), ('TR307_10_12', 'TR307_12', 'TR307_10'), ('TR307_10_21', 'TR307_10', 'TR307_21'), ('TR307_10_21', 'TR307_21', 'TR307_10'), ('TR307_11_22', 'TR307_11', 'TR307_22'), ('TR307_11_22', 'TR307_22', 'TR307_11'), ('TR307_11_23', 'TR307_11', 'TR307_23'), ('TR307_11_23', 'TR307_23', 'TR307_11'), ('TR307_11_24', 'TR307_11', 'TR307_24'), ('TR307_11_24', 'TR307_24', 'TR307_11'), ('TR307_12_25', 'TR307_12', 'TR307_25'), ('TR307_12_25', 'TR307_25', 'TR307_12'), ('TR307_12_26', 'TR307_12', 'TR307_26'), ('TR307_12_26', 'TR307_26', 'TR307_12'), ('TR307_12_27', 'TR307_12', 'TR307_27'), ('TR307_12_27', 'TR307_27', 'TR307_12'), ('TR307_1_13', 'TR307_1', 'TR307_13'), ('TR307_1_13', 'TR307_13', 'TR307_1'), ('TR307_1_6', 'TR307_1', 'TR307_6'), ('TR307_1_6', 'TR307_6', 'TR307_1'), ('TR307_28_29', 'TR307_28', 'TR307_29'), ('TR307_28_29', 'TR307_29', 'TR307_28'), ('TR307_28_30', 'TR307_28', 'TR307_30'), ('TR307_28_30', 'TR307_30', 'TR307_28'), ('TR307_29_33', 'TR307_29', 'TR307_33'), ('TR307_29_33', 'TR307_33', 'TR307_29'), ('TR307_2_14', 'TR307_14', 'TR307_2'), ('TR307_2_14', 'TR307_2', 'TR307_14'), ('TR307_2_3', 'TR307_2', 'TR307_3'), ('TR307_2_3', 'TR307_3', 'TR307_2'), ('TR307_30_34', 'TR307_30', 'TR307_34'), ('TR307_30_34', 'TR307_34', 'TR307_30'), ('TR307_35_40', 'TR307_35', 'TR307_40'), ('TR307_35_40', 'TR307_40', 'TR307_35'), ('TR307_35_47', 'TR307_35', 'TR307_47'), ('TR307_35_47', 'TR307_47', 'TR307_35'), ('TR307_36_37', 'TR307_36', 'TR307_37'), ('TR307_36_37', 'TR307_37', 'TR307_36'), ('TR307_36_48', 'TR307_36', 'TR307_48'), ('TR307_36_48', 'TR307_48', 'TR307_36'), ('TR307_37_49', 'TR307_37', 'TR307_49'), ('TR307_37_49', 'TR307_49', 'TR307_37'), ('TR307_38_39', 'TR307_38', 'TR307_39'), ('TR307_38_39', 'TR307_39', 'TR307_38'), ('TR307_38_50', 'TR307_38', 'TR307_50'), ('TR307_38_50', 'TR307_50', 'TR307_38'), ('TR307_39_51', 'TR307_39', 'TR307_51'), ('TR307_39_51', 'TR307_51', 'TR307_39'), ('TR307_3_15', 'TR307_15', 'TR307_3'), ('TR307_3_15', 'TR307_3', 'TR307_15'), ('TR307_40_41', 'TR307_40', 'TR307_41'), ('TR307_40_41', 'TR307_41', 'TR307_40'), ('TR307_41_42', 'TR307_41', 'TR307_42'), ('TR307_41_42', 'TR307_42', 'TR307_41'), ('TR307_41_43', 'TR307_41', 'TR307_43'), ('TR307_41_43', 'TR307_43', 'TR307_41'), ('TR307_41_52', 'TR307_41', 'TR307_52'), ('TR307_41_52', 'TR307_52', 'TR307_41'), ('TR307_42_53', 'TR307_42', 'TR307_53'), ('TR307_42_53', 'TR307_53', 'TR307_42'), ('TR307_43_44', 'TR307_43', 'TR307_44'), ('TR307_43_44', 'TR307_44', 'TR307_43'), ('TR307_43_45', 'TR307_43', 'TR307_45'), ('TR307_43_45', 'TR307_45', 'TR307_43'), ('TR307_43_54', 'TR307_43', 'TR307_54'), ('TR307_43_54', 'TR307_54', 'TR307_43'), ('TR307_44_46', 'TR307_44', 'TR307_46'), ('TR307_44_46', 'TR307_46', 'TR307_44'), ('TR307_44_55', 'TR307_44', 'TR307_55'), ('TR307_44_55', 'TR307_55', 'TR307_44'), ('TR307_45_56', 'TR307_45', 'TR307_56'), ('TR307_45_56', 'TR307_56', 'TR307_45'), ('TR307_45_57', 'TR307_45', 'TR307_57'), ('TR307_45_57', 'TR307_57', 'TR307_45'), ('TR307_45_58', 'TR307_45', 'TR307_58'), ('TR307_45_58', 'TR307_58', 'TR307_45'), ('TR307_46_59', 'TR307_46', 'TR307_59'), ('TR307_46_59', 'TR307_59', 'TR307_46'), ('TR307_46_60', 'TR307_46', 'TR307_60'), ('TR307_46_60', 'TR307_60', 'TR307_46'), ('TR307_46_61', 'TR307_46', 'TR307_61'), ('TR307_46_61', 'TR307_61', 'TR307_46'), ('TR307_4_16', 'TR307_16', 'TR307_4'), ('TR307_4_16', 'TR307_4', 'TR307_16'), ('TR307_4_5', 'TR307_4', 'TR307_5'), ('TR307_4_5', 'TR307_5', 'TR307_4'), ('TR307_5_17', 'TR307_17', 'TR307_5'), ('TR307_5_17', 'TR307_5', 'TR307_17'), ('TR307_6_7', 'TR307_6', 'TR307_7'), ('TR307_6_7', 'TR307_7', 'TR307_6'), ('TR307_7_18', 'TR307_18', 'TR307_7'), ('TR307_7_18', 'TR307_7', 'TR307_18'), ('TR307_7_8', 'TR307_7', 'TR307_8'), ('TR307_7_8', 'TR307_8', 'TR307_7'), ('TR307_7_9', 'TR307_7', 'TR307_9'), ('TR307_7_9', 'TR307_9', 'TR307_7'), ('TR307_8_19', 'TR307_19', 'TR307_8'), ('TR307_8_19', 'TR307_8', 'TR307_19'), ('TR307_9_10', 'TR307_10', 'TR307_9'), ('TR307_9_10', 'TR307_9', 'TR307_10'), ('TR307_9_11', 'TR307_11', 'TR307_9'), ('TR307_9_11', 'TR307_9', 'TR307_11'), ('TR307_9_20', 'TR307_20', 'TR307_9'), ('TR307_9_20', 'TR307_9', 'TR307_20'), ('TR308_10_11', 'TR308_10', 'TR308_11'), ('TR308_10_11', 'TR308_11', 'TR308_10'), ('TR308_10_13', 'TR308_10', 'TR308_13'), ('TR308_10_13', 'TR308_13', 'TR308_10'), ('TR308_10_33', 'TR308_10', 'TR308_33'), ('TR308_10_33', 'TR308_33', 'TR308_10'), ('TR308_11_12', 'TR308_11', 'TR308_12'), ('TR308_11_12', 'TR308_12', 'TR308_11'), ('TR308_11_34', 'TR308_11', 'TR308_34'), ('TR308_11_34', 'TR308_34', 'TR308_11'), ('TR308_11_35', 'TR308_11', 'TR308_35'), ('TR308_11_35', 'TR308_35', 'TR308_11'), ('TR308_12_36', 'TR308_12', 'TR308_36'), ('TR308_12_36', 'TR308_36', 'TR308_12'), ('TR308_12_37', 'TR308_12', 'TR308_37'), ('TR308_12_37', 'TR308_37', 'TR308_12'), ('TR308_12_38', 'TR308_12', 'TR308_38'), ('TR308_12_38', 'TR308_38', 'TR308_12'), ('TR308_1_16', 'TR308_1', 'TR308_16'), ('TR308_1_16', 'TR308_16', 'TR308_1'), ('TR308_1_18', 'TR308_1', 'TR308_18'), ('TR308_1_18', 'TR308_18', 'TR308_1'), ('TR308_1_19', 'TR308_1', 'TR308_19'), ('TR308_1_19', 'TR308_19', 'TR308_1'), ('TR308_1_2', 'TR308_1', 'TR308_2'), ('TR308_1_2', 'TR308_2', 'TR308_1'), ('TR308_2_20', 'TR308_2', 'TR308_20'), ('TR308_2_20', 'TR308_20', 'TR308_2'), ('TR308_2_21', 'TR308_2', 'TR308_21'), ('TR308_2_21', 'TR308_21', 'TR308_2'), ('TR308_2_3', 'TR308_2', 'TR308_3'), ('TR308_2_3', 'TR308_3', 'TR308_2'), ('TR308_3_17', 'TR308_17', 'TR308_3'), ('TR308_3_17', 'TR308_3', 'TR308_17'), ('TR308_3_22', 'TR308_22', 'TR308_3'), ('TR308_3_22', 'TR308_3', 'TR308_22'), ('TR308_3_4', 'TR308_3', 'TR308_4'), ('TR308_3_4', 'TR308_4', 'TR308_3'), ('TR308_4_23', 'TR308_23', 'TR308_4'), ('TR308_4_23', 'TR308_4', 'TR308_23'), ('TR308_4_24', 'TR308_24', 'TR308_4'), ('TR308_4_24', 'TR308_4', 'TR308_24'), ('TR308_4_5', 'TR308_4', 'TR308_5'), ('TR308_4_5', 'TR308_5', 'TR308_4'), ('TR308_5_15', 'TR308_15', 'TR308_5'), ('TR308_5_15', 'TR308_5', 'TR308_15'), ('TR308_5_25', 'TR308_25', 'TR308_5'), ('TR308_5_25', 'TR308_5', 'TR308_25'), ('TR308_5_6', 'TR308_5', 'TR308_6'), ('TR308_5_6', 'TR308_6', 'TR308_5'), ('TR308_6_26', 'TR308_26', 'TR308_6'), ('TR308_6_26', 'TR308_6', 'TR308_26'), ('TR308_6_27', 'TR308_27', 'TR308_6'), ('TR308_6_27', 'TR308_6', 'TR308_27'), ('TR308_6_7', 'TR308_6', 'TR308_7'), ('TR308_6_7', 'TR308_7', 'TR308_6'), ('TR308_7_28', 'TR308_28', 'TR308_7'), ('TR308_7_28', 'TR308_7', 'TR308_28'), ('TR308_7_29', 'TR308_29', 'TR308_7'), ('TR308_7_29', 'TR308_7', 'TR308_29'), ('TR308_7_8', 'TR308_7', 'TR308_8'), ('TR308_7_8', 'TR308_8', 'TR308_7'), ('TR308_8_14', 'TR308_14', 'TR308_8'), ('TR308_8_14', 'TR308_8', 'TR308_14'), ('TR308_8_30', 'TR308_30', 'TR308_8'), ('TR308_8_30', 'TR308_8', 'TR308_30'), ('TR308_8_9', 'TR308_8', 'TR308_9'), ('TR308_8_9', 'TR308_9', 'TR308_8'), ('TR308_9_10', 'TR308_10', 'TR308_9'), ('TR308_9_10', 'TR308_9', 'TR308_10'), ('TR308_9_31', 'TR308_31', 'TR308_9'), ('TR308_9_31', 'TR308_9', 'TR308_31'), ('TR308_9_32', 'TR308_32', 'TR308_9'), ('TR308_9_32', 'TR308_9', 'TR308_32'), ('TR309_11_17', 'TR309_11', 'TR309_17'), ('TR309_11_17', 'TR309_17', 'TR309_11'), ('TR309_11_18', 'TR309_11', 'TR309_18'), ('TR309_11_18', 'TR309_18', 'TR309_11'), ('TR309_13_19', 'TR309_13', 'TR309_19'), ('TR309_13_19', 'TR309_19', 'TR309_13'), ('TR309_15_20', 'TR309_15', 'TR309_20'), ('TR309_15_20', 'TR309_20', 'TR309_15'), ('TR309_15_21', 'TR309_15', 'TR309_21'), ('TR309_15_21', 'TR309_21', 'TR309_15'), ('TR309_17_22', 'TR309_17', 'TR309_22'), ('TR309_17_22', 'TR309_22', 'TR309_17'), ('TR309_1_2', 'TR309_1', 'TR309_2'), ('TR309_1_2', 'TR309_2', 'TR309_1'), ('TR309_1_3', 'TR309_1', 'TR309_3'), ('TR309_1_3', 'TR309_3', 'TR309_1'), ('TR309_20_23', 'TR309_20', 'TR309_23'), ('TR309_20_23', 'TR309_23', 'TR309_20'), ('TR309_2_5', 'TR309_2', 'TR309_5'), ('TR309_2_5', 'TR309_5', 'TR309_2'), ('TR309_3_7', 'TR309_3', 'TR309_7'), ('TR309_3_7', 'TR309_7', 'TR309_3'), ('TR309_4_8', 'TR309_4', 'TR309_8'), ('TR309_4_8', 'TR309_8', 'TR309_4'), ('TR309_4_9', 'TR309_4', 'TR309_9'), ('TR309_4_9', 'TR309_9', 'TR309_4'), ('TR309_5_10', 'TR309_10', 'TR309_5'), ('TR309_5_10', 'TR309_5', 'TR309_10'), ('TR309_6_12', 'TR309_12', 'TR309_6'), ('TR309_6_12', 'TR309_6', 'TR309_12'), ('TR309_6_13', 'TR309_13', 'TR309_6'), ('TR309_6_13', 'TR309_6', 'TR309_13'), ('TR309_7_14', 'TR309_14', 'TR309_7'), ('TR309_7_14', 'TR309_7', 'TR309_14'), ('TR309_9_16', 'TR309_16', 'TR309_9'), ('TR309_9_16', 'TR309_9', 'TR309_16'), ('TR311_1_3', 'TR311_1', 'TR311_3'), ('TR311_1_3', 'TR311_3', 'TR311_1'), ('TR311_1_5', 'TR311_1', 'TR311_5'), ('TR311_1_5', 'TR311_5', 'TR311_1'), ('TR311_2_4', 'TR311_2', 'TR311_4'), ('TR311_2_4', 'TR311_4', 'TR311_2'), ('TR311_2_6', 'TR311_2', 'TR311_6'), ('TR311_2_6', 'TR311_6', 'TR311_2'), ('TR312_1_2', 'TR312_1', 'TR312_2'), ('TR312_1_2', 'TR312_2', 'TR312_1'), ('TR312_2_3', 'TR312_2', 'TR312_3'), ('TR312_2_3', 'TR312_3', 'TR312_2'), ('TR312_2_6', 'TR312_2', 'TR312_6'), ('TR312_2_6', 'TR312_6', 'TR312_2'), ('TR312_2_7', 'TR312_2', 'TR312_7'), ('TR312_2_7', 'TR312_7', 'TR312_2'), ('TR312_3_4', 'TR312_3', 'TR312_4'), ('TR312_3_4', 'TR312_4', 'TR312_3'), ('TR312_3_8', 'TR312_3', 'TR312_8'), ('TR312_3_8', 'TR312_8', 'TR312_3'), ('TR312_3_9', 'TR312_3', 'TR312_9'), ('TR312_3_9', 'TR312_9', 'TR312_3'), ('TR312_4_10', 'TR312_10', 'TR312_4'), ('TR312_4_10', 'TR312_4', 'TR312_10'), ('TR312_4_11', 'TR312_11', 'TR312_4'), ('TR312_4_11', 'TR312_4', 'TR312_11'), ('TR312_4_5', 'TR312_4', 'TR312_5'), ('TR312_4_5', 'TR312_5', 'TR312_4'), ('TR312_5_12', 'TR312_12', 'TR312_5'), ('TR312_5_12', 'TR312_5', 'TR312_12'), ('TR312_5_13', 'TR312_13', 'TR312_5'), ('TR312_5_13', 'TR312_5', 'TR312_13'), ('TR312_5_14', 'TR312_14', 'TR312_5'), ('TR312_5_14', 'TR312_5', 'TR312_14'), ('TR313_14_21', 'TR313_14', 'TR313_21'), ('TR313_14_21', 'TR313_21', 'TR313_14'), ('TR313_17_22', 'TR313_17', 'TR313_22'), ('TR313_17_22', 'TR313_22', 'TR313_17'), ('TR313_1_13', 'TR313_1', 'TR313_13'), ('TR313_1_13', 'TR313_13', 'TR313_1'), ('TR313_1_2', 'TR313_1', 'TR313_2'), ('TR313_1_2', 'TR313_2', 'TR313_1'), ('TR313_1_3', 'TR313_1', 'TR313_3'), ('TR313_1_3', 'TR313_3', 'TR313_1'), ('TR313_1_6', 'TR313_1', 'TR313_6'), ('TR313_1_6', 'TR313_6', 'TR313_1'), ('TR313_21_22', 'TR313_21', 'TR313_22'), ('TR313_21_22', 'TR313_22', 'TR313_21'), ('TR313_2_19', 'TR313_19', 'TR313_2'), ('TR313_2_19', 'TR313_2', 'TR313_19'), ('TR313_2_4', 'TR313_2', 'TR313_4'), ('TR313_2_4', 'TR313_4', 'TR313_2'), ('TR313_2_8', 'TR313_2', 'TR313_8'), ('TR313_2_8', 'TR313_8', 'TR313_2'), ('TR313_3_18', 'TR313_18', 'TR313_3'), ('TR313_3_18', 'TR313_3', 'TR313_18'), ('TR313_3_4', 'TR313_3', 'TR313_4'), ('TR313_3_4', 'TR313_4', 'TR313_3'), ('TR313_3_7', 'TR313_3', 'TR313_7'), ('TR313_3_7', 'TR313_7', 'TR313_3'), ('TR313_4_20', 'TR313_20', 'TR313_4'), ('TR313_4_20', 'TR313_4', 'TR313_20'), ('TR313_4_21', 'TR313_21', 'TR313_4'), ('TR313_4_21', 'TR313_4', 'TR313_21'), ('TR313_5_15', 'TR313_15', 'TR313_5'), ('TR313_5_15', 'TR313_5', 'TR313_15'), ('TR313_5_21', 'TR313_21', 'TR313_5'), ('TR313_5_21', 'TR313_5', 'TR313_21'), ('TR313_5_6', 'TR313_5', 'TR313_6'), ('TR313_5_6', 'TR313_6', 'TR313_5'), ('TR313_5_8', 'TR313_5', 'TR313_8'), ('TR313_5_8', 'TR313_8', 'TR313_5'), ('TR313_6_16', 'TR313_16', 'TR313_6'), ('TR313_6_16', 'TR313_6', 'TR313_16'), ('TR313_6_22', 'TR313_22', 'TR313_6'), ('TR313_6_22', 'TR313_6', 'TR313_22'), ('TR313_7_11', 'TR313_11', 'TR313_7'), ('TR313_7_11', 'TR313_7', 'TR313_11'), ('TR313_7_12', 'TR313_12', 'TR313_7'), ('TR313_7_12', 'TR313_7', 'TR313_12'), ('TR313_7_22', 'TR313_22', 'TR313_7'), ('TR313_7_22', 'TR313_7', 'TR313_22'), ('TR313_8_10', 'TR313_10', 'TR313_8'), ('TR313_8_10', 'TR313_8', 'TR313_10'), ('TR313_8_9', 'TR313_8', 'TR313_9'), ('TR313_8_9', 'TR313_9', 'TR313_8'), ('TR314_1_8', 'TR314_1', 'TR314_8'), ('TR314_1_8', 'TR314_8', 'TR314_1'), ('TR314_1_9', 'TR314_1', 'TR314_9'), ('TR314_1_9', 'TR314_9', 'TR314_1'), ('TR314_2_3', 'TR314_2', 'TR314_3'), ('TR314_2_3', 'TR314_3', 'TR314_2'), ('TR314_2_4', 'TR314_2', 'TR314_4'), ('TR314_2_4', 'TR314_4', 'TR314_2'), ('TR314_3_5', 'TR314_3', 'TR314_5'), ('TR314_3_5', 'TR314_5', 'TR314_3'), ('TR314_4_10', 'TR314_10', 'TR314_4'), ('TR314_4_10', 'TR314_4', 'TR314_10'), ('TR314_4_11', 'TR314_11', 'TR314_4'), ('TR314_4_11', 'TR314_4', 'TR314_11'), ('TR314_4_12', 'TR314_12', 'TR314_4'), ('TR314_4_12', 'TR314_4', 'TR314_12'), ('TR314_5_7', 'TR314_5', 'TR314_7'), ('TR314_5_7', 'TR314_7', 'TR314_5'), ('TR314_7_13', 'TR314_13', 'TR314_7'), ('TR314_7_13', 'TR314_7', 'TR314_13'), ('TR314_7_14', 'TR314_14', 'TR314_7'), ('TR314_7_14', 'TR314_7', 'TR314_14'), ('TR314_7_15', 'TR314_15', 'TR314_7'), ('TR314_7_15', 'TR314_7', 'TR314_15'), ('TR315_11_17', 'TR315_11', 'TR315_17'), ('TR315_11_17', 'TR315_17', 'TR315_11'), ('TR315_12_39', 'TR315_12', 'TR315_39'), ('TR315_12_39', 'TR315_39', 'TR315_12'), ('TR315_13_18', 'TR315_13', 'TR315_18'), ('TR315_13_18', 'TR315_18', 'TR315_13'), ('TR315_13_40', 'TR315_13', 'TR315_40'), ('TR315_13_40', 'TR315_40', 'TR315_13'), ('TR315_14_19', 'TR315_14', 'TR315_19'), ('TR315_14_19', 'TR315_19', 'TR315_14'), ('TR315_14_20', 'TR315_14', 'TR315_20'), ('TR315_14_20', 'TR315_20', 'TR315_14'), ('TR315_15_21', 'TR315_15', 'TR315_21'), ('TR315_15_21', 'TR315_21', 'TR315_15'), ('TR315_16_23', 'TR315_16', 'TR315_23'), ('TR315_16_23', 'TR315_23', 'TR315_16'), ('TR315_17_24', 'TR315_17', 'TR315_24'), ('TR315_17_24', 'TR315_24', 'TR315_17'), ('TR315_18_26', 'TR315_18', 'TR315_26'), ('TR315_18_26', 'TR315_26', 'TR315_18'), ('TR315_18_32', 'TR315_18', 'TR315_32'), ('TR315_18_32', 'TR315_32', 'TR315_18'), ('TR315_18_33', 'TR315_18', 'TR315_33'), ('TR315_18_33', 'TR315_33', 'TR315_18'), ('TR315_19_41', 'TR315_19', 'TR315_41'), ('TR315_19_41', 'TR315_41', 'TR315_19'), ('TR315_19_42', 'TR315_19', 'TR315_42'), ('TR315_19_42', 'TR315_42', 'TR315_19'), ('TR315_19_43', 'TR315_19', 'TR315_43'), ('TR315_19_43', 'TR315_43', 'TR315_19'), ('TR315_1_2', 'TR315_1', 'TR315_2'), ('TR315_1_2', 'TR315_2', 'TR315_1'), ('TR315_1_34', 'TR315_1', 'TR315_34'), ('TR315_1_34', 'TR315_34', 'TR315_1'), ('TR315_20_44', 'TR315_20', 'TR315_44'), ('TR315_20_44', 'TR315_44', 'TR315_20'), ('TR315_20_45', 'TR315_20', 'TR315_45'), ('TR315_20_45', 'TR315_45', 'TR315_20'), ('TR315_20_46', 'TR315_20', 'TR315_46'), ('TR315_20_46', 'TR315_46', 'TR315_20'), ('TR315_21_47', 'TR315_21', 'TR315_47'), ('TR315_21_47', 'TR315_47', 'TR315_21'), ('TR315_23_27', 'TR315_23', 'TR315_27'), ('TR315_23_27', 'TR315_27', 'TR315_23'), ('TR315_24_48', 'TR315_24', 'TR315_48'), ('TR315_24_48', 'TR315_48', 'TR315_24'), ('TR315_24_49', 'TR315_24', 'TR315_49'), ('TR315_24_49', 'TR315_49', 'TR315_24'), ('TR315_26_28', 'TR315_26', 'TR315_28'), ('TR315_26_28', 'TR315_28', 'TR315_26'), ('TR315_27_29', 'TR315_27', 'TR315_29'), ('TR315_27_29', 'TR315_29', 'TR315_27'), ('TR315_28_50', 'TR315_28', 'TR315_50'), ('TR315_28_50', 'TR315_50', 'TR315_28'), ('TR315_29_51', 'TR315_29', 'TR315_51'), ('TR315_29_51', 'TR315_51', 'TR315_29'), ('TR315_2_3', 'TR315_2', 'TR315_3'), ('TR315_2_3', 'TR315_3', 'TR315_2'), ('TR315_2_4', 'TR315_2', 'TR315_4'), ('TR315_2_4', 'TR315_4', 'TR315_2'), ('TR315_2_5', 'TR315_2', 'TR315_5'), ('TR315_2_5', 'TR315_5', 'TR315_2'), ('TR315_30_31', 'TR315_30', 'TR315_31'), ('TR315_30_31', 'TR315_31', 'TR315_30'), ('TR315_30_52', 'TR315_30', 'TR315_52'), ('TR315_30_52', 'TR315_52', 'TR315_30'), ('TR315_31_53', 'TR315_31', 'TR315_53'), ('TR315_31_53', 'TR315_53', 'TR315_31'), ('TR315_32_54', 'TR315_32', 'TR315_54'), ('TR315_32_54', 'TR315_54', 'TR315_32'), ('TR315_32_55', 'TR315_32', 'TR315_55'), ('TR315_32_55', 'TR315_55', 'TR315_32'), ('TR315_32_56', 'TR315_32', 'TR315_56'), ('TR315_32_56', 'TR315_56', 'TR315_32'), ('TR315_33_57', 'TR315_33', 'TR315_57'), ('TR315_33_57', 'TR315_57', 'TR315_33'), ('TR315_3_35', 'TR315_3', 'TR315_35'), ('TR315_3_35', 'TR315_35', 'TR315_3'), ('TR315_3_6', 'TR315_3', 'TR315_6'), ('TR315_3_6', 'TR315_6', 'TR315_3'), ('TR315_3_7', 'TR315_3', 'TR315_7'), ('TR315_3_7', 'TR315_7', 'TR315_3'), ('TR315_4_8', 'TR315_4', 'TR315_8'), ('TR315_4_8', 'TR315_8', 'TR315_4'), ('TR315_58_59', 'TR315_58', 'TR315_59'), ('TR315_58_59', 'TR315_59', 'TR315_58'), ('TR315_5_11', 'TR315_11', 'TR315_5'), ('TR315_5_11', 'TR315_5', 'TR315_11'), ('TR315_6_12', 'TR315_12', 'TR315_6'), ('TR315_6_12', 'TR315_6', 'TR315_12'), ('TR315_6_13', 'TR315_13', 'TR315_6'), ('TR315_6_13', 'TR315_6', 'TR315_13'), ('TR315_6_36', 'TR315_36', 'TR315_6'), ('TR315_6_36', 'TR315_6', 'TR315_36'), ('TR315_7_14', 'TR315_14', 'TR315_7'), ('TR315_7_14', 'TR315_7', 'TR315_14'), ('TR315_7_15', 'TR315_15', 'TR315_7'), ('TR315_7_15', 'TR315_7', 'TR315_15'), ('TR315_7_37', 'TR315_37', 'TR315_7'), ('TR315_7_37', 'TR315_7', 'TR315_37'), ('TR315_8_38', 'TR315_38', 'TR315_8'), ('TR315_8_38', 'TR315_8', 'TR315_38'), ('TR315_9_13', 'TR315_13', 'TR315_9'), ('TR315_9_13', 'TR315_9', 'TR315_13'), ('TR315_9_16', 'TR315_16', 'TR315_9'), ('TR315_9_16', 'TR315_9', 'TR315_16'), ('TR316_1_5', 'TR316_1', 'TR316_5'), ('TR316_1_5', 'TR316_5', 'TR316_1'), ('TR316_1_6', 'TR316_1', 'TR316_6'), ('TR316_1_6', 'TR316_6', 'TR316_1'), ('TR316_2_3', 'TR316_2', 'TR316_3'), ('TR316_2_3', 'TR316_3', 'TR316_2'), ('TR316_2_4', 'TR316_2', 'TR316_4'), ('TR316_2_4', 'TR316_4', 'TR316_2'), ('TR316_3_7', 'TR316_3', 'TR316_7'), ('TR316_3_7', 'TR316_7', 'TR316_3'), ('TR316_3_8', 'TR316_3', 'TR316_8'), ('TR316_3_8', 'TR316_8', 'TR316_3'), ('TR316_3_9', 'TR316_3', 'TR316_9'), ('TR316_3_9', 'TR316_9', 'TR316_3'), ('TR316_4_10', 'TR316_10', 'TR316_4'), ('TR316_4_10', 'TR316_4', 'TR316_10'), ('TR316_4_11', 'TR316_11', 'TR316_4'), ('TR316_4_11', 'TR316_4', 'TR316_11'), ('TR316_4_12', 'TR316_12', 'TR316_4'), ('TR316_4_12', 'TR316_4', 'TR316_12'), ('TR317_10_18', 'TR317_10', 'TR317_18'), ('TR317_10_18', 'TR317_18', 'TR317_10'), ('TR317_10_19', 'TR317_10', 'TR317_19'), ('TR317_10_19', 'TR317_19', 'TR317_10'), ('TR317_11_16', 'TR317_11', 'TR317_16'), ('TR317_11_16', 'TR317_16', 'TR317_11'), ('TR317_12_13', 'TR317_12', 'TR317_13'), ('TR317_12_13', 'TR317_13', 'TR317_12'), ('TR317_12_29', 'TR317_12', 'TR317_29'), ('TR317_12_29', 'TR317_29', 'TR317_12'), ('TR317_13_30', 'TR317_13', 'TR317_30'), ('TR317_13_30', 'TR317_30', 'TR317_13'), ('TR317_14_15', 'TR317_14', 'TR317_15'), ('TR317_14_15', 'TR317_15', 'TR317_14'), ('TR317_14_17', 'TR317_14', 'TR317_17'), ('TR317_14_17', 'TR317_17', 'TR317_14'), ('TR317_15_31', 'TR317_15', 'TR317_31'), ('TR317_15_31', 'TR317_31', 'TR317_15'), ('TR317_16_32', 'TR317_16', 'TR317_32'), ('TR317_16_32', 'TR317_32', 'TR317_16'), ('TR317_18_33', 'TR317_18', 'TR317_33'), ('TR317_18_33', 'TR317_33', 'TR317_18'), ('TR317_18_34', 'TR317_18', 'TR317_34'), ('TR317_18_34', 'TR317_34', 'TR317_18'), ('TR317_18_35', 'TR317_18', 'TR317_35'), ('TR317_18_35', 'TR317_35', 'TR317_18'), ('TR317_19_36', 'TR317_19', 'TR317_36'), ('TR317_19_36', 'TR317_36', 'TR317_19'), ('TR317_19_37', 'TR317_19', 'TR317_37'), ('TR317_19_37', 'TR317_37', 'TR317_19'), ('TR317_19_38', 'TR317_19', 'TR317_38'), ('TR317_19_38', 'TR317_38', 'TR317_19'), ('TR317_1_20', 'TR317_1', 'TR317_20'), ('TR317_1_20', 'TR317_20', 'TR317_1'), ('TR317_1_6', 'TR317_1', 'TR317_6'), ('TR317_1_6', 'TR317_6', 'TR317_1'), ('TR317_2_21', 'TR317_2', 'TR317_21'), ('TR317_2_21', 'TR317_21', 'TR317_2'), ('TR317_2_3', 'TR317_2', 'TR317_3'), ('TR317_2_3', 'TR317_3', 'TR317_2'), ('TR317_39_42', 'TR317_39', 'TR317_42'), ('TR317_39_42', 'TR317_42', 'TR317_39'), ('TR317_39_47', 'TR317_39', 'TR317_47'), ('TR317_39_47', 'TR317_47', 'TR317_39'), ('TR317_3_22', 'TR317_22', 'TR317_3'), ('TR317_3_22', 'TR317_3', 'TR317_22'), ('TR317_40_41', 'TR317_40', 'TR317_41'), ('TR317_40_41', 'TR317_41', 'TR317_40'), ('TR317_40_48', 'TR317_40', 'TR317_48'), ('TR317_40_48', 'TR317_48', 'TR317_40'), ('TR317_41_46', 'TR317_41', 'TR317_46'), ('TR317_41_46', 'TR317_46', 'TR317_41'), ('TR317_42_44', 'TR317_42', 'TR317_44'), ('TR317_42_44', 'TR317_44', 'TR317_42'), ('TR317_44_49', 'TR317_44', 'TR317_49'), ('TR317_44_49', 'TR317_49', 'TR317_44'), ('TR317_46_50', 'TR317_46', 'TR317_50'), ('TR317_46_50', 'TR317_50', 'TR317_46'), ('TR317_4_23', 'TR317_23', 'TR317_4'), ('TR317_4_23', 'TR317_4', 'TR317_23'), ('TR317_4_5', 'TR317_4', 'TR317_5'), ('TR317_4_5', 'TR317_5', 'TR317_4'), ('TR317_5_7', 'TR317_5', 'TR317_7'), ('TR317_5_7', 'TR317_7', 'TR317_5'), ('TR317_7_11', 'TR317_11', 'TR317_7'), ('TR317_7_11', 'TR317_7', 'TR317_11'), ('TR317_7_24', 'TR317_24', 'TR317_7'), ('TR317_7_24', 'TR317_7', 'TR317_24'), ('TR317_7_8', 'TR317_7', 'TR317_8'), ('TR317_7_8', 'TR317_8', 'TR317_7'), ('TR317_8_25', 'TR317_25', 'TR317_8'), ('TR317_8_25', 'TR317_8', 'TR317_25'), ('TR317_8_26', 'TR317_26', 'TR317_8'), ('TR317_8_26', 'TR317_8', 'TR317_26'), ('TR317_8_9', 'TR317_8', 'TR317_9'), ('TR317_8_9', 'TR317_9', 'TR317_8'), ('TR317_9_10', 'TR317_10', 'TR317_9'), ('TR317_9_10', 'TR317_9', 'TR317_10'), ('TR317_9_27', 'TR317_27', 'TR317_9'), ('TR317_9_27', 'TR317_9', 'TR317_27'), ('TR317_9_28', 'TR317_28', 'TR317_9'), ('TR317_9_28', 'TR317_9', 'TR317_28'), ('TR318_10_11', 'TR318_10', 'TR318_11'), ('TR318_10_11', 'TR318_11', 'TR318_10'), ('TR318_10_13', 'TR318_10', 'TR318_13'), ('TR318_10_13', 'TR318_13', 'TR318_10'), ('TR318_10_32', 'TR318_10', 'TR318_32'), ('TR318_10_32', 'TR318_32', 'TR318_10'), ('TR318_11_12', 'TR318_11', 'TR318_12'), ('TR318_11_12', 'TR318_12', 'TR318_11'), ('TR318_12_13', 'TR318_12', 'TR318_13'), ('TR318_12_13', 'TR318_13', 'TR318_12'), ('TR318_12_14', 'TR318_12', 'TR318_14'), ('TR318_12_14', 'TR318_14', 'TR318_12'), ('TR318_13_16', 'TR318_13', 'TR318_16'), ('TR318_13_16', 'TR318_16', 'TR318_13'), ('TR318_13_33', 'TR318_13', 'TR318_33'), ('TR318_13_33', 'TR318_33', 'TR318_13'), ('TR318_14_15', 'TR318_14', 'TR318_15'), ('TR318_14_15', 'TR318_15', 'TR318_14'), ('TR318_14_18', 'TR318_14', 'TR318_18'), ('TR318_14_18', 'TR318_18', 'TR318_14'), ('TR318_14_34', 'TR318_14', 'TR318_34'), ('TR318_14_34', 'TR318_34', 'TR318_14'), ('TR318_15_16', 'TR318_15', 'TR318_16'), ('TR318_15_16', 'TR318_16', 'TR318_15'), ('TR318_15_17', 'TR318_15', 'TR318_17'), ('TR318_15_17', 'TR318_17', 'TR318_15'), ('TR318_15_20', 'TR318_15', 'TR318_20'), ('TR318_15_20', 'TR318_20', 'TR318_15'), ('TR318_17_35', 'TR318_17', 'TR318_35'), ('TR318_17_35', 'TR318_35', 'TR318_17'), ('TR318_17_36', 'TR318_17', 'TR318_36'), ('TR318_17_36', 'TR318_36', 'TR318_17'), ('TR318_17_37', 'TR318_17', 'TR318_37'), ('TR318_17_37', 'TR318_37', 'TR318_17'), ('TR318_18_19', 'TR318_18', 'TR318_19'), ('TR318_18_19', 'TR318_19', 'TR318_18'), ('TR318_19_38', 'TR318_19', 'TR318_38'), ('TR318_19_38', 'TR318_38', 'TR318_19'), ('TR318_1_25', 'TR318_1', 'TR318_25'), ('TR318_1_25', 'TR318_25', 'TR318_1'), ('TR318_1_6', 'TR318_1', 'TR318_6'), ('TR318_1_6', 'TR318_6', 'TR318_1'), ('TR318_20_39', 'TR318_20', 'TR318_39'), ('TR318_20_39', 'TR318_39', 'TR318_20'), ('TR318_20_40', 'TR318_20', 'TR318_40'), ('TR318_20_40', 'TR318_40', 'TR318_20'), ('TR318_20_41', 'TR318_20', 'TR318_41'), ('TR318_20_41', 'TR318_41', 'TR318_20'), ('TR318_24_42', 'TR318_24', 'TR318_42'), ('TR318_24_42', 'TR318_42', 'TR318_24'), ('TR318_24_43', 'TR318_24', 'TR318_43'), ('TR318_24_43', 'TR318_43', 'TR318_24'), ('TR318_2_26', 'TR318_2', 'TR318_26'), ('TR318_2_26', 'TR318_26', 'TR318_2'), ('TR318_2_3', 'TR318_2', 'TR318_3'), ('TR318_2_3', 'TR318_3', 'TR318_2'), ('TR318_3_27', 'TR318_27', 'TR318_3'), ('TR318_3_27', 'TR318_3', 'TR318_27'), ('TR318_44_45', 'TR318_44', 'TR318_45'), ('TR318_44_45', 'TR318_45', 'TR318_44'), ('TR318_44_46', 'TR318_44', 'TR318_46'), ('TR318_44_46', 'TR318_46', 'TR318_44'), ('TR318_47_48', 'TR318_47', 'TR318_48'), ('TR318_47_48', 'TR318_48', 'TR318_47'), ('TR318_47_49', 'TR318_47', 'TR318_49'), ('TR318_47_49', 'TR318_49', 'TR318_47'), ('TR318_4_28', 'TR318_28', 'TR318_4'), ('TR318_4_28', 'TR318_4', 'TR318_28'), ('TR318_4_5', 'TR318_4', 'TR318_5'), ('TR318_4_5', 'TR318_5', 'TR318_4'), ('TR318_50_51', 'TR318_50', 'TR318_51'), ('TR318_50_51', 'TR318_51', 'TR318_50'), ('TR318_50_52', 'TR318_50', 'TR318_52'), ('TR318_50_52', 'TR318_52', 'TR318_50'), ('TR318_5_7', 'TR318_5', 'TR318_7'), ('TR318_5_7', 'TR318_7', 'TR318_5'), ('TR318_6_29', 'TR318_29', 'TR318_6'), ('TR318_6_29', 'TR318_6', 'TR318_29'), ('TR318_7_24', 'TR318_24', 'TR318_7'), ('TR318_7_24', 'TR318_7', 'TR318_24'), ('TR318_7_30', 'TR318_30', 'TR318_7'), ('TR318_7_30', 'TR318_7', 'TR318_30'), ('TR318_7_8', 'TR318_7', 'TR318_8'), ('TR318_7_8', 'TR318_8', 'TR318_7'), ('TR318_8_9', 'TR318_8', 'TR318_9'), ('TR318_8_9', 'TR318_9', 'TR318_8'), ('TR318_9_10', 'TR318_10', 'TR318_9'), ('TR318_9_10', 'TR318_9', 'TR318_10'), ('TR318_9_31', 'TR318_31', 'TR318_9'), ('TR318_9_31', 'TR318_9', 'TR318_31'), ('TR319_1_6', 'TR319_1', 'TR319_6'), ('TR319_1_6', 'TR319_6', 'TR319_1'), ('TR319_1_9', 'TR319_1', 'TR319_9'), ('TR319_1_9', 'TR319_9', 'TR319_1'), ('TR319_2_10', 'TR319_10', 'TR319_2'), ('TR319_2_10', 'TR319_2', 'TR319_10'), ('TR319_2_3', 'TR319_2', 'TR319_3'), ('TR319_2_3', 'TR319_3', 'TR319_2'), ('TR319_3_8', 'TR319_3', 'TR319_8'), ('TR319_3_8', 'TR319_8', 'TR319_3'), ('TR319_4_11', 'TR319_11', 'TR319_4'), ('TR319_4_11', 'TR319_4', 'TR319_11'), ('TR319_4_5', 'TR319_4', 'TR319_5'), ('TR319_4_5', 'TR319_5', 'TR319_4'), ('TR319_5_12', 'TR319_12', 'TR319_5'), ('TR319_5_12', 'TR319_5', 'TR319_12'), ('TR319_6_7', 'TR319_6', 'TR319_7'), ('TR319_6_7', 'TR319_7', 'TR319_6'), ('TR320_11_15', 'TR320_11', 'TR320_15'), ('TR320_11_15', 'TR320_15', 'TR320_11'), ('TR320_11_33', 'TR320_11', 'TR320_33'), ('TR320_11_33', 'TR320_33', 'TR320_11'), ('TR320_12_17', 'TR320_12', 'TR320_17'), ('TR320_12_17', 'TR320_17', 'TR320_12'), ('TR320_12_34', 'TR320_12', 'TR320_34'), ('TR320_12_34', 'TR320_34', 'TR320_12'), ('TR320_12_35', 'TR320_12', 'TR320_35'), ('TR320_12_35', 'TR320_35', 'TR320_12'), ('TR320_13_17', 'TR320_13', 'TR320_17'), ('TR320_13_17', 'TR320_17', 'TR320_13'), ('TR320_13_18', 'TR320_13', 'TR320_18'), ('TR320_13_18', 'TR320_18', 'TR320_13'), ('TR320_14_36', 'TR320_14', 'TR320_36'), ('TR320_14_36', 'TR320_36', 'TR320_14'), ('TR320_15_20', 'TR320_15', 'TR320_20'), ('TR320_15_20', 'TR320_20', 'TR320_15'), ('TR320_16_21', 'TR320_16', 'TR320_21'), ('TR320_16_21', 'TR320_21', 'TR320_16'), ('TR320_16_37', 'TR320_16', 'TR320_37'), ('TR320_16_37', 'TR320_37', 'TR320_16'), ('TR320_16_38', 'TR320_16', 'TR320_38'), ('TR320_16_38', 'TR320_38', 'TR320_16'), ('TR320_18_39', 'TR320_18', 'TR320_39'), ('TR320_18_39', 'TR320_39', 'TR320_18'), ('TR320_19_22', 'TR320_19', 'TR320_22'), ('TR320_19_22', 'TR320_22', 'TR320_19'), ('TR320_19_23', 'TR320_19', 'TR320_23'), ('TR320_19_23', 'TR320_23', 'TR320_19'), ('TR320_20_21', 'TR320_20', 'TR320_21'), ('TR320_20_21', 'TR320_21', 'TR320_20'), ('TR320_21_24', 'TR320_21', 'TR320_24'), ('TR320_21_24', 'TR320_24', 'TR320_21'), ('TR320_21_40', 'TR320_21', 'TR320_40'), ('TR320_21_40', 'TR320_40', 'TR320_21'), ('TR320_22_25', 'TR320_22', 'TR320_25'), ('TR320_22_25', 'TR320_25', 'TR320_22'), ('TR320_23_26', 'TR320_23', 'TR320_26'), ('TR320_23_26', 'TR320_26', 'TR320_23'), ('TR320_24_27', 'TR320_24', 'TR320_27'), ('TR320_24_27', 'TR320_27', 'TR320_24'), ('TR320_25_29', 'TR320_25', 'TR320_29'), ('TR320_25_29', 'TR320_29', 'TR320_25'), ('TR320_26_41', 'TR320_26', 'TR320_41'), ('TR320_26_41', 'TR320_41', 'TR320_26'), ('TR320_26_42', 'TR320_26', 'TR320_42'), ('TR320_26_42', 'TR320_42', 'TR320_26'), ('TR320_26_43', 'TR320_26', 'TR320_43'), ('TR320_26_43', 'TR320_43', 'TR320_26'), ('TR320_27_44', 'TR320_27', 'TR320_44'), ('TR320_27_44', 'TR320_44', 'TR320_27'), ('TR320_27_45', 'TR320_27', 'TR320_45'), ('TR320_27_45', 'TR320_45', 'TR320_27'), ('TR320_27_46', 'TR320_27', 'TR320_46'), ('TR320_27_46', 'TR320_46', 'TR320_27'), ('TR320_28_47', 'TR320_28', 'TR320_47'), ('TR320_28_47', 'TR320_47', 'TR320_28'), ('TR320_28_48', 'TR320_28', 'TR320_48'), ('TR320_28_48', 'TR320_48', 'TR320_28'), ('TR320_29_49', 'TR320_29', 'TR320_49'), ('TR320_29_49', 'TR320_49', 'TR320_29'), ('TR320_29_50', 'TR320_29', 'TR320_50'), ('TR320_29_50', 'TR320_50', 'TR320_29'), ('TR320_29_51', 'TR320_29', 'TR320_51'), ('TR320_29_51', 'TR320_51', 'TR320_29'), ('TR320_2_3', 'TR320_2', 'TR320_3'), ('TR320_2_3', 'TR320_3', 'TR320_2'), ('TR320_2_4', 'TR320_2', 'TR320_4'), ('TR320_2_4', 'TR320_4', 'TR320_2'), ('TR320_3_6', 'TR320_3', 'TR320_6'), ('TR320_3_6', 'TR320_6', 'TR320_3'), ('TR320_4_30', 'TR320_30', 'TR320_4'), ('TR320_4_30', 'TR320_4', 'TR320_30'), ('TR320_4_7', 'TR320_4', 'TR320_7'), ('TR320_4_7', 'TR320_7', 'TR320_4'), ('TR320_4_8', 'TR320_4', 'TR320_8'), ('TR320_4_8', 'TR320_8', 'TR320_4'), ('TR320_5_10', 'TR320_10', 'TR320_5'), ('TR320_5_10', 'TR320_5', 'TR320_10'), ('TR320_5_9', 'TR320_5', 'TR320_9'), ('TR320_5_9', 'TR320_9', 'TR320_5'), ('TR320_6_31', 'TR320_31', 'TR320_6'), ('TR320_6_31', 'TR320_6', 'TR320_31'), ('TR320_7_10', 'TR320_10', 'TR320_7'), ('TR320_7_10', 'TR320_7', 'TR320_10'), ('TR320_7_12', 'TR320_12', 'TR320_7'), ('TR320_7_12', 'TR320_7', 'TR320_12'), ('TR320_7_32', 'TR320_32', 'TR320_7'), ('TR320_7_32', 'TR320_7', 'TR320_32'), ('TR320_8_14', 'TR320_14', 'TR320_8'), ('TR320_8_14', 'TR320_8', 'TR320_14'), ('TR320_9_16', 'TR320_16', 'TR320_9'), ('TR320_9_16', 'TR320_9', 'TR320_16'), ('TR321_1_2', 'TR321_1', 'TR321_2'), ('TR321_1_2', 'TR321_2', 'TR321_1'), ('TR321_1_3', 'TR321_1', 'TR321_3'), ('TR321_1_3', 'TR321_3', 'TR321_1'), ('TR321_1_4', 'TR321_1', 'TR321_4'), ('TR321_1_4', 'TR321_4', 'TR321_1'), ('TR321_1_5', 'TR321_1', 'TR321_5'), ('TR321_1_5', 'TR321_5', 'TR321_1'), ('TR322_10_21', 'TR322_10', 'TR322_21'), ('TR322_10_21', 'TR322_21', 'TR322_10'), ('TR322_11_12', 'TR322_11', 'TR322_12'), ('TR322_11_12', 'TR322_12', 'TR322_11'), ('TR322_11_22', 'TR322_11', 'TR322_22'), ('TR322_11_22', 'TR322_22', 'TR322_11'), ('TR322_12_23', 'TR322_12', 'TR322_23'), ('TR322_12_23', 'TR322_23', 'TR322_12'), ('TR322_12_24', 'TR322_12', 'TR322_24'), ('TR322_12_24', 'TR322_24', 'TR322_12'), ('TR322_12_25', 'TR322_12', 'TR322_25'), ('TR322_12_25', 'TR322_25', 'TR322_12'), ('TR322_1_6', 'TR322_1', 'TR322_6'), ('TR322_1_6', 'TR322_6', 'TR322_1'), ('TR322_1_7', 'TR322_1', 'TR322_7'), ('TR322_1_7', 'TR322_7', 'TR322_1'), ('TR322_26_27', 'TR322_26', 'TR322_27'), ('TR322_26_27', 'TR322_27', 'TR322_26'), ('TR322_2_13', 'TR322_13', 'TR322_2'), ('TR322_2_13', 'TR322_2', 'TR322_13'), ('TR322_2_3', 'TR322_2', 'TR322_3'), ('TR322_2_3', 'TR322_3', 'TR322_2'), ('TR322_3_8', 'TR322_3', 'TR322_8'), ('TR322_3_8', 'TR322_8', 'TR322_3'), ('TR322_4_14', 'TR322_14', 'TR322_4'), ('TR322_4_14', 'TR322_4', 'TR322_14'), ('TR322_4_5', 'TR322_4', 'TR322_5'), ('TR322_4_5', 'TR322_5', 'TR322_4'), ('TR322_5_15', 'TR322_15', 'TR322_5'), ('TR322_5_15', 'TR322_5', 'TR322_15'), ('TR322_6_16', 'TR322_16', 'TR322_6'), ('TR322_6_16', 'TR322_6', 'TR322_16'), ('TR322_7_17', 'TR322_17', 'TR322_7'), ('TR322_7_17', 'TR322_7', 'TR322_17'), ('TR322_8_10', 'TR322_10', 'TR322_8'), ('TR322_8_10', 'TR322_8', 'TR322_10'), ('TR322_8_18', 'TR322_18', 'TR322_8'), ('TR322_8_18', 'TR322_8', 'TR322_18'), ('TR322_8_9', 'TR322_8', 'TR322_9'), ('TR322_8_9', 'TR322_9', 'TR322_8'), ('TR322_9_11', 'TR322_11', 'TR322_9'), ('TR322_9_11', 'TR322_9', 'TR322_11'), ('TR322_9_19', 'TR322_19', 'TR322_9'), ('TR322_9_19', 'TR322_9', 'TR322_19'), ('TR322_9_20', 'TR322_20', 'TR322_9'), ('TR322_9_20', 'TR322_9', 'TR322_20'), ('TR323_1_2', 'TR323_1', 'TR323_2'), ('TR323_1_2', 'TR323_2', 'TR323_1'), ('TR323_1_3', 'TR323_1', 'TR323_3'), ('TR323_1_3', 'TR323_3', 'TR323_1'), ('TR323_1_4', 'TR323_1', 'TR323_4'), ('TR323_1_4', 'TR323_4', 'TR323_1'), ('TR323_1_5', 'TR323_1', 'TR323_5'), ('TR323_1_5', 'TR323_5', 'TR323_1'), ('TR323_2_6', 'TR323_2', 'TR323_6'), ('TR323_2_6', 'TR323_6', 'TR323_2'), ('TR323_3_7', 'TR323_3', 'TR323_7'), ('TR323_3_7', 'TR323_7', 'TR323_3'), ('TR323_4_10', 'TR323_10', 'TR323_4'), ('TR323_4_10', 'TR323_4', 'TR323_10'), ('TR323_4_8', 'TR323_4', 'TR323_8'), ('TR323_4_8', 'TR323_8', 'TR323_4'), ('TR323_4_9', 'TR323_4', 'TR323_9'), ('TR323_4_9', 'TR323_9', 'TR323_4'), ('TR323_6_11', 'TR323_11', 'TR323_6'), ('TR323_6_11', 'TR323_6', 'TR323_11'), ('TR323_6_12', 'TR323_12', 'TR323_6'), ('TR323_6_12', 'TR323_6', 'TR323_12'), ('TR323_6_13', 'TR323_13', 'TR323_6'), ('TR323_6_13', 'TR323_6', 'TR323_13'), ('TR323_7_14', 'TR323_14', 'TR323_7'), ('TR323_7_14', 'TR323_7', 'TR323_14'), ('TR323_7_15', 'TR323_15', 'TR323_7'), ('TR323_7_15', 'TR323_7', 'TR323_15'), ('TR323_7_16', 'TR323_16', 'TR323_7'), ('TR323_7_16', 'TR323_7', 'TR323_16'), ('TR324_1_2', 'TR324_1', 'TR324_2'), ('TR324_1_2', 'TR324_2', 'TR324_1'), ('TR324_1_5', 'TR324_1', 'TR324_5'), ('TR324_1_5', 'TR324_5', 'TR324_1'), ('TR324_2_3', 'TR324_2', 'TR324_3'), ('TR324_2_3', 'TR324_3', 'TR324_2'), ('TR324_2_4', 'TR324_2', 'TR324_4'), ('TR324_2_4', 'TR324_4', 'TR324_2'), ('TR324_3_6', 'TR324_3', 'TR324_6'), ('TR324_3_6', 'TR324_6', 'TR324_3'), ('TR324_4_7', 'TR324_4', 'TR324_7'), ('TR324_4_7', 'TR324_7', 'TR324_4'), ('TR325_10_12', 'TR325_10', 'TR325_12'), ('TR325_10_12', 'TR325_12', 'TR325_10'), ('TR325_10_13', 'TR325_10', 'TR325_13'), ('TR325_10_13', 'TR325_13', 'TR325_10'), ('TR325_12_14', 'TR325_12', 'TR325_14'), ('TR325_12_14', 'TR325_14', 'TR325_12'), ('TR325_1_2', 'TR325_1', 'TR325_2'), ('TR325_1_2', 'TR325_2', 'TR325_1'), ('TR325_1_4', 'TR325_1', 'TR325_4'), ('TR325_1_4', 'TR325_4', 'TR325_1'), ('TR325_4_6', 'TR325_4', 'TR325_6'), ('TR325_4_6', 'TR325_6', 'TR325_4'), ('TR325_5_7', 'TR325_5', 'TR325_7'), ('TR325_5_7', 'TR325_7', 'TR325_5'), ('TR325_5_8', 'TR325_5', 'TR325_8'), ('TR325_5_8', 'TR325_8', 'TR325_5'), ('TR325_6_9', 'TR325_6', 'TR325_9'), ('TR325_6_9', 'TR325_9', 'TR325_6'), ('TR325_8_11', 'TR325_11', 'TR325_8'), ('TR325_8_11', 'TR325_8', 'TR325_11'), ('TR326_1_2', 'TR326_1', 'TR326_2'), ('TR326_1_2', 'TR326_2', 'TR326_1'), ('TR326_1_3', 'TR326_1', 'TR326_3'), ('TR326_1_3', 'TR326_3', 'TR326_1'), ('TR326_1_4', 'TR326_1', 'TR326_4'), ('TR326_1_4', 'TR326_4', 'TR326_1'), ('TR326_1_5', 'TR326_1', 'TR326_5'), ('TR326_1_5', 'TR326_5', 'TR326_1'), ('TR326_2_3', 'TR326_2', 'TR326_3'), ('TR326_2_3', 'TR326_3', 'TR326_2'), ('TR326_2_6', 'TR326_2', 'TR326_6'), ('TR326_2_6', 'TR326_6', 'TR326_2'), ('TR326_2_7', 'TR326_2', 'TR326_7'), ('TR326_2_7', 'TR326_7', 'TR326_2'), ('TR327_19_24', 'TR327_19', 'TR327_24'), ('TR327_19_24', 'TR327_24', 'TR327_19'), ('TR327_19_27', 'TR327_19', 'TR327_27'), ('TR327_19_27', 'TR327_27', 'TR327_19'), ('TR327_1_6', 'TR327_1', 'TR327_6'), ('TR327_1_6', 'TR327_6', 'TR327_1'), ('TR327_1_9', 'TR327_1', 'TR327_9'), ('TR327_1_9', 'TR327_9', 'TR327_1'), ('TR327_20_21', 'TR327_20', 'TR327_21'), ('TR327_20_21', 'TR327_21', 'TR327_20'), ('TR327_20_28', 'TR327_20', 'TR327_28'), ('TR327_20_28', 'TR327_28', 'TR327_20'), ('TR327_21_29', 'TR327_21', 'TR327_29'), ('TR327_21_29', 'TR327_29', 'TR327_21'), ('TR327_22_23', 'TR327_22', 'TR327_23'), ('TR327_22_23', 'TR327_23', 'TR327_22'), ('TR327_22_30', 'TR327_22', 'TR327_30'), ('TR327_22_30', 'TR327_30', 'TR327_22'), ('TR327_23_26', 'TR327_23', 'TR327_26'), ('TR327_23_26', 'TR327_26', 'TR327_23'), ('TR327_24_25', 'TR327_24', 'TR327_25'), ('TR327_24_25', 'TR327_25', 'TR327_24'), ('TR327_25_31', 'TR327_25', 'TR327_31'), ('TR327_25_31', 'TR327_31', 'TR327_25'), ('TR327_25_32', 'TR327_25', 'TR327_32'), ('TR327_25_32', 'TR327_32', 'TR327_25'), ('TR327_25_33', 'TR327_25', 'TR327_33'), ('TR327_25_33', 'TR327_33', 'TR327_25'), ('TR327_26_34', 'TR327_26', 'TR327_34'), ('TR327_26_34', 'TR327_34', 'TR327_26'), ('TR327_26_35', 'TR327_26', 'TR327_35'), ('TR327_26_35', 'TR327_35', 'TR327_26'), ('TR327_26_36', 'TR327_26', 'TR327_36'), ('TR327_26_36', 'TR327_36', 'TR327_26'), ('TR327_2_10', 'TR327_10', 'TR327_2'), ('TR327_2_10', 'TR327_2', 'TR327_10'), ('TR327_2_3', 'TR327_2', 'TR327_3'), ('TR327_2_3', 'TR327_3', 'TR327_2'), ('TR327_37_42', 'TR327_37', 'TR327_42'), ('TR327_37_42', 'TR327_42', 'TR327_37'), ('TR327_37_45', 'TR327_37', 'TR327_45'), ('TR327_37_45', 'TR327_45', 'TR327_37'), ('TR327_38_39', 'TR327_38', 'TR327_39'), ('TR327_38_39', 'TR327_39', 'TR327_38'), ('TR327_38_46', 'TR327_38', 'TR327_46'), ('TR327_38_46', 'TR327_46', 'TR327_38'), ('TR327_39_47', 'TR327_39', 'TR327_47'), ('TR327_39_47', 'TR327_47', 'TR327_39'), ('TR327_3_8', 'TR327_3', 'TR327_8'), ('TR327_3_8', 'TR327_8', 'TR327_3'), ('TR327_40_41', 'TR327_40', 'TR327_41'), ('TR327_40_41', 'TR327_41', 'TR327_40'), ('TR327_40_48', 'TR327_40', 'TR327_48'), ('TR327_40_48', 'TR327_48', 'TR327_40'), ('TR327_41_49', 'TR327_41', 'TR327_49'), ('TR327_41_49', 'TR327_49', 'TR327_41'), ('TR327_42_43', 'TR327_42', 'TR327_43'), ('TR327_42_43', 'TR327_43', 'TR327_42'), ('TR327_43_44', 'TR327_43', 'TR327_44'), ('TR327_43_44', 'TR327_44', 'TR327_43'), ('TR327_43_50', 'TR327_43', 'TR327_50'), ('TR327_43_50', 'TR327_50', 'TR327_43'), ('TR327_43_51', 'TR327_43', 'TR327_51'), ('TR327_43_51', 'TR327_51', 'TR327_43'), ('TR327_44_52', 'TR327_44', 'TR327_52'), ('TR327_44_52', 'TR327_52', 'TR327_44'), ('TR327_44_53', 'TR327_44', 'TR327_53'), ('TR327_44_53', 'TR327_53', 'TR327_44'), ('TR327_44_54', 'TR327_44', 'TR327_54'), ('TR327_44_54', 'TR327_54', 'TR327_44'), ('TR327_4_11', 'TR327_11', 'TR327_4'), ('TR327_4_11', 'TR327_4', 'TR327_11'), ('TR327_4_5', 'TR327_4', 'TR327_5'), ('TR327_4_5', 'TR327_5', 'TR327_4'), ('TR327_55_60', 'TR327_55', 'TR327_60'), ('TR327_55_60', 'TR327_60', 'TR327_55'), ('TR327_55_63', 'TR327_55', 'TR327_63'), ('TR327_55_63', 'TR327_63', 'TR327_55'), ('TR327_56_57', 'TR327_56', 'TR327_57'), ('TR327_56_57', 'TR327_57', 'TR327_56'), ('TR327_56_64', 'TR327_56', 'TR327_64'), ('TR327_56_64', 'TR327_64', 'TR327_56'), ('TR327_57_65', 'TR327_57', 'TR327_65'), ('TR327_57_65', 'TR327_65', 'TR327_57'), ('TR327_58_59', 'TR327_58', 'TR327_59'), ('TR327_58_59', 'TR327_59', 'TR327_58'), ('TR327_58_62', 'TR327_58', 'TR327_62'), ('TR327_58_62', 'TR327_62', 'TR327_58'), ('TR327_59_66', 'TR327_59', 'TR327_66'), ('TR327_59_66', 'TR327_66', 'TR327_59'), ('TR327_5_12', 'TR327_12', 'TR327_5'), ('TR327_5_12', 'TR327_5', 'TR327_12'), ('TR327_60_61', 'TR327_60', 'TR327_61'), ('TR327_60_61', 'TR327_61', 'TR327_60'), ('TR327_61_67', 'TR327_61', 'TR327_67'), ('TR327_61_67', 'TR327_67', 'TR327_61'), ('TR327_61_68', 'TR327_61', 'TR327_68'), ('TR327_61_68', 'TR327_68', 'TR327_61'), ('TR327_61_69', 'TR327_61', 'TR327_69'), ('TR327_61_69', 'TR327_69', 'TR327_61'), ('TR327_62_70', 'TR327_62', 'TR327_70'), ('TR327_62_70', 'TR327_70', 'TR327_62'), ('TR327_62_71', 'TR327_62', 'TR327_71'), ('TR327_62_71', 'TR327_71', 'TR327_62'), ('TR327_62_72', 'TR327_62', 'TR327_72'), ('TR327_62_72', 'TR327_72', 'TR327_62'), ('TR327_6_7', 'TR327_6', 'TR327_7'), ('TR327_6_7', 'TR327_7', 'TR327_6'), ('TR327_7_13', 'TR327_13', 'TR327_7'), ('TR327_7_13', 'TR327_7', 'TR327_13'), ('TR327_7_14', 'TR327_14', 'TR327_7'), ('TR327_7_14', 'TR327_7', 'TR327_14'), ('TR327_7_15', 'TR327_15', 'TR327_7'), ('TR327_7_15', 'TR327_7', 'TR327_15'), ('TR327_8_16', 'TR327_16', 'TR327_8'), ('TR327_8_16', 'TR327_8', 'TR327_16'), ('TR327_8_17', 'TR327_17', 'TR327_8'), ('TR327_8_17', 'TR327_8', 'TR327_17'), ('TR327_8_18', 'TR327_18', 'TR327_8'), ('TR327_8_18', 'TR327_8', 'TR327_18'), ('TR328_1_2', 'TR328_1', 'TR328_2'), ('TR328_1_2', 'TR328_2', 'TR328_1'), ('TR328_1_3', 'TR328_1', 'TR328_3'), ('TR328_1_3', 'TR328_3', 'TR328_1'), ('TR328_2_5', 'TR328_2', 'TR328_5'), ('TR328_2_5', 'TR328_5', 'TR328_2'), ('TR328_3_6', 'TR328_3', 'TR328_6'), ('TR328_3_6', 'TR328_6', 'TR328_3'), ('TR328_3_7', 'TR328_3', 'TR328_7'), ('TR328_3_7', 'TR328_7', 'TR328_3'), ('TR328_5_10', 'TR328_10', 'TR328_5'), ('TR328_5_10', 'TR328_5', 'TR328_10'), ('TR328_5_8', 'TR328_5', 'TR328_8'), ('TR328_5_8', 'TR328_8', 'TR328_5'), ('TR328_5_9', 'TR328_5', 'TR328_9'), ('TR328_5_9', 'TR328_9', 'TR328_5'), ('TR329_1_2', 'TR329_1', 'TR329_2'), ('TR329_1_2', 'TR329_2', 'TR329_1'), ('TR329_1_3', 'TR329_1', 'TR329_3'), ('TR329_1_3', 'TR329_3', 'TR329_1'), ('TR329_1_6', 'TR329_1', 'TR329_6'), ('TR329_1_6', 'TR329_6', 'TR329_1'), ('TR329_1_7', 'TR329_1', 'TR329_7'), ('TR329_1_7', 'TR329_7', 'TR329_1'), ('TR329_2_10', 'TR329_10', 'TR329_2'), ('TR329_2_10', 'TR329_2', 'TR329_10'), ('TR329_2_8', 'TR329_2', 'TR329_8'), ('TR329_2_8', 'TR329_8', 'TR329_2'), ('TR329_2_9', 'TR329_2', 'TR329_9'), ('TR329_2_9', 'TR329_9', 'TR329_2'), ('TR329_3_11', 'TR329_11', 'TR329_3'), ('TR329_3_11', 'TR329_3', 'TR329_11'), ('TR329_3_4', 'TR329_3', 'TR329_4'), ('TR329_3_4', 'TR329_4', 'TR329_3'), ('TR329_3_5', 'TR329_3', 'TR329_5'), ('TR329_3_5', 'TR329_5', 'TR329_3'), ('TR329_4_12', 'TR329_12', 'TR329_4'), ('TR329_4_12', 'TR329_4', 'TR329_12'), ('TR329_4_13', 'TR329_13', 'TR329_4'), ('TR329_4_13', 'TR329_4', 'TR329_13'), ('TR329_4_5', 'TR329_4', 'TR329_5'), ('TR329_4_5', 'TR329_5', 'TR329_4'), ('TR330_10_12', 'TR330_10', 'TR330_12'), ('TR330_10_12', 'TR330_12', 'TR330_10'), ('TR330_10_26', 'TR330_10', 'TR330_26'), ('TR330_10_26', 'TR330_26', 'TR330_10'), ('TR330_11_13', 'TR330_11', 'TR330_13'), ('TR330_11_13', 'TR330_13', 'TR330_11'), ('TR330_11_27', 'TR330_11', 'TR330_27'), ('TR330_11_27', 'TR330_27', 'TR330_11'), ('TR330_11_28', 'TR330_11', 'TR330_28'), ('TR330_11_28', 'TR330_28', 'TR330_11'), ('TR330_12_14', 'TR330_12', 'TR330_14'), ('TR330_12_14', 'TR330_14', 'TR330_12'), ('TR330_13_29', 'TR330_13', 'TR330_29'), ('TR330_13_29', 'TR330_29', 'TR330_13'), ('TR330_13_30', 'TR330_13', 'TR330_30'), ('TR330_13_30', 'TR330_30', 'TR330_13'), ('TR330_13_31', 'TR330_13', 'TR330_31'), ('TR330_13_31', 'TR330_31', 'TR330_13'), ('TR330_14_32', 'TR330_14', 'TR330_32'), ('TR330_14_32', 'TR330_32', 'TR330_14'), ('TR330_1_15', 'TR330_1', 'TR330_15'), ('TR330_1_15', 'TR330_15', 'TR330_1'), ('TR330_1_16', 'TR330_1', 'TR330_16'), ('TR330_1_16', 'TR330_16', 'TR330_1'), ('TR330_1_2', 'TR330_1', 'TR330_2'), ('TR330_1_2', 'TR330_2', 'TR330_1'), ('TR330_1_3', 'TR330_1', 'TR330_3'), ('TR330_1_3', 'TR330_3', 'TR330_1'), ('TR330_2_17', 'TR330_17', 'TR330_2'), ('TR330_2_17', 'TR330_2', 'TR330_17'), ('TR330_2_18', 'TR330_18', 'TR330_2'), ('TR330_2_18', 'TR330_2', 'TR330_18'), ('TR330_2_4', 'TR330_2', 'TR330_4'), ('TR330_2_4', 'TR330_4', 'TR330_2'), ('TR330_3_6', 'TR330_3', 'TR330_6'), ('TR330_3_6', 'TR330_6', 'TR330_3'), ('TR330_4_19', 'TR330_19', 'TR330_4'), ('TR330_4_19', 'TR330_4', 'TR330_19'), ('TR330_4_20', 'TR330_20', 'TR330_4'), ('TR330_4_20', 'TR330_4', 'TR330_20'), ('TR330_4_7', 'TR330_4', 'TR330_7'), ('TR330_4_7', 'TR330_7', 'TR330_4'), ('TR330_5_8', 'TR330_5', 'TR330_8'), ('TR330_5_8', 'TR330_8', 'TR330_5'), ('TR330_5_9', 'TR330_5', 'TR330_9'), ('TR330_5_9', 'TR330_9', 'TR330_5'), ('TR330_6_21', 'TR330_21', 'TR330_6'), ('TR330_6_21', 'TR330_6', 'TR330_21'), ('TR330_7_11', 'TR330_11', 'TR330_7'), ('TR330_7_11', 'TR330_7', 'TR330_11'), ('TR330_7_22', 'TR330_22', 'TR330_7'), ('TR330_7_22', 'TR330_7', 'TR330_22'), ('TR330_7_23', 'TR330_23', 'TR330_7'), ('TR330_7_23', 'TR330_7', 'TR330_23'), ('TR330_8_24', 'TR330_24', 'TR330_8'), ('TR330_8_24', 'TR330_8', 'TR330_24'), ('TR330_9_25', 'TR330_25', 'TR330_9'), ('TR330_9_25', 'TR330_9', 'TR330_25'), ('TR331_1_4', 'TR331_1', 'TR331_4'), ('TR331_1_4', 'TR331_4', 'TR331_1'), ('TR331_1_6', 'TR331_1', 'TR331_6'), ('TR331_1_6', 'TR331_6', 'TR331_1'), ('TR331_2_3', 'TR331_2', 'TR331_3'), ('TR331_2_3', 'TR331_3', 'TR331_2'), ('TR331_2_7', 'TR331_2', 'TR331_7'), ('TR331_2_7', 'TR331_7', 'TR331_2'), ('TR331_3_8', 'TR331_3', 'TR331_8'), ('TR331_3_8', 'TR331_8', 'TR331_3'), ('TR332_10_15', 'TR332_10', 'TR332_15'), ('TR332_10_15', 'TR332_15', 'TR332_10'), ('TR332_1_11', 'TR332_1', 'TR332_11'), ('TR332_1_11', 'TR332_11', 'TR332_1'), ('TR332_1_2', 'TR332_1', 'TR332_2'), ('TR332_1_2', 'TR332_2', 'TR332_1'), ('TR332_2_4', 'TR332_2', 'TR332_4'), ('TR332_2_4', 'TR332_4', 'TR332_2'), ('TR332_3_5', 'TR332_3', 'TR332_5'), ('TR332_3_5', 'TR332_5', 'TR332_3'), ('TR332_4_6', 'TR332_4', 'TR332_6'), ('TR332_4_6', 'TR332_6', 'TR332_4'), ('TR332_5_7', 'TR332_5', 'TR332_7'), ('TR332_5_7', 'TR332_7', 'TR332_5'), ('TR332_6_8', 'TR332_6', 'TR332_8'), ('TR332_6_8', 'TR332_8', 'TR332_6'), ('TR332_7_12', 'TR332_12', 'TR332_7'), ('TR332_7_12', 'TR332_7', 'TR332_12'), ('TR332_8_13', 'TR332_13', 'TR332_8'), ('TR332_8_13', 'TR332_8', 'TR332_13'), ('TR332_9_10', 'TR332_10', 'TR332_9'), ('TR332_9_10', 'TR332_9', 'TR332_10'), ('TR332_9_14', 'TR332_14', 'TR332_9'), ('TR332_9_14', 'TR332_9', 'TR332_14'), ('TR333_10_24', 'TR333_10', 'TR333_24'), ('TR333_10_24', 'TR333_24', 'TR333_10'), ('TR333_11_14', 'TR333_11', 'TR333_14'), ('TR333_11_14', 'TR333_14', 'TR333_11'), ('TR333_11_25', 'TR333_11', 'TR333_25'), ('TR333_11_25', 'TR333_25', 'TR333_11'), ('TR333_12_15', 'TR333_12', 'TR333_15'), ('TR333_12_15', 'TR333_15', 'TR333_12'), ('TR333_13_26', 'TR333_13', 'TR333_26'), ('TR333_13_26', 'TR333_26', 'TR333_13'), ('TR333_14_27', 'TR333_14', 'TR333_27'), ('TR333_14_27', 'TR333_27', 'TR333_14'), ('TR333_15_28', 'TR333_15', 'TR333_28'), ('TR333_15_28', 'TR333_28', 'TR333_15'), ('TR333_16_17', 'TR333_16', 'TR333_17'), ('TR333_16_17', 'TR333_17', 'TR333_16'), ('TR333_16_29', 'TR333_16', 'TR333_29'), ('TR333_16_29', 'TR333_29', 'TR333_16'), ('TR333_17_30', 'TR333_17', 'TR333_30'), ('TR333_17_30', 'TR333_30', 'TR333_17'), ('TR333_1_18', 'TR333_1', 'TR333_18'), ('TR333_1_18', 'TR333_18', 'TR333_1'), ('TR333_1_2', 'TR333_1', 'TR333_2'), ('TR333_1_2', 'TR333_2', 'TR333_1'), ('TR333_1_3', 'TR333_1', 'TR333_3'), ('TR333_1_3', 'TR333_3', 'TR333_1'), ('TR333_2_5', 'TR333_2', 'TR333_5'), ('TR333_2_5', 'TR333_5', 'TR333_2'), ('TR333_3_7', 'TR333_3', 'TR333_7'), ('TR333_3_7', 'TR333_7', 'TR333_3'), ('TR333_4_19', 'TR333_19', 'TR333_4'), ('TR333_4_19', 'TR333_4', 'TR333_19'), ('TR333_4_8', 'TR333_4', 'TR333_8'), ('TR333_4_8', 'TR333_8', 'TR333_4'), ('TR333_5_20', 'TR333_20', 'TR333_5'), ('TR333_5_20', 'TR333_5', 'TR333_20'), ('TR333_6_10', 'TR333_10', 'TR333_6'), ('TR333_6_10', 'TR333_6', 'TR333_10'), ('TR333_6_21', 'TR333_21', 'TR333_6'), ('TR333_6_21', 'TR333_6', 'TR333_21'), ('TR333_7_22', 'TR333_22', 'TR333_7'), ('TR333_7_22', 'TR333_7', 'TR333_22'), ('TR333_8_13', 'TR333_13', 'TR333_8'), ('TR333_8_13', 'TR333_8', 'TR333_13'), ('TR333_9_12', 'TR333_12', 'TR333_9'), ('TR333_9_12', 'TR333_9', 'TR333_12'), ('TR333_9_23', 'TR333_23', 'TR333_9'), ('TR333_9_23', 'TR333_9', 'TR333_23'), ('TR334_10_11', 'TR334_10', 'TR334_11'), ('TR334_10_11', 'TR334_11', 'TR334_10'), ('TR334_11_16', 'TR334_11', 'TR334_16'), ('TR334_11_16', 'TR334_16', 'TR334_11'), ('TR334_11_17', 'TR334_11', 'TR334_17'), ('TR334_11_17', 'TR334_17', 'TR334_11'), ('TR334_1_2', 'TR334_1', 'TR334_2'), ('TR334_1_2', 'TR334_2', 'TR334_1'), ('TR334_1_4', 'TR334_1', 'TR334_4'), ('TR334_1_4', 'TR334_4', 'TR334_1'), ('TR334_4_6', 'TR334_4', 'TR334_6'), ('TR334_4_6', 'TR334_6', 'TR334_4'), ('TR334_5_12', 'TR334_12', 'TR334_5'), ('TR334_5_12', 'TR334_5', 'TR334_12'), ('TR334_5_7', 'TR334_5', 'TR334_7'), ('TR334_5_7', 'TR334_7', 'TR334_5'), ('TR334_6_13', 'TR334_13', 'TR334_6'), ('TR334_6_13', 'TR334_6', 'TR334_13'), ('TR334_7_9', 'TR334_7', 'TR334_9'), ('TR334_7_9', 'TR334_9', 'TR334_7'), ('TR334_8_10', 'TR334_10', 'TR334_8'), ('TR334_8_10', 'TR334_8', 'TR334_10'), ('TR334_8_14', 'TR334_14', 'TR334_8'), ('TR334_8_14', 'TR334_8', 'TR334_14'), ('TR334_9_15', 'TR334_15', 'TR334_9'), ('TR334_9_15', 'TR334_9', 'TR334_15'), ('TR335_10_38', 'TR335_10', 'TR335_38'), ('TR335_10_38', 'TR335_38', 'TR335_10'), ('TR335_11_12', 'TR335_11', 'TR335_12'), ('TR335_11_12', 'TR335_12', 'TR335_11'), ('TR335_11_15', 'TR335_11', 'TR335_15'), ('TR335_11_15', 'TR335_15', 'TR335_11'), ('TR335_12_39', 'TR335_12', 'TR335_39'), ('TR335_12_39', 'TR335_39', 'TR335_12'), ('TR335_13_14', 'TR335_13', 'TR335_14'), ('TR335_13_14', 'TR335_14', 'TR335_13'), ('TR335_14_26', 'TR335_14', 'TR335_26'), ('TR335_14_26', 'TR335_26', 'TR335_14'), ('TR335_15_16', 'TR335_15', 'TR335_16'), ('TR335_15_16', 'TR335_16', 'TR335_15'), ('TR335_15_40', 'TR335_15', 'TR335_40'), ('TR335_15_40', 'TR335_40', 'TR335_15'), ('TR335_16_21', 'TR335_16', 'TR335_21'), ('TR335_16_21', 'TR335_21', 'TR335_16'), ('TR335_17_18', 'TR335_17', 'TR335_18'), ('TR335_17_18', 'TR335_18', 'TR335_17'), ('TR335_17_22', 'TR335_17', 'TR335_22'), ('TR335_17_22', 'TR335_22', 'TR335_17'), ('TR335_18_41', 'TR335_18', 'TR335_41'), ('TR335_18_41', 'TR335_41', 'TR335_18'), ('TR335_19_20', 'TR335_19', 'TR335_20'), ('TR335_19_20', 'TR335_20', 'TR335_19'), ('TR335_19_23', 'TR335_19', 'TR335_23'), ('TR335_19_23', 'TR335_23', 'TR335_19'), ('TR335_1_31', 'TR335_1', 'TR335_31'), ('TR335_1_31', 'TR335_31', 'TR335_1'), ('TR335_1_6', 'TR335_1', 'TR335_6'), ('TR335_1_6', 'TR335_6', 'TR335_1'), ('TR335_20_42', 'TR335_20', 'TR335_42'), ('TR335_20_42', 'TR335_42', 'TR335_20'), ('TR335_21_43', 'TR335_21', 'TR335_43'), ('TR335_21_43', 'TR335_43', 'TR335_21'), ('TR335_22_28', 'TR335_22', 'TR335_28'), ('TR335_22_28', 'TR335_28', 'TR335_22'), ('TR335_23_30', 'TR335_23', 'TR335_30'), ('TR335_23_30', 'TR335_30', 'TR335_23'), ('TR335_2_3', 'TR335_2', 'TR335_3'), ('TR335_2_3', 'TR335_3', 'TR335_2'), ('TR335_2_32', 'TR335_2', 'TR335_32'), ('TR335_2_32', 'TR335_32', 'TR335_2'), ('TR335_3_33', 'TR335_3', 'TR335_33'), ('TR335_3_33', 'TR335_33', 'TR335_3'), ('TR335_4_34', 'TR335_34', 'TR335_4'), ('TR335_4_34', 'TR335_4', 'TR335_34'), ('TR335_4_5', 'TR335_4', 'TR335_5'), ('TR335_4_5', 'TR335_5', 'TR335_4'), ('TR335_5_7', 'TR335_5', 'TR335_7'), ('TR335_5_7', 'TR335_7', 'TR335_5'), ('TR335_6_35', 'TR335_35', 'TR335_6'), ('TR335_6_35', 'TR335_6', 'TR335_35'), ('TR335_7_36', 'TR335_36', 'TR335_7'), ('TR335_7_36', 'TR335_7', 'TR335_36'), ('TR335_7_8', 'TR335_7', 'TR335_8'), ('TR335_7_8', 'TR335_8', 'TR335_7'), ('TR335_8_13', 'TR335_13', 'TR335_8'), ('TR335_8_13', 'TR335_8', 'TR335_13'), ('TR335_9_10', 'TR335_10', 'TR335_9'), ('TR335_9_10', 'TR335_9', 'TR335_10'), ('TR335_9_37', 'TR335_37', 'TR335_9'), ('TR335_9_37', 'TR335_9', 'TR335_37'), ('TR336_10_11', 'TR336_10', 'TR336_11'), ('TR336_10_11', 'TR336_11', 'TR336_10'), ('TR336_10_12', 'TR336_10', 'TR336_12'), ('TR336_10_12', 'TR336_12', 'TR336_10'), ('TR336_10_15', 'TR336_10', 'TR336_15'), ('TR336_10_15', 'TR336_15', 'TR336_10'), ('TR336_12_31', 'TR336_12', 'TR336_31'), ('TR336_12_31', 'TR336_31', 'TR336_12'), ('TR336_12_32', 'TR336_12', 'TR336_32'), ('TR336_12_32', 'TR336_32', 'TR336_12'), ('TR336_12_33', 'TR336_12', 'TR336_33'), ('TR336_12_33', 'TR336_33', 'TR336_12'), ('TR336_13_14', 'TR336_13', 'TR336_14'), ('TR336_13_14', 'TR336_14', 'TR336_13'), ('TR336_15_34', 'TR336_15', 'TR336_34'), ('TR336_15_34', 'TR336_34', 'TR336_15'), ('TR336_15_35', 'TR336_15', 'TR336_35'), ('TR336_15_35', 'TR336_35', 'TR336_15'), ('TR336_15_36', 'TR336_15', 'TR336_36'), ('TR336_15_36', 'TR336_36', 'TR336_15'), ('TR336_19_24', 'TR336_19', 'TR336_24'), ('TR336_19_24', 'TR336_24', 'TR336_19'), ('TR336_1_19', 'TR336_1', 'TR336_19'), ('TR336_1_19', 'TR336_19', 'TR336_1'), ('TR336_1_2', 'TR336_1', 'TR336_2'), ('TR336_1_2', 'TR336_2', 'TR336_1'), ('TR336_20_21', 'TR336_20', 'TR336_21'), ('TR336_20_21', 'TR336_21', 'TR336_20'), ('TR336_20_37', 'TR336_20', 'TR336_37'), ('TR336_20_37', 'TR336_37', 'TR336_20'), ('TR336_21_38', 'TR336_21', 'TR336_38'), ('TR336_21_38', 'TR336_38', 'TR336_21'), ('TR336_22_23', 'TR336_22', 'TR336_23'), ('TR336_22_23', 'TR336_23', 'TR336_22'), ('TR336_22_39', 'TR336_22', 'TR336_39'), ('TR336_22_39', 'TR336_39', 'TR336_22'), ('TR336_23_40', 'TR336_23', 'TR336_40'), ('TR336_23_40', 'TR336_40', 'TR336_23'), ('TR336_24_41', 'TR336_24', 'TR336_41'), ('TR336_24_41', 'TR336_41', 'TR336_24'), ('TR336_2_25', 'TR336_2', 'TR336_25'), ('TR336_2_25', 'TR336_25', 'TR336_2'), ('TR336_2_26', 'TR336_2', 'TR336_26'), ('TR336_2_26', 'TR336_26', 'TR336_2'), ('TR336_2_3', 'TR336_2', 'TR336_3'), ('TR336_2_3', 'TR336_3', 'TR336_2'), ('TR336_3_4', 'TR336_3', 'TR336_4'), ('TR336_3_4', 'TR336_4', 'TR336_3'), ('TR336_4_27', 'TR336_27', 'TR336_4'), ('TR336_4_27', 'TR336_4', 'TR336_27'), ('TR336_4_5', 'TR336_4', 'TR336_5'), ('TR336_4_5', 'TR336_5', 'TR336_4'), ('TR336_5_28', 'TR336_28', 'TR336_5'), ('TR336_5_28', 'TR336_5', 'TR336_28'), ('TR336_5_6', 'TR336_5', 'TR336_6'), ('TR336_5_6', 'TR336_6', 'TR336_5'), ('TR336_5_8', 'TR336_5', 'TR336_8'), ('TR336_5_8', 'TR336_8', 'TR336_5'), ('TR336_6_7', 'TR336_6', 'TR336_7'), ('TR336_6_7', 'TR336_7', 'TR336_6'), ('TR336_7_8', 'TR336_7', 'TR336_8'), ('TR336_7_8', 'TR336_8', 'TR336_7'), ('TR336_7_9', 'TR336_7', 'TR336_9'), ('TR336_7_9', 'TR336_9', 'TR336_7'), ('TR336_8_11', 'TR336_11', 'TR336_8'), ('TR336_8_11', 'TR336_8', 'TR336_11'), ('TR336_8_29', 'TR336_29', 'TR336_8'), ('TR336_8_29', 'TR336_8', 'TR336_29'), ('TR336_9_10', 'TR336_10', 'TR336_9'), ('TR336_9_10', 'TR336_9', 'TR336_10'), ('TR336_9_13', 'TR336_13', 'TR336_9'), ('TR336_9_13', 'TR336_9', 'TR336_13'), ('TR336_9_30', 'TR336_30', 'TR336_9'), ('TR336_9_30', 'TR336_9', 'TR336_30'), ('TR337_10_11', 'TR337_10', 'TR337_11'), ('TR337_10_11', 'TR337_11', 'TR337_10'), ('TR337_11_12', 'TR337_11', 'TR337_12'), ('TR337_11_12', 'TR337_12', 'TR337_11'), ('TR337_11_18', 'TR337_11', 'TR337_18'), ('TR337_11_18', 'TR337_18', 'TR337_11'), ('TR337_12_13', 'TR337_12', 'TR337_13'), ('TR337_12_13', 'TR337_13', 'TR337_12'), ('TR337_13_19', 'TR337_13', 'TR337_19'), ('TR337_13_19', 'TR337_19', 'TR337_13'), ('TR337_13_20', 'TR337_13', 'TR337_20'), ('TR337_13_20', 'TR337_20', 'TR337_13'), ('TR337_1_2', 'TR337_1', 'TR337_2'), ('TR337_1_2', 'TR337_2', 'TR337_1'), ('TR337_1_4', 'TR337_1', 'TR337_4'), ('TR337_1_4', 'TR337_4', 'TR337_1'), ('TR337_4_5', 'TR337_4', 'TR337_5'), ('TR337_4_5', 'TR337_5', 'TR337_4'), ('TR337_5_7', 'TR337_5', 'TR337_7'), ('TR337_5_7', 'TR337_7', 'TR337_5'), ('TR337_6_15', 'TR337_15', 'TR337_6'), ('TR337_6_15', 'TR337_6', 'TR337_15'), ('TR337_6_8', 'TR337_6', 'TR337_8'), ('TR337_6_8', 'TR337_8', 'TR337_6'), ('TR337_7_9', 'TR337_7', 'TR337_9'), ('TR337_7_9', 'TR337_9', 'TR337_7'), ('TR337_8_16', 'TR337_16', 'TR337_8'), ('TR337_8_16', 'TR337_8', 'TR337_16'), ('TR337_9_17', 'TR337_17', 'TR337_9'), ('TR337_9_17', 'TR337_9', 'TR337_17'), ('TR338_10_11', 'TR338_10', 'TR338_11'), ('TR338_10_11', 'TR338_11', 'TR338_10'), ('TR338_11_12', 'TR338_11', 'TR338_12'), ('TR338_11_12', 'TR338_12', 'TR338_11'), ('TR338_11_22', 'TR338_11', 'TR338_22'), ('TR338_11_22', 'TR338_22', 'TR338_11'), ('TR338_11_59', 'TR338_11', 'TR338_59'), ('TR338_11_59', 'TR338_59', 'TR338_11'), ('TR338_120_121', 'TR338_120', 'TR338_121'), ('TR338_120_121', 'TR338_121', 'TR338_120'), ('TR338_120_139', 'TR338_120', 'TR338_139'), ('TR338_120_139', 'TR338_139', 'TR338_120'), ('TR338_121_122', 'TR338_121', 'TR338_122'), ('TR338_121_122', 'TR338_122', 'TR338_121'), ('TR338_121_140', 'TR338_121', 'TR338_140'), ('TR338_121_140', 'TR338_140', 'TR338_121'), ('TR338_121_141', 'TR338_121', 'TR338_141'), ('TR338_121_141', 'TR338_141', 'TR338_121'), ('TR338_122_123', 'TR338_122', 'TR338_123'), ('TR338_122_123', 'TR338_123', 'TR338_122'), ('TR338_122_142', 'TR338_122', 'TR338_142'), ('TR338_122_142', 'TR338_142', 'TR338_122'), ('TR338_122_143', 'TR338_122', 'TR338_143'), ('TR338_122_143', 'TR338_143', 'TR338_122'), ('TR338_123_124', 'TR338_123', 'TR338_124'), ('TR338_123_124', 'TR338_124', 'TR338_123'), ('TR338_123_144', 'TR338_123', 'TR338_144'), ('TR338_123_144', 'TR338_144', 'TR338_123'), ('TR338_123_145', 'TR338_123', 'TR338_145'), ('TR338_123_145', 'TR338_145', 'TR338_123'), ('TR338_124_125', 'TR338_124', 'TR338_125'), ('TR338_124_125', 'TR338_125', 'TR338_124'), ('TR338_124_146', 'TR338_124', 'TR338_146'), ('TR338_124_146', 'TR338_146', 'TR338_124'), ('TR338_124_147', 'TR338_124', 'TR338_147'), ('TR338_124_147', 'TR338_147', 'TR338_124'), ('TR338_125_126', 'TR338_125', 'TR338_126'), ('TR338_125_126', 'TR338_126', 'TR338_125'), ('TR338_125_148', 'TR338_125', 'TR338_148'), ('TR338_125_148', 'TR338_148', 'TR338_125'), ('TR338_125_149', 'TR338_125', 'TR338_149'), ('TR338_125_149', 'TR338_149', 'TR338_125'), ('TR338_126_127', 'TR338_126', 'TR338_127'), ('TR338_126_127', 'TR338_127', 'TR338_126'), ('TR338_126_150', 'TR338_126', 'TR338_150'), ('TR338_126_150', 'TR338_150', 'TR338_126'), ('TR338_126_151', 'TR338_126', 'TR338_151'), ('TR338_126_151', 'TR338_151', 'TR338_126'), ('TR338_127_128', 'TR338_127', 'TR338_128'), ('TR338_127_128', 'TR338_128', 'TR338_127'), ('TR338_127_152', 'TR338_127', 'TR338_152'), ('TR338_127_152', 'TR338_152', 'TR338_127'), ('TR338_127_153', 'TR338_127', 'TR338_153'), ('TR338_127_153', 'TR338_153', 'TR338_127'), ('TR338_128_129', 'TR338_128', 'TR338_129'), ('TR338_128_129', 'TR338_129', 'TR338_128'), ('TR338_128_154', 'TR338_128', 'TR338_154'), ('TR338_128_154', 'TR338_154', 'TR338_128'), ('TR338_128_155', 'TR338_128', 'TR338_155'), ('TR338_128_155', 'TR338_155', 'TR338_128'), ('TR338_129_130', 'TR338_129', 'TR338_130'), ('TR338_129_130', 'TR338_130', 'TR338_129'), ('TR338_129_156', 'TR338_129', 'TR338_156'), ('TR338_129_156', 'TR338_156', 'TR338_129'), ('TR338_129_157', 'TR338_129', 'TR338_157'), ('TR338_129_157', 'TR338_157', 'TR338_129'), ('TR338_12_13', 'TR338_12', 'TR338_13'), ('TR338_12_13', 'TR338_13', 'TR338_12'), ('TR338_12_20', 'TR338_12', 'TR338_20'), ('TR338_12_20', 'TR338_20', 'TR338_12'), ('TR338_12_23', 'TR338_12', 'TR338_23'), ('TR338_12_23', 'TR338_23', 'TR338_12'), ('TR338_130_131', 'TR338_130', 'TR338_131'), ('TR338_130_131', 'TR338_131', 'TR338_130'), ('TR338_130_158', 'TR338_130', 'TR338_158'), ('TR338_130_158', 'TR338_158', 'TR338_130'), ('TR338_130_159', 'TR338_130', 'TR338_159'), ('TR338_130_159', 'TR338_159', 'TR338_130'), ('TR338_131_132', 'TR338_131', 'TR338_132'), ('TR338_131_132', 'TR338_132', 'TR338_131'), ('TR338_131_160', 'TR338_131', 'TR338_160'), ('TR338_131_160', 'TR338_160', 'TR338_131'), ('TR338_131_161', 'TR338_131', 'TR338_161'), ('TR338_131_161', 'TR338_161', 'TR338_131'), ('TR338_132_133', 'TR338_132', 'TR338_133'), ('TR338_132_133', 'TR338_133', 'TR338_132'), ('TR338_132_162', 'TR338_132', 'TR338_162'), ('TR338_132_162', 'TR338_162', 'TR338_132'), ('TR338_132_163', 'TR338_132', 'TR338_163'), ('TR338_132_163', 'TR338_163', 'TR338_132'), ('TR338_133_134', 'TR338_133', 'TR338_134'), ('TR338_133_134', 'TR338_134', 'TR338_133'), ('TR338_133_164', 'TR338_133', 'TR338_164'), ('TR338_133_164', 'TR338_164', 'TR338_133'), ('TR338_133_165', 'TR338_133', 'TR338_165'), ('TR338_133_165', 'TR338_165', 'TR338_133'), ('TR338_134_135', 'TR338_134', 'TR338_135'), ('TR338_134_135', 'TR338_135', 'TR338_134'), ('TR338_134_166', 'TR338_134', 'TR338_166'), ('TR338_134_166', 'TR338_166', 'TR338_134'), ('TR338_134_167', 'TR338_134', 'TR338_167'), ('TR338_134_167', 'TR338_167', 'TR338_134'), ('TR338_135_136', 'TR338_135', 'TR338_136'), ('TR338_135_136', 'TR338_136', 'TR338_135'), ('TR338_135_168', 'TR338_135', 'TR338_168'), ('TR338_135_168', 'TR338_168', 'TR338_135'), ('TR338_135_169', 'TR338_135', 'TR338_169'), ('TR338_135_169', 'TR338_169', 'TR338_135'), ('TR338_136_137', 'TR338_136', 'TR338_137'), ('TR338_136_137', 'TR338_137', 'TR338_136'), ('TR338_136_170', 'TR338_136', 'TR338_170'), ('TR338_136_170', 'TR338_170', 'TR338_136'), ('TR338_136_171', 'TR338_136', 'TR338_171'), ('TR338_136_171', 'TR338_171', 'TR338_136'), ('TR338_137_172', 'TR338_137', 'TR338_172'), ('TR338_137_172', 'TR338_172', 'TR338_137'), ('TR338_137_173', 'TR338_137', 'TR338_173'), ('TR338_137_173', 'TR338_173', 'TR338_137'), ('TR338_137_174', 'TR338_137', 'TR338_174'), ('TR338_137_174', 'TR338_174', 'TR338_137'), ('TR338_13_14', 'TR338_13', 'TR338_14'), ('TR338_13_14', 'TR338_14', 'TR338_13'), ('TR338_13_19', 'TR338_13', 'TR338_19'), ('TR338_13_19', 'TR338_19', 'TR338_13'), ('TR338_13_60', 'TR338_13', 'TR338_60'), ('TR338_13_60', 'TR338_60', 'TR338_13'), ('TR338_14_17', 'TR338_14', 'TR338_17'), ('TR338_14_17', 'TR338_17', 'TR338_14'), ('TR338_14_61', 'TR338_14', 'TR338_61'), ('TR338_14_61', 'TR338_61', 'TR338_14'), ('TR338_17_62', 'TR338_17', 'TR338_62'), ('TR338_17_62', 'TR338_62', 'TR338_17'), ('TR338_17_63', 'TR338_17', 'TR338_63'), ('TR338_17_63', 'TR338_63', 'TR338_17'), ('TR338_17_64', 'TR338_17', 'TR338_64'), ('TR338_17_64', 'TR338_64', 'TR338_17'), ('TR338_18_65', 'TR338_18', 'TR338_65'), ('TR338_18_65', 'TR338_65', 'TR338_18'), ('TR338_19_66', 'TR338_19', 'TR338_66'), ('TR338_19_66', 'TR338_66', 'TR338_19'), ('TR338_1_14', 'TR338_1', 'TR338_14'), ('TR338_1_14', 'TR338_14', 'TR338_1'), ('TR338_1_2', 'TR338_1', 'TR338_2'), ('TR338_1_2', 'TR338_2', 'TR338_1'), ('TR338_20_67', 'TR338_20', 'TR338_67'), ('TR338_20_67', 'TR338_67', 'TR338_20'), ('TR338_21_68', 'TR338_21', 'TR338_68'), ('TR338_21_68', 'TR338_68', 'TR338_21'), ('TR338_21_69', 'TR338_21', 'TR338_69'), ('TR338_21_69', 'TR338_69', 'TR338_21'), ('TR338_21_70', 'TR338_21', 'TR338_70'), ('TR338_21_70', 'TR338_70', 'TR338_21'), ('TR338_22_26', 'TR338_22', 'TR338_26'), ('TR338_22_26', 'TR338_26', 'TR338_22'), ('TR338_22_71', 'TR338_22', 'TR338_71'), ('TR338_22_71', 'TR338_71', 'TR338_22'), ('TR338_22_72', 'TR338_22', 'TR338_72'), ('TR338_22_72', 'TR338_72', 'TR338_22'), ('TR338_23_73', 'TR338_23', 'TR338_73'), ('TR338_23_73', 'TR338_73', 'TR338_23'), ('TR338_23_74', 'TR338_23', 'TR338_74'), ('TR338_23_74', 'TR338_74', 'TR338_23'), ('TR338_23_75', 'TR338_23', 'TR338_75'), ('TR338_23_75', 'TR338_75', 'TR338_23'), ('TR338_24_76', 'TR338_24', 'TR338_76'), ('TR338_24_76', 'TR338_76', 'TR338_24'), ('TR338_24_77', 'TR338_24', 'TR338_77'), ('TR338_24_77', 'TR338_77', 'TR338_24'), ('TR338_24_78', 'TR338_24', 'TR338_78'), ('TR338_24_78', 'TR338_78', 'TR338_24'), ('TR338_25_79', 'TR338_25', 'TR338_79'), ('TR338_25_79', 'TR338_79', 'TR338_25'), ('TR338_25_80', 'TR338_25', 'TR338_80'), ('TR338_25_80', 'TR338_80', 'TR338_25'), ('TR338_25_81', 'TR338_25', 'TR338_81'), ('TR338_25_81', 'TR338_81', 'TR338_25'), ('TR338_26_82', 'TR338_26', 'TR338_82'), ('TR338_26_82', 'TR338_82', 'TR338_26'), ('TR338_26_83', 'TR338_26', 'TR338_83'), ('TR338_26_83', 'TR338_83', 'TR338_26'), ('TR338_26_84', 'TR338_26', 'TR338_84'), ('TR338_26_84', 'TR338_84', 'TR338_26'), ('TR338_27_85', 'TR338_27', 'TR338_85'), ('TR338_27_85', 'TR338_85', 'TR338_27'), ('TR338_27_86', 'TR338_27', 'TR338_86'), ('TR338_27_86', 'TR338_86', 'TR338_27'), ('TR338_27_87', 'TR338_27', 'TR338_87'), ('TR338_27_87', 'TR338_87', 'TR338_27'), ('TR338_28_29', 'TR338_28', 'TR338_29'), ('TR338_28_29', 'TR338_29', 'TR338_28'), ('TR338_28_33', 'TR338_28', 'TR338_33'), ('TR338_28_33', 'TR338_33', 'TR338_28'), ('TR338_28_45', 'TR338_28', 'TR338_45'), ('TR338_28_45', 'TR338_45', 'TR338_28'), ('TR338_28_88', 'TR338_28', 'TR338_88'), ('TR338_28_88', 'TR338_88', 'TR338_28'), ('TR338_29_30', 'TR338_29', 'TR338_30'), ('TR338_29_30', 'TR338_30', 'TR338_29'), ('TR338_29_40', 'TR338_29', 'TR338_40'), ('TR338_29_40', 'TR338_40', 'TR338_29'), ('TR338_29_89', 'TR338_29', 'TR338_89'), ('TR338_29_89', 'TR338_89', 'TR338_29'), ('TR338_2_27', 'TR338_2', 'TR338_27'), ('TR338_2_27', 'TR338_27', 'TR338_2'), ('TR338_2_3', 'TR338_2', 'TR338_3'), ('TR338_2_3', 'TR338_3', 'TR338_2'), ('TR338_2_52', 'TR338_2', 'TR338_52'), ('TR338_2_52', 'TR338_52', 'TR338_2'), ('TR338_30_31', 'TR338_30', 'TR338_31'), ('TR338_30_31', 'TR338_31', 'TR338_30'), ('TR338_31_32', 'TR338_31', 'TR338_32'), ('TR338_31_32', 'TR338_32', 'TR338_31'), ('TR338_31_42', 'TR338_31', 'TR338_42'), ('TR338_31_42', 'TR338_42', 'TR338_31'), ('TR338_31_90', 'TR338_31', 'TR338_90'), ('TR338_31_90', 'TR338_90', 'TR338_31'), ('TR338_32_33', 'TR338_32', 'TR338_33'), ('TR338_32_33', 'TR338_33', 'TR338_32'), ('TR338_32_91', 'TR338_32', 'TR338_91'), ('TR338_32_91', 'TR338_91', 'TR338_32'), ('TR338_32_92', 'TR338_32', 'TR338_92'), ('TR338_32_92', 'TR338_92', 'TR338_32'), ('TR338_33_41', 'TR338_33', 'TR338_41'), ('TR338_33_41', 'TR338_41', 'TR338_33'), ('TR338_33_93', 'TR338_33', 'TR338_93'), ('TR338_33_93', 'TR338_93', 'TR338_33'), ('TR338_34_35', 'TR338_34', 'TR338_35'), ('TR338_34_35', 'TR338_35', 'TR338_34'), ('TR338_34_39', 'TR338_34', 'TR338_39'), ('TR338_34_39', 'TR338_39', 'TR338_34'), ('TR338_34_94', 'TR338_34', 'TR338_94'), ('TR338_34_94', 'TR338_94', 'TR338_34'), ('TR338_34_95', 'TR338_34', 'TR338_95'), ('TR338_34_95', 'TR338_95', 'TR338_34'), ('TR338_35_36', 'TR338_35', 'TR338_36'), ('TR338_35_36', 'TR338_36', 'TR338_35'), ('TR338_35_46', 'TR338_35', 'TR338_46'), ('TR338_35_46', 'TR338_46', 'TR338_35'), ('TR338_35_96', 'TR338_35', 'TR338_96'), ('TR338_35_96', 'TR338_96', 'TR338_35'), ('TR338_36_37', 'TR338_36', 'TR338_37'), ('TR338_36_37', 'TR338_37', 'TR338_36'), ('TR338_37_38', 'TR338_37', 'TR338_38'), ('TR338_37_38', 'TR338_38', 'TR338_37'), ('TR338_37_49', 'TR338_37', 'TR338_49'), ('TR338_37_49', 'TR338_49', 'TR338_37'), ('TR338_37_97', 'TR338_37', 'TR338_97'), ('TR338_37_97', 'TR338_97', 'TR338_37'), ('TR338_38_39', 'TR338_38', 'TR338_39'), ('TR338_38_39', 'TR338_39', 'TR338_38'), ('TR338_38_48', 'TR338_38', 'TR338_48'), ('TR338_38_48', 'TR338_48', 'TR338_38'), ('TR338_38_98', 'TR338_38', 'TR338_98'), ('TR338_38_98', 'TR338_98', 'TR338_38'), ('TR338_39_47', 'TR338_39', 'TR338_47'), ('TR338_39_47', 'TR338_47', 'TR338_39'), ('TR338_39_50', 'TR338_39', 'TR338_50'), ('TR338_39_50', 'TR338_50', 'TR338_39'), ('TR338_3_4', 'TR338_3', 'TR338_4'), ('TR338_3_4', 'TR338_4', 'TR338_3'), ('TR338_3_53', 'TR338_3', 'TR338_53'), ('TR338_3_53', 'TR338_53', 'TR338_3'), ('TR338_3_54', 'TR338_3', 'TR338_54'), ('TR338_3_54', 'TR338_54', 'TR338_3'), ('TR338_41_43', 'TR338_41', 'TR338_43'), ('TR338_41_43', 'TR338_43', 'TR338_41'), ('TR338_41_44', 'TR338_41', 'TR338_44'), ('TR338_41_44', 'TR338_44', 'TR338_41'), ('TR338_41_99', 'TR338_41', 'TR338_99'), ('TR338_41_99', 'TR338_99', 'TR338_41'), ('TR338_42_100', 'TR338_100', 'TR338_42'), ('TR338_42_100', 'TR338_42', 'TR338_100'), ('TR338_42_101', 'TR338_101', 'TR338_42'), ('TR338_42_101', 'TR338_42', 'TR338_101'), ('TR338_42_102', 'TR338_102', 'TR338_42'), ('TR338_42_102', 'TR338_42', 'TR338_102'), ('TR338_43_103', 'TR338_103', 'TR338_43'), ('TR338_43_103', 'TR338_43', 'TR338_103'), ('TR338_43_104', 'TR338_104', 'TR338_43'), ('TR338_43_104', 'TR338_43', 'TR338_104'), ('TR338_43_105', 'TR338_105', 'TR338_43'), ('TR338_43_105', 'TR338_43', 'TR338_105'), ('TR338_44_106', 'TR338_106', 'TR338_44'), ('TR338_44_106', 'TR338_44', 'TR338_106'), ('TR338_44_107', 'TR338_107', 'TR338_44'), ('TR338_44_107', 'TR338_44', 'TR338_107'), ('TR338_44_108', 'TR338_108', 'TR338_44'), ('TR338_44_108', 'TR338_44', 'TR338_108'), ('TR338_45_109', 'TR338_109', 'TR338_45'), ('TR338_45_109', 'TR338_45', 'TR338_109'), ('TR338_47_51', 'TR338_47', 'TR338_51'), ('TR338_47_51', 'TR338_51', 'TR338_47'), ('TR338_48_110', 'TR338_110', 'TR338_48'), ('TR338_48_110', 'TR338_48', 'TR338_110'), ('TR338_49_111', 'TR338_111', 'TR338_49'), ('TR338_49_111', 'TR338_49', 'TR338_111'), ('TR338_49_112', 'TR338_112', 'TR338_49'), ('TR338_49_112', 'TR338_49', 'TR338_112'), ('TR338_49_113', 'TR338_113', 'TR338_49'), ('TR338_49_113', 'TR338_49', 'TR338_113'), ('TR338_4_18', 'TR338_18', 'TR338_4'), ('TR338_4_18', 'TR338_4', 'TR338_18'), ('TR338_4_24', 'TR338_24', 'TR338_4'), ('TR338_4_24', 'TR338_4', 'TR338_24'), ('TR338_4_5', 'TR338_4', 'TR338_5'), ('TR338_4_5', 'TR338_5', 'TR338_4'), ('TR338_50_114', 'TR338_114', 'TR338_50'), ('TR338_50_114', 'TR338_50', 'TR338_114'), ('TR338_50_115', 'TR338_115', 'TR338_50'), ('TR338_50_115', 'TR338_50', 'TR338_115'), ('TR338_50_116', 'TR338_116', 'TR338_50'), ('TR338_50_116', 'TR338_50', 'TR338_116'), ('TR338_51_117', 'TR338_117', 'TR338_51'), ('TR338_51_117', 'TR338_51', 'TR338_117'), ('TR338_51_118', 'TR338_118', 'TR338_51'), ('TR338_51_118', 'TR338_51', 'TR338_118'), ('TR338_51_119', 'TR338_119', 'TR338_51'), ('TR338_51_119', 'TR338_51', 'TR338_119'), ('TR338_5_40', 'TR338_40', 'TR338_5'), ('TR338_5_40', 'TR338_5', 'TR338_40'), ('TR338_5_55', 'TR338_5', 'TR338_55'), ('TR338_5_55', 'TR338_55', 'TR338_5'), ('TR338_5_6', 'TR338_5', 'TR338_6'), ('TR338_5_6', 'TR338_6', 'TR338_5'), ('TR338_6_25', 'TR338_25', 'TR338_6'), ('TR338_6_25', 'TR338_6', 'TR338_25'), ('TR338_6_56', 'TR338_56', 'TR338_6'), ('TR338_6_56', 'TR338_6', 'TR338_56'), ('TR338_6_7', 'TR338_6', 'TR338_7'), ('TR338_6_7', 'TR338_7', 'TR338_6'), ('TR338_7_46', 'TR338_46', 'TR338_7'), ('TR338_7_46', 'TR338_7', 'TR338_46'), ('TR338_7_57', 'TR338_57', 'TR338_7'), ('TR338_7_57', 'TR338_7', 'TR338_57'), ('TR338_7_8', 'TR338_7', 'TR338_8'), ('TR338_7_8', 'TR338_8', 'TR338_7'), ('TR338_8_21', 'TR338_21', 'TR338_8'), ('TR338_8_21', 'TR338_8', 'TR338_21'), ('TR338_8_58', 'TR338_58', 'TR338_8'), ('TR338_8_58', 'TR338_8', 'TR338_58'), ('TR338_8_9', 'TR338_8', 'TR338_9'), ('TR338_8_9', 'TR338_9', 'TR338_8'), ('TR338_9_10', 'TR338_10', 'TR338_9'), ('TR338_9_10', 'TR338_9', 'TR338_10'), ('TR339_10_11', 'TR339_10', 'TR339_11'), ('TR339_10_11', 'TR339_11', 'TR339_10'), ('TR339_11_17', 'TR339_11', 'TR339_17'), ('TR339_11_17', 'TR339_17', 'TR339_11'), ('TR339_1_2', 'TR339_1', 'TR339_2'), ('TR339_1_2', 'TR339_2', 'TR339_1'), ('TR339_1_4', 'TR339_1', 'TR339_4'), ('TR339_1_4', 'TR339_4', 'TR339_1'), ('TR339_4_6', 'TR339_4', 'TR339_6'), ('TR339_4_6', 'TR339_6', 'TR339_4'), ('TR339_5_12', 'TR339_12', 'TR339_5'), ('TR339_5_12', 'TR339_5', 'TR339_12'), ('TR339_5_7', 'TR339_5', 'TR339_7'), ('TR339_5_7', 'TR339_7', 'TR339_5'), ('TR339_6_13', 'TR339_13', 'TR339_6'), ('TR339_6_13', 'TR339_6', 'TR339_13'), ('TR339_7_9', 'TR339_7', 'TR339_9'), ('TR339_7_9', 'TR339_9', 'TR339_7'), ('TR339_8_10', 'TR339_10', 'TR339_8'), ('TR339_8_10', 'TR339_8', 'TR339_10'), ('TR339_8_14', 'TR339_14', 'TR339_8'), ('TR339_8_14', 'TR339_8', 'TR339_14'), ('TR339_9_15', 'TR339_15', 'TR339_9'), ('TR339_9_15', 'TR339_9', 'TR339_15'), ('TR339_9_16', 'TR339_16', 'TR339_9'), ('TR339_9_16', 'TR339_9', 'TR339_16'), ('TR340_10_21', 'TR340_10', 'TR340_21'), ('TR340_10_21', 'TR340_21', 'TR340_10'), ('TR340_1_11', 'TR340_1', 'TR340_11'), ('TR340_1_11', 'TR340_11', 'TR340_1'), ('TR340_1_12', 'TR340_1', 'TR340_12'), ('TR340_1_12', 'TR340_12', 'TR340_1'), ('TR340_1_2', 'TR340_1', 'TR340_2'), ('TR340_1_2', 'TR340_2', 'TR340_1'), ('TR340_1_5', 'TR340_1', 'TR340_5'), ('TR340_1_5', 'TR340_5', 'TR340_1'), ('TR340_22_23', 'TR340_22', 'TR340_23'), ('TR340_22_23', 'TR340_23', 'TR340_22'), ('TR340_22_28', 'TR340_22', 'TR340_28'), ('TR340_22_28', 'TR340_28', 'TR340_22'), ('TR340_23_24', 'TR340_23', 'TR340_24'), ('TR340_23_24', 'TR340_24', 'TR340_23'), ('TR340_23_29', 'TR340_23', 'TR340_29'), ('TR340_23_29', 'TR340_29', 'TR340_23'), ('TR340_23_30', 'TR340_23', 'TR340_30'), ('TR340_23_30', 'TR340_30', 'TR340_23'), ('TR340_24_25', 'TR340_24', 'TR340_25'), ('TR340_24_25', 'TR340_25', 'TR340_24'), ('TR340_24_27', 'TR340_24', 'TR340_27'), ('TR340_24_27', 'TR340_27', 'TR340_24'), ('TR340_24_31', 'TR340_24', 'TR340_31'), ('TR340_24_31', 'TR340_31', 'TR340_24'), ('TR340_25_26', 'TR340_25', 'TR340_26'), ('TR340_25_26', 'TR340_26', 'TR340_25'), ('TR340_25_32', 'TR340_25', 'TR340_32'), ('TR340_25_32', 'TR340_32', 'TR340_25'), ('TR340_25_33', 'TR340_25', 'TR340_33'), ('TR340_25_33', 'TR340_33', 'TR340_25'), ('TR340_27_34', 'TR340_27', 'TR340_34'), ('TR340_27_34', 'TR340_34', 'TR340_27'), ('TR340_2_13', 'TR340_13', 'TR340_2'), ('TR340_2_13', 'TR340_2', 'TR340_13'), ('TR340_2_3', 'TR340_2', 'TR340_3'), ('TR340_2_3', 'TR340_3', 'TR340_2'), ('TR340_2_9', 'TR340_2', 'TR340_9'), ('TR340_2_9', 'TR340_9', 'TR340_2'), ('TR340_35_36', 'TR340_35', 'TR340_36'), ('TR340_35_36', 'TR340_36', 'TR340_35'), ('TR340_35_39', 'TR340_35', 'TR340_39'), ('TR340_35_39', 'TR340_39', 'TR340_35'), ('TR340_35_45', 'TR340_35', 'TR340_45'), ('TR340_35_45', 'TR340_45', 'TR340_35'), ('TR340_35_46', 'TR340_35', 'TR340_46'), ('TR340_35_46', 'TR340_46', 'TR340_35'), ('TR340_36_37', 'TR340_36', 'TR340_37'), ('TR340_36_37', 'TR340_37', 'TR340_36'), ('TR340_36_42', 'TR340_36', 'TR340_42'), ('TR340_36_42', 'TR340_42', 'TR340_36'), ('TR340_36_47', 'TR340_36', 'TR340_47'), ('TR340_36_47', 'TR340_47', 'TR340_36'), ('TR340_37_38', 'TR340_37', 'TR340_38'), ('TR340_37_38', 'TR340_38', 'TR340_37'), ('TR340_38_39', 'TR340_38', 'TR340_39'), ('TR340_38_39', 'TR340_39', 'TR340_38'), ('TR340_38_40', 'TR340_38', 'TR340_40'), ('TR340_38_40', 'TR340_40', 'TR340_38'), ('TR340_38_48', 'TR340_38', 'TR340_48'), ('TR340_38_48', 'TR340_48', 'TR340_38'), ('TR340_3_4', 'TR340_3', 'TR340_4'), ('TR340_3_4', 'TR340_4', 'TR340_3'), ('TR340_40_41', 'TR340_40', 'TR340_41'), ('TR340_40_41', 'TR340_41', 'TR340_40'), ('TR340_40_49', 'TR340_40', 'TR340_49'), ('TR340_40_49', 'TR340_49', 'TR340_40'), ('TR340_40_50', 'TR340_40', 'TR340_50'), ('TR340_40_50', 'TR340_50', 'TR340_40'), ('TR340_41_44', 'TR340_41', 'TR340_44'), ('TR340_41_44', 'TR340_44', 'TR340_41'), ('TR340_41_51', 'TR340_41', 'TR340_51'), ('TR340_41_51', 'TR340_51', 'TR340_41'), ('TR340_41_52', 'TR340_41', 'TR340_52'), ('TR340_41_52', 'TR340_52', 'TR340_41'), ('TR340_42_43', 'TR340_42', 'TR340_43'), ('TR340_42_43', 'TR340_43', 'TR340_42'), ('TR340_42_53', 'TR340_42', 'TR340_53'), ('TR340_42_53', 'TR340_53', 'TR340_42'), ('TR340_42_54', 'TR340_42', 'TR340_54'), ('TR340_42_54', 'TR340_54', 'TR340_42'), ('TR340_43_55', 'TR340_43', 'TR340_55'), ('TR340_43_55', 'TR340_55', 'TR340_43'), ('TR340_4_14', 'TR340_14', 'TR340_4'), ('TR340_4_14', 'TR340_4', 'TR340_14'), ('TR340_4_5', 'TR340_4', 'TR340_5'), ('TR340_4_5', 'TR340_5', 'TR340_4'), ('TR340_4_6', 'TR340_4', 'TR340_6'), ('TR340_4_6', 'TR340_6', 'TR340_4'), ('TR340_6_15', 'TR340_15', 'TR340_6'), ('TR340_6_15', 'TR340_6', 'TR340_15'), ('TR340_6_7', 'TR340_6', 'TR340_7'), ('TR340_6_7', 'TR340_7', 'TR340_6'), ('TR340_6_8', 'TR340_6', 'TR340_8'), ('TR340_6_8', 'TR340_8', 'TR340_6'), ('TR340_7_16', 'TR340_16', 'TR340_7'), ('TR340_7_16', 'TR340_7', 'TR340_16'), ('TR340_7_17', 'TR340_17', 'TR340_7'), ('TR340_7_17', 'TR340_7', 'TR340_17'), ('TR340_7_18', 'TR340_18', 'TR340_7'), ('TR340_7_18', 'TR340_7', 'TR340_18'), ('TR340_9_10', 'TR340_10', 'TR340_9'), ('TR340_9_10', 'TR340_9', 'TR340_10'), ('TR340_9_19', 'TR340_19', 'TR340_9'), ('TR340_9_19', 'TR340_9', 'TR340_19'), ('TR340_9_20', 'TR340_20', 'TR340_9'), ('TR340_9_20', 'TR340_9', 'TR340_20'), ('TR341_11_22', 'TR341_11', 'TR341_22'), ('TR341_11_22', 'TR341_22', 'TR341_11'), ('TR341_12_15', 'TR341_12', 'TR341_15'), ('TR341_12_15', 'TR341_15', 'TR341_12'), ('TR341_13_23', 'TR341_13', 'TR341_23'), ('TR341_13_23', 'TR341_23', 'TR341_13'), ('TR341_15_17', 'TR341_15', 'TR341_17'), ('TR341_15_17', 'TR341_17', 'TR341_15'), ('TR341_1_3', 'TR341_1', 'TR341_3'), ('TR341_1_3', 'TR341_3', 'TR341_1'), ('TR341_2_18', 'TR341_18', 'TR341_2'), ('TR341_2_18', 'TR341_2', 'TR341_18'), ('TR341_2_4', 'TR341_2', 'TR341_4'), ('TR341_2_4', 'TR341_4', 'TR341_2'), ('TR341_3_5', 'TR341_3', 'TR341_5'), ('TR341_3_5', 'TR341_5', 'TR341_3'), ('TR341_3_6', 'TR341_3', 'TR341_6'), ('TR341_3_6', 'TR341_6', 'TR341_3'), ('TR341_4_7', 'TR341_4', 'TR341_7'), ('TR341_4_7', 'TR341_7', 'TR341_4'), ('TR341_5_19', 'TR341_19', 'TR341_5'), ('TR341_5_19', 'TR341_5', 'TR341_19'), ('TR341_5_20', 'TR341_20', 'TR341_5'), ('TR341_5_20', 'TR341_5', 'TR341_20'), ('TR341_5_9', 'TR341_5', 'TR341_9'), ('TR341_5_9', 'TR341_9', 'TR341_5'), ('TR341_6_11', 'TR341_11', 'TR341_6'), ('TR341_6_11', 'TR341_6', 'TR341_11'), ('TR341_7_12', 'TR341_12', 'TR341_7'), ('TR341_7_12', 'TR341_7', 'TR341_12'), ('TR341_8_13', 'TR341_13', 'TR341_8'), ('TR341_8_13', 'TR341_8', 'TR341_13'), ('TR341_8_21', 'TR341_21', 'TR341_8'), ('TR341_8_21', 'TR341_8', 'TR341_21'), ('TR341_9_11', 'TR341_11', 'TR341_9'), ('TR341_9_11', 'TR341_9', 'TR341_11'), ('TR342_1_2', 'TR342_1', 'TR342_2'), ('TR342_1_2', 'TR342_2', 'TR342_1'), ('TR342_1_3', 'TR342_1', 'TR342_3'), ('TR342_1_3', 'TR342_3', 'TR342_1'), ('TR342_1_4', 'TR342_1', 'TR342_4'), ('TR342_1_4', 'TR342_4', 'TR342_1'), ('TR342_1_5', 'TR342_1', 'TR342_5'), ('TR342_1_5', 'TR342_5', 'TR342_1'), ('TR342_2_6', 'TR342_2', 'TR342_6'), ('TR342_2_6', 'TR342_6', 'TR342_2'), ('TR342_3_7', 'TR342_3', 'TR342_7'), ('TR342_3_7', 'TR342_7', 'TR342_3'), ('TR342_4_8', 'TR342_4', 'TR342_8'), ('TR342_4_8', 'TR342_8', 'TR342_4'), ('TR342_5_12', 'TR342_12', 'TR342_5'), ('TR342_5_12', 'TR342_5', 'TR342_12'), ('TR342_6_13', 'TR342_13', 'TR342_6'), ('TR342_6_13', 'TR342_6', 'TR342_13'), ('TR342_7_14', 'TR342_14', 'TR342_7'), ('TR342_7_14', 'TR342_7', 'TR342_14'), ('TR342_7_15', 'TR342_15', 'TR342_7'), ('TR342_7_15', 'TR342_7', 'TR342_15'), ('TR342_7_16', 'TR342_16', 'TR342_7'), ('TR342_7_16', 'TR342_7', 'TR342_16'), ('TR342_8_17', 'TR342_17', 'TR342_8'), ('TR342_8_17', 'TR342_8', 'TR342_17'), ('TR342_8_18', 'TR342_18', 'TR342_8'), ('TR342_8_18', 'TR342_8', 'TR342_18'), ('TR342_8_19', 'TR342_19', 'TR342_8'), ('TR342_8_19', 'TR342_8', 'TR342_19'), ('TR342_9_10', 'TR342_10', 'TR342_9'), ('TR342_9_10', 'TR342_9', 'TR342_10'), ('TR342_9_11', 'TR342_11', 'TR342_9'), ('TR342_9_11', 'TR342_9', 'TR342_11'), ('TR343_1_6', 'TR343_1', 'TR343_6'), ('TR343_1_6', 'TR343_6', 'TR343_1'), ('TR343_1_9', 'TR343_1', 'TR343_9'), ('TR343_1_9', 'TR343_9', 'TR343_1'), ('TR343_2_10', 'TR343_10', 'TR343_2'), ('TR343_2_10', 'TR343_2', 'TR343_10'), ('TR343_2_3', 'TR343_2', 'TR343_3'), ('TR343_2_3', 'TR343_3', 'TR343_2'), ('TR343_3_11', 'TR343_11', 'TR343_3'), ('TR343_3_11', 'TR343_3', 'TR343_11'), ('TR343_4_12', 'TR343_12', 'TR343_4'), ('TR343_4_12', 'TR343_4', 'TR343_12'), ('TR343_4_5', 'TR343_4', 'TR343_5'), ('TR343_4_5', 'TR343_5', 'TR343_4'), ('TR343_5_13', 'TR343_13', 'TR343_5'), ('TR343_5_13', 'TR343_5', 'TR343_13'), ('TR343_6_7', 'TR343_6', 'TR343_7'), ('TR343_6_7', 'TR343_7', 'TR343_6'), ('TR343_7_14', 'TR343_14', 'TR343_7'), ('TR343_7_14', 'TR343_7', 'TR343_14'), ('TR343_7_15', 'TR343_15', 'TR343_7'), ('TR343_7_15', 'TR343_7', 'TR343_15'), ('TR343_7_8', 'TR343_7', 'TR343_8'), ('TR343_7_8', 'TR343_8', 'TR343_7'), ('TR343_8_16', 'TR343_16', 'TR343_8'), ('TR343_8_16', 'TR343_8', 'TR343_16'), ('TR344_10_30', 'TR344_10', 'TR344_30'), ('TR344_10_30', 'TR344_30', 'TR344_10'), ('TR344_10_31', 'TR344_10', 'TR344_31'), ('TR344_10_31', 'TR344_31', 'TR344_10'), ('TR344_11_12', 'TR344_11', 'TR344_12'), ('TR344_11_12', 'TR344_12', 'TR344_11'), ('TR344_11_21', 'TR344_11', 'TR344_21'), ('TR344_11_21', 'TR344_21', 'TR344_11'), ('TR344_12_13', 'TR344_12', 'TR344_13'), ('TR344_12_13', 'TR344_13', 'TR344_12'), ('TR344_12_15', 'TR344_12', 'TR344_15'), ('TR344_12_15', 'TR344_15', 'TR344_12'), ('TR344_12_32', 'TR344_12', 'TR344_32'), ('TR344_12_32', 'TR344_32', 'TR344_12'), ('TR344_13_14', 'TR344_13', 'TR344_14'), ('TR344_13_14', 'TR344_14', 'TR344_13'), ('TR344_13_18', 'TR344_13', 'TR344_18'), ('TR344_13_18', 'TR344_18', 'TR344_13'), ('TR344_13_37', 'TR344_13', 'TR344_37'), ('TR344_13_37', 'TR344_37', 'TR344_13'), ('TR344_14_38', 'TR344_14', 'TR344_38'), ('TR344_14_38', 'TR344_38', 'TR344_14'), ('TR344_14_39', 'TR344_14', 'TR344_39'), ('TR344_14_39', 'TR344_39', 'TR344_14'), ('TR344_15_16', 'TR344_15', 'TR344_16'), ('TR344_15_16', 'TR344_16', 'TR344_15'), ('TR344_16_24', 'TR344_16', 'TR344_24'), ('TR344_16_24', 'TR344_24', 'TR344_16'), ('TR344_17_18', 'TR344_17', 'TR344_18'), ('TR344_17_18', 'TR344_18', 'TR344_17'), ('TR344_17_23', 'TR344_17', 'TR344_23'), ('TR344_17_23', 'TR344_23', 'TR344_17'), ('TR344_18_27', 'TR344_18', 'TR344_27'), ('TR344_18_27', 'TR344_27', 'TR344_18'), ('TR344_18_40', 'TR344_18', 'TR344_40'), ('TR344_18_40', 'TR344_40', 'TR344_18'), ('TR344_19_41', 'TR344_19', 'TR344_41'), ('TR344_19_41', 'TR344_41', 'TR344_19'), ('TR344_1_33', 'TR344_1', 'TR344_33'), ('TR344_1_33', 'TR344_33', 'TR344_1'), ('TR344_1_6', 'TR344_1', 'TR344_6'), ('TR344_1_6', 'TR344_6', 'TR344_1'), ('TR344_21_42', 'TR344_21', 'TR344_42'), ('TR344_21_42', 'TR344_42', 'TR344_21'), ('TR344_23_43', 'TR344_23', 'TR344_43'), ('TR344_23_43', 'TR344_43', 'TR344_23'), ('TR344_24_25', 'TR344_24', 'TR344_25'), ('TR344_24_25', 'TR344_25', 'TR344_24'), ('TR344_25_44', 'TR344_25', 'TR344_44'), ('TR344_25_44', 'TR344_44', 'TR344_25'), ('TR344_25_45', 'TR344_25', 'TR344_45'), ('TR344_25_45', 'TR344_45', 'TR344_25'), ('TR344_27_28', 'TR344_27', 'TR344_28'), ('TR344_27_28', 'TR344_28', 'TR344_27'), ('TR344_27_29', 'TR344_27', 'TR344_29'), ('TR344_27_29', 'TR344_29', 'TR344_27'), ('TR344_28_46', 'TR344_28', 'TR344_46'), ('TR344_28_46', 'TR344_46', 'TR344_28'), ('TR344_28_47', 'TR344_28', 'TR344_47'), ('TR344_28_47', 'TR344_47', 'TR344_28'), ('TR344_28_48', 'TR344_28', 'TR344_48'), ('TR344_28_48', 'TR344_48', 'TR344_28'), ('TR344_29_49', 'TR344_29', 'TR344_49'), ('TR344_29_49', 'TR344_49', 'TR344_29'), ('TR344_29_50', 'TR344_29', 'TR344_50'), ('TR344_29_50', 'TR344_50', 'TR344_29'), ('TR344_29_51', 'TR344_29', 'TR344_51'), ('TR344_29_51', 'TR344_51', 'TR344_29'), ('TR344_2_3', 'TR344_2', 'TR344_3'), ('TR344_2_3', 'TR344_3', 'TR344_2'), ('TR344_2_34', 'TR344_2', 'TR344_34'), ('TR344_2_34', 'TR344_34', 'TR344_2'), ('TR344_30_52', 'TR344_30', 'TR344_52'), ('TR344_30_52', 'TR344_52', 'TR344_30'), ('TR344_30_53', 'TR344_30', 'TR344_53'), ('TR344_30_53', 'TR344_53', 'TR344_30'), ('TR344_30_54', 'TR344_30', 'TR344_54'), ('TR344_30_54', 'TR344_54', 'TR344_30'), ('TR344_31_55', 'TR344_31', 'TR344_55'), ('TR344_31_55', 'TR344_55', 'TR344_31'), ('TR344_32_56', 'TR344_32', 'TR344_56'), ('TR344_32_56', 'TR344_56', 'TR344_32'), ('TR344_3_19', 'TR344_19', 'TR344_3'), ('TR344_3_19', 'TR344_3', 'TR344_19'), ('TR344_4_5', 'TR344_4', 'TR344_5'), ('TR344_4_5', 'TR344_5', 'TR344_4'), ('TR344_4_7', 'TR344_4', 'TR344_7'), ('TR344_4_7', 'TR344_7', 'TR344_4'), ('TR344_57_58', 'TR344_57', 'TR344_58'), ('TR344_57_58', 'TR344_58', 'TR344_57'), ('TR344_5_10', 'TR344_10', 'TR344_5'), ('TR344_5_10', 'TR344_5', 'TR344_10'), ('TR344_6_35', 'TR344_35', 'TR344_6'), ('TR344_6_35', 'TR344_6', 'TR344_35'), ('TR344_7_8', 'TR344_7', 'TR344_8'), ('TR344_7_8', 'TR344_8', 'TR344_7'), ('TR344_8_9', 'TR344_8', 'TR344_9'), ('TR344_8_9', 'TR344_9', 'TR344_8'), ('TR344_9_10', 'TR344_10', 'TR344_9'), ('TR344_9_10', 'TR344_9', 'TR344_10'), ('TR344_9_14', 'TR344_14', 'TR344_9'), ('TR344_9_14', 'TR344_9', 'TR344_14'), ('TR344_9_36', 'TR344_36', 'TR344_9'), ('TR344_9_36', 'TR344_9', 'TR344_36'), ('TR345_10_13', 'TR345_10', 'TR345_13'), ('TR345_10_13', 'TR345_13', 'TR345_10'), ('TR345_10_14', 'TR345_10', 'TR345_14'), ('TR345_10_14', 'TR345_14', 'TR345_10'), ('TR345_11_18', 'TR345_11', 'TR345_18'), ('TR345_11_18', 'TR345_18', 'TR345_11'), ('TR345_13_19', 'TR345_13', 'TR345_19'), ('TR345_13_19', 'TR345_19', 'TR345_13'), ('TR345_14_20', 'TR345_14', 'TR345_20'), ('TR345_14_20', 'TR345_20', 'TR345_14'), ('TR345_1_2', 'TR345_1', 'TR345_2'), ('TR345_1_2', 'TR345_2', 'TR345_1'), ('TR345_1_4', 'TR345_1', 'TR345_4'), ('TR345_1_4', 'TR345_4', 'TR345_1'), ('TR345_4_6', 'TR345_4', 'TR345_6'), ('TR345_4_6', 'TR345_6', 'TR345_4'), ('TR345_5_15', 'TR345_15', 'TR345_5'), ('TR345_5_15', 'TR345_5', 'TR345_15'), ('TR345_5_7', 'TR345_5', 'TR345_7'), ('TR345_5_7', 'TR345_7', 'TR345_5'), ('TR345_6_8', 'TR345_6', 'TR345_8'), ('TR345_6_8', 'TR345_8', 'TR345_6'), ('TR345_8_16', 'TR345_16', 'TR345_8'), ('TR345_8_16', 'TR345_8', 'TR345_16'), ('TR345_9_11', 'TR345_11', 'TR345_9'), ('TR345_9_11', 'TR345_9', 'TR345_11'), ('TR345_9_17', 'TR345_17', 'TR345_9'), ('TR345_9_17', 'TR345_9', 'TR345_17'), ('TR346_1_2', 'TR346_1', 'TR346_2'), ('TR346_1_2', 'TR346_2', 'TR346_1'), ('TR346_1_3', 'TR346_1', 'TR346_3'), ('TR346_1_3', 'TR346_3', 'TR346_1'), ('TR346_1_4', 'TR346_1', 'TR346_4'), ('TR346_1_4', 'TR346_4', 'TR346_1'), ('TR346_1_5', 'TR346_1', 'TR346_5'), ('TR346_1_5', 'TR346_5', 'TR346_1'), ('TR346_3_6', 'TR346_3', 'TR346_6'), ('TR346_3_6', 'TR346_6', 'TR346_3'), ('TR346_3_7', 'TR346_3', 'TR346_7'), ('TR346_3_7', 'TR346_7', 'TR346_3'), ('TR346_3_8', 'TR346_3', 'TR346_8'), ('TR346_3_8', 'TR346_8', 'TR346_3'), ('TR347_10_24', 'TR347_10', 'TR347_24'), ('TR347_10_24', 'TR347_24', 'TR347_10'), ('TR347_10_25', 'TR347_10', 'TR347_25'), ('TR347_10_25', 'TR347_25', 'TR347_10'), ('TR347_10_26', 'TR347_10', 'TR347_26'), ('TR347_10_26', 'TR347_26', 'TR347_10'), ('TR347_1_6', 'TR347_1', 'TR347_6'), ('TR347_1_6', 'TR347_6', 'TR347_1'), ('TR347_1_7', 'TR347_1', 'TR347_7'), ('TR347_1_7', 'TR347_7', 'TR347_1'), ('TR347_2_11', 'TR347_11', 'TR347_2'), ('TR347_2_11', 'TR347_2', 'TR347_11'), ('TR347_2_3', 'TR347_2', 'TR347_3'), ('TR347_2_3', 'TR347_3', 'TR347_2'), ('TR347_3_12', 'TR347_12', 'TR347_3'), ('TR347_3_12', 'TR347_3', 'TR347_12'), ('TR347_3_13', 'TR347_13', 'TR347_3'), ('TR347_3_13', 'TR347_3', 'TR347_13'), ('TR347_3_4', 'TR347_3', 'TR347_4'), ('TR347_3_4', 'TR347_4', 'TR347_3'), ('TR347_4_14', 'TR347_14', 'TR347_4'), ('TR347_4_14', 'TR347_4', 'TR347_14'), ('TR347_4_5', 'TR347_4', 'TR347_5'), ('TR347_4_5', 'TR347_5', 'TR347_4'), ('TR347_4_8', 'TR347_4', 'TR347_8'), ('TR347_4_8', 'TR347_8', 'TR347_4'), ('TR347_5_15', 'TR347_15', 'TR347_5'), ('TR347_5_15', 'TR347_5', 'TR347_15'), ('TR347_5_16', 'TR347_16', 'TR347_5'), ('TR347_5_16', 'TR347_5', 'TR347_16'), ('TR347_5_6', 'TR347_5', 'TR347_6'), ('TR347_5_6', 'TR347_6', 'TR347_5'), ('TR347_6_17', 'TR347_17', 'TR347_6'), ('TR347_6_17', 'TR347_6', 'TR347_17'), ('TR347_6_18', 'TR347_18', 'TR347_6'), ('TR347_6_18', 'TR347_6', 'TR347_18'), ('TR347_7_19', 'TR347_19', 'TR347_7'), ('TR347_7_19', 'TR347_7', 'TR347_19'), ('TR347_7_20', 'TR347_20', 'TR347_7'), ('TR347_7_20', 'TR347_7', 'TR347_20'), ('TR347_7_21', 'TR347_21', 'TR347_7'), ('TR347_7_21', 'TR347_7', 'TR347_21'), ('TR347_8_10', 'TR347_10', 'TR347_8'), ('TR347_8_10', 'TR347_8', 'TR347_10'), ('TR347_9_22', 'TR347_22', 'TR347_9'), ('TR347_9_22', 'TR347_9', 'TR347_22'), ('TR347_9_23', 'TR347_23', 'TR347_9'), ('TR347_9_23', 'TR347_9', 'TR347_23'), ('TR348_10_12', 'TR348_10', 'TR348_12'), ('TR348_10_12', 'TR348_12', 'TR348_10'), ('TR348_11_21', 'TR348_11', 'TR348_21'), ('TR348_11_21', 'TR348_21', 'TR348_11'), ('TR348_12_22', 'TR348_12', 'TR348_22'), ('TR348_12_22', 'TR348_22', 'TR348_12'), ('TR348_13_23', 'TR348_13', 'TR348_23'), ('TR348_13_23', 'TR348_23', 'TR348_13'), ('TR348_14_24', 'TR348_14', 'TR348_24'), ('TR348_14_24', 'TR348_24', 'TR348_14'), ('TR348_14_25', 'TR348_14', 'TR348_25'), ('TR348_14_25', 'TR348_25', 'TR348_14'), ('TR348_14_26', 'TR348_14', 'TR348_26'), ('TR348_14_26', 'TR348_26', 'TR348_14'), ('TR348_15_27', 'TR348_15', 'TR348_27'), ('TR348_15_27', 'TR348_27', 'TR348_15'), ('TR348_15_28', 'TR348_15', 'TR348_28'), ('TR348_15_28', 'TR348_28', 'TR348_15'), ('TR348_1_2', 'TR348_1', 'TR348_2'), ('TR348_1_2', 'TR348_2', 'TR348_1'), ('TR348_1_3', 'TR348_1', 'TR348_3'), ('TR348_1_3', 'TR348_3', 'TR348_1'), ('TR348_29_30', 'TR348_29', 'TR348_30'), ('TR348_29_30', 'TR348_30', 'TR348_29'), ('TR348_29_31', 'TR348_29', 'TR348_31'), ('TR348_29_31', 'TR348_31', 'TR348_29'), ('TR348_2_14', 'TR348_14', 'TR348_2'), ('TR348_2_14', 'TR348_2', 'TR348_14'), ('TR348_2_15', 'TR348_15', 'TR348_2'), ('TR348_2_15', 'TR348_2', 'TR348_15'), ('TR348_2_5', 'TR348_2', 'TR348_5'), ('TR348_2_5', 'TR348_5', 'TR348_2'), ('TR348_30_33', 'TR348_30', 'TR348_33'), ('TR348_30_33', 'TR348_33', 'TR348_30'), ('TR348_30_42', 'TR348_30', 'TR348_42'), ('TR348_30_42', 'TR348_42', 'TR348_30'), ('TR348_30_43', 'TR348_30', 'TR348_43'), ('TR348_30_43', 'TR348_43', 'TR348_30'), ('TR348_31_44', 'TR348_31', 'TR348_44'), ('TR348_31_44', 'TR348_44', 'TR348_31'), ('TR348_33_34', 'TR348_33', 'TR348_34'), ('TR348_33_34', 'TR348_34', 'TR348_33'), ('TR348_33_45', 'TR348_33', 'TR348_45'), ('TR348_33_45', 'TR348_45', 'TR348_33'), ('TR348_33_46', 'TR348_33', 'TR348_46'), ('TR348_33_46', 'TR348_46', 'TR348_33'), ('TR348_34_39', 'TR348_34', 'TR348_39'), ('TR348_34_39', 'TR348_39', 'TR348_34'), ('TR348_35_36', 'TR348_35', 'TR348_36'), ('TR348_35_36', 'TR348_36', 'TR348_35'), ('TR348_35_47', 'TR348_35', 'TR348_47'), ('TR348_35_47', 'TR348_47', 'TR348_35'), ('TR348_36_48', 'TR348_36', 'TR348_48'), ('TR348_36_48', 'TR348_48', 'TR348_36'), ('TR348_37_38', 'TR348_37', 'TR348_38'), ('TR348_37_38', 'TR348_38', 'TR348_37'), ('TR348_37_41', 'TR348_37', 'TR348_41'), ('TR348_37_41', 'TR348_41', 'TR348_37'), ('TR348_38_40', 'TR348_38', 'TR348_40'), ('TR348_38_40', 'TR348_40', 'TR348_38'), ('TR348_39_49', 'TR348_39', 'TR348_49'), ('TR348_39_49', 'TR348_49', 'TR348_39'), ('TR348_3_16', 'TR348_16', 'TR348_3'), ('TR348_3_16', 'TR348_3', 'TR348_16'), ('TR348_40_50', 'TR348_40', 'TR348_50'), ('TR348_40_50', 'TR348_50', 'TR348_40'), ('TR348_41_51', 'TR348_41', 'TR348_51'), ('TR348_41_51', 'TR348_51', 'TR348_41'), ('TR348_42_52', 'TR348_42', 'TR348_52'), ('TR348_42_52', 'TR348_52', 'TR348_42'), ('TR348_42_53', 'TR348_42', 'TR348_53'), ('TR348_42_53', 'TR348_53', 'TR348_42'), ('TR348_42_54', 'TR348_42', 'TR348_54'), ('TR348_42_54', 'TR348_54', 'TR348_42'), ('TR348_43_55', 'TR348_43', 'TR348_55'), ('TR348_43_55', 'TR348_55', 'TR348_43'), ('TR348_43_56', 'TR348_43', 'TR348_56'), ('TR348_43_56', 'TR348_56', 'TR348_43'), ('TR348_57_58', 'TR348_57', 'TR348_58'), ('TR348_57_58', 'TR348_58', 'TR348_57'), ('TR348_57_59', 'TR348_57', 'TR348_59'), ('TR348_57_59', 'TR348_59', 'TR348_57'), ('TR348_5_17', 'TR348_17', 'TR348_5'), ('TR348_5_17', 'TR348_5', 'TR348_17'), ('TR348_5_18', 'TR348_18', 'TR348_5'), ('TR348_5_18', 'TR348_5', 'TR348_18'), ('TR348_5_6', 'TR348_5', 'TR348_6'), ('TR348_5_6', 'TR348_6', 'TR348_5'), ('TR348_60_61', 'TR348_60', 'TR348_61'), ('TR348_60_61', 'TR348_61', 'TR348_60'), ('TR348_60_62', 'TR348_60', 'TR348_62'), ('TR348_60_62', 'TR348_62', 'TR348_60'), ('TR348_63_64', 'TR348_63', 'TR348_64'), ('TR348_63_64', 'TR348_64', 'TR348_63'), ('TR348_63_65', 'TR348_63', 'TR348_65'), ('TR348_63_65', 'TR348_65', 'TR348_63'), ('TR348_6_11', 'TR348_11', 'TR348_6'), ('TR348_6_11', 'TR348_6', 'TR348_11'), ('TR348_7_19', 'TR348_19', 'TR348_7'), ('TR348_7_19', 'TR348_7', 'TR348_19'), ('TR348_7_8', 'TR348_7', 'TR348_8'), ('TR348_7_8', 'TR348_8', 'TR348_7'), ('TR348_8_20', 'TR348_20', 'TR348_8'), ('TR348_8_20', 'TR348_8', 'TR348_20'), ('TR348_9_10', 'TR348_10', 'TR348_9'), ('TR348_9_10', 'TR348_9', 'TR348_10'), ('TR348_9_13', 'TR348_13', 'TR348_9'), ('TR348_9_13', 'TR348_9', 'TR348_13'), ('TR349_1_12', 'TR349_1', 'TR349_12'), ('TR349_1_12', 'TR349_12', 'TR349_1'), ('TR349_1_6', 'TR349_1', 'TR349_6'), ('TR349_1_6', 'TR349_6', 'TR349_1'), ('TR349_2_11', 'TR349_11', 'TR349_2'), ('TR349_2_11', 'TR349_2', 'TR349_11'), ('TR349_2_3', 'TR349_2', 'TR349_3'), ('TR349_2_3', 'TR349_3', 'TR349_2'), ('TR349_3_10', 'TR349_10', 'TR349_3'), ('TR349_3_10', 'TR349_3', 'TR349_10'), ('TR349_4_5', 'TR349_4', 'TR349_5'), ('TR349_4_5', 'TR349_5', 'TR349_4'), ('TR349_4_9', 'TR349_4', 'TR349_9'), ('TR349_4_9', 'TR349_9', 'TR349_4'), ('TR349_5_8', 'TR349_5', 'TR349_8'), ('TR349_5_8', 'TR349_8', 'TR349_5'), ('TR349_6_7', 'TR349_6', 'TR349_7'), ('TR349_6_7', 'TR349_7', 'TR349_6'), ('TR349_7_13', 'TR349_13', 'TR349_7'), ('TR349_7_13', 'TR349_7', 'TR349_13'), ('TR350_1_2', 'TR350_1', 'TR350_2'), ('TR350_1_2', 'TR350_2', 'TR350_1'), ('TR350_1_3', 'TR350_1', 'TR350_3'), ('TR350_1_3', 'TR350_3', 'TR350_1'), ('TR350_1_4', 'TR350_1', 'TR350_4'), ('TR350_1_4', 'TR350_4', 'TR350_1'), ('TR350_1_5', 'TR350_1', 'TR350_5'), ('TR350_1_5', 'TR350_5', 'TR350_1'), ('TR351_15_16', 'TR351_15', 'TR351_16'), ('TR351_15_16', 'TR351_16', 'TR351_15'), ('TR351_1_6', 'TR351_1', 'TR351_6'), ('TR351_1_6', 'TR351_6', 'TR351_1'), ('TR351_1_9', 'TR351_1', 'TR351_9'), ('TR351_1_9', 'TR351_9', 'TR351_1'), ('TR351_2_10', 'TR351_10', 'TR351_2'), ('TR351_2_10', 'TR351_2', 'TR351_10'), ('TR351_2_3', 'TR351_2', 'TR351_3'), ('TR351_2_3', 'TR351_3', 'TR351_2'), ('TR351_3_8', 'TR351_3', 'TR351_8'), ('TR351_3_8', 'TR351_8', 'TR351_3'), ('TR351_4_11', 'TR351_11', 'TR351_4'), ('TR351_4_11', 'TR351_4', 'TR351_11'), ('TR351_4_5', 'TR351_4', 'TR351_5'), ('TR351_4_5', 'TR351_5', 'TR351_4'), ('TR351_5_12', 'TR351_12', 'TR351_5'), ('TR351_5_12', 'TR351_5', 'TR351_12'), ('TR351_6_7', 'TR351_6', 'TR351_7'), ('TR351_6_7', 'TR351_7', 'TR351_6'), ('TR351_7_13', 'TR351_13', 'TR351_7'), ('TR351_7_13', 'TR351_7', 'TR351_13'), ('TR351_7_14', 'TR351_14', 'TR351_7'), ('TR351_7_14', 'TR351_7', 'TR351_14'), ('TR352_1_2', 'TR352_1', 'TR352_2'), ('TR352_1_2', 'TR352_2', 'TR352_1'), ('TR352_1_3', 'TR352_1', 'TR352_3'), ('TR352_1_3', 'TR352_3', 'TR352_1'), ('TR352_2_5', 'TR352_2', 'TR352_5'), ('TR352_2_5', 'TR352_5', 'TR352_2'), ('TR352_2_8', 'TR352_2', 'TR352_8'), ('TR352_2_8', 'TR352_8', 'TR352_2'), ('TR352_3_9', 'TR352_3', 'TR352_9'), ('TR352_3_9', 'TR352_9', 'TR352_3'), ('TR352_5_10', 'TR352_10', 'TR352_5'), ('TR352_5_10', 'TR352_5', 'TR352_10'), ('TR352_5_11', 'TR352_11', 'TR352_5'), ('TR352_5_11', 'TR352_5', 'TR352_11'), ('TR352_5_7', 'TR352_5', 'TR352_7'), ('TR352_5_7', 'TR352_7', 'TR352_5'), ('TR352_6_12', 'TR352_12', 'TR352_6'), ('TR352_6_12', 'TR352_6', 'TR352_12'), ('TR352_6_13', 'TR352_13', 'TR352_6'), ('TR352_6_13', 'TR352_6', 'TR352_13'), ('TR352_7_14', 'TR352_14', 'TR352_7'), ('TR352_7_14', 'TR352_7', 'TR352_14'), ('TR353_1_6', 'TR353_1', 'TR353_6'), ('TR353_1_6', 'TR353_6', 'TR353_1'), ('TR353_1_8', 'TR353_1', 'TR353_8'), ('TR353_1_8', 'TR353_8', 'TR353_1'), ('TR353_2_3', 'TR353_2', 'TR353_3'), ('TR353_2_3', 'TR353_3', 'TR353_2'), ('TR353_2_7', 'TR353_2', 'TR353_7'), ('TR353_2_7', 'TR353_7', 'TR353_2'), ('TR353_3_10', 'TR353_10', 'TR353_3'), ('TR353_3_10', 'TR353_3', 'TR353_10'), ('TR353_4_11', 'TR353_11', 'TR353_4'), ('TR353_4_11', 'TR353_4', 'TR353_11'), ('TR353_4_5', 'TR353_4', 'TR353_5'), ('TR353_4_5', 'TR353_5', 'TR353_4'), ('TR353_5_9', 'TR353_5', 'TR353_9'), ('TR353_5_9', 'TR353_9', 'TR353_5'), ('TR353_6_12', 'TR353_12', 'TR353_6'), ('TR353_6_12', 'TR353_6', 'TR353_12'), ('TR353_7_13', 'TR353_13', 'TR353_7'), ('TR353_7_13', 'TR353_7', 'TR353_13'), ('TR354_11_21', 'TR354_11', 'TR354_21'), ('TR354_11_21', 'TR354_21', 'TR354_11'), ('TR354_11_22', 'TR354_11', 'TR354_22'), ('TR354_11_22', 'TR354_22', 'TR354_11'), ('TR354_11_23', 'TR354_11', 'TR354_23'), ('TR354_11_23', 'TR354_23', 'TR354_11'), ('TR354_12_24', 'TR354_12', 'TR354_24'), ('TR354_12_24', 'TR354_24', 'TR354_12'), ('TR354_12_25', 'TR354_12', 'TR354_25'), ('TR354_12_25', 'TR354_25', 'TR354_12'), ('TR354_12_26', 'TR354_12', 'TR354_26'), ('TR354_12_26', 'TR354_26', 'TR354_12'), ('TR354_1_12', 'TR354_1', 'TR354_12'), ('TR354_1_12', 'TR354_12', 'TR354_1'), ('TR354_1_13', 'TR354_1', 'TR354_13'), ('TR354_1_13', 'TR354_13', 'TR354_1'), ('TR354_1_2', 'TR354_1', 'TR354_2'), ('TR354_1_2', 'TR354_2', 'TR354_1'), ('TR354_1_6', 'TR354_1', 'TR354_6'), ('TR354_1_6', 'TR354_6', 'TR354_1'), ('TR354_2_3', 'TR354_2', 'TR354_3'), ('TR354_2_3', 'TR354_3', 'TR354_2'), ('TR354_3_11', 'TR354_11', 'TR354_3'), ('TR354_3_11', 'TR354_3', 'TR354_11'), ('TR354_3_14', 'TR354_14', 'TR354_3'), ('TR354_3_14', 'TR354_3', 'TR354_14'), ('TR354_3_4', 'TR354_3', 'TR354_4'), ('TR354_3_4', 'TR354_4', 'TR354_3'), ('TR354_4_5', 'TR354_4', 'TR354_5'), ('TR354_4_5', 'TR354_5', 'TR354_4'), ('TR354_5_15', 'TR354_15', 'TR354_5'), ('TR354_5_15', 'TR354_5', 'TR354_15'), ('TR354_5_6', 'TR354_5', 'TR354_6'), ('TR354_5_6', 'TR354_6', 'TR354_5'), ('TR354_5_7', 'TR354_5', 'TR354_7'), ('TR354_5_7', 'TR354_7', 'TR354_5'), ('TR354_6_16', 'TR354_16', 'TR354_6'), ('TR354_6_16', 'TR354_6', 'TR354_16'), ('TR354_6_17', 'TR354_17', 'TR354_6'), ('TR354_6_17', 'TR354_6', 'TR354_17'), ('TR354_7_8', 'TR354_7', 'TR354_8'), ('TR354_7_8', 'TR354_8', 'TR354_7'), ('TR354_8_9', 'TR354_8', 'TR354_9'), ('TR354_8_9', 'TR354_9', 'TR354_8'), ('TR354_9_18', 'TR354_18', 'TR354_9'), ('TR354_9_18', 'TR354_9', 'TR354_18'), ('TR354_9_19', 'TR354_19', 'TR354_9'), ('TR354_9_19', 'TR354_9', 'TR354_19'), ('TR354_9_20', 'TR354_20', 'TR354_9'), ('TR354_9_20', 'TR354_9', 'TR354_20'), ('TR355_10_29', 'TR355_10', 'TR355_29'), ('TR355_10_29', 'TR355_29', 'TR355_10'), ('TR355_11_12', 'TR355_11', 'TR355_12'), ('TR355_11_12', 'TR355_12', 'TR355_11'), ('TR355_11_30', 'TR355_11', 'TR355_30'), ('TR355_11_30', 'TR355_30', 'TR355_11'), ('TR355_12_31', 'TR355_12', 'TR355_31'), ('TR355_12_31', 'TR355_31', 'TR355_12'), ('TR355_13_32', 'TR355_13', 'TR355_32'), ('TR355_13_32', 'TR355_32', 'TR355_13'), ('TR355_14_15', 'TR355_14', 'TR355_15'), ('TR355_14_15', 'TR355_15', 'TR355_14'), ('TR355_14_33', 'TR355_14', 'TR355_33'), ('TR355_14_33', 'TR355_33', 'TR355_14'), ('TR355_15_34', 'TR355_15', 'TR355_34'), ('TR355_15_34', 'TR355_34', 'TR355_15'), ('TR355_16_17', 'TR355_16', 'TR355_17'), ('TR355_16_17', 'TR355_17', 'TR355_16'), ('TR355_16_35', 'TR355_16', 'TR355_35'), ('TR355_16_35', 'TR355_35', 'TR355_16'), ('TR355_17_36', 'TR355_17', 'TR355_36'), ('TR355_17_36', 'TR355_36', 'TR355_17'), ('TR355_18_37', 'TR355_18', 'TR355_37'), ('TR355_18_37', 'TR355_37', 'TR355_18'), ('TR355_19_38', 'TR355_19', 'TR355_38'), ('TR355_19_38', 'TR355_38', 'TR355_19'), ('TR355_19_39', 'TR355_19', 'TR355_39'), ('TR355_19_39', 'TR355_39', 'TR355_19'), ('TR355_19_40', 'TR355_19', 'TR355_40'), ('TR355_19_40', 'TR355_40', 'TR355_19'), ('TR355_1_2', 'TR355_1', 'TR355_2'), ('TR355_1_2', 'TR355_2', 'TR355_1'), ('TR355_1_5', 'TR355_1', 'TR355_5'), ('TR355_1_5', 'TR355_5', 'TR355_1'), ('TR355_2_20', 'TR355_2', 'TR355_20'), ('TR355_2_20', 'TR355_20', 'TR355_2'), ('TR355_2_3', 'TR355_2', 'TR355_3'), ('TR355_2_3', 'TR355_3', 'TR355_2'), ('TR355_2_4', 'TR355_2', 'TR355_4'), ('TR355_2_4', 'TR355_4', 'TR355_2'), ('TR355_3_13', 'TR355_13', 'TR355_3'), ('TR355_3_13', 'TR355_3', 'TR355_13'), ('TR355_41_42', 'TR355_41', 'TR355_42'), ('TR355_41_42', 'TR355_42', 'TR355_41'), ('TR355_4_18', 'TR355_18', 'TR355_4'), ('TR355_4_18', 'TR355_4', 'TR355_18'), ('TR355_5_21', 'TR355_21', 'TR355_5'), ('TR355_5_21', 'TR355_5', 'TR355_21'), ('TR355_5_22', 'TR355_22', 'TR355_5'), ('TR355_5_22', 'TR355_5', 'TR355_22'), ('TR355_5_6', 'TR355_5', 'TR355_6'), ('TR355_5_6', 'TR355_6', 'TR355_5'), ('TR355_6_23', 'TR355_23', 'TR355_6'), ('TR355_6_23', 'TR355_6', 'TR355_23'), ('TR355_6_24', 'TR355_24', 'TR355_6'), ('TR355_6_24', 'TR355_6', 'TR355_24'), ('TR355_6_7', 'TR355_6', 'TR355_7'), ('TR355_6_7', 'TR355_7', 'TR355_6'), ('TR355_7_19', 'TR355_19', 'TR355_7'), ('TR355_7_19', 'TR355_7', 'TR355_19'), ('TR355_7_8', 'TR355_7', 'TR355_8'), ('TR355_7_8', 'TR355_8', 'TR355_7'), ('TR355_8_25', 'TR355_25', 'TR355_8'), ('TR355_8_25', 'TR355_8', 'TR355_25'), ('TR355_8_26', 'TR355_26', 'TR355_8'), ('TR355_8_26', 'TR355_8', 'TR355_26'), ('TR355_8_27', 'TR355_27', 'TR355_8'), ('TR355_8_27', 'TR355_8', 'TR355_27'), ('TR355_9_10', 'TR355_10', 'TR355_9'), ('TR355_9_10', 'TR355_9', 'TR355_10'), ('TR355_9_28', 'TR355_28', 'TR355_9'), ('TR355_9_28', 'TR355_9', 'TR355_28'), ('TR356_10_13', 'TR356_10', 'TR356_13'), ('TR356_10_13', 'TR356_13', 'TR356_10'), ('TR356_10_26', 'TR356_10', 'TR356_26'), ('TR356_10_26', 'TR356_26', 'TR356_10'), ('TR356_10_27', 'TR356_10', 'TR356_27'), ('TR356_10_27', 'TR356_27', 'TR356_10'), ('TR356_11_14', 'TR356_11', 'TR356_14'), ('TR356_11_14', 'TR356_14', 'TR356_11'), ('TR356_12_15', 'TR356_12', 'TR356_15'), ('TR356_12_15', 'TR356_15', 'TR356_12'), ('TR356_13_19', 'TR356_13', 'TR356_19'), ('TR356_13_19', 'TR356_19', 'TR356_13'), ('TR356_15_28', 'TR356_15', 'TR356_28'), ('TR356_15_28', 'TR356_28', 'TR356_15'), ('TR356_15_29', 'TR356_15', 'TR356_29'), ('TR356_15_29', 'TR356_29', 'TR356_15'), ('TR356_18_20', 'TR356_18', 'TR356_20'), ('TR356_18_20', 'TR356_20', 'TR356_18'), ('TR356_18_30', 'TR356_18', 'TR356_30'), ('TR356_18_30', 'TR356_30', 'TR356_18'), ('TR356_19_21', 'TR356_19', 'TR356_21'), ('TR356_19_21', 'TR356_21', 'TR356_19'), ('TR356_1_3', 'TR356_1', 'TR356_3'), ('TR356_1_3', 'TR356_3', 'TR356_1'), ('TR356_1_4', 'TR356_1', 'TR356_4'), ('TR356_1_4', 'TR356_4', 'TR356_1'), ('TR356_20_31', 'TR356_20', 'TR356_31'), ('TR356_20_31', 'TR356_31', 'TR356_20'), ('TR356_21_32', 'TR356_21', 'TR356_32'), ('TR356_21_32', 'TR356_32', 'TR356_21'), ('TR356_3_22', 'TR356_22', 'TR356_3'), ('TR356_3_22', 'TR356_3', 'TR356_22'), ('TR356_4_6', 'TR356_4', 'TR356_6'), ('TR356_4_6', 'TR356_6', 'TR356_4'), ('TR356_5_7', 'TR356_5', 'TR356_7'), ('TR356_5_7', 'TR356_7', 'TR356_5'), ('TR356_5_8', 'TR356_5', 'TR356_8'), ('TR356_5_8', 'TR356_8', 'TR356_5'), ('TR356_6_23', 'TR356_23', 'TR356_6'), ('TR356_6_23', 'TR356_6', 'TR356_23'), ('TR356_7_10', 'TR356_10', 'TR356_7'), ('TR356_7_10', 'TR356_7', 'TR356_10'), ('TR356_7_24', 'TR356_24', 'TR356_7'), ('TR356_7_24', 'TR356_7', 'TR356_24'), ('TR356_8_25', 'TR356_25', 'TR356_8'), ('TR356_8_25', 'TR356_8', 'TR356_25'), ('TR356_9_11', 'TR356_11', 'TR356_9'), ('TR356_9_11', 'TR356_9', 'TR356_11'), ('TR356_9_12', 'TR356_12', 'TR356_9'), ('TR356_9_12', 'TR356_9', 'TR356_12'), ('TR357_10_23', 'TR357_10', 'TR357_23'), ('TR357_10_23', 'TR357_23', 'TR357_10'), ('TR357_11_12', 'TR357_11', 'TR357_12'), ('TR357_11_12', 'TR357_12', 'TR357_11'), ('TR357_11_13', 'TR357_11', 'TR357_13'), ('TR357_11_13', 'TR357_13', 'TR357_11'), ('TR357_12_14', 'TR357_12', 'TR357_14'), ('TR357_12_14', 'TR357_14', 'TR357_12'), ('TR357_13_15', 'TR357_13', 'TR357_15'), ('TR357_13_15', 'TR357_15', 'TR357_13'), ('TR357_15_24', 'TR357_15', 'TR357_24'), ('TR357_15_24', 'TR357_24', 'TR357_15'), ('TR357_15_25', 'TR357_15', 'TR357_25'), ('TR357_15_25', 'TR357_25', 'TR357_15'), ('TR357_2_4', 'TR357_2', 'TR357_4'), ('TR357_2_4', 'TR357_4', 'TR357_2'), ('TR357_2_5', 'TR357_2', 'TR357_5'), ('TR357_2_5', 'TR357_5', 'TR357_2'), ('TR357_4_7', 'TR357_4', 'TR357_7'), ('TR357_4_7', 'TR357_7', 'TR357_4'), ('TR357_5_18', 'TR357_18', 'TR357_5'), ('TR357_5_18', 'TR357_5', 'TR357_18'), ('TR357_5_8', 'TR357_5', 'TR357_8'), ('TR357_5_8', 'TR357_8', 'TR357_5'), ('TR357_6_10', 'TR357_10', 'TR357_6'), ('TR357_6_10', 'TR357_6', 'TR357_10'), ('TR357_6_9', 'TR357_6', 'TR357_9'), ('TR357_6_9', 'TR357_9', 'TR357_6'), ('TR357_7_19', 'TR357_19', 'TR357_7'), ('TR357_7_19', 'TR357_7', 'TR357_19'), ('TR357_8_10', 'TR357_10', 'TR357_8'), ('TR357_8_10', 'TR357_8', 'TR357_10'), ('TR357_8_20', 'TR357_20', 'TR357_8'), ('TR357_8_20', 'TR357_8', 'TR357_20'), ('TR357_8_21', 'TR357_21', 'TR357_8'), ('TR357_8_21', 'TR357_8', 'TR357_21'), ('TR357_9_22', 'TR357_22', 'TR357_9'), ('TR357_9_22', 'TR357_9', 'TR357_22'), ('TR358_10_14', 'TR358_10', 'TR358_14'), ('TR358_10_14', 'TR358_14', 'TR358_10'), ('TR358_10_15', 'TR358_10', 'TR358_15'), ('TR358_10_15', 'TR358_15', 'TR358_10'), ('TR358_10_32', 'TR358_10', 'TR358_32'), ('TR358_10_32', 'TR358_32', 'TR358_10'), ('TR358_11_16', 'TR358_11', 'TR358_16'), ('TR358_11_16', 'TR358_16', 'TR358_11'), ('TR358_12_33', 'TR358_12', 'TR358_33'), ('TR358_12_33', 'TR358_33', 'TR358_12'), ('TR358_15_34', 'TR358_15', 'TR358_34'), ('TR358_15_34', 'TR358_34', 'TR358_15'), ('TR358_15_35', 'TR358_15', 'TR358_35'), ('TR358_15_35', 'TR358_35', 'TR358_15'), ('TR358_15_36', 'TR358_15', 'TR358_36'), ('TR358_15_36', 'TR358_36', 'TR358_15'), ('TR358_16_18', 'TR358_16', 'TR358_18'), ('TR358_16_18', 'TR358_18', 'TR358_16'), ('TR358_16_37', 'TR358_16', 'TR358_37'), ('TR358_16_37', 'TR358_37', 'TR358_16'), ('TR358_18_19', 'TR358_18', 'TR358_19'), ('TR358_18_19', 'TR358_19', 'TR358_18'), ('TR358_18_20', 'TR358_18', 'TR358_20'), ('TR358_18_20', 'TR358_20', 'TR358_18'), ('TR358_18_38', 'TR358_18', 'TR358_38'), ('TR358_18_38', 'TR358_38', 'TR358_18'), ('TR358_19_21', 'TR358_19', 'TR358_21'), ('TR358_19_21', 'TR358_21', 'TR358_19'), ('TR358_19_39', 'TR358_19', 'TR358_39'), ('TR358_19_39', 'TR358_39', 'TR358_19'), ('TR358_19_40', 'TR358_19', 'TR358_40'), ('TR358_19_40', 'TR358_40', 'TR358_19'), ('TR358_1_2', 'TR358_1', 'TR358_2'), ('TR358_1_2', 'TR358_2', 'TR358_1'), ('TR358_20_23', 'TR358_20', 'TR358_23'), ('TR358_20_23', 'TR358_23', 'TR358_20'), ('TR358_21_25', 'TR358_21', 'TR358_25'), ('TR358_21_25', 'TR358_25', 'TR358_21'), ('TR358_23_41', 'TR358_23', 'TR358_41'), ('TR358_23_41', 'TR358_41', 'TR358_23'), ('TR358_24_26', 'TR358_24', 'TR358_26'), ('TR358_24_26', 'TR358_26', 'TR358_24'), ('TR358_24_42', 'TR358_24', 'TR358_42'), ('TR358_24_42', 'TR358_42', 'TR358_24'), ('TR358_25_43', 'TR358_25', 'TR358_43'), ('TR358_25_43', 'TR358_43', 'TR358_25'), ('TR358_26_44', 'TR358_26', 'TR358_44'), ('TR358_26_44', 'TR358_44', 'TR358_26'), ('TR358_27_28', 'TR358_27', 'TR358_28'), ('TR358_27_28', 'TR358_28', 'TR358_27'), ('TR358_27_45', 'TR358_27', 'TR358_45'), ('TR358_27_45', 'TR358_45', 'TR358_27'), ('TR358_28_46', 'TR358_28', 'TR358_46'), ('TR358_28_46', 'TR358_46', 'TR358_28'), ('TR358_2_4', 'TR358_2', 'TR358_4'), ('TR358_2_4', 'TR358_4', 'TR358_2'), ('TR358_3_5', 'TR358_3', 'TR358_5'), ('TR358_3_5', 'TR358_5', 'TR358_3'), ('TR358_3_6', 'TR358_3', 'TR358_6'), ('TR358_3_6', 'TR358_6', 'TR358_3'), ('TR358_4_29', 'TR358_29', 'TR358_4'), ('TR358_4_29', 'TR358_4', 'TR358_29'), ('TR358_5_9', 'TR358_5', 'TR358_9'), ('TR358_5_9', 'TR358_9', 'TR358_5'), ('TR358_6_10', 'TR358_10', 'TR358_6'), ('TR358_6_10', 'TR358_6', 'TR358_10'), ('TR358_6_30', 'TR358_30', 'TR358_6'), ('TR358_6_30', 'TR358_6', 'TR358_30'), ('TR358_6_31', 'TR358_31', 'TR358_6'), ('TR358_6_31', 'TR358_6', 'TR358_31'), ('TR358_7_11', 'TR358_11', 'TR358_7'), ('TR358_7_11', 'TR358_7', 'TR358_11'), ('TR358_7_8', 'TR358_7', 'TR358_8'), ('TR358_7_8', 'TR358_8', 'TR358_7'), ('TR358_8_12', 'TR358_12', 'TR358_8'), ('TR358_8_12', 'TR358_8', 'TR358_12'), ('TR358_9_14', 'TR358_14', 'TR358_9'), ('TR358_9_14', 'TR358_9', 'TR358_14'), ('TR359_10_20', 'TR359_10', 'TR359_20'), ('TR359_10_20', 'TR359_20', 'TR359_10'), ('TR359_11_21', 'TR359_11', 'TR359_21'), ('TR359_11_21', 'TR359_21', 'TR359_11'), ('TR359_12_15', 'TR359_12', 'TR359_15'), ('TR359_12_15', 'TR359_15', 'TR359_12'), ('TR359_13_22', 'TR359_13', 'TR359_22'), ('TR359_13_22', 'TR359_22', 'TR359_13'), ('TR359_14_23', 'TR359_14', 'TR359_23'), ('TR359_14_23', 'TR359_23', 'TR359_14'), ('TR359_15_24', 'TR359_15', 'TR359_24'), ('TR359_15_24', 'TR359_24', 'TR359_15'), ('TR359_1_2', 'TR359_1', 'TR359_2'), ('TR359_1_2', 'TR359_2', 'TR359_1'), ('TR359_1_3', 'TR359_1', 'TR359_3'), ('TR359_1_3', 'TR359_3', 'TR359_1'), ('TR359_2_17', 'TR359_17', 'TR359_2'), ('TR359_2_17', 'TR359_2', 'TR359_17'), ('TR359_2_18', 'TR359_18', 'TR359_2'), ('TR359_2_18', 'TR359_2', 'TR359_18'), ('TR359_2_19', 'TR359_19', 'TR359_2'), ('TR359_2_19', 'TR359_2', 'TR359_19'), ('TR359_3_5', 'TR359_3', 'TR359_5'), ('TR359_3_5', 'TR359_5', 'TR359_3'), ('TR359_4_6', 'TR359_4', 'TR359_6'), ('TR359_4_6', 'TR359_6', 'TR359_4'), ('TR359_4_7', 'TR359_4', 'TR359_7'), ('TR359_4_7', 'TR359_7', 'TR359_4'), ('TR359_5_9', 'TR359_5', 'TR359_9'), ('TR359_5_9', 'TR359_9', 'TR359_5'), ('TR359_6_11', 'TR359_11', 'TR359_6'), ('TR359_6_11', 'TR359_6', 'TR359_11'), ('TR359_7_12', 'TR359_12', 'TR359_7'), ('TR359_7_12', 'TR359_7', 'TR359_12'), ('TR359_8_10', 'TR359_10', 'TR359_8'), ('TR359_8_10', 'TR359_8', 'TR359_10'), ('TR359_8_13', 'TR359_13', 'TR359_8'), ('TR359_8_13', 'TR359_8', 'TR359_13'), ('TR359_9_14', 'TR359_14', 'TR359_9'), ('TR359_9_14', 'TR359_9', 'TR359_14'), ('TR360_1_10', 'TR360_1', 'TR360_10'), ('TR360_1_10', 'TR360_10', 'TR360_1'), ('TR360_1_6', 'TR360_1', 'TR360_6'), ('TR360_1_6', 'TR360_6', 'TR360_1'), ('TR360_2_11', 'TR360_11', 'TR360_2'), ('TR360_2_11', 'TR360_2', 'TR360_11'), ('TR360_2_3', 'TR360_2', 'TR360_3'), ('TR360_2_3', 'TR360_3', 'TR360_2'), ('TR360_3_12', 'TR360_12', 'TR360_3'), ('TR360_3_12', 'TR360_3', 'TR360_12'), ('TR360_4_13', 'TR360_13', 'TR360_4'), ('TR360_4_13', 'TR360_4', 'TR360_13'), ('TR360_4_5', 'TR360_4', 'TR360_5'), ('TR360_4_5', 'TR360_5', 'TR360_4'), ('TR360_5_14', 'TR360_14', 'TR360_5'), ('TR360_5_14', 'TR360_5', 'TR360_14'), ('TR360_6_7', 'TR360_6', 'TR360_7'), ('TR360_6_7', 'TR360_7', 'TR360_6'), ('TR360_7_8', 'TR360_7', 'TR360_8'), ('TR360_7_8', 'TR360_8', 'TR360_7'), ('TR360_7_9', 'TR360_7', 'TR360_9'), ('TR360_7_9', 'TR360_9', 'TR360_7'), ('TR360_8_15', 'TR360_15', 'TR360_8'), ('TR360_8_15', 'TR360_8', 'TR360_15'), ('TR360_8_16', 'TR360_16', 'TR360_8'), ('TR360_8_16', 'TR360_8', 'TR360_16'), ('TR360_8_17', 'TR360_17', 'TR360_8'), ('TR360_8_17', 'TR360_8', 'TR360_17'), ('TR360_9_18', 'TR360_18', 'TR360_9'), ('TR360_9_18', 'TR360_9', 'TR360_18'), ('TR360_9_19', 'TR360_19', 'TR360_9'), ('TR360_9_19', 'TR360_9', 'TR360_19'), ('TR360_9_20', 'TR360_20', 'TR360_9'), ('TR360_9_20', 'TR360_9', 'TR360_20'), ('TR361_1_2', 'TR361_1', 'TR361_2'), ('TR361_1_2', 'TR361_2', 'TR361_1'), ('TR361_1_3', 'TR361_1', 'TR361_3'), ('TR361_1_3', 'TR361_3', 'TR361_1'), ('TR361_1_4', 'TR361_1', 'TR361_4'), ('TR361_1_4', 'TR361_4', 'TR361_1'), ('TR361_1_5', 'TR361_1', 'TR361_5'), ('TR361_1_5', 'TR361_5', 'TR361_1'), ('TR361_2_6', 'TR361_2', 'TR361_6'), ('TR361_2_6', 'TR361_6', 'TR361_2'), ('TR361_2_7', 'TR361_2', 'TR361_7'), ('TR361_2_7', 'TR361_7', 'TR361_2'), ('TR361_2_8', 'TR361_2', 'TR361_8'), ('TR361_2_8', 'TR361_8', 'TR361_2'), ('TR362_1_11', 'TR362_1', 'TR362_11'), ('TR362_1_11', 'TR362_11', 'TR362_1'), ('TR362_1_2', 'TR362_1', 'TR362_2'), ('TR362_1_2', 'TR362_2', 'TR362_1'), ('TR362_1_3', 'TR362_1', 'TR362_3'), ('TR362_1_3', 'TR362_3', 'TR362_1'), ('TR362_1_4', 'TR362_1', 'TR362_4'), ('TR362_1_4', 'TR362_4', 'TR362_1'), ('TR362_2_12', 'TR362_12', 'TR362_2'), ('TR362_2_12', 'TR362_2', 'TR362_12'), ('TR362_2_3', 'TR362_2', 'TR362_3'), ('TR362_2_3', 'TR362_3', 'TR362_2'), ('TR362_2_5', 'TR362_2', 'TR362_5'), ('TR362_2_5', 'TR362_5', 'TR362_2'), ('TR362_4_13', 'TR362_13', 'TR362_4'), ('TR362_4_13', 'TR362_4', 'TR362_13'), ('TR362_4_14', 'TR362_14', 'TR362_4'), ('TR362_4_14', 'TR362_4', 'TR362_14'), ('TR362_4_6', 'TR362_4', 'TR362_6'), ('TR362_4_6', 'TR362_6', 'TR362_4'), ('TR362_5_15', 'TR362_15', 'TR362_5'), ('TR362_5_15', 'TR362_5', 'TR362_15'), ('TR362_5_16', 'TR362_16', 'TR362_5'), ('TR362_5_16', 'TR362_5', 'TR362_16'), ('TR362_5_7', 'TR362_5', 'TR362_7'), ('TR362_5_7', 'TR362_7', 'TR362_5'), ('TR362_6_17', 'TR362_17', 'TR362_6'), ('TR362_6_17', 'TR362_6', 'TR362_17'), ('TR362_6_7', 'TR362_6', 'TR362_7'), ('TR362_6_7', 'TR362_7', 'TR362_6'), ('TR362_6_8', 'TR362_6', 'TR362_8'), ('TR362_6_8', 'TR362_8', 'TR362_6'), ('TR362_7_18', 'TR362_18', 'TR362_7'), ('TR362_7_18', 'TR362_7', 'TR362_18'), ('TR362_7_19', 'TR362_19', 'TR362_7'), ('TR362_7_19', 'TR362_7', 'TR362_19'), ('TR362_8_10', 'TR362_10', 'TR362_8'), ('TR362_8_10', 'TR362_8', 'TR362_10'), ('TR362_8_20', 'TR362_20', 'TR362_8'), ('TR362_8_20', 'TR362_8', 'TR362_20'), ('TR362_8_9', 'TR362_8', 'TR362_9'), ('TR362_8_9', 'TR362_9', 'TR362_8'), ('TR362_9_10', 'TR362_10', 'TR362_9'), ('TR362_9_10', 'TR362_9', 'TR362_10'), ('TR362_9_21', 'TR362_21', 'TR362_9'), ('TR362_9_21', 'TR362_9', 'TR362_21'), ('TR362_9_22', 'TR362_22', 'TR362_9'), ('TR362_9_22', 'TR362_9', 'TR362_22'), ('TR363_1_2', 'TR363_1', 'TR363_2'), ('TR363_1_2', 'TR363_2', 'TR363_1'), ('TR363_1_4', 'TR363_1', 'TR363_4'), ('TR363_1_4', 'TR363_4', 'TR363_1'), ('TR363_1_5', 'TR363_1', 'TR363_5'), ('TR363_1_5', 'TR363_5', 'TR363_1'), ('TR363_1_6', 'TR363_1', 'TR363_6'), ('TR363_1_6', 'TR363_6', 'TR363_1'), ('TR363_2_3', 'TR363_2', 'TR363_3'), ('TR363_2_3', 'TR363_3', 'TR363_2'), ('TR363_2_7', 'TR363_2', 'TR363_7'), ('TR363_2_7', 'TR363_7', 'TR363_2'), ('TR363_2_8', 'TR363_2', 'TR363_8'), ('TR363_2_8', 'TR363_8', 'TR363_2'), ('TR364_10_16', 'TR364_10', 'TR364_16'), ('TR364_10_16', 'TR364_16', 'TR364_10'), ('TR364_11_12', 'TR364_11', 'TR364_12'), ('TR364_11_12', 'TR364_12', 'TR364_11'), ('TR364_11_36', 'TR364_11', 'TR364_36'), ('TR364_11_36', 'TR364_36', 'TR364_11'), ('TR364_12_13', 'TR364_12', 'TR364_13'), ('TR364_12_13', 'TR364_13', 'TR364_12'), ('TR364_13_22', 'TR364_13', 'TR364_22'), ('TR364_13_22', 'TR364_22', 'TR364_13'), ('TR364_14_37', 'TR364_14', 'TR364_37'), ('TR364_14_37', 'TR364_37', 'TR364_14'), ('TR364_15_24', 'TR364_15', 'TR364_24'), ('TR364_15_24', 'TR364_24', 'TR364_15'), ('TR364_15_38', 'TR364_15', 'TR364_38'), ('TR364_15_38', 'TR364_38', 'TR364_15'), ('TR364_16_21', 'TR364_16', 'TR364_21'), ('TR364_16_21', 'TR364_21', 'TR364_16'), ('TR364_17_18', 'TR364_17', 'TR364_18'), ('TR364_17_18', 'TR364_18', 'TR364_17'), ('TR364_17_39', 'TR364_17', 'TR364_39'), ('TR364_17_39', 'TR364_39', 'TR364_17'), ('TR364_18_40', 'TR364_18', 'TR364_40'), ('TR364_18_40', 'TR364_40', 'TR364_18'), ('TR364_19_20', 'TR364_19', 'TR364_20'), ('TR364_19_20', 'TR364_20', 'TR364_19'), ('TR364_19_41', 'TR364_19', 'TR364_41'), ('TR364_19_41', 'TR364_41', 'TR364_19'), ('TR364_1_6', 'TR364_1', 'TR364_6'), ('TR364_1_6', 'TR364_6', 'TR364_1'), ('TR364_1_7', 'TR364_1', 'TR364_7'), ('TR364_1_7', 'TR364_7', 'TR364_1'), ('TR364_20_42', 'TR364_20', 'TR364_42'), ('TR364_20_42', 'TR364_42', 'TR364_20'), ('TR364_21_29', 'TR364_21', 'TR364_29'), ('TR364_21_29', 'TR364_29', 'TR364_21'), ('TR364_22_43', 'TR364_22', 'TR364_43'), ('TR364_22_43', 'TR364_43', 'TR364_22'), ('TR364_22_44', 'TR364_22', 'TR364_44'), ('TR364_22_44', 'TR364_44', 'TR364_22'), ('TR364_22_45', 'TR364_22', 'TR364_45'), ('TR364_22_45', 'TR364_45', 'TR364_22'), ('TR364_23_46', 'TR364_23', 'TR364_46'), ('TR364_23_46', 'TR364_46', 'TR364_23'), ('TR364_23_47', 'TR364_23', 'TR364_47'), ('TR364_23_47', 'TR364_47', 'TR364_23'), ('TR364_23_48', 'TR364_23', 'TR364_48'), ('TR364_23_48', 'TR364_48', 'TR364_23'), ('TR364_24_25', 'TR364_24', 'TR364_25'), ('TR364_24_25', 'TR364_25', 'TR364_24'), ('TR364_24_49', 'TR364_24', 'TR364_49'), ('TR364_24_49', 'TR364_49', 'TR364_24'), ('TR364_24_50', 'TR364_24', 'TR364_50'), ('TR364_24_50', 'TR364_50', 'TR364_24'), ('TR364_25_51', 'TR364_25', 'TR364_51'), ('TR364_25_51', 'TR364_51', 'TR364_25'), ('TR364_25_52', 'TR364_25', 'TR364_52'), ('TR364_25_52', 'TR364_52', 'TR364_25'), ('TR364_25_53', 'TR364_25', 'TR364_53'), ('TR364_25_53', 'TR364_53', 'TR364_25'), ('TR364_26_27', 'TR364_26', 'TR364_27'), ('TR364_26_27', 'TR364_27', 'TR364_26'), ('TR364_26_54', 'TR364_26', 'TR364_54'), ('TR364_26_54', 'TR364_54', 'TR364_26'), ('TR364_27_28', 'TR364_27', 'TR364_28'), ('TR364_27_28', 'TR364_28', 'TR364_27'), ('TR364_27_55', 'TR364_27', 'TR364_55'), ('TR364_27_55', 'TR364_55', 'TR364_27'), ('TR364_27_56', 'TR364_27', 'TR364_56'), ('TR364_27_56', 'TR364_56', 'TR364_27'), ('TR364_28_57', 'TR364_28', 'TR364_57'), ('TR364_28_57', 'TR364_57', 'TR364_28'), ('TR364_28_58', 'TR364_28', 'TR364_58'), ('TR364_28_58', 'TR364_58', 'TR364_28'), ('TR364_28_59', 'TR364_28', 'TR364_59'), ('TR364_28_59', 'TR364_59', 'TR364_28'), ('TR364_29_31', 'TR364_29', 'TR364_31'), ('TR364_29_31', 'TR364_31', 'TR364_29'), ('TR364_2_10', 'TR364_10', 'TR364_2'), ('TR364_2_10', 'TR364_2', 'TR364_10'), ('TR364_2_3', 'TR364_2', 'TR364_3'), ('TR364_2_3', 'TR364_3', 'TR364_2'), ('TR364_31_32', 'TR364_31', 'TR364_32'), ('TR364_31_32', 'TR364_32', 'TR364_31'), ('TR364_32_33', 'TR364_32', 'TR364_33'), ('TR364_32_33', 'TR364_33', 'TR364_32'), ('TR364_32_60', 'TR364_32', 'TR364_60'), ('TR364_32_60', 'TR364_60', 'TR364_32'), ('TR364_32_61', 'TR364_32', 'TR364_61'), ('TR364_32_61', 'TR364_61', 'TR364_32'), ('TR364_33_62', 'TR364_33', 'TR364_62'), ('TR364_33_62', 'TR364_62', 'TR364_33'), ('TR364_33_63', 'TR364_33', 'TR364_63'), ('TR364_33_63', 'TR364_63', 'TR364_33'), ('TR364_33_64', 'TR364_33', 'TR364_64'), ('TR364_33_64', 'TR364_64', 'TR364_33'), ('TR364_3_34', 'TR364_3', 'TR364_34'), ('TR364_3_34', 'TR364_34', 'TR364_3'), ('TR364_4_23', 'TR364_23', 'TR364_4'), ('TR364_4_23', 'TR364_4', 'TR364_23'), ('TR364_4_5', 'TR364_4', 'TR364_5'), ('TR364_4_5', 'TR364_5', 'TR364_4'), ('TR364_5_26', 'TR364_26', 'TR364_5'), ('TR364_5_26', 'TR364_5', 'TR364_26'), ('TR364_6_35', 'TR364_35', 'TR364_6'), ('TR364_6_35', 'TR364_6', 'TR364_35'), ('TR364_7_8', 'TR364_7', 'TR364_8'), ('TR364_7_8', 'TR364_8', 'TR364_7'), ('TR364_8_9', 'TR364_8', 'TR364_9'), ('TR364_8_9', 'TR364_9', 'TR364_8'), ('TR364_9_14', 'TR364_14', 'TR364_9'), ('TR364_9_14', 'TR364_9', 'TR364_14'), ('TR365_10_11', 'TR365_10', 'TR365_11'), ('TR365_10_11', 'TR365_11', 'TR365_10'), ('TR365_13_14', 'TR365_13', 'TR365_14'), ('TR365_13_14', 'TR365_14', 'TR365_13'), ('TR365_16_17', 'TR365_16', 'TR365_17'), ('TR365_16_17', 'TR365_17', 'TR365_16'), ('TR365_19_20', 'TR365_19', 'TR365_20'), ('TR365_19_20', 'TR365_20', 'TR365_19'), ('TR365_1_2', 'TR365_1', 'TR365_2'), ('TR365_1_2', 'TR365_2', 'TR365_1'), ('TR365_1_22', 'TR365_1', 'TR365_22'), ('TR365_1_22', 'TR365_22', 'TR365_1'), ('TR365_1_23', 'TR365_1', 'TR365_23'), ('TR365_1_23', 'TR365_23', 'TR365_1'), ('TR365_1_7', 'TR365_1', 'TR365_7'), ('TR365_1_7', 'TR365_7', 'TR365_1'), ('TR365_2_3', 'TR365_2', 'TR365_3'), ('TR365_2_3', 'TR365_3', 'TR365_2'), ('TR365_2_4', 'TR365_2', 'TR365_4'), ('TR365_2_4', 'TR365_4', 'TR365_2'), ('TR365_2_5', 'TR365_2', 'TR365_5'), ('TR365_2_5', 'TR365_5', 'TR365_2'), ('TR365_3_24', 'TR365_24', 'TR365_3'), ('TR365_3_24', 'TR365_3', 'TR365_24'), ('TR365_3_25', 'TR365_25', 'TR365_3'), ('TR365_3_25', 'TR365_3', 'TR365_25'), ('TR365_3_8', 'TR365_3', 'TR365_8'), ('TR365_3_8', 'TR365_8', 'TR365_3'), ('TR365_4_26', 'TR365_26', 'TR365_4'), ('TR365_4_26', 'TR365_4', 'TR365_26'), ('TR365_4_27', 'TR365_27', 'TR365_4'), ('TR365_4_27', 'TR365_4', 'TR365_27'), ('TR365_4_9', 'TR365_4', 'TR365_9'), ('TR365_4_9', 'TR365_9', 'TR365_4'), ('TR365_5_28', 'TR365_28', 'TR365_5'), ('TR365_5_28', 'TR365_5', 'TR365_28'), ('TR365_5_29', 'TR365_29', 'TR365_5'), ('TR365_5_29', 'TR365_5', 'TR365_29'), ('TR365_5_6', 'TR365_5', 'TR365_6'), ('TR365_5_6', 'TR365_6', 'TR365_5'), ('TR365_6_10', 'TR365_10', 'TR365_6'), ('TR365_6_10', 'TR365_6', 'TR365_10'), ('TR365_7_13', 'TR365_13', 'TR365_7'), ('TR365_7_13', 'TR365_7', 'TR365_13'), ('TR365_8_16', 'TR365_16', 'TR365_8'), ('TR365_8_16', 'TR365_8', 'TR365_16'), ('TR365_9_19', 'TR365_19', 'TR365_9'), ('TR365_9_19', 'TR365_9', 'TR365_19'), ('TR366_1_6', 'TR366_1', 'TR366_6'), ('TR366_1_6', 'TR366_6', 'TR366_1'), ('TR366_1_9', 'TR366_1', 'TR366_9'), ('TR366_1_9', 'TR366_9', 'TR366_1'), ('TR366_2_3', 'TR366_2', 'TR366_3'), ('TR366_2_3', 'TR366_3', 'TR366_2'), ('TR366_2_8', 'TR366_2', 'TR366_8'), ('TR366_2_8', 'TR366_8', 'TR366_2'), ('TR366_3_10', 'TR366_10', 'TR366_3'), ('TR366_3_10', 'TR366_3', 'TR366_10'), ('TR366_4_11', 'TR366_11', 'TR366_4'), ('TR366_4_11', 'TR366_4', 'TR366_11'), ('TR366_4_5', 'TR366_4', 'TR366_5'), ('TR366_4_5', 'TR366_5', 'TR366_4'), ('TR366_5_7', 'TR366_5', 'TR366_7'), ('TR366_5_7', 'TR366_7', 'TR366_5'), ('TR366_6_12', 'TR366_12', 'TR366_6'), ('TR366_6_12', 'TR366_6', 'TR366_12'), ('TR366_7_13', 'TR366_13', 'TR366_7'), ('TR366_7_13', 'TR366_7', 'TR366_13'), ('TR366_8_14', 'TR366_14', 'TR366_8'), ('TR366_8_14', 'TR366_8', 'TR366_14'), ('TR367_10_16', 'TR367_10', 'TR367_16'), ('TR367_10_16', 'TR367_16', 'TR367_10'), ('TR367_10_27', 'TR367_10', 'TR367_27'), ('TR367_10_27', 'TR367_27', 'TR367_10'), ('TR367_11_28', 'TR367_11', 'TR367_28'), ('TR367_11_28', 'TR367_28', 'TR367_11'), ('TR367_12_18', 'TR367_12', 'TR367_18'), ('TR367_12_18', 'TR367_18', 'TR367_12'), ('TR367_12_29', 'TR367_12', 'TR367_29'), ('TR367_12_29', 'TR367_29', 'TR367_12'), ('TR367_12_30', 'TR367_12', 'TR367_30'), ('TR367_12_30', 'TR367_30', 'TR367_12'), ('TR367_14_19', 'TR367_14', 'TR367_19'), ('TR367_14_19', 'TR367_19', 'TR367_14'), ('TR367_14_31', 'TR367_14', 'TR367_31'), ('TR367_14_31', 'TR367_31', 'TR367_14'), ('TR367_15_32', 'TR367_15', 'TR367_32'), ('TR367_15_32', 'TR367_32', 'TR367_15'), ('TR367_16_33', 'TR367_16', 'TR367_33'), ('TR367_16_33', 'TR367_33', 'TR367_16'), ('TR367_17_21', 'TR367_17', 'TR367_21'), ('TR367_17_21', 'TR367_21', 'TR367_17'), ('TR367_17_34', 'TR367_17', 'TR367_34'), ('TR367_17_34', 'TR367_34', 'TR367_17'), ('TR367_18_22', 'TR367_18', 'TR367_22'), ('TR367_18_22', 'TR367_22', 'TR367_18'), ('TR367_18_35', 'TR367_18', 'TR367_35'), ('TR367_18_35', 'TR367_35', 'TR367_18'), ('TR367_18_36', 'TR367_18', 'TR367_36'), ('TR367_18_36', 'TR367_36', 'TR367_18'), ('TR367_19_37', 'TR367_19', 'TR367_37'), ('TR367_19_37', 'TR367_37', 'TR367_19'), ('TR367_20_23', 'TR367_20', 'TR367_23'), ('TR367_20_23', 'TR367_23', 'TR367_20'), ('TR367_20_38', 'TR367_20', 'TR367_38'), ('TR367_20_38', 'TR367_38', 'TR367_20'), ('TR367_21_39', 'TR367_21', 'TR367_39'), ('TR367_21_39', 'TR367_39', 'TR367_21'), ('TR367_22_40', 'TR367_22', 'TR367_40'), ('TR367_22_40', 'TR367_40', 'TR367_22'), ('TR367_22_41', 'TR367_22', 'TR367_41'), ('TR367_22_41', 'TR367_41', 'TR367_22'), ('TR367_22_42', 'TR367_22', 'TR367_42'), ('TR367_22_42', 'TR367_42', 'TR367_22'), ('TR367_23_43', 'TR367_23', 'TR367_43'), ('TR367_23_43', 'TR367_43', 'TR367_23'), ('TR367_2_3', 'TR367_2', 'TR367_3'), ('TR367_2_3', 'TR367_3', 'TR367_2'), ('TR367_2_4', 'TR367_2', 'TR367_4'), ('TR367_2_4', 'TR367_4', 'TR367_2'), ('TR367_3_5', 'TR367_3', 'TR367_5'), ('TR367_3_5', 'TR367_5', 'TR367_3'), ('TR367_3_6', 'TR367_3', 'TR367_6'), ('TR367_3_6', 'TR367_6', 'TR367_3'), ('TR367_4_24', 'TR367_24', 'TR367_4'), ('TR367_4_24', 'TR367_4', 'TR367_24'), ('TR367_4_7', 'TR367_4', 'TR367_7'), ('TR367_4_7', 'TR367_7', 'TR367_4'), ('TR367_4_8', 'TR367_4', 'TR367_8'), ('TR367_4_8', 'TR367_8', 'TR367_4'), ('TR367_5_8', 'TR367_5', 'TR367_8'), ('TR367_5_8', 'TR367_8', 'TR367_5'), ('TR367_5_9', 'TR367_5', 'TR367_9'), ('TR367_5_9', 'TR367_9', 'TR367_5'), ('TR367_6_11', 'TR367_11', 'TR367_6'), ('TR367_6_11', 'TR367_6', 'TR367_11'), ('TR367_7_12', 'TR367_12', 'TR367_7'), ('TR367_7_12', 'TR367_7', 'TR367_12'), ('TR367_7_25', 'TR367_25', 'TR367_7'), ('TR367_7_25', 'TR367_7', 'TR367_25'), ('TR367_7_26', 'TR367_26', 'TR367_7'), ('TR367_7_26', 'TR367_7', 'TR367_26'), ('TR367_9_15', 'TR367_15', 'TR367_9'), ('TR367_9_15', 'TR367_9', 'TR367_15'), ('TR368_10_24', 'TR368_10', 'TR368_24'), ('TR368_10_24', 'TR368_24', 'TR368_10'), ('TR368_11_14', 'TR368_11', 'TR368_14'), ('TR368_11_14', 'TR368_14', 'TR368_11'), ('TR368_11_15', 'TR368_11', 'TR368_15'), ('TR368_11_15', 'TR368_15', 'TR368_11'), ('TR368_12_17', 'TR368_12', 'TR368_17'), ('TR368_12_17', 'TR368_17', 'TR368_12'), ('TR368_14_25', 'TR368_14', 'TR368_25'), ('TR368_14_25', 'TR368_25', 'TR368_14'), ('TR368_15_26', 'TR368_15', 'TR368_26'), ('TR368_15_26', 'TR368_26', 'TR368_15'), ('TR368_15_27', 'TR368_15', 'TR368_27'), ('TR368_15_27', 'TR368_27', 'TR368_15'), ('TR368_15_28', 'TR368_15', 'TR368_28'), ('TR368_15_28', 'TR368_28', 'TR368_15'), ('TR368_17_29', 'TR368_17', 'TR368_29'), ('TR368_17_29', 'TR368_29', 'TR368_17'), ('TR368_1_18', 'TR368_1', 'TR368_18'), ('TR368_1_18', 'TR368_18', 'TR368_1'), ('TR368_1_19', 'TR368_1', 'TR368_19'), ('TR368_1_19', 'TR368_19', 'TR368_1'), ('TR368_1_2', 'TR368_1', 'TR368_2'), ('TR368_1_2', 'TR368_2', 'TR368_1'), ('TR368_1_3', 'TR368_1', 'TR368_3'), ('TR368_1_3', 'TR368_3', 'TR368_1'), ('TR368_2_20', 'TR368_2', 'TR368_20'), ('TR368_2_20', 'TR368_20', 'TR368_2'), ('TR368_2_21', 'TR368_2', 'TR368_21'), ('TR368_2_21', 'TR368_21', 'TR368_2'), ('TR368_2_22', 'TR368_2', 'TR368_22'), ('TR368_2_22', 'TR368_22', 'TR368_2'), ('TR368_3_4', 'TR368_3', 'TR368_4'), ('TR368_3_4', 'TR368_4', 'TR368_3'), ('TR368_3_5', 'TR368_3', 'TR368_5'), ('TR368_3_5', 'TR368_5', 'TR368_3'), ('TR368_4_7', 'TR368_4', 'TR368_7'), ('TR368_4_7', 'TR368_7', 'TR368_4'), ('TR368_5_23', 'TR368_23', 'TR368_5'), ('TR368_5_23', 'TR368_5', 'TR368_23'), ('TR368_6_10', 'TR368_10', 'TR368_6'), ('TR368_6_10', 'TR368_6', 'TR368_10'), ('TR368_6_9', 'TR368_6', 'TR368_9'), ('TR368_6_9', 'TR368_9', 'TR368_6'), ('TR368_8_12', 'TR368_12', 'TR368_8'), ('TR368_8_12', 'TR368_8', 'TR368_12'), ('TR368_8_9', 'TR368_8', 'TR368_9'), ('TR368_8_9', 'TR368_9', 'TR368_8'), ('TR369_1_10', 'TR369_1', 'TR369_10'), ('TR369_1_10', 'TR369_10', 'TR369_1'), ('TR369_1_2', 'TR369_1', 'TR369_2'), ('TR369_1_2', 'TR369_2', 'TR369_1'), ('TR369_1_3', 'TR369_1', 'TR369_3'), ('TR369_1_3', 'TR369_3', 'TR369_1'), ('TR369_1_4', 'TR369_1', 'TR369_4'), ('TR369_1_4', 'TR369_4', 'TR369_1'), ('TR369_2_11', 'TR369_11', 'TR369_2'), ('TR369_2_11', 'TR369_2', 'TR369_11'), ('TR369_2_12', 'TR369_12', 'TR369_2'), ('TR369_2_12', 'TR369_2', 'TR369_12'), ('TR369_2_13', 'TR369_13', 'TR369_2'), ('TR369_2_13', 'TR369_2', 'TR369_13'), ('TR369_3_14', 'TR369_14', 'TR369_3'), ('TR369_3_14', 'TR369_3', 'TR369_14'), ('TR369_4_6', 'TR369_4', 'TR369_6'), ('TR369_4_6', 'TR369_6', 'TR369_4'), ('TR369_5_15', 'TR369_15', 'TR369_5'), ('TR369_5_15', 'TR369_5', 'TR369_15'), ('TR369_5_7', 'TR369_5', 'TR369_7'), ('TR369_5_7', 'TR369_7', 'TR369_5'), ('TR369_6_16', 'TR369_16', 'TR369_6'), ('TR369_6_16', 'TR369_6', 'TR369_16'), ('TR369_7_17', 'TR369_17', 'TR369_7'), ('TR369_7_17', 'TR369_7', 'TR369_17'), ('TR369_8_18', 'TR369_18', 'TR369_8'), ('TR369_8_18', 'TR369_8', 'TR369_18'), ('TR369_8_9', 'TR369_8', 'TR369_9'), ('TR369_8_9', 'TR369_9', 'TR369_8'), ('TR369_9_19', 'TR369_19', 'TR369_9'), ('TR369_9_19', 'TR369_9', 'TR369_19'), ('TR370_1_10', 'TR370_1', 'TR370_10'), ('TR370_1_10', 'TR370_10', 'TR370_1'), ('TR370_1_6', 'TR370_1', 'TR370_6'), ('TR370_1_6', 'TR370_6', 'TR370_1'), ('TR370_2_11', 'TR370_11', 'TR370_2'), ('TR370_2_11', 'TR370_2', 'TR370_11'), ('TR370_2_3', 'TR370_2', 'TR370_3'), ('TR370_2_3', 'TR370_3', 'TR370_2'), ('TR370_3_12', 'TR370_12', 'TR370_3'), ('TR370_3_12', 'TR370_3', 'TR370_12'), ('TR370_4_5', 'TR370_4', 'TR370_5'), ('TR370_4_5', 'TR370_5', 'TR370_4'), ('TR370_4_7', 'TR370_4', 'TR370_7'), ('TR370_4_7', 'TR370_7', 'TR370_4'), ('TR370_5_9', 'TR370_5', 'TR370_9'), ('TR370_5_9', 'TR370_9', 'TR370_5'), ('TR370_6_13', 'TR370_13', 'TR370_6'), ('TR370_6_13', 'TR370_6', 'TR370_13'), ('TR370_7_14', 'TR370_14', 'TR370_7'), ('TR370_7_14', 'TR370_7', 'TR370_14'), ('TR370_8_15', 'TR370_15', 'TR370_8'), ('TR370_8_15', 'TR370_8', 'TR370_15'), ('TR370_8_9', 'TR370_8', 'TR370_9'), ('TR370_8_9', 'TR370_9', 'TR370_8'), ('TR371_1_6', 'TR371_1', 'TR371_6'), ('TR371_1_6', 'TR371_6', 'TR371_1'), ('TR371_1_8', 'TR371_1', 'TR371_8'), ('TR371_1_8', 'TR371_8', 'TR371_1'), ('TR371_2_3', 'TR371_2', 'TR371_3'), ('TR371_2_3', 'TR371_3', 'TR371_2'), ('TR371_2_9', 'TR371_2', 'TR371_9'), ('TR371_2_9', 'TR371_9', 'TR371_2'), ('TR371_3_10', 'TR371_10', 'TR371_3'), ('TR371_3_10', 'TR371_3', 'TR371_10'), ('TR371_4_11', 'TR371_11', 'TR371_4'), ('TR371_4_11', 'TR371_4', 'TR371_11'), ('TR371_4_5', 'TR371_4', 'TR371_5'), ('TR371_4_5', 'TR371_5', 'TR371_4'), ('TR371_5_12', 'TR371_12', 'TR371_5'), ('TR371_5_12', 'TR371_5', 'TR371_12'), ('TR371_6_7', 'TR371_6', 'TR371_7'), ('TR371_6_7', 'TR371_7', 'TR371_6'), ('TR371_7_13', 'TR371_13', 'TR371_7'), ('TR371_7_13', 'TR371_7', 'TR371_13'), ('TR371_7_14', 'TR371_14', 'TR371_7'), ('TR371_7_14', 'TR371_7', 'TR371_14'), ('TR371_7_15', 'TR371_15', 'TR371_7'), ('TR371_7_15', 'TR371_7', 'TR371_15'), ('TR372_10_11', 'TR372_10', 'TR372_11'), ('TR372_10_11', 'TR372_11', 'TR372_10'), ('TR372_10_14', 'TR372_10', 'TR372_14'), ('TR372_10_14', 'TR372_14', 'TR372_10'), ('TR372_11_15', 'TR372_11', 'TR372_15'), ('TR372_11_15', 'TR372_15', 'TR372_11'), ('TR372_12_24', 'TR372_12', 'TR372_24'), ('TR372_12_24', 'TR372_24', 'TR372_12'), ('TR372_13_25', 'TR372_13', 'TR372_25'), ('TR372_13_25', 'TR372_25', 'TR372_13'), ('TR372_13_26', 'TR372_13', 'TR372_26'), ('TR372_13_26', 'TR372_26', 'TR372_13'), ('TR372_14_27', 'TR372_14', 'TR372_27'), ('TR372_14_27', 'TR372_27', 'TR372_14'), ('TR372_14_28', 'TR372_14', 'TR372_28'), ('TR372_14_28', 'TR372_28', 'TR372_14'), ('TR372_15_16', 'TR372_15', 'TR372_16'), ('TR372_15_16', 'TR372_16', 'TR372_15'), ('TR372_16_29', 'TR372_16', 'TR372_29'), ('TR372_16_29', 'TR372_29', 'TR372_16'), ('TR372_16_30', 'TR372_16', 'TR372_30'), ('TR372_16_30', 'TR372_30', 'TR372_16'), ('TR372_16_31', 'TR372_16', 'TR372_31'), ('TR372_16_31', 'TR372_31', 'TR372_16'), ('TR372_17_18', 'TR372_17', 'TR372_18'), ('TR372_17_18', 'TR372_18', 'TR372_17'), ('TR372_18_32', 'TR372_18', 'TR372_32'), ('TR372_18_32', 'TR372_32', 'TR372_18'), ('TR372_18_33', 'TR372_18', 'TR372_33'), ('TR372_18_33', 'TR372_33', 'TR372_18'), ('TR372_18_34', 'TR372_18', 'TR372_34'), ('TR372_18_34', 'TR372_34', 'TR372_18'), ('TR372_1_2', 'TR372_1', 'TR372_2'), ('TR372_1_2', 'TR372_2', 'TR372_1'), ('TR372_1_7', 'TR372_1', 'TR372_7'), ('TR372_1_7', 'TR372_7', 'TR372_1'), ('TR372_2_12', 'TR372_12', 'TR372_2'), ('TR372_2_12', 'TR372_2', 'TR372_12'), ('TR372_35_36', 'TR372_35', 'TR372_36'), ('TR372_35_36', 'TR372_36', 'TR372_35'), ('TR372_37_38', 'TR372_37', 'TR372_38'), ('TR372_37_38', 'TR372_38', 'TR372_37'), ('TR372_3_19', 'TR372_19', 'TR372_3'), ('TR372_3_19', 'TR372_3', 'TR372_19'), ('TR372_3_4', 'TR372_3', 'TR372_4'), ('TR372_3_4', 'TR372_4', 'TR372_3'), ('TR372_4_17', 'TR372_17', 'TR372_4'), ('TR372_4_17', 'TR372_4', 'TR372_17'), ('TR372_5_13', 'TR372_13', 'TR372_5'), ('TR372_5_13', 'TR372_5', 'TR372_13'), ('TR372_5_6', 'TR372_5', 'TR372_6'), ('TR372_5_6', 'TR372_6', 'TR372_5'), ('TR372_6_20', 'TR372_20', 'TR372_6'), ('TR372_6_20', 'TR372_6', 'TR372_20'), ('TR372_7_21', 'TR372_21', 'TR372_7'), ('TR372_7_21', 'TR372_7', 'TR372_21'), ('TR372_8_22', 'TR372_22', 'TR372_8'), ('TR372_8_22', 'TR372_8', 'TR372_22'), ('TR372_8_9', 'TR372_8', 'TR372_9'), ('TR372_8_9', 'TR372_9', 'TR372_8'), ('TR372_9_23', 'TR372_23', 'TR372_9'), ('TR372_9_23', 'TR372_9', 'TR372_23'), ('TR373_1_2', 'TR373_1', 'TR373_2'), ('TR373_1_2', 'TR373_2', 'TR373_1'), ('TR373_1_5', 'TR373_1', 'TR373_5'), ('TR373_1_5', 'TR373_5', 'TR373_1'), ('TR373_1_8', 'TR373_1', 'TR373_8'), ('TR373_1_8', 'TR373_8', 'TR373_1'), ('TR373_1_9', 'TR373_1', 'TR373_9'), ('TR373_1_9', 'TR373_9', 'TR373_1'), ('TR373_2_10', 'TR373_10', 'TR373_2'), ('TR373_2_10', 'TR373_2', 'TR373_10'), ('TR373_2_11', 'TR373_11', 'TR373_2'), ('TR373_2_11', 'TR373_2', 'TR373_11'), ('TR373_2_3', 'TR373_2', 'TR373_3'), ('TR373_2_3', 'TR373_3', 'TR373_2'), ('TR373_3_4', 'TR373_3', 'TR373_4'), ('TR373_3_4', 'TR373_4', 'TR373_3'), ('TR373_4_5', 'TR373_4', 'TR373_5'), ('TR373_4_5', 'TR373_5', 'TR373_4'), ('TR374_1_2', 'TR374_1', 'TR374_2'), ('TR374_1_2', 'TR374_2', 'TR374_1'), ('TR374_1_3', 'TR374_1', 'TR374_3'), ('TR374_1_3', 'TR374_3', 'TR374_1'), ('TR374_1_6', 'TR374_1', 'TR374_6'), ('TR374_1_6', 'TR374_6', 'TR374_1'), ('TR374_1_7', 'TR374_1', 'TR374_7'), ('TR374_1_7', 'TR374_7', 'TR374_1'), ('TR374_2_8', 'TR374_2', 'TR374_8'), ('TR374_2_8', 'TR374_8', 'TR374_2'), ('TR374_3_4', 'TR374_3', 'TR374_4'), ('TR374_3_4', 'TR374_4', 'TR374_3'), ('TR374_3_5', 'TR374_3', 'TR374_5'), ('TR374_3_5', 'TR374_5', 'TR374_3'), ('TR374_3_9', 'TR374_3', 'TR374_9'), ('TR374_3_9', 'TR374_9', 'TR374_3'), ('TR374_4_10', 'TR374_10', 'TR374_4'), ('TR374_4_10', 'TR374_4', 'TR374_10'), ('TR374_4_11', 'TR374_11', 'TR374_4'), ('TR374_4_11', 'TR374_4', 'TR374_11'), ('TR374_4_5', 'TR374_4', 'TR374_5'), ('TR374_4_5', 'TR374_5', 'TR374_4'), ('TR375_1_10', 'TR375_1', 'TR375_10'), ('TR375_1_10', 'TR375_10', 'TR375_1'), ('TR375_1_6', 'TR375_1', 'TR375_6'), ('TR375_1_6', 'TR375_6', 'TR375_1'), ('TR375_20_25', 'TR375_20', 'TR375_25'), ('TR375_20_25', 'TR375_25', 'TR375_20'), ('TR375_20_27', 'TR375_20', 'TR375_27'), ('TR375_20_27', 'TR375_27', 'TR375_20'), ('TR375_21_22', 'TR375_21', 'TR375_22'), ('TR375_21_22', 'TR375_22', 'TR375_21'), ('TR375_21_29', 'TR375_21', 'TR375_29'), ('TR375_21_29', 'TR375_29', 'TR375_21'), ('TR375_22_30', 'TR375_22', 'TR375_30'), ('TR375_22_30', 'TR375_30', 'TR375_22'), ('TR375_23_24', 'TR375_23', 'TR375_24'), ('TR375_23_24', 'TR375_24', 'TR375_23'), ('TR375_23_31', 'TR375_23', 'TR375_31'), ('TR375_23_31', 'TR375_31', 'TR375_23'), ('TR375_24_26', 'TR375_24', 'TR375_26'), ('TR375_24_26', 'TR375_26', 'TR375_24'), ('TR375_25_32', 'TR375_25', 'TR375_32'), ('TR375_25_32', 'TR375_32', 'TR375_25'), ('TR375_26_33', 'TR375_26', 'TR375_33'), ('TR375_26_33', 'TR375_33', 'TR375_26'), ('TR375_26_34', 'TR375_26', 'TR375_34'), ('TR375_26_34', 'TR375_34', 'TR375_26'), ('TR375_26_35', 'TR375_26', 'TR375_35'), ('TR375_26_35', 'TR375_35', 'TR375_26'), ('TR375_27_36', 'TR375_27', 'TR375_36'), ('TR375_27_36', 'TR375_36', 'TR375_27'), ('TR375_28_37', 'TR375_28', 'TR375_37'), ('TR375_28_37', 'TR375_37', 'TR375_28'), ('TR375_28_38', 'TR375_28', 'TR375_38'), ('TR375_28_38', 'TR375_38', 'TR375_28'), ('TR375_2_3', 'TR375_2', 'TR375_3'), ('TR375_2_3', 'TR375_3', 'TR375_2'), ('TR375_2_8', 'TR375_2', 'TR375_8'), ('TR375_2_8', 'TR375_8', 'TR375_2'), ('TR375_3_11', 'TR375_11', 'TR375_3'), ('TR375_3_11', 'TR375_3', 'TR375_11'), ('TR375_4_12', 'TR375_12', 'TR375_4'), ('TR375_4_12', 'TR375_4', 'TR375_12'), ('TR375_4_5', 'TR375_4', 'TR375_5'), ('TR375_4_5', 'TR375_5', 'TR375_4'), ('TR375_5_7', 'TR375_5', 'TR375_7'), ('TR375_5_7', 'TR375_7', 'TR375_5'), ('TR375_6_13', 'TR375_13', 'TR375_6'), ('TR375_6_13', 'TR375_6', 'TR375_13'), ('TR375_7_14', 'TR375_14', 'TR375_7'), ('TR375_7_14', 'TR375_7', 'TR375_14'), ('TR375_7_15', 'TR375_15', 'TR375_7'), ('TR375_7_15', 'TR375_7', 'TR375_15'), ('TR375_7_16', 'TR375_16', 'TR375_7'), ('TR375_7_16', 'TR375_7', 'TR375_16'), ('TR375_8_17', 'TR375_17', 'TR375_8'), ('TR375_8_17', 'TR375_8', 'TR375_17'), ('TR375_9_18', 'TR375_18', 'TR375_9'), ('TR375_9_18', 'TR375_9', 'TR375_18'), ('TR375_9_19', 'TR375_19', 'TR375_9'), ('TR375_9_19', 'TR375_9', 'TR375_19'), ('TR376_1_10', 'TR376_1', 'TR376_10'), ('TR376_1_10', 'TR376_10', 'TR376_1'), ('TR376_1_2', 'TR376_1', 'TR376_2'), ('TR376_1_2', 'TR376_2', 'TR376_1'), ('TR376_1_3', 'TR376_1', 'TR376_3'), ('TR376_1_3', 'TR376_3', 'TR376_1'), ('TR376_1_9', 'TR376_1', 'TR376_9'), ('TR376_1_9', 'TR376_9', 'TR376_1'), ('TR376_2_4', 'TR376_2', 'TR376_4'), ('TR376_2_4', 'TR376_4', 'TR376_2'), ('TR376_3_11', 'TR376_11', 'TR376_3'), ('TR376_3_11', 'TR376_3', 'TR376_11'), ('TR376_3_5', 'TR376_3', 'TR376_5'), ('TR376_3_5', 'TR376_5', 'TR376_3'), ('TR376_3_6', 'TR376_3', 'TR376_6'), ('TR376_3_6', 'TR376_6', 'TR376_3'), ('TR376_4_12', 'TR376_12', 'TR376_4'), ('TR376_4_12', 'TR376_4', 'TR376_12'), ('TR376_4_13', 'TR376_13', 'TR376_4'), ('TR376_4_13', 'TR376_4', 'TR376_13'), ('TR376_4_7', 'TR376_4', 'TR376_7'), ('TR376_4_7', 'TR376_7', 'TR376_4'), ('TR376_5_14', 'TR376_14', 'TR376_5'), ('TR376_5_14', 'TR376_5', 'TR376_14'), ('TR376_5_15', 'TR376_15', 'TR376_5'), ('TR376_5_15', 'TR376_5', 'TR376_15'), ('TR376_5_6', 'TR376_5', 'TR376_6'), ('TR376_5_6', 'TR376_6', 'TR376_5'), ('TR376_7_16', 'TR376_16', 'TR376_7'), ('TR376_7_16', 'TR376_7', 'TR376_16'), ('TR376_8_17', 'TR376_17', 'TR376_8'), ('TR376_8_17', 'TR376_8', 'TR376_17'), ('TR376_8_18', 'TR376_18', 'TR376_8'), ('TR376_8_18', 'TR376_8', 'TR376_18'), ('TR377_10_11', 'TR377_10', 'TR377_11'), ('TR377_10_11', 'TR377_11', 'TR377_10'), ('TR377_10_16', 'TR377_10', 'TR377_16'), ('TR377_10_16', 'TR377_16', 'TR377_10'), ('TR377_11_17', 'TR377_11', 'TR377_17'), ('TR377_11_17', 'TR377_17', 'TR377_11'), ('TR377_12_18', 'TR377_12', 'TR377_18'), ('TR377_12_18', 'TR377_18', 'TR377_12'), ('TR377_1_14', 'TR377_1', 'TR377_14'), ('TR377_1_14', 'TR377_14', 'TR377_1'), ('TR377_1_7', 'TR377_1', 'TR377_7'), ('TR377_1_7', 'TR377_7', 'TR377_1'), ('TR377_2_3', 'TR377_2', 'TR377_3'), ('TR377_2_3', 'TR377_3', 'TR377_2'), ('TR377_2_4', 'TR377_2', 'TR377_4'), ('TR377_2_4', 'TR377_4', 'TR377_2'), ('TR377_7_12', 'TR377_12', 'TR377_7'), ('TR377_7_12', 'TR377_7', 'TR377_12'), ('TR377_8_13', 'TR377_13', 'TR377_8'), ('TR377_8_13', 'TR377_8', 'TR377_13'), ('TR377_8_9', 'TR377_8', 'TR377_9'), ('TR377_8_9', 'TR377_9', 'TR377_8'), ('TR377_9_15', 'TR377_15', 'TR377_9'), ('TR377_9_15', 'TR377_9', 'TR377_15'), ('TR378_1_6', 'TR378_1', 'TR378_6'), ('TR378_1_6', 'TR378_6', 'TR378_1'), ('TR378_1_9', 'TR378_1', 'TR378_9'), ('TR378_1_9', 'TR378_9', 'TR378_1'), ('TR378_2_10', 'TR378_10', 'TR378_2'), ('TR378_2_10', 'TR378_2', 'TR378_10'), ('TR378_2_3', 'TR378_2', 'TR378_3'), ('TR378_2_3', 'TR378_3', 'TR378_2'), ('TR378_3_11', 'TR378_11', 'TR378_3'), ('TR378_3_11', 'TR378_3', 'TR378_11'), ('TR378_4_12', 'TR378_12', 'TR378_4'), ('TR378_4_12', 'TR378_4', 'TR378_12'), ('TR378_4_5', 'TR378_4', 'TR378_5'), ('TR378_4_5', 'TR378_5', 'TR378_4'), ('TR378_5_13', 'TR378_13', 'TR378_5'), ('TR378_5_13', 'TR378_5', 'TR378_13'), ('TR378_6_7', 'TR378_6', 'TR378_7'), ('TR378_6_7', 'TR378_7', 'TR378_6'), ('TR378_7_14', 'TR378_14', 'TR378_7'), ('TR378_7_14', 'TR378_7', 'TR378_14'), ('TR379_1_11', 'TR379_1', 'TR379_11'), ('TR379_1_11', 'TR379_11', 'TR379_1'), ('TR379_1_6', 'TR379_1', 'TR379_6'), ('TR379_1_6', 'TR379_6', 'TR379_1'), ('TR379_2_12', 'TR379_12', 'TR379_2'), ('TR379_2_12', 'TR379_2', 'TR379_12'), ('TR379_2_3', 'TR379_2', 'TR379_3'), ('TR379_2_3', 'TR379_3', 'TR379_2'), ('TR379_3_13', 'TR379_13', 'TR379_3'), ('TR379_3_13', 'TR379_3', 'TR379_13'), ('TR379_4_14', 'TR379_14', 'TR379_4'), ('TR379_4_14', 'TR379_4', 'TR379_14'), ('TR379_4_5', 'TR379_4', 'TR379_5'), ('TR379_4_5', 'TR379_5', 'TR379_4'), ('TR379_5_7', 'TR379_5', 'TR379_7'), ('TR379_5_7', 'TR379_7', 'TR379_5'), ('TR379_6_15', 'TR379_15', 'TR379_6'), ('TR379_6_15', 'TR379_6', 'TR379_15'), ('TR379_7_8', 'TR379_7', 'TR379_8'), ('TR379_7_8', 'TR379_8', 'TR379_7'), ('TR379_8_10', 'TR379_10', 'TR379_8'), ('TR379_8_10', 'TR379_8', 'TR379_10'), ('TR379_8_16', 'TR379_16', 'TR379_8'), ('TR379_8_16', 'TR379_8', 'TR379_16'), ('TR379_8_17', 'TR379_17', 'TR379_8'), ('TR379_8_17', 'TR379_8', 'TR379_17'), ('TR380_10_11', 'TR380_10', 'TR380_11'), ('TR380_10_11', 'TR380_11', 'TR380_10'), ('TR380_10_20', 'TR380_10', 'TR380_20'), ('TR380_10_20', 'TR380_20', 'TR380_10'), ('TR380_10_21', 'TR380_10', 'TR380_21'), ('TR380_10_21', 'TR380_21', 'TR380_10'), ('TR380_11_12', 'TR380_11', 'TR380_12'), ('TR380_11_12', 'TR380_12', 'TR380_11'), ('TR380_11_22', 'TR380_11', 'TR380_22'), ('TR380_11_22', 'TR380_22', 'TR380_11'), ('TR380_12_23', 'TR380_12', 'TR380_23'), ('TR380_12_23', 'TR380_23', 'TR380_12'), ('TR380_12_24', 'TR380_12', 'TR380_24'), ('TR380_12_24', 'TR380_24', 'TR380_12'), ('TR380_12_25', 'TR380_12', 'TR380_25'), ('TR380_12_25', 'TR380_25', 'TR380_12'), ('TR380_13_26', 'TR380_13', 'TR380_26'), ('TR380_13_26', 'TR380_26', 'TR380_13'), ('TR380_1_6', 'TR380_1', 'TR380_6'), ('TR380_1_6', 'TR380_6', 'TR380_1'), ('TR380_1_7', 'TR380_1', 'TR380_7'), ('TR380_1_7', 'TR380_7', 'TR380_1'), ('TR380_27_28', 'TR380_27', 'TR380_28'), ('TR380_27_28', 'TR380_28', 'TR380_27'), ('TR380_2_3', 'TR380_2', 'TR380_3'), ('TR380_2_3', 'TR380_3', 'TR380_2'), ('TR380_2_8', 'TR380_2', 'TR380_8'), ('TR380_2_8', 'TR380_8', 'TR380_2'), ('TR380_3_14', 'TR380_14', 'TR380_3'), ('TR380_3_14', 'TR380_3', 'TR380_14'), ('TR380_4_15', 'TR380_15', 'TR380_4'), ('TR380_4_15', 'TR380_4', 'TR380_15'), ('TR380_4_5', 'TR380_4', 'TR380_5'), ('TR380_4_5', 'TR380_5', 'TR380_4'), ('TR380_5_9', 'TR380_5', 'TR380_9'), ('TR380_5_9', 'TR380_9', 'TR380_5'), ('TR380_6_16', 'TR380_16', 'TR380_6'), ('TR380_6_16', 'TR380_6', 'TR380_16'), ('TR380_7_17', 'TR380_17', 'TR380_7'), ('TR380_7_17', 'TR380_7', 'TR380_17'), ('TR380_8_18', 'TR380_18', 'TR380_8'), ('TR380_8_18', 'TR380_8', 'TR380_18'), ('TR380_9_10', 'TR380_10', 'TR380_9'), ('TR380_9_10', 'TR380_9', 'TR380_10'), ('TR380_9_13', 'TR380_13', 'TR380_9'), ('TR380_9_13', 'TR380_9', 'TR380_13'), ('TR380_9_19', 'TR380_19', 'TR380_9'), ('TR380_9_19', 'TR380_9', 'TR380_19'), ('TR381_10_23', 'TR381_10', 'TR381_23'), ('TR381_10_23', 'TR381_23', 'TR381_10'), ('TR381_10_24', 'TR381_10', 'TR381_24'), ('TR381_10_24', 'TR381_24', 'TR381_10'), ('TR381_10_25', 'TR381_10', 'TR381_25'), ('TR381_10_25', 'TR381_25', 'TR381_10'), ('TR381_1_12', 'TR381_1', 'TR381_12'), ('TR381_1_12', 'TR381_12', 'TR381_1'), ('TR381_1_13', 'TR381_1', 'TR381_13'), ('TR381_1_13', 'TR381_13', 'TR381_1'), ('TR381_1_2', 'TR381_1', 'TR381_2'), ('TR381_1_2', 'TR381_2', 'TR381_1'), ('TR381_1_6', 'TR381_1', 'TR381_6'), ('TR381_1_6', 'TR381_6', 'TR381_1'), ('TR381_2_14', 'TR381_14', 'TR381_2'), ('TR381_2_14', 'TR381_2', 'TR381_14'), ('TR381_2_3', 'TR381_2', 'TR381_3'), ('TR381_2_3', 'TR381_3', 'TR381_2'), ('TR381_2_8', 'TR381_2', 'TR381_8'), ('TR381_2_8', 'TR381_8', 'TR381_2'), ('TR381_3_15', 'TR381_15', 'TR381_3'), ('TR381_3_15', 'TR381_3', 'TR381_15'), ('TR381_3_16', 'TR381_16', 'TR381_3'), ('TR381_3_16', 'TR381_3', 'TR381_16'), ('TR381_3_4', 'TR381_3', 'TR381_4'), ('TR381_3_4', 'TR381_4', 'TR381_3'), ('TR381_4_17', 'TR381_17', 'TR381_4'), ('TR381_4_17', 'TR381_4', 'TR381_17'), ('TR381_5_6', 'TR381_5', 'TR381_6'), ('TR381_5_6', 'TR381_6', 'TR381_5'), ('TR381_5_7', 'TR381_5', 'TR381_7'), ('TR381_5_7', 'TR381_7', 'TR381_5'), ('TR381_7_18', 'TR381_18', 'TR381_7'), ('TR381_7_18', 'TR381_7', 'TR381_18'), ('TR381_7_19', 'TR381_19', 'TR381_7'), ('TR381_7_19', 'TR381_7', 'TR381_19'), ('TR381_7_20', 'TR381_20', 'TR381_7'), ('TR381_7_20', 'TR381_7', 'TR381_20'), ('TR381_8_10', 'TR381_10', 'TR381_8'), ('TR381_8_10', 'TR381_8', 'TR381_10'), ('TR381_9_21', 'TR381_21', 'TR381_9'), ('TR381_9_21', 'TR381_9', 'TR381_21'), ('TR381_9_22', 'TR381_22', 'TR381_9'), ('TR381_9_22', 'TR381_9', 'TR381_22'), ('TR382_1_5', 'TR382_1', 'TR382_5'), ('TR382_1_5', 'TR382_5', 'TR382_1'), ('TR382_1_8', 'TR382_1', 'TR382_8'), ('TR382_1_8', 'TR382_8', 'TR382_1'), ('TR382_2_3', 'TR382_2', 'TR382_3'), ('TR382_2_3', 'TR382_3', 'TR382_2'), ('TR382_2_9', 'TR382_2', 'TR382_9'), ('TR382_2_9', 'TR382_9', 'TR382_2'), ('TR382_3_10', 'TR382_10', 'TR382_3'), ('TR382_3_10', 'TR382_3', 'TR382_10'), ('TR382_4_5', 'TR382_4', 'TR382_5'), ('TR382_4_5', 'TR382_5', 'TR382_4'), ('TR382_4_6', 'TR382_4', 'TR382_6'), ('TR382_4_6', 'TR382_6', 'TR382_4'), ('TR382_6_11', 'TR382_11', 'TR382_6'), ('TR382_6_11', 'TR382_6', 'TR382_11'), ('TR383_10_16', 'TR383_10', 'TR383_16'), ('TR383_10_16', 'TR383_16', 'TR383_10'), ('TR383_11_21', 'TR383_11', 'TR383_21'), ('TR383_11_21', 'TR383_21', 'TR383_11'), ('TR383_11_22', 'TR383_11', 'TR383_22'), ('TR383_11_22', 'TR383_22', 'TR383_11'), ('TR383_12_17', 'TR383_12', 'TR383_17'), ('TR383_12_17', 'TR383_17', 'TR383_12'), ('TR383_12_18', 'TR383_12', 'TR383_18'), ('TR383_12_18', 'TR383_18', 'TR383_12'), ('TR383_13_23', 'TR383_13', 'TR383_23'), ('TR383_13_23', 'TR383_23', 'TR383_13'), ('TR383_14_19', 'TR383_14', 'TR383_19'), ('TR383_14_19', 'TR383_19', 'TR383_14'), ('TR383_14_24', 'TR383_14', 'TR383_24'), ('TR383_14_24', 'TR383_24', 'TR383_14'), ('TR383_17_25', 'TR383_17', 'TR383_25'), ('TR383_17_25', 'TR383_25', 'TR383_17'), ('TR383_19_26', 'TR383_19', 'TR383_26'), ('TR383_19_26', 'TR383_26', 'TR383_19'), ('TR383_2_3', 'TR383_2', 'TR383_3'), ('TR383_2_3', 'TR383_3', 'TR383_2'), ('TR383_2_4', 'TR383_2', 'TR383_4'), ('TR383_2_4', 'TR383_4', 'TR383_2'), ('TR383_3_6', 'TR383_3', 'TR383_6'), ('TR383_3_6', 'TR383_6', 'TR383_3'), ('TR383_4_8', 'TR383_4', 'TR383_8'), ('TR383_4_8', 'TR383_8', 'TR383_4'), ('TR383_5_10', 'TR383_10', 'TR383_5'), ('TR383_5_10', 'TR383_5', 'TR383_10'), ('TR383_5_9', 'TR383_5', 'TR383_9'), ('TR383_5_9', 'TR383_9', 'TR383_5'), ('TR383_6_11', 'TR383_11', 'TR383_6'), ('TR383_6_11', 'TR383_6', 'TR383_11'), ('TR383_7_13', 'TR383_13', 'TR383_7'), ('TR383_7_13', 'TR383_7', 'TR383_13'), ('TR383_7_9', 'TR383_7', 'TR383_9'), ('TR383_7_9', 'TR383_9', 'TR383_7'), ('TR383_8_20', 'TR383_20', 'TR383_8'), ('TR383_8_20', 'TR383_8', 'TR383_20'), ('TR384_1_2', 'TR384_1', 'TR384_2'), ('TR384_1_2', 'TR384_2', 'TR384_1'), ('TR384_1_3', 'TR384_1', 'TR384_3'), ('TR384_1_3', 'TR384_3', 'TR384_1'), ('TR384_1_4', 'TR384_1', 'TR384_4'), ('TR384_1_4', 'TR384_4', 'TR384_1'), ('TR384_1_7', 'TR384_1', 'TR384_7'), ('TR384_1_7', 'TR384_7', 'TR384_1'), ('TR384_2_5', 'TR384_2', 'TR384_5'), ('TR384_2_5', 'TR384_5', 'TR384_2'), ('TR384_2_8', 'TR384_2', 'TR384_8'), ('TR384_2_8', 'TR384_8', 'TR384_2'), ('TR384_2_9', 'TR384_2', 'TR384_9'), ('TR384_2_9', 'TR384_9', 'TR384_2'), ('TR384_3_10', 'TR384_10', 'TR384_3'), ('TR384_3_10', 'TR384_3', 'TR384_10'), ('TR384_3_11', 'TR384_11', 'TR384_3'), ('TR384_3_11', 'TR384_3', 'TR384_11'), ('TR384_3_6', 'TR384_3', 'TR384_6'), ('TR384_3_6', 'TR384_6', 'TR384_3'), ('TR385_1_2', 'TR385_1', 'TR385_2'), ('TR385_1_2', 'TR385_2', 'TR385_1'), ('TR385_2_3', 'TR385_2', 'TR385_3'), ('TR385_2_3', 'TR385_3', 'TR385_2'), ('TR385_2_4', 'TR385_2', 'TR385_4'), ('TR385_2_4', 'TR385_4', 'TR385_2'), ('TR385_2_5', 'TR385_2', 'TR385_5'), ('TR385_2_5', 'TR385_5', 'TR385_2'), ('TR386_1_2', 'TR386_1', 'TR386_2'), ('TR386_1_2', 'TR386_2', 'TR386_1'), ('TR386_1_3', 'TR386_1', 'TR386_3'), ('TR386_1_3', 'TR386_3', 'TR386_1'), ('TR386_1_4', 'TR386_1', 'TR386_4'), ('TR386_1_4', 'TR386_4', 'TR386_1'), ('TR386_1_5', 'TR386_1', 'TR386_5'), ('TR386_1_5', 'TR386_5', 'TR386_1'), ('TR386_2_7', 'TR386_2', 'TR386_7'), ('TR386_2_7', 'TR386_7', 'TR386_2'), ('TR386_3_9', 'TR386_3', 'TR386_9'), ('TR386_3_9', 'TR386_9', 'TR386_3'), ('TR386_4_11', 'TR386_11', 'TR386_4'), ('TR386_4_11', 'TR386_4', 'TR386_11'), ('TR386_5_13', 'TR386_13', 'TR386_5'), ('TR386_5_13', 'TR386_5', 'TR386_13'), ('TR387_10_14', 'TR387_10', 'TR387_14'), ('TR387_10_14', 'TR387_14', 'TR387_10'), ('TR387_11_21', 'TR387_11', 'TR387_21'), ('TR387_11_21', 'TR387_21', 'TR387_11'), ('TR387_11_22', 'TR387_11', 'TR387_22'), ('TR387_11_22', 'TR387_22', 'TR387_11'), ('TR387_11_23', 'TR387_11', 'TR387_23'), ('TR387_11_23', 'TR387_23', 'TR387_11'), ('TR387_12_24', 'TR387_12', 'TR387_24'), ('TR387_12_24', 'TR387_24', 'TR387_12'), ('TR387_12_25', 'TR387_12', 'TR387_25'), ('TR387_12_25', 'TR387_25', 'TR387_12'), ('TR387_13_15', 'TR387_13', 'TR387_15'), ('TR387_13_15', 'TR387_15', 'TR387_13'), ('TR387_13_26', 'TR387_13', 'TR387_26'), ('TR387_13_26', 'TR387_26', 'TR387_13'), ('TR387_14_27', 'TR387_14', 'TR387_27'), ('TR387_14_27', 'TR387_27', 'TR387_14'), ('TR387_15_28', 'TR387_15', 'TR387_28'), ('TR387_15_28', 'TR387_28', 'TR387_15'), ('TR387_16_17', 'TR387_16', 'TR387_17'), ('TR387_16_17', 'TR387_17', 'TR387_16'), ('TR387_16_29', 'TR387_16', 'TR387_29'), ('TR387_16_29', 'TR387_29', 'TR387_16'), ('TR387_17_30', 'TR387_17', 'TR387_30'), ('TR387_17_30', 'TR387_30', 'TR387_17'), ('TR387_1_4', 'TR387_1', 'TR387_4'), ('TR387_1_4', 'TR387_4', 'TR387_1'), ('TR387_1_5', 'TR387_1', 'TR387_5'), ('TR387_1_5', 'TR387_5', 'TR387_1'), ('TR387_31_32', 'TR387_31', 'TR387_32'), ('TR387_31_32', 'TR387_32', 'TR387_31'), ('TR387_31_33', 'TR387_31', 'TR387_33'), ('TR387_31_33', 'TR387_33', 'TR387_31'), ('TR387_31_41', 'TR387_31', 'TR387_41'), ('TR387_31_41', 'TR387_41', 'TR387_31'), ('TR387_31_42', 'TR387_31', 'TR387_42'), ('TR387_31_42', 'TR387_42', 'TR387_31'), ('TR387_32_34', 'TR387_32', 'TR387_34'), ('TR387_32_34', 'TR387_34', 'TR387_32'), ('TR387_32_35', 'TR387_32', 'TR387_35'), ('TR387_32_35', 'TR387_35', 'TR387_32'), ('TR387_32_43', 'TR387_32', 'TR387_43'), ('TR387_32_43', 'TR387_43', 'TR387_32'), ('TR387_33_37', 'TR387_33', 'TR387_37'), ('TR387_33_37', 'TR387_37', 'TR387_33'), ('TR387_34_44', 'TR387_34', 'TR387_44'), ('TR387_34_44', 'TR387_44', 'TR387_34'), ('TR387_34_45', 'TR387_34', 'TR387_45'), ('TR387_34_45', 'TR387_45', 'TR387_34'), ('TR387_34_46', 'TR387_34', 'TR387_46'), ('TR387_34_46', 'TR387_46', 'TR387_34'), ('TR387_35_47', 'TR387_35', 'TR387_47'), ('TR387_35_47', 'TR387_47', 'TR387_35'), ('TR387_35_48', 'TR387_35', 'TR387_48'), ('TR387_35_48', 'TR387_48', 'TR387_35'), ('TR387_36_38', 'TR387_36', 'TR387_38'), ('TR387_36_38', 'TR387_38', 'TR387_36'), ('TR387_36_49', 'TR387_36', 'TR387_49'), ('TR387_36_49', 'TR387_49', 'TR387_36'), ('TR387_37_50', 'TR387_37', 'TR387_50'), ('TR387_37_50', 'TR387_50', 'TR387_37'), ('TR387_38_51', 'TR387_38', 'TR387_51'), ('TR387_38_51', 'TR387_51', 'TR387_38'), ('TR387_39_40', 'TR387_39', 'TR387_40'), ('TR387_39_40', 'TR387_40', 'TR387_39'), ('TR387_39_52', 'TR387_39', 'TR387_52'), ('TR387_39_52', 'TR387_52', 'TR387_39'), ('TR387_40_53', 'TR387_40', 'TR387_53'), ('TR387_40_53', 'TR387_53', 'TR387_40'), ('TR387_4_6', 'TR387_4', 'TR387_6'), ('TR387_4_6', 'TR387_6', 'TR387_4'), ('TR387_5_7', 'TR387_5', 'TR387_7'), ('TR387_5_7', 'TR387_7', 'TR387_5'), ('TR387_8_10', 'TR387_10', 'TR387_8'), ('TR387_8_10', 'TR387_8', 'TR387_10'), ('TR387_8_18', 'TR387_18', 'TR387_8'), ('TR387_8_18', 'TR387_8', 'TR387_18'), ('TR387_8_19', 'TR387_19', 'TR387_8'), ('TR387_8_19', 'TR387_8', 'TR387_19'), ('TR387_8_9', 'TR387_8', 'TR387_9'), ('TR387_8_9', 'TR387_9', 'TR387_8'), ('TR387_9_11', 'TR387_11', 'TR387_9'), ('TR387_9_11', 'TR387_9', 'TR387_11'), ('TR387_9_12', 'TR387_12', 'TR387_9'), ('TR387_9_12', 'TR387_9', 'TR387_12'), ('TR387_9_20', 'TR387_20', 'TR387_9'), ('TR387_9_20', 'TR387_9', 'TR387_20'), ('TR388_1_2', 'TR388_1', 'TR388_2'), ('TR388_1_2', 'TR388_2', 'TR388_1'), ('TR388_1_5', 'TR388_1', 'TR388_5'), ('TR388_1_5', 'TR388_5', 'TR388_1'), ('TR388_1_7', 'TR388_1', 'TR388_7'), ('TR388_1_7', 'TR388_7', 'TR388_1'), ('TR388_1_8', 'TR388_1', 'TR388_8'), ('TR388_1_8', 'TR388_8', 'TR388_1'), ('TR388_2_10', 'TR388_10', 'TR388_2'), ('TR388_2_10', 'TR388_2', 'TR388_10'), ('TR388_2_3', 'TR388_2', 'TR388_3'), ('TR388_2_3', 'TR388_3', 'TR388_2'), ('TR388_2_9', 'TR388_2', 'TR388_9'), ('TR388_2_9', 'TR388_9', 'TR388_2'), ('TR388_3_11', 'TR388_11', 'TR388_3'), ('TR388_3_11', 'TR388_3', 'TR388_11'), ('TR388_3_4', 'TR388_3', 'TR388_4'), ('TR388_3_4', 'TR388_4', 'TR388_3'), ('TR388_4_5', 'TR388_4', 'TR388_5'), ('TR388_4_5', 'TR388_5', 'TR388_4'), ('TR388_5_12', 'TR388_12', 'TR388_5'), ('TR388_5_12', 'TR388_5', 'TR388_12'), ('TR390_10_11', 'TR390_10', 'TR390_11'), ('TR390_10_11', 'TR390_11', 'TR390_10'), ('TR390_10_14', 'TR390_10', 'TR390_14'), ('TR390_10_14', 'TR390_14', 'TR390_10'), ('TR390_11_21', 'TR390_11', 'TR390_21'), ('TR390_11_21', 'TR390_21', 'TR390_11'), ('TR390_12_22', 'TR390_12', 'TR390_22'), ('TR390_12_22', 'TR390_22', 'TR390_12'), ('TR390_13_23', 'TR390_13', 'TR390_23'), ('TR390_13_23', 'TR390_23', 'TR390_13'), ('TR390_13_24', 'TR390_13', 'TR390_24'), ('TR390_13_24', 'TR390_24', 'TR390_13'), ('TR390_14_25', 'TR390_14', 'TR390_25'), ('TR390_14_25', 'TR390_25', 'TR390_14'), ('TR390_14_26', 'TR390_14', 'TR390_26'), ('TR390_14_26', 'TR390_26', 'TR390_14'), ('TR390_15_27', 'TR390_15', 'TR390_27'), ('TR390_15_27', 'TR390_27', 'TR390_15'), ('TR390_15_28', 'TR390_15', 'TR390_28'), ('TR390_15_28', 'TR390_28', 'TR390_15'), ('TR390_15_29', 'TR390_15', 'TR390_29'), ('TR390_15_29', 'TR390_29', 'TR390_15'), ('TR390_16_30', 'TR390_16', 'TR390_30'), ('TR390_16_30', 'TR390_30', 'TR390_16'), ('TR390_16_31', 'TR390_16', 'TR390_31'), ('TR390_16_31', 'TR390_31', 'TR390_16'), ('TR390_16_32', 'TR390_16', 'TR390_32'), ('TR390_16_32', 'TR390_32', 'TR390_16'), ('TR390_1_2', 'TR390_1', 'TR390_2'), ('TR390_1_2', 'TR390_2', 'TR390_1'), ('TR390_1_7', 'TR390_1', 'TR390_7'), ('TR390_1_7', 'TR390_7', 'TR390_1'), ('TR390_2_12', 'TR390_12', 'TR390_2'), ('TR390_2_12', 'TR390_2', 'TR390_12'), ('TR390_33_34', 'TR390_33', 'TR390_34'), ('TR390_33_34', 'TR390_34', 'TR390_33'), ('TR390_35_36', 'TR390_35', 'TR390_36'), ('TR390_35_36', 'TR390_36', 'TR390_35'), ('TR390_3_17', 'TR390_17', 'TR390_3'), ('TR390_3_17', 'TR390_3', 'TR390_17'), ('TR390_3_4', 'TR390_3', 'TR390_4'), ('TR390_3_4', 'TR390_4', 'TR390_3'), ('TR390_4_18', 'TR390_18', 'TR390_4'), ('TR390_4_18', 'TR390_4', 'TR390_18'), ('TR390_5_13', 'TR390_13', 'TR390_5'), ('TR390_5_13', 'TR390_5', 'TR390_13'), ('TR390_5_6', 'TR390_5', 'TR390_6'), ('TR390_5_6', 'TR390_6', 'TR390_5'), ('TR390_6_16', 'TR390_16', 'TR390_6'), ('TR390_6_16', 'TR390_6', 'TR390_16'), ('TR390_7_19', 'TR390_19', 'TR390_7'), ('TR390_7_19', 'TR390_7', 'TR390_19'), ('TR390_8_20', 'TR390_20', 'TR390_8'), ('TR390_8_20', 'TR390_8', 'TR390_20'), ('TR390_8_9', 'TR390_8', 'TR390_9'), ('TR390_8_9', 'TR390_9', 'TR390_8'), ('TR390_9_15', 'TR390_15', 'TR390_9'), ('TR390_9_15', 'TR390_9', 'TR390_15'), ('TR391_10_13', 'TR391_10', 'TR391_13'), ('TR391_10_13', 'TR391_13', 'TR391_10'), ('TR391_10_23', 'TR391_10', 'TR391_23'), ('TR391_10_23', 'TR391_23', 'TR391_10'), ('TR391_10_24', 'TR391_10', 'TR391_24'), ('TR391_10_24', 'TR391_24', 'TR391_10'), ('TR391_11_14', 'TR391_11', 'TR391_14'), ('TR391_11_14', 'TR391_14', 'TR391_11'), ('TR391_11_25', 'TR391_11', 'TR391_25'), ('TR391_11_25', 'TR391_25', 'TR391_11'), ('TR391_11_26', 'TR391_11', 'TR391_26'), ('TR391_11_26', 'TR391_26', 'TR391_11'), ('TR391_1_2', 'TR391_1', 'TR391_2'), ('TR391_1_2', 'TR391_2', 'TR391_1'), ('TR391_1_3', 'TR391_1', 'TR391_3'), ('TR391_1_3', 'TR391_3', 'TR391_1'), ('TR391_1_4', 'TR391_1', 'TR391_4'), ('TR391_1_4', 'TR391_4', 'TR391_1'), ('TR391_1_5', 'TR391_1', 'TR391_5'), ('TR391_1_5', 'TR391_5', 'TR391_1'), ('TR391_2_6', 'TR391_2', 'TR391_6'), ('TR391_2_6', 'TR391_6', 'TR391_2'), ('TR391_3_7', 'TR391_3', 'TR391_7'), ('TR391_3_7', 'TR391_7', 'TR391_3'), ('TR391_4_8', 'TR391_4', 'TR391_8'), ('TR391_4_8', 'TR391_8', 'TR391_4'), ('TR391_6_15', 'TR391_15', 'TR391_6'), ('TR391_6_15', 'TR391_6', 'TR391_15'), ('TR391_6_16', 'TR391_16', 'TR391_6'), ('TR391_6_16', 'TR391_6', 'TR391_16'), ('TR391_6_9', 'TR391_6', 'TR391_9'), ('TR391_6_9', 'TR391_9', 'TR391_6'), ('TR391_7_10', 'TR391_10', 'TR391_7'), ('TR391_7_10', 'TR391_7', 'TR391_10'), ('TR391_7_17', 'TR391_17', 'TR391_7'), ('TR391_7_17', 'TR391_7', 'TR391_17'), ('TR391_7_18', 'TR391_18', 'TR391_7'), ('TR391_7_18', 'TR391_7', 'TR391_18'), ('TR391_8_11', 'TR391_11', 'TR391_8'), ('TR391_8_11', 'TR391_8', 'TR391_11'), ('TR391_8_19', 'TR391_19', 'TR391_8'), ('TR391_8_19', 'TR391_8', 'TR391_19'), ('TR391_8_20', 'TR391_20', 'TR391_8'), ('TR391_8_20', 'TR391_8', 'TR391_20'), ('TR391_9_12', 'TR391_12', 'TR391_9'), ('TR391_9_12', 'TR391_9', 'TR391_12'), ('TR391_9_21', 'TR391_21', 'TR391_9'), ('TR391_9_21', 'TR391_9', 'TR391_21'), ('TR391_9_22', 'TR391_22', 'TR391_9'), ('TR391_9_22', 'TR391_9', 'TR391_22'), ('TR394_10_17', 'TR394_10', 'TR394_17'), ('TR394_10_17', 'TR394_17', 'TR394_10'), ('TR394_10_18', 'TR394_10', 'TR394_18'), ('TR394_10_18', 'TR394_18', 'TR394_10'), ('TR394_10_19', 'TR394_10', 'TR394_19'), ('TR394_10_19', 'TR394_19', 'TR394_10'), ('TR394_11_20', 'TR394_11', 'TR394_20'), ('TR394_11_20', 'TR394_20', 'TR394_11'), ('TR394_1_12', 'TR394_1', 'TR394_12'), ('TR394_1_12', 'TR394_12', 'TR394_1'), ('TR394_1_6', 'TR394_1', 'TR394_6'), ('TR394_1_6', 'TR394_6', 'TR394_1'), ('TR394_2_13', 'TR394_13', 'TR394_2'), ('TR394_2_13', 'TR394_2', 'TR394_13'), ('TR394_2_3', 'TR394_2', 'TR394_3'), ('TR394_2_3', 'TR394_3', 'TR394_2'), ('TR394_3_11', 'TR394_11', 'TR394_3'), ('TR394_3_11', 'TR394_3', 'TR394_11'), ('TR394_4_14', 'TR394_14', 'TR394_4'), ('TR394_4_14', 'TR394_4', 'TR394_14'), ('TR394_4_5', 'TR394_4', 'TR394_5'), ('TR394_4_5', 'TR394_5', 'TR394_4'), ('TR394_5_15', 'TR394_15', 'TR394_5'), ('TR394_5_15', 'TR394_5', 'TR394_15'), ('TR394_6_7', 'TR394_6', 'TR394_7'), ('TR394_6_7', 'TR394_7', 'TR394_6'), ('TR394_7_16', 'TR394_16', 'TR394_7'), ('TR394_7_16', 'TR394_7', 'TR394_16'), ('TR394_7_9', 'TR394_7', 'TR394_9'), ('TR394_7_9', 'TR394_9', 'TR394_7'), ('TR394_9_10', 'TR394_10', 'TR394_9'), ('TR394_9_10', 'TR394_9', 'TR394_10'), ('TR395_10_14', 'TR395_10', 'TR395_14'), ('TR395_10_14', 'TR395_14', 'TR395_10'), ('TR395_10_26', 'TR395_10', 'TR395_26'), ('TR395_10_26', 'TR395_26', 'TR395_10'), ('TR395_10_27', 'TR395_10', 'TR395_27'), ('TR395_10_27', 'TR395_27', 'TR395_10'), ('TR395_11_15', 'TR395_11', 'TR395_15'), ('TR395_11_15', 'TR395_15', 'TR395_11'), ('TR395_11_28', 'TR395_11', 'TR395_28'), ('TR395_11_28', 'TR395_28', 'TR395_11'), ('TR395_11_29', 'TR395_11', 'TR395_29'), ('TR395_11_29', 'TR395_29', 'TR395_11'), ('TR395_12_30', 'TR395_12', 'TR395_30'), ('TR395_12_30', 'TR395_30', 'TR395_12'), ('TR395_13_16', 'TR395_13', 'TR395_16'), ('TR395_13_16', 'TR395_16', 'TR395_13'), ('TR395_13_31', 'TR395_13', 'TR395_31'), ('TR395_13_31', 'TR395_31', 'TR395_13'), ('TR395_14_32', 'TR395_14', 'TR395_32'), ('TR395_14_32', 'TR395_32', 'TR395_14'), ('TR395_14_33', 'TR395_14', 'TR395_33'), ('TR395_14_33', 'TR395_33', 'TR395_14'), ('TR395_14_34', 'TR395_14', 'TR395_34'), ('TR395_14_34', 'TR395_34', 'TR395_14'), ('TR395_15_35', 'TR395_15', 'TR395_35'), ('TR395_15_35', 'TR395_35', 'TR395_15'), ('TR395_15_36', 'TR395_15', 'TR395_36'), ('TR395_15_36', 'TR395_36', 'TR395_15'), ('TR395_15_37', 'TR395_15', 'TR395_37'), ('TR395_15_37', 'TR395_37', 'TR395_15'), ('TR395_16_17', 'TR395_16', 'TR395_17'), ('TR395_16_17', 'TR395_17', 'TR395_16'), ('TR395_17_19', 'TR395_17', 'TR395_19'), ('TR395_17_19', 'TR395_19', 'TR395_17'), ('TR395_19_38', 'TR395_19', 'TR395_38'), ('TR395_19_38', 'TR395_38', 'TR395_19'), ('TR395_1_2', 'TR395_1', 'TR395_2'), ('TR395_1_2', 'TR395_2', 'TR395_1'), ('TR395_1_5', 'TR395_1', 'TR395_5'), ('TR395_1_5', 'TR395_5', 'TR395_1'), ('TR395_2_6', 'TR395_2', 'TR395_6'), ('TR395_2_6', 'TR395_6', 'TR395_2'), ('TR395_2_7', 'TR395_2', 'TR395_7'), ('TR395_2_7', 'TR395_7', 'TR395_2'), ('TR395_5_9', 'TR395_5', 'TR395_9'), ('TR395_5_9', 'TR395_9', 'TR395_5'), ('TR395_6_10', 'TR395_10', 'TR395_6'), ('TR395_6_10', 'TR395_6', 'TR395_10'), ('TR395_6_20', 'TR395_20', 'TR395_6'), ('TR395_6_20', 'TR395_6', 'TR395_20'), ('TR395_6_21', 'TR395_21', 'TR395_6'), ('TR395_6_21', 'TR395_6', 'TR395_21'), ('TR395_7_11', 'TR395_11', 'TR395_7'), ('TR395_7_11', 'TR395_7', 'TR395_11'), ('TR395_7_22', 'TR395_22', 'TR395_7'), ('TR395_7_22', 'TR395_7', 'TR395_22'), ('TR395_7_23', 'TR395_23', 'TR395_7'), ('TR395_7_23', 'TR395_7', 'TR395_23'), ('TR395_8_12', 'TR395_12', 'TR395_8'), ('TR395_8_12', 'TR395_8', 'TR395_12'), ('TR395_8_24', 'TR395_24', 'TR395_8'), ('TR395_8_24', 'TR395_8', 'TR395_24'), ('TR395_9_25', 'TR395_25', 'TR395_9'), ('TR395_9_25', 'TR395_9', 'TR395_25'), ('TR396_1_2', 'TR396_1', 'TR396_2'), ('TR396_1_2', 'TR396_2', 'TR396_1'), ('TR396_1_5', 'TR396_1', 'TR396_5'), ('TR396_1_5', 'TR396_5', 'TR396_1'), ('TR396_1_6', 'TR396_1', 'TR396_6'), ('TR396_1_6', 'TR396_6', 'TR396_1'), ('TR396_1_7', 'TR396_1', 'TR396_7'), ('TR396_1_7', 'TR396_7', 'TR396_1'), ('TR396_2_3', 'TR396_2', 'TR396_3'), ('TR396_2_3', 'TR396_3', 'TR396_2'), ('TR396_3_8', 'TR396_3', 'TR396_8'), ('TR396_3_8', 'TR396_8', 'TR396_3'), ('TR397_10_63', 'TR397_10', 'TR397_63'), ('TR397_10_63', 'TR397_63', 'TR397_10'), ('TR397_11_64', 'TR397_11', 'TR397_64'), ('TR397_11_64', 'TR397_64', 'TR397_11'), ('TR397_11_65', 'TR397_11', 'TR397_65'), ('TR397_11_65', 'TR397_65', 'TR397_11'), ('TR397_12_15', 'TR397_12', 'TR397_15'), ('TR397_12_15', 'TR397_15', 'TR397_12'), ('TR397_12_66', 'TR397_12', 'TR397_66'), ('TR397_12_66', 'TR397_66', 'TR397_12'), ('TR397_13_16', 'TR397_13', 'TR397_16'), ('TR397_13_16', 'TR397_16', 'TR397_13'), ('TR397_14_17', 'TR397_14', 'TR397_17'), ('TR397_14_17', 'TR397_17', 'TR397_14'), ('TR397_15_20', 'TR397_15', 'TR397_20'), ('TR397_15_20', 'TR397_20', 'TR397_15'), ('TR397_16_22', 'TR397_16', 'TR397_22'), ('TR397_16_22', 'TR397_22', 'TR397_16'), ('TR397_1_2', 'TR397_1', 'TR397_2'), ('TR397_1_2', 'TR397_2', 'TR397_1'), ('TR397_1_61', 'TR397_1', 'TR397_61'), ('TR397_1_61', 'TR397_61', 'TR397_1'), ('TR397_20_23', 'TR397_20', 'TR397_23'), ('TR397_20_23', 'TR397_23', 'TR397_20'), ('TR397_21_26', 'TR397_21', 'TR397_26'), ('TR397_21_26', 'TR397_26', 'TR397_21'), ('TR397_21_27', 'TR397_21', 'TR397_27'), ('TR397_21_27', 'TR397_27', 'TR397_21'), ('TR397_22_67', 'TR397_22', 'TR397_67'), ('TR397_22_67', 'TR397_67', 'TR397_22'), ('TR397_26_29', 'TR397_26', 'TR397_29'), ('TR397_26_29', 'TR397_29', 'TR397_26'), ('TR397_27_68', 'TR397_27', 'TR397_68'), ('TR397_27_68', 'TR397_68', 'TR397_27'), ('TR397_28_30', 'TR397_28', 'TR397_30'), ('TR397_28_30', 'TR397_30', 'TR397_28'), ('TR397_28_69', 'TR397_28', 'TR397_69'), ('TR397_28_69', 'TR397_69', 'TR397_28'), ('TR397_29_70', 'TR397_29', 'TR397_70'), ('TR397_29_70', 'TR397_70', 'TR397_29'), ('TR397_29_71', 'TR397_29', 'TR397_71'), ('TR397_29_71', 'TR397_71', 'TR397_29'), ('TR397_29_72', 'TR397_29', 'TR397_72'), ('TR397_29_72', 'TR397_72', 'TR397_29'), ('TR397_2_4', 'TR397_2', 'TR397_4'), ('TR397_2_4', 'TR397_4', 'TR397_2'), ('TR397_30_31', 'TR397_30', 'TR397_31'), ('TR397_30_31', 'TR397_31', 'TR397_30'), ('TR397_31_33', 'TR397_31', 'TR397_33'), ('TR397_31_33', 'TR397_33', 'TR397_31'), ('TR397_32_34', 'TR397_32', 'TR397_34'), ('TR397_32_34', 'TR397_34', 'TR397_32'), ('TR397_32_73', 'TR397_32', 'TR397_73'), ('TR397_32_73', 'TR397_73', 'TR397_32'), ('TR397_33_74', 'TR397_33', 'TR397_74'), ('TR397_33_74', 'TR397_74', 'TR397_33'), ('TR397_34_36', 'TR397_34', 'TR397_36'), ('TR397_34_36', 'TR397_36', 'TR397_34'), ('TR397_35_37', 'TR397_35', 'TR397_37'), ('TR397_35_37', 'TR397_37', 'TR397_35'), ('TR397_35_75', 'TR397_35', 'TR397_75'), ('TR397_35_75', 'TR397_75', 'TR397_35'), ('TR397_36_38', 'TR397_36', 'TR397_38'), ('TR397_36_38', 'TR397_38', 'TR397_36'), ('TR397_37_39', 'TR397_37', 'TR397_39'), ('TR397_37_39', 'TR397_39', 'TR397_37'), ('TR397_38_76', 'TR397_38', 'TR397_76'), ('TR397_38_76', 'TR397_76', 'TR397_38'), ('TR397_38_77', 'TR397_38', 'TR397_77'), ('TR397_38_77', 'TR397_77', 'TR397_38'), ('TR397_38_78', 'TR397_38', 'TR397_78'), ('TR397_38_78', 'TR397_78', 'TR397_38'), ('TR397_3_5', 'TR397_3', 'TR397_5'), ('TR397_3_5', 'TR397_5', 'TR397_3'), ('TR397_3_6', 'TR397_3', 'TR397_6'), ('TR397_3_6', 'TR397_6', 'TR397_3'), ('TR397_40_41', 'TR397_40', 'TR397_41'), ('TR397_40_41', 'TR397_41', 'TR397_40'), ('TR397_41_43', 'TR397_41', 'TR397_43'), ('TR397_41_43', 'TR397_43', 'TR397_41'), ('TR397_42_44', 'TR397_42', 'TR397_44'), ('TR397_42_44', 'TR397_44', 'TR397_42'), ('TR397_42_45', 'TR397_42', 'TR397_45'), ('TR397_42_45', 'TR397_45', 'TR397_42'), ('TR397_43_46', 'TR397_43', 'TR397_46'), ('TR397_43_46', 'TR397_46', 'TR397_43'), ('TR397_44_48', 'TR397_44', 'TR397_48'), ('TR397_44_48', 'TR397_48', 'TR397_44'), ('TR397_45_79', 'TR397_45', 'TR397_79'), ('TR397_45_79', 'TR397_79', 'TR397_45'), ('TR397_46_80', 'TR397_46', 'TR397_80'), ('TR397_46_80', 'TR397_80', 'TR397_46'), ('TR397_47_51', 'TR397_47', 'TR397_51'), ('TR397_47_51', 'TR397_51', 'TR397_47'), ('TR397_47_52', 'TR397_47', 'TR397_52'), ('TR397_47_52', 'TR397_52', 'TR397_47'), ('TR397_4_7', 'TR397_4', 'TR397_7'), ('TR397_4_7', 'TR397_7', 'TR397_4'), ('TR397_51_53', 'TR397_51', 'TR397_53'), ('TR397_51_53', 'TR397_53', 'TR397_51'), ('TR397_52_54', 'TR397_52', 'TR397_54'), ('TR397_52_54', 'TR397_54', 'TR397_52'), ('TR397_53_81', 'TR397_53', 'TR397_81'), ('TR397_53_81', 'TR397_81', 'TR397_53'), ('TR397_54_82', 'TR397_54', 'TR397_82'), ('TR397_54_82', 'TR397_82', 'TR397_54'), ('TR397_54_83', 'TR397_54', 'TR397_83'), ('TR397_54_83', 'TR397_83', 'TR397_54'), ('TR397_55_56', 'TR397_55', 'TR397_56'), ('TR397_55_56', 'TR397_56', 'TR397_55'), ('TR397_55_84', 'TR397_55', 'TR397_84'), ('TR397_55_84', 'TR397_84', 'TR397_55'), ('TR397_56_57', 'TR397_56', 'TR397_57'), ('TR397_56_57', 'TR397_57', 'TR397_56'), ('TR397_57_58', 'TR397_57', 'TR397_58'), ('TR397_57_58', 'TR397_58', 'TR397_57'), ('TR397_5_10', 'TR397_10', 'TR397_5'), ('TR397_5_10', 'TR397_5', 'TR397_10'), ('TR397_6_11', 'TR397_11', 'TR397_6'), ('TR397_6_11', 'TR397_6', 'TR397_11'), ('TR397_8_14', 'TR397_14', 'TR397_8'), ('TR397_8_14', 'TR397_8', 'TR397_14'), ('TR397_8_9', 'TR397_8', 'TR397_9'), ('TR397_8_9', 'TR397_9', 'TR397_8'), ('TR397_9_62', 'TR397_62', 'TR397_9'), ('TR397_9_62', 'TR397_9', 'TR397_62'), ('TR398_10_11', 'TR398_10', 'TR398_11'), ('TR398_10_11', 'TR398_11', 'TR398_10'), ('TR398_11_16', 'TR398_11', 'TR398_16'), ('TR398_11_16', 'TR398_16', 'TR398_11'), ('TR398_12_17', 'TR398_12', 'TR398_17'), ('TR398_12_17', 'TR398_17', 'TR398_12'), ('TR398_1_10', 'TR398_1', 'TR398_10'), ('TR398_1_10', 'TR398_10', 'TR398_1'), ('TR398_1_6', 'TR398_1', 'TR398_6'), ('TR398_1_6', 'TR398_6', 'TR398_1'), ('TR398_2_19', 'TR398_19', 'TR398_2'), ('TR398_2_19', 'TR398_2', 'TR398_19'), ('TR398_2_3', 'TR398_2', 'TR398_3'), ('TR398_2_3', 'TR398_3', 'TR398_2'), ('TR398_3_13', 'TR398_13', 'TR398_3'), ('TR398_3_13', 'TR398_3', 'TR398_13'), ('TR398_4_20', 'TR398_20', 'TR398_4'), ('TR398_4_20', 'TR398_4', 'TR398_20'), ('TR398_4_5', 'TR398_4', 'TR398_5'), ('TR398_4_5', 'TR398_5', 'TR398_4'), ('TR398_5_14', 'TR398_14', 'TR398_5'), ('TR398_5_14', 'TR398_5', 'TR398_14'), ('TR398_6_15', 'TR398_15', 'TR398_6'), ('TR398_6_15', 'TR398_6', 'TR398_15'), ('TR398_7_12', 'TR398_12', 'TR398_7'), ('TR398_7_12', 'TR398_7', 'TR398_12'), ('TR398_7_21', 'TR398_21', 'TR398_7'), ('TR398_7_21', 'TR398_7', 'TR398_21'), ('TR398_8_18', 'TR398_18', 'TR398_8'), ('TR398_8_18', 'TR398_8', 'TR398_18'), ('TR398_8_9', 'TR398_8', 'TR398_9'), ('TR398_8_9', 'TR398_9', 'TR398_8'), ('TR398_9_22', 'TR398_22', 'TR398_9'), ('TR398_9_22', 'TR398_9', 'TR398_22'), ('TR399_16_17', 'TR399_16', 'TR399_17'), ('TR399_16_17', 'TR399_17', 'TR399_16'), ('TR399_16_20', 'TR399_16', 'TR399_20'), ('TR399_16_20', 'TR399_20', 'TR399_16'), ('TR399_16_21', 'TR399_16', 'TR399_21'), ('TR399_16_21', 'TR399_21', 'TR399_16'), ('TR399_16_22', 'TR399_16', 'TR399_22'), ('TR399_16_22', 'TR399_22', 'TR399_16'), ('TR399_17_18', 'TR399_17', 'TR399_18'), ('TR399_17_18', 'TR399_18', 'TR399_17'), ('TR399_17_23', 'TR399_17', 'TR399_23'), ('TR399_17_23', 'TR399_23', 'TR399_17'), ('TR399_17_24', 'TR399_17', 'TR399_24'), ('TR399_17_24', 'TR399_24', 'TR399_17'), ('TR399_18_19', 'TR399_18', 'TR399_19'), ('TR399_18_19', 'TR399_19', 'TR399_18'), ('TR399_18_25', 'TR399_18', 'TR399_25'), ('TR399_18_25', 'TR399_25', 'TR399_18'), ('TR399_18_26', 'TR399_18', 'TR399_26'), ('TR399_18_26', 'TR399_26', 'TR399_18'), ('TR399_19_20', 'TR399_19', 'TR399_20'), ('TR399_19_20', 'TR399_20', 'TR399_19'), ('TR399_19_27', 'TR399_19', 'TR399_27'), ('TR399_19_27', 'TR399_27', 'TR399_19'), ('TR399_19_28', 'TR399_19', 'TR399_28'), ('TR399_19_28', 'TR399_28', 'TR399_19'), ('TR399_1_2', 'TR399_1', 'TR399_2'), ('TR399_1_2', 'TR399_2', 'TR399_1'), ('TR399_1_5', 'TR399_1', 'TR399_5'), ('TR399_1_5', 'TR399_5', 'TR399_1'), ('TR399_1_6', 'TR399_1', 'TR399_6'), ('TR399_1_6', 'TR399_6', 'TR399_1'), ('TR399_1_7', 'TR399_1', 'TR399_7'), ('TR399_1_7', 'TR399_7', 'TR399_1'), ('TR399_20_29', 'TR399_20', 'TR399_29'), ('TR399_20_29', 'TR399_29', 'TR399_20'), ('TR399_20_30', 'TR399_20', 'TR399_30'), ('TR399_20_30', 'TR399_30', 'TR399_20'), ('TR399_2_3', 'TR399_2', 'TR399_3'), ('TR399_2_3', 'TR399_3', 'TR399_2'), ('TR399_2_8', 'TR399_2', 'TR399_8'), ('TR399_2_8', 'TR399_8', 'TR399_2'), ('TR399_2_9', 'TR399_2', 'TR399_9'), ('TR399_2_9', 'TR399_9', 'TR399_2'), ('TR399_31_32', 'TR399_31', 'TR399_32'), ('TR399_31_32', 'TR399_32', 'TR399_31'), ('TR399_31_33', 'TR399_31', 'TR399_33'), ('TR399_31_33', 'TR399_33', 'TR399_31'), ('TR399_31_34', 'TR399_31', 'TR399_34'), ('TR399_31_34', 'TR399_34', 'TR399_31'), ('TR399_3_10', 'TR399_10', 'TR399_3'), ('TR399_3_10', 'TR399_3', 'TR399_10'), ('TR399_3_11', 'TR399_11', 'TR399_3'), ('TR399_3_11', 'TR399_3', 'TR399_11'), ('TR399_3_4', 'TR399_3', 'TR399_4'), ('TR399_3_4', 'TR399_4', 'TR399_3'), ('TR399_4_12', 'TR399_12', 'TR399_4'), ('TR399_4_12', 'TR399_4', 'TR399_12'), ('TR399_4_13', 'TR399_13', 'TR399_4'), ('TR399_4_13', 'TR399_4', 'TR399_13'), ('TR399_4_5', 'TR399_4', 'TR399_5'), ('TR399_4_5', 'TR399_5', 'TR399_4'), ('TR399_5_14', 'TR399_14', 'TR399_5'), ('TR399_5_14', 'TR399_5', 'TR399_14'), ('TR399_5_15', 'TR399_15', 'TR399_5'), ('TR399_5_15', 'TR399_5', 'TR399_15'), ('TR400_1_2', 'TR400_1', 'TR400_2'), ('TR400_1_2', 'TR400_2', 'TR400_1'), ('TR400_1_3', 'TR400_1', 'TR400_3'), ('TR400_1_3', 'TR400_3', 'TR400_1'), ('TR400_1_4', 'TR400_1', 'TR400_4'), ('TR400_1_4', 'TR400_4', 'TR400_1'), ('TR400_1_7', 'TR400_1', 'TR400_7'), ('TR400_1_7', 'TR400_7', 'TR400_1'), ('TR400_2_5', 'TR400_2', 'TR400_5'), ('TR400_2_5', 'TR400_5', 'TR400_2'), ('TR400_2_8', 'TR400_2', 'TR400_8'), ('TR400_2_8', 'TR400_8', 'TR400_2'), ('TR400_2_9', 'TR400_2', 'TR400_9'), ('TR400_2_9', 'TR400_9', 'TR400_2'), ('TR400_3_10', 'TR400_10', 'TR400_3'), ('TR400_3_10', 'TR400_3', 'TR400_10'), ('TR400_3_11', 'TR400_11', 'TR400_3'), ('TR400_3_11', 'TR400_3', 'TR400_11'), ('TR400_3_6', 'TR400_3', 'TR400_6'), ('TR400_3_6', 'TR400_6', 'TR400_3'), ('TR400_6_12', 'TR400_12', 'TR400_6'), ('TR400_6_12', 'TR400_6', 'TR400_12'), ('TR401_18_19', 'TR401_18', 'TR401_19'), ('TR401_18_19', 'TR401_19', 'TR401_18'), ('TR401_1_10', 'TR401_1', 'TR401_10'), ('TR401_1_10', 'TR401_10', 'TR401_1'), ('TR401_1_6', 'TR401_1', 'TR401_6'), ('TR401_1_6', 'TR401_6', 'TR401_1'), ('TR401_20_21', 'TR401_20', 'TR401_21'), ('TR401_20_21', 'TR401_21', 'TR401_20'), ('TR401_2_11', 'TR401_11', 'TR401_2'), ('TR401_2_11', 'TR401_2', 'TR401_11'), ('TR401_2_3', 'TR401_2', 'TR401_3'), ('TR401_2_3', 'TR401_3', 'TR401_2'), ('TR401_3_9', 'TR401_3', 'TR401_9'), ('TR401_3_9', 'TR401_9', 'TR401_3'), ('TR401_4_12', 'TR401_12', 'TR401_4'), ('TR401_4_12', 'TR401_4', 'TR401_12'), ('TR401_4_5', 'TR401_4', 'TR401_5'), ('TR401_4_5', 'TR401_5', 'TR401_4'), ('TR401_5_8', 'TR401_5', 'TR401_8'), ('TR401_5_8', 'TR401_8', 'TR401_5'), ('TR401_6_7', 'TR401_6', 'TR401_7'), ('TR401_6_7', 'TR401_7', 'TR401_6'), ('TR401_7_13', 'TR401_13', 'TR401_7'), ('TR401_7_13', 'TR401_7', 'TR401_13'), ('TR401_8_14', 'TR401_14', 'TR401_8'), ('TR401_8_14', 'TR401_8', 'TR401_14'), ('TR401_8_15', 'TR401_15', 'TR401_8'), ('TR401_8_15', 'TR401_8', 'TR401_15'), ('TR401_9_16', 'TR401_16', 'TR401_9'), ('TR401_9_16', 'TR401_9', 'TR401_16'), ('TR401_9_17', 'TR401_17', 'TR401_9'), ('TR401_9_17', 'TR401_9', 'TR401_17'), ('TR402_1_5', 'TR402_1', 'TR402_5'), ('TR402_1_5', 'TR402_5', 'TR402_1'), ('TR402_1_6', 'TR402_1', 'TR402_6'), ('TR402_1_6', 'TR402_6', 'TR402_1'), ('TR402_2_3', 'TR402_2', 'TR402_3'), ('TR402_2_3', 'TR402_3', 'TR402_2'), ('TR402_2_7', 'TR402_2', 'TR402_7'), ('TR402_2_7', 'TR402_7', 'TR402_2'), ('TR402_3_8', 'TR402_3', 'TR402_8'), ('TR402_3_8', 'TR402_8', 'TR402_3'), ('TR402_4_5', 'TR402_4', 'TR402_5'), ('TR402_4_5', 'TR402_5', 'TR402_4'), ('TR402_4_9', 'TR402_4', 'TR402_9'), ('TR402_4_9', 'TR402_9', 'TR402_4'), ('TR403_1_6', 'TR403_1', 'TR403_6'), ('TR403_1_6', 'TR403_6', 'TR403_1'), ('TR403_1_9', 'TR403_1', 'TR403_9'), ('TR403_1_9', 'TR403_9', 'TR403_1'), ('TR403_2_10', 'TR403_10', 'TR403_2'), ('TR403_2_10', 'TR403_2', 'TR403_10'), ('TR403_2_3', 'TR403_2', 'TR403_3'), ('TR403_2_3', 'TR403_3', 'TR403_2'), ('TR403_3_11', 'TR403_11', 'TR403_3'), ('TR403_3_11', 'TR403_3', 'TR403_11'), ('TR403_4_5', 'TR403_4', 'TR403_5'), ('TR403_4_5', 'TR403_5', 'TR403_4'), ('TR403_4_8', 'TR403_4', 'TR403_8'), ('TR403_4_8', 'TR403_8', 'TR403_4'), ('TR403_5_12', 'TR403_12', 'TR403_5'), ('TR403_5_12', 'TR403_5', 'TR403_12'), ('TR403_6_7', 'TR403_6', 'TR403_7'), ('TR403_6_7', 'TR403_7', 'TR403_6'), ('TR403_7_13', 'TR403_13', 'TR403_7'), ('TR403_7_13', 'TR403_7', 'TR403_13'), ('TR403_8_14', 'TR403_14', 'TR403_8'), ('TR403_8_14', 'TR403_8', 'TR403_14'), ('TR404_10_26', 'TR404_10', 'TR404_26'), ('TR404_10_26', 'TR404_26', 'TR404_10'), ('TR404_11_12', 'TR404_11', 'TR404_12'), ('TR404_11_12', 'TR404_12', 'TR404_11'), ('TR404_11_27', 'TR404_11', 'TR404_27'), ('TR404_11_27', 'TR404_27', 'TR404_11'), ('TR404_12_28', 'TR404_12', 'TR404_28'), ('TR404_12_28', 'TR404_28', 'TR404_12'), ('TR404_13_29', 'TR404_13', 'TR404_29'), ('TR404_13_29', 'TR404_29', 'TR404_13'), ('TR404_14_15', 'TR404_14', 'TR404_15'), ('TR404_14_15', 'TR404_15', 'TR404_14'), ('TR404_15_16', 'TR404_15', 'TR404_16'), ('TR404_15_16', 'TR404_16', 'TR404_15'), ('TR404_15_30', 'TR404_15', 'TR404_30'), ('TR404_15_30', 'TR404_30', 'TR404_15'), ('TR404_16_17', 'TR404_16', 'TR404_17'), ('TR404_16_17', 'TR404_17', 'TR404_16'), ('TR404_17_31', 'TR404_17', 'TR404_31'), ('TR404_17_31', 'TR404_31', 'TR404_17'), ('TR404_1_14', 'TR404_1', 'TR404_14'), ('TR404_1_14', 'TR404_14', 'TR404_1'), ('TR404_1_17', 'TR404_1', 'TR404_17'), ('TR404_1_17', 'TR404_17', 'TR404_1'), ('TR404_1_2', 'TR404_1', 'TR404_2'), ('TR404_1_2', 'TR404_2', 'TR404_1'), ('TR404_1_3', 'TR404_1', 'TR404_3'), ('TR404_1_3', 'TR404_3', 'TR404_1'), ('TR404_2_8', 'TR404_2', 'TR404_8'), ('TR404_2_8', 'TR404_8', 'TR404_2'), ('TR404_3_13', 'TR404_13', 'TR404_3'), ('TR404_3_13', 'TR404_3', 'TR404_13'), ('TR404_4_20', 'TR404_20', 'TR404_4'), ('TR404_4_20', 'TR404_4', 'TR404_20'), ('TR404_4_5', 'TR404_4', 'TR404_5'), ('TR404_4_5', 'TR404_5', 'TR404_4'), ('TR404_5_21', 'TR404_21', 'TR404_5'), ('TR404_5_21', 'TR404_5', 'TR404_21'), ('TR404_6_22', 'TR404_22', 'TR404_6'), ('TR404_6_22', 'TR404_6', 'TR404_22'), ('TR404_6_7', 'TR404_6', 'TR404_7'), ('TR404_6_7', 'TR404_7', 'TR404_6'), ('TR404_7_23', 'TR404_23', 'TR404_7'), ('TR404_7_23', 'TR404_7', 'TR404_23'), ('TR404_8_24', 'TR404_24', 'TR404_8'), ('TR404_8_24', 'TR404_8', 'TR404_24'), ('TR404_9_10', 'TR404_10', 'TR404_9'), ('TR404_9_10', 'TR404_9', 'TR404_10'), ('TR404_9_25', 'TR404_25', 'TR404_9'), ('TR404_9_25', 'TR404_9', 'TR404_25'), ('TR405_10_17', 'TR405_10', 'TR405_17'), ('TR405_10_17', 'TR405_17', 'TR405_10'), ('TR405_13_14', 'TR405_13', 'TR405_14'), ('TR405_13_14', 'TR405_14', 'TR405_13'), ('TR405_13_62', 'TR405_13', 'TR405_62'), ('TR405_13_62', 'TR405_62', 'TR405_13'), ('TR405_14_63', 'TR405_14', 'TR405_63'), ('TR405_14_63', 'TR405_63', 'TR405_14'), ('TR405_15_16', 'TR405_15', 'TR405_16'), ('TR405_15_16', 'TR405_16', 'TR405_15'), ('TR405_15_18', 'TR405_15', 'TR405_18'), ('TR405_15_18', 'TR405_18', 'TR405_15'), ('TR405_16_64', 'TR405_16', 'TR405_64'), ('TR405_16_64', 'TR405_64', 'TR405_16'), ('TR405_17_65', 'TR405_17', 'TR405_65'), ('TR405_17_65', 'TR405_65', 'TR405_17'), ('TR405_19_20', 'TR405_19', 'TR405_20'), ('TR405_19_20', 'TR405_20', 'TR405_19'), ('TR405_1_2', 'TR405_1', 'TR405_2'), ('TR405_1_2', 'TR405_2', 'TR405_1'), ('TR405_1_55', 'TR405_1', 'TR405_55'), ('TR405_1_55', 'TR405_55', 'TR405_1'), ('TR405_1_56', 'TR405_1', 'TR405_56'), ('TR405_1_56', 'TR405_56', 'TR405_1'), ('TR405_1_57', 'TR405_1', 'TR405_57'), ('TR405_1_57', 'TR405_57', 'TR405_1'), ('TR405_20_25', 'TR405_20', 'TR405_25'), ('TR405_20_25', 'TR405_25', 'TR405_20'), ('TR405_21_22', 'TR405_21', 'TR405_22'), ('TR405_21_22', 'TR405_22', 'TR405_21'), ('TR405_21_66', 'TR405_21', 'TR405_66'), ('TR405_21_66', 'TR405_66', 'TR405_21'), ('TR405_22_67', 'TR405_22', 'TR405_67'), ('TR405_22_67', 'TR405_67', 'TR405_22'), ('TR405_23_24', 'TR405_23', 'TR405_24'), ('TR405_23_24', 'TR405_24', 'TR405_23'), ('TR405_23_26', 'TR405_23', 'TR405_26'), ('TR405_23_26', 'TR405_26', 'TR405_23'), ('TR405_24_68', 'TR405_24', 'TR405_68'), ('TR405_24_68', 'TR405_68', 'TR405_24'), ('TR405_25_54', 'TR405_25', 'TR405_54'), ('TR405_25_54', 'TR405_54', 'TR405_25'), ('TR405_26_31', 'TR405_26', 'TR405_31'), ('TR405_26_31', 'TR405_31', 'TR405_26'), ('TR405_27_28', 'TR405_27', 'TR405_28'), ('TR405_27_28', 'TR405_28', 'TR405_27'), ('TR405_27_69', 'TR405_27', 'TR405_69'), ('TR405_27_69', 'TR405_69', 'TR405_27'), ('TR405_28_70', 'TR405_28', 'TR405_70'), ('TR405_28_70', 'TR405_70', 'TR405_28'), ('TR405_29_30', 'TR405_29', 'TR405_30'), ('TR405_29_30', 'TR405_30', 'TR405_29'), ('TR405_29_32', 'TR405_29', 'TR405_32'), ('TR405_29_32', 'TR405_32', 'TR405_29'), ('TR405_2_7', 'TR405_2', 'TR405_7'), ('TR405_2_7', 'TR405_7', 'TR405_2'), ('TR405_30_53', 'TR405_30', 'TR405_53'), ('TR405_30_53', 'TR405_53', 'TR405_30'), ('TR405_31_71', 'TR405_31', 'TR405_71'), ('TR405_31_71', 'TR405_71', 'TR405_31'), ('TR405_33_34', 'TR405_33', 'TR405_34'), ('TR405_33_34', 'TR405_34', 'TR405_33'), ('TR405_34_39', 'TR405_34', 'TR405_39'), ('TR405_34_39', 'TR405_39', 'TR405_34'), ('TR405_35_36', 'TR405_35', 'TR405_36'), ('TR405_35_36', 'TR405_36', 'TR405_35'), ('TR405_35_40', 'TR405_35', 'TR405_40'), ('TR405_35_40', 'TR405_40', 'TR405_35'), ('TR405_36_43', 'TR405_36', 'TR405_43'), ('TR405_36_43', 'TR405_43', 'TR405_36'), ('TR405_37_38', 'TR405_37', 'TR405_38'), ('TR405_37_38', 'TR405_38', 'TR405_37'), ('TR405_37_72', 'TR405_37', 'TR405_72'), ('TR405_37_72', 'TR405_72', 'TR405_37'), ('TR405_38_73', 'TR405_38', 'TR405_73'), ('TR405_38_73', 'TR405_73', 'TR405_38'), ('TR405_39_52', 'TR405_39', 'TR405_52'), ('TR405_39_52', 'TR405_52', 'TR405_39'), ('TR405_3_4', 'TR405_3', 'TR405_4'), ('TR405_3_4', 'TR405_4', 'TR405_3'), ('TR405_3_58', 'TR405_3', 'TR405_58'), ('TR405_3_58', 'TR405_58', 'TR405_3'), ('TR405_40_44', 'TR405_40', 'TR405_44'), ('TR405_40_44', 'TR405_44', 'TR405_40'), ('TR405_41_42', 'TR405_41', 'TR405_42'), ('TR405_41_42', 'TR405_42', 'TR405_41'), ('TR405_41_74', 'TR405_41', 'TR405_74'), ('TR405_41_74', 'TR405_74', 'TR405_41'), ('TR405_42_48', 'TR405_42', 'TR405_48'), ('TR405_42_48', 'TR405_48', 'TR405_42'), ('TR405_43_75', 'TR405_43', 'TR405_75'), ('TR405_43_75', 'TR405_75', 'TR405_43'), ('TR405_44_45', 'TR405_44', 'TR405_45'), ('TR405_44_45', 'TR405_45', 'TR405_44'), ('TR405_48_49', 'TR405_48', 'TR405_49'), ('TR405_48_49', 'TR405_49', 'TR405_48'), ('TR405_4_59', 'TR405_4', 'TR405_59'), ('TR405_4_59', 'TR405_59', 'TR405_4'), ('TR405_52_76', 'TR405_52', 'TR405_76'), ('TR405_52_76', 'TR405_76', 'TR405_52'), ('TR405_53_77', 'TR405_53', 'TR405_77'), ('TR405_53_77', 'TR405_77', 'TR405_53'), ('TR405_53_78', 'TR405_53', 'TR405_78'), ('TR405_53_78', 'TR405_78', 'TR405_53'), ('TR405_53_79', 'TR405_53', 'TR405_79'), ('TR405_53_79', 'TR405_79', 'TR405_53'), ('TR405_54_80', 'TR405_54', 'TR405_80'), ('TR405_54_80', 'TR405_80', 'TR405_54'), ('TR405_54_81', 'TR405_54', 'TR405_81'), ('TR405_54_81', 'TR405_81', 'TR405_54'), ('TR405_54_82', 'TR405_54', 'TR405_82'), ('TR405_54_82', 'TR405_82', 'TR405_54'), ('TR405_5_6', 'TR405_5', 'TR405_6'), ('TR405_5_6', 'TR405_6', 'TR405_5'), ('TR405_5_8', 'TR405_5', 'TR405_8'), ('TR405_5_8', 'TR405_8', 'TR405_5'), ('TR405_6_60', 'TR405_6', 'TR405_60'), ('TR405_6_60', 'TR405_60', 'TR405_6'), ('TR405_7_61', 'TR405_61', 'TR405_7'), ('TR405_7_61', 'TR405_7', 'TR405_61'), ('TR405_8_9', 'TR405_8', 'TR405_9'), ('TR405_8_9', 'TR405_9', 'TR405_8'), ('TR405_9_10', 'TR405_10', 'TR405_9'), ('TR405_9_10', 'TR405_9', 'TR405_10'), ('TR406_2_3', 'TR406_2', 'TR406_3'), ('TR406_2_3', 'TR406_3', 'TR406_2'), ('TR406_2_4', 'TR406_2', 'TR406_4'), ('TR406_2_4', 'TR406_4', 'TR406_2'), ('TR406_3_5', 'TR406_3', 'TR406_5'), ('TR406_3_5', 'TR406_5', 'TR406_3'), ('TR406_3_7', 'TR406_3', 'TR406_7'), ('TR406_3_7', 'TR406_7', 'TR406_3'), ('TR406_3_8', 'TR406_3', 'TR406_8'), ('TR406_3_8', 'TR406_8', 'TR406_3'), ('TR406_4_6', 'TR406_4', 'TR406_6'), ('TR406_4_6', 'TR406_6', 'TR406_4'), ('TR406_5_10', 'TR406_10', 'TR406_5'), ('TR406_5_10', 'TR406_5', 'TR406_10'), ('TR406_5_6', 'TR406_5', 'TR406_6'), ('TR406_5_6', 'TR406_6', 'TR406_5'), ('TR406_5_9', 'TR406_5', 'TR406_9'), ('TR406_5_9', 'TR406_9', 'TR406_5'), ('TR406_6_11', 'TR406_11', 'TR406_6'), ('TR406_6_11', 'TR406_6', 'TR406_11'), ('TR406_6_12', 'TR406_12', 'TR406_6'), ('TR406_6_12', 'TR406_6', 'TR406_12'), ('TR407_10_25', 'TR407_10', 'TR407_25'), ('TR407_10_25', 'TR407_25', 'TR407_10'), ('TR407_11_26', 'TR407_11', 'TR407_26'), ('TR407_11_26', 'TR407_26', 'TR407_11'), ('TR407_12_16', 'TR407_12', 'TR407_16'), ('TR407_12_16', 'TR407_16', 'TR407_12'), ('TR407_12_27', 'TR407_12', 'TR407_27'), ('TR407_12_27', 'TR407_27', 'TR407_12'), ('TR407_13_20', 'TR407_13', 'TR407_20'), ('TR407_13_20', 'TR407_20', 'TR407_13'), ('TR407_14_28', 'TR407_14', 'TR407_28'), ('TR407_14_28', 'TR407_28', 'TR407_14'), ('TR407_15_21', 'TR407_15', 'TR407_21'), ('TR407_15_21', 'TR407_21', 'TR407_15'), ('TR407_15_29', 'TR407_15', 'TR407_29'), ('TR407_15_29', 'TR407_29', 'TR407_15'), ('TR407_16_30', 'TR407_16', 'TR407_30'), ('TR407_16_30', 'TR407_30', 'TR407_16'), ('TR407_17_31', 'TR407_17', 'TR407_31'), ('TR407_17_31', 'TR407_31', 'TR407_17'), ('TR407_18_22', 'TR407_18', 'TR407_22'), ('TR407_18_22', 'TR407_22', 'TR407_18'), ('TR407_18_32', 'TR407_18', 'TR407_32'), ('TR407_18_32', 'TR407_32', 'TR407_18'), ('TR407_1_3', 'TR407_1', 'TR407_3'), ('TR407_1_3', 'TR407_3', 'TR407_1'), ('TR407_21_23', 'TR407_21', 'TR407_23'), ('TR407_21_23', 'TR407_23', 'TR407_21'), ('TR407_22_33', 'TR407_22', 'TR407_33'), ('TR407_22_33', 'TR407_33', 'TR407_22'), ('TR407_23_34', 'TR407_23', 'TR407_34'), ('TR407_23_34', 'TR407_34', 'TR407_23'), ('TR407_23_35', 'TR407_23', 'TR407_35'), ('TR407_23_35', 'TR407_35', 'TR407_23'), ('TR407_23_36', 'TR407_23', 'TR407_36'), ('TR407_23_36', 'TR407_36', 'TR407_23'), ('TR407_2_4', 'TR407_2', 'TR407_4'), ('TR407_2_4', 'TR407_4', 'TR407_2'), ('TR407_3_6', 'TR407_3', 'TR407_6'), ('TR407_3_6', 'TR407_6', 'TR407_3'), ('TR407_4_8', 'TR407_4', 'TR407_8'), ('TR407_4_8', 'TR407_8', 'TR407_4'), ('TR407_5_10', 'TR407_10', 'TR407_5'), ('TR407_5_10', 'TR407_5', 'TR407_10'), ('TR407_5_9', 'TR407_5', 'TR407_9'), ('TR407_5_9', 'TR407_9', 'TR407_5'), ('TR407_6_11', 'TR407_11', 'TR407_6'), ('TR407_6_11', 'TR407_6', 'TR407_11'), ('TR407_7_13', 'TR407_13', 'TR407_7'), ('TR407_7_13', 'TR407_7', 'TR407_13'), ('TR407_7_14', 'TR407_14', 'TR407_7'), ('TR407_7_14', 'TR407_7', 'TR407_14'), ('TR407_8_24', 'TR407_24', 'TR407_8'), ('TR407_8_24', 'TR407_8', 'TR407_24'), ('TR407_9_17', 'TR407_17', 'TR407_9'), ('TR407_9_17', 'TR407_9', 'TR407_17'), ('TR409_11_16', 'TR409_11', 'TR409_16'), ('TR409_11_16', 'TR409_16', 'TR409_11'), ('TR409_12_13', 'TR409_12', 'TR409_13'), ('TR409_12_13', 'TR409_13', 'TR409_12'), ('TR409_12_25', 'TR409_12', 'TR409_25'), ('TR409_12_25', 'TR409_25', 'TR409_12'), ('TR409_13_26', 'TR409_13', 'TR409_26'), ('TR409_13_26', 'TR409_26', 'TR409_13'), ('TR409_14_15', 'TR409_14', 'TR409_15'), ('TR409_14_15', 'TR409_15', 'TR409_14'), ('TR409_14_18', 'TR409_14', 'TR409_18'), ('TR409_14_18', 'TR409_18', 'TR409_14'), ('TR409_15_17', 'TR409_15', 'TR409_17'), ('TR409_15_17', 'TR409_17', 'TR409_15'), ('TR409_16_27', 'TR409_16', 'TR409_27'), ('TR409_16_27', 'TR409_27', 'TR409_16'), ('TR409_17_28', 'TR409_17', 'TR409_28'), ('TR409_17_28', 'TR409_28', 'TR409_17'), ('TR409_18_29', 'TR409_18', 'TR409_29'), ('TR409_18_29', 'TR409_29', 'TR409_18'), ('TR409_19_30', 'TR409_19', 'TR409_30'), ('TR409_19_30', 'TR409_30', 'TR409_19'), ('TR409_1_6', 'TR409_1', 'TR409_6'), ('TR409_1_6', 'TR409_6', 'TR409_1'), ('TR409_1_7', 'TR409_1', 'TR409_7'), ('TR409_1_7', 'TR409_7', 'TR409_1'), ('TR409_21_31', 'TR409_21', 'TR409_31'), ('TR409_21_31', 'TR409_31', 'TR409_21'), ('TR409_22_32', 'TR409_22', 'TR409_32'), ('TR409_22_32', 'TR409_32', 'TR409_22'), ('TR409_2_10', 'TR409_10', 'TR409_2'), ('TR409_2_10', 'TR409_2', 'TR409_10'), ('TR409_2_3', 'TR409_2', 'TR409_3'), ('TR409_2_3', 'TR409_3', 'TR409_2'), ('TR409_3_23', 'TR409_23', 'TR409_3'), ('TR409_3_23', 'TR409_3', 'TR409_23'), ('TR409_4_22', 'TR409_22', 'TR409_4'), ('TR409_4_22', 'TR409_4', 'TR409_22'), ('TR409_4_5', 'TR409_4', 'TR409_5'), ('TR409_4_5', 'TR409_5', 'TR409_4'), ('TR409_5_24', 'TR409_24', 'TR409_5'), ('TR409_5_24', 'TR409_5', 'TR409_24'), ('TR409_6_21', 'TR409_21', 'TR409_6'), ('TR409_6_21', 'TR409_6', 'TR409_21'), ('TR409_7_8', 'TR409_7', 'TR409_8'), ('TR409_7_8', 'TR409_8', 'TR409_7'), ('TR409_8_19', 'TR409_19', 'TR409_8'), ('TR409_8_19', 'TR409_8', 'TR409_19'), ('TR409_9_10', 'TR409_10', 'TR409_9'), ('TR409_9_10', 'TR409_9', 'TR409_10'), ('TR409_9_11', 'TR409_11', 'TR409_9'), ('TR409_9_11', 'TR409_9', 'TR409_11'), ('TR410_10_18', 'TR410_10', 'TR410_18'), ('TR410_10_18', 'TR410_18', 'TR410_10'), ('TR410_1_6', 'TR410_1', 'TR410_6'), ('TR410_1_6', 'TR410_6', 'TR410_1'), ('TR410_1_7', 'TR410_1', 'TR410_7'), ('TR410_1_7', 'TR410_7', 'TR410_1'), ('TR410_2_10', 'TR410_10', 'TR410_2'), ('TR410_2_10', 'TR410_2', 'TR410_10'), ('TR410_2_3', 'TR410_2', 'TR410_3'), ('TR410_2_3', 'TR410_3', 'TR410_2'), ('TR410_3_11', 'TR410_11', 'TR410_3'), ('TR410_3_11', 'TR410_3', 'TR410_11'), ('TR410_4_12', 'TR410_12', 'TR410_4'), ('TR410_4_12', 'TR410_4', 'TR410_12'), ('TR410_4_5', 'TR410_4', 'TR410_5'), ('TR410_4_5', 'TR410_5', 'TR410_4'), ('TR410_5_13', 'TR410_13', 'TR410_5'), ('TR410_5_13', 'TR410_5', 'TR410_13'), ('TR410_6_14', 'TR410_14', 'TR410_6'), ('TR410_6_14', 'TR410_6', 'TR410_14'), ('TR410_7_15', 'TR410_15', 'TR410_7'), ('TR410_7_15', 'TR410_7', 'TR410_15'), ('TR410_8_16', 'TR410_16', 'TR410_8'), ('TR410_8_16', 'TR410_8', 'TR410_16'), ('TR410_8_9', 'TR410_8', 'TR410_9'), ('TR410_8_9', 'TR410_9', 'TR410_8'), ('TR410_9_17', 'TR410_17', 'TR410_9'), ('TR410_9_17', 'TR410_9', 'TR410_17'), ('TR411_12_13', 'TR411_12', 'TR411_13'), ('TR411_12_13', 'TR411_13', 'TR411_12'), ('TR411_12_40', 'TR411_12', 'TR411_40'), ('TR411_12_40', 'TR411_40', 'TR411_12'), ('TR411_13_41', 'TR411_13', 'TR411_41'), ('TR411_13_41', 'TR411_41', 'TR411_13'), ('TR411_14_42', 'TR411_14', 'TR411_42'), ('TR411_14_42', 'TR411_42', 'TR411_14'), ('TR411_15_16', 'TR411_15', 'TR411_16'), ('TR411_15_16', 'TR411_16', 'TR411_15'), ('TR411_16_43', 'TR411_16', 'TR411_43'), ('TR411_16_43', 'TR411_43', 'TR411_16'), ('TR411_17_18', 'TR411_17', 'TR411_18'), ('TR411_17_18', 'TR411_18', 'TR411_17'), ('TR411_17_31', 'TR411_17', 'TR411_31'), ('TR411_17_31', 'TR411_31', 'TR411_17'), ('TR411_19_20', 'TR411_19', 'TR411_20'), ('TR411_19_20', 'TR411_20', 'TR411_19'), ('TR411_1_36', 'TR411_1', 'TR411_36'), ('TR411_1_36', 'TR411_36', 'TR411_1'), ('TR411_1_37', 'TR411_1', 'TR411_37'), ('TR411_1_37', 'TR411_37', 'TR411_1'), ('TR411_20_30', 'TR411_20', 'TR411_30'), ('TR411_20_30', 'TR411_30', 'TR411_20'), ('TR411_21_22', 'TR411_21', 'TR411_22'), ('TR411_21_22', 'TR411_22', 'TR411_21'), ('TR411_21_24', 'TR411_21', 'TR411_24'), ('TR411_21_24', 'TR411_24', 'TR411_21'), ('TR411_22_23', 'TR411_22', 'TR411_23'), ('TR411_22_23', 'TR411_23', 'TR411_22'), ('TR411_23_44', 'TR411_23', 'TR411_44'), ('TR411_23_44', 'TR411_44', 'TR411_23'), ('TR411_23_45', 'TR411_23', 'TR411_45'), ('TR411_23_45', 'TR411_45', 'TR411_23'), ('TR411_23_46', 'TR411_23', 'TR411_46'), ('TR411_23_46', 'TR411_46', 'TR411_23'), ('TR411_24_47', 'TR411_24', 'TR411_47'), ('TR411_24_47', 'TR411_47', 'TR411_24'), ('TR411_25_26', 'TR411_25', 'TR411_26'), ('TR411_25_26', 'TR411_26', 'TR411_25'), ('TR411_25_48', 'TR411_25', 'TR411_48'), ('TR411_25_48', 'TR411_48', 'TR411_25'), ('TR411_26_27', 'TR411_26', 'TR411_27'), ('TR411_26_27', 'TR411_27', 'TR411_26'), ('TR411_27_29', 'TR411_27', 'TR411_29'), ('TR411_27_29', 'TR411_29', 'TR411_27'), ('TR411_2_15', 'TR411_15', 'TR411_2'), ('TR411_2_15', 'TR411_2', 'TR411_15'), ('TR411_2_3', 'TR411_2', 'TR411_3'), ('TR411_2_3', 'TR411_3', 'TR411_2'), ('TR411_30_49', 'TR411_30', 'TR411_49'), ('TR411_30_49', 'TR411_49', 'TR411_30'), ('TR411_31_36', 'TR411_31', 'TR411_36'), ('TR411_31_36', 'TR411_36', 'TR411_31'), ('TR411_32_33', 'TR411_32', 'TR411_33'), ('TR411_32_33', 'TR411_33', 'TR411_32'), ('TR411_32_50', 'TR411_32', 'TR411_50'), ('TR411_32_50', 'TR411_50', 'TR411_32'), ('TR411_33_51', 'TR411_33', 'TR411_51'), ('TR411_33_51', 'TR411_51', 'TR411_33'), ('TR411_34_35', 'TR411_34', 'TR411_35'), ('TR411_34_35', 'TR411_35', 'TR411_34'), ('TR411_34_52', 'TR411_34', 'TR411_52'), ('TR411_34_52', 'TR411_52', 'TR411_34'), ('TR411_35_53', 'TR411_35', 'TR411_53'), ('TR411_35_53', 'TR411_53', 'TR411_35'), ('TR411_3_5', 'TR411_3', 'TR411_5'), ('TR411_3_5', 'TR411_5', 'TR411_3'), ('TR411_5_38', 'TR411_38', 'TR411_5'), ('TR411_5_38', 'TR411_5', 'TR411_38'), ('TR411_5_6', 'TR411_5', 'TR411_6'), ('TR411_5_6', 'TR411_6', 'TR411_5'), ('TR411_6_14', 'TR411_14', 'TR411_6'), ('TR411_6_14', 'TR411_6', 'TR411_14'), ('TR411_7_39', 'TR411_39', 'TR411_7'), ('TR411_7_39', 'TR411_7', 'TR411_39'), ('TR411_7_8', 'TR411_7', 'TR411_8'), ('TR411_7_8', 'TR411_8', 'TR411_7'), ('TR411_8_9', 'TR411_8', 'TR411_9'), ('TR411_8_9', 'TR411_9', 'TR411_8'), ('TR411_9_11', 'TR411_11', 'TR411_9'), ('TR411_9_11', 'TR411_9', 'TR411_11'), ('TR412_10_13', 'TR412_10', 'TR412_13'), ('TR412_10_13', 'TR412_13', 'TR412_10'), ('TR412_10_30', 'TR412_10', 'TR412_30'), ('TR412_10_30', 'TR412_30', 'TR412_10'), ('TR412_11_31', 'TR412_11', 'TR412_31'), ('TR412_11_31', 'TR412_31', 'TR412_11'), ('TR412_12_14', 'TR412_12', 'TR412_14'), ('TR412_12_14', 'TR412_14', 'TR412_12'), ('TR412_12_32', 'TR412_12', 'TR412_32'), ('TR412_12_32', 'TR412_32', 'TR412_12'), ('TR412_13_23', 'TR412_13', 'TR412_23'), ('TR412_13_23', 'TR412_23', 'TR412_13'), ('TR412_14_24', 'TR412_14', 'TR412_24'), ('TR412_14_24', 'TR412_24', 'TR412_14'), ('TR412_15_16', 'TR412_15', 'TR412_16'), ('TR412_15_16', 'TR412_16', 'TR412_15'), ('TR412_19_20', 'TR412_19', 'TR412_20'), ('TR412_19_20', 'TR412_20', 'TR412_19'), ('TR412_1_25', 'TR412_1', 'TR412_25'), ('TR412_1_25', 'TR412_25', 'TR412_1'), ('TR412_1_3', 'TR412_1', 'TR412_3'), ('TR412_1_3', 'TR412_3', 'TR412_1'), ('TR412_23_33', 'TR412_23', 'TR412_33'), ('TR412_23_33', 'TR412_33', 'TR412_23'), ('TR412_23_34', 'TR412_23', 'TR412_34'), ('TR412_23_34', 'TR412_34', 'TR412_23'), ('TR412_24_35', 'TR412_24', 'TR412_35'), ('TR412_24_35', 'TR412_35', 'TR412_24'), ('TR412_24_36', 'TR412_24', 'TR412_36'), ('TR412_24_36', 'TR412_36', 'TR412_24'), ('TR412_2_26', 'TR412_2', 'TR412_26'), ('TR412_2_26', 'TR412_26', 'TR412_2'), ('TR412_2_4', 'TR412_2', 'TR412_4'), ('TR412_2_4', 'TR412_4', 'TR412_2'), ('TR412_3_6', 'TR412_3', 'TR412_6'), ('TR412_3_6', 'TR412_6', 'TR412_3'), ('TR412_4_8', 'TR412_4', 'TR412_8'), ('TR412_4_8', 'TR412_8', 'TR412_4'), ('TR412_5_19', 'TR412_19', 'TR412_5'), ('TR412_5_19', 'TR412_5', 'TR412_19'), ('TR412_5_9', 'TR412_5', 'TR412_9'), ('TR412_5_9', 'TR412_9', 'TR412_5'), ('TR412_6_27', 'TR412_27', 'TR412_6'), ('TR412_6_27', 'TR412_6', 'TR412_27'), ('TR412_7_11', 'TR412_11', 'TR412_7'), ('TR412_7_11', 'TR412_7', 'TR412_11'), ('TR412_7_15', 'TR412_15', 'TR412_7'), ('TR412_7_15', 'TR412_7', 'TR412_15'), ('TR412_8_28', 'TR412_28', 'TR412_8'), ('TR412_8_28', 'TR412_8', 'TR412_28'), ('TR412_9_29', 'TR412_29', 'TR412_9'), ('TR412_9_29', 'TR412_9', 'TR412_29'), ('TR413_1_2', 'TR413_1', 'TR413_2'), ('TR413_1_2', 'TR413_2', 'TR413_1'), ('TR413_1_5', 'TR413_1', 'TR413_5'), ('TR413_1_5', 'TR413_5', 'TR413_1'), ('TR413_2_3', 'TR413_2', 'TR413_3'), ('TR413_2_3', 'TR413_3', 'TR413_2'), ('TR413_2_6', 'TR413_2', 'TR413_6'), ('TR413_2_6', 'TR413_6', 'TR413_2'), ('TR413_2_7', 'TR413_2', 'TR413_7'), ('TR413_2_7', 'TR413_7', 'TR413_2'), ('TR413_3_4', 'TR413_3', 'TR413_4'), ('TR413_3_4', 'TR413_4', 'TR413_3'), ('TR413_3_8', 'TR413_3', 'TR413_8'), ('TR413_3_8', 'TR413_8', 'TR413_3'), ('TR413_3_9', 'TR413_3', 'TR413_9'), ('TR413_3_9', 'TR413_9', 'TR413_3'), ('TR413_4_10', 'TR413_10', 'TR413_4'), ('TR413_4_10', 'TR413_4', 'TR413_10'), ('TR414_1_13', 'TR414_1', 'TR414_13'), ('TR414_1_13', 'TR414_13', 'TR414_1'), ('TR414_1_6', 'TR414_1', 'TR414_6'), ('TR414_1_6', 'TR414_6', 'TR414_1'), ('TR414_2_12', 'TR414_12', 'TR414_2'), ('TR414_2_12', 'TR414_2', 'TR414_12'), ('TR414_2_3', 'TR414_2', 'TR414_3'), ('TR414_2_3', 'TR414_3', 'TR414_2'), ('TR414_3_11', 'TR414_11', 'TR414_3'), ('TR414_3_11', 'TR414_3', 'TR414_11'), ('TR414_4_10', 'TR414_10', 'TR414_4'), ('TR414_4_10', 'TR414_4', 'TR414_10'), ('TR414_4_5', 'TR414_4', 'TR414_5'), ('TR414_4_5', 'TR414_5', 'TR414_4'), ('TR414_5_9', 'TR414_5', 'TR414_9'), ('TR414_5_9', 'TR414_9', 'TR414_5'), ('TR414_6_7', 'TR414_6', 'TR414_7'), ('TR414_6_7', 'TR414_7', 'TR414_6'), ('TR414_7_8', 'TR414_7', 'TR414_8'), ('TR414_7_8', 'TR414_8', 'TR414_7'), ('TR414_8_14', 'TR414_14', 'TR414_8'), ('TR414_8_14', 'TR414_8', 'TR414_14'), ('TR414_8_15', 'TR414_15', 'TR414_8'), ('TR414_8_15', 'TR414_8', 'TR414_15'), ('TR414_8_16', 'TR414_16', 'TR414_8'), ('TR414_8_16', 'TR414_8', 'TR414_16'), ('TR416_11_18', 'TR416_11', 'TR416_18'), ('TR416_11_18', 'TR416_18', 'TR416_11'), ('TR416_1_2', 'TR416_1', 'TR416_2'), ('TR416_1_2', 'TR416_2', 'TR416_1'), ('TR416_1_3', 'TR416_1', 'TR416_3'), ('TR416_1_3', 'TR416_3', 'TR416_1'), ('TR416_2_12', 'TR416_12', 'TR416_2'), ('TR416_2_12', 'TR416_2', 'TR416_12'), ('TR416_2_13', 'TR416_13', 'TR416_2'), ('TR416_2_13', 'TR416_2', 'TR416_13'), ('TR416_2_14', 'TR416_14', 'TR416_2'), ('TR416_2_14', 'TR416_2', 'TR416_14'), ('TR416_3_5', 'TR416_3', 'TR416_5'), ('TR416_3_5', 'TR416_5', 'TR416_3'), ('TR416_4_6', 'TR416_4', 'TR416_6'), ('TR416_4_6', 'TR416_6', 'TR416_4'), ('TR416_4_7', 'TR416_4', 'TR416_7'), ('TR416_4_7', 'TR416_7', 'TR416_4'), ('TR416_5_15', 'TR416_15', 'TR416_5'), ('TR416_5_15', 'TR416_5', 'TR416_15'), ('TR416_6_10', 'TR416_10', 'TR416_6'), ('TR416_6_10', 'TR416_6', 'TR416_10'), ('TR416_7_16', 'TR416_16', 'TR416_7'), ('TR416_7_16', 'TR416_7', 'TR416_16'), ('TR416_8_11', 'TR416_11', 'TR416_8'), ('TR416_8_11', 'TR416_8', 'TR416_11'), ('TR416_8_17', 'TR416_17', 'TR416_8'), ('TR416_8_17', 'TR416_8', 'TR416_17'), ('TR417_1_11', 'TR417_1', 'TR417_11'), ('TR417_1_11', 'TR417_11', 'TR417_1'), ('TR417_1_6', 'TR417_1', 'TR417_6'), ('TR417_1_6', 'TR417_6', 'TR417_1'), ('TR417_2_3', 'TR417_2', 'TR417_3'), ('TR417_2_3', 'TR417_3', 'TR417_2'), ('TR417_2_8', 'TR417_2', 'TR417_8'), ('TR417_2_8', 'TR417_8', 'TR417_2'), ('TR417_3_12', 'TR417_12', 'TR417_3'), ('TR417_3_12', 'TR417_3', 'TR417_12'), ('TR417_4_13', 'TR417_13', 'TR417_4'), ('TR417_4_13', 'TR417_4', 'TR417_13'), ('TR417_4_5', 'TR417_4', 'TR417_5'), ('TR417_4_5', 'TR417_5', 'TR417_4'), ('TR417_5_7', 'TR417_5', 'TR417_7'), ('TR417_5_7', 'TR417_7', 'TR417_5'), ('TR417_6_14', 'TR417_14', 'TR417_6'), ('TR417_6_14', 'TR417_6', 'TR417_14'), ('TR417_7_15', 'TR417_15', 'TR417_7'), ('TR417_7_15', 'TR417_7', 'TR417_15'), ('TR417_8_10', 'TR417_10', 'TR417_8'), ('TR417_8_10', 'TR417_8', 'TR417_10'), ('TR418_1_11', 'TR418_1', 'TR418_11'), ('TR418_1_11', 'TR418_11', 'TR418_1'), ('TR418_1_6', 'TR418_1', 'TR418_6'), ('TR418_1_6', 'TR418_6', 'TR418_1'), ('TR418_2_3', 'TR418_2', 'TR418_3'), ('TR418_2_3', 'TR418_3', 'TR418_2'), ('TR418_2_8', 'TR418_2', 'TR418_8'), ('TR418_2_8', 'TR418_8', 'TR418_2'), ('TR418_3_12', 'TR418_12', 'TR418_3'), ('TR418_3_12', 'TR418_3', 'TR418_12'), ('TR418_4_13', 'TR418_13', 'TR418_4'), ('TR418_4_13', 'TR418_4', 'TR418_13'), ('TR418_4_5', 'TR418_4', 'TR418_5'), ('TR418_4_5', 'TR418_5', 'TR418_4'), ('TR418_5_7', 'TR418_5', 'TR418_7'), ('TR418_5_7', 'TR418_7', 'TR418_5'), ('TR418_6_14', 'TR418_14', 'TR418_6'), ('TR418_6_14', 'TR418_6', 'TR418_14'), ('TR418_7_15', 'TR418_15', 'TR418_7'), ('TR418_7_15', 'TR418_7', 'TR418_15'), ('TR418_7_16', 'TR418_16', 'TR418_7'), ('TR418_7_16', 'TR418_7', 'TR418_16'), ('TR418_8_10', 'TR418_10', 'TR418_8'), ('TR418_8_10', 'TR418_8', 'TR418_10'), ('TR419_11_12', 'TR419_11', 'TR419_12'), ('TR419_11_12', 'TR419_12', 'TR419_11'), ('TR419_11_13', 'TR419_11', 'TR419_13'), ('TR419_11_13', 'TR419_13', 'TR419_11'), ('TR419_12_16', 'TR419_12', 'TR419_16'), ('TR419_12_16', 'TR419_16', 'TR419_12'), ('TR419_12_22', 'TR419_12', 'TR419_22'), ('TR419_12_22', 'TR419_22', 'TR419_12'), ('TR419_12_23', 'TR419_12', 'TR419_23'), ('TR419_12_23', 'TR419_23', 'TR419_12'), ('TR419_13_14', 'TR419_13', 'TR419_14'), ('TR419_13_14', 'TR419_14', 'TR419_13'), ('TR419_13_24', 'TR419_13', 'TR419_24'), ('TR419_13_24', 'TR419_24', 'TR419_13'), ('TR419_13_25', 'TR419_13', 'TR419_25'), ('TR419_13_25', 'TR419_25', 'TR419_13'), ('TR419_14_15', 'TR419_14', 'TR419_15'), ('TR419_14_15', 'TR419_15', 'TR419_14'), ('TR419_14_26', 'TR419_14', 'TR419_26'), ('TR419_14_26', 'TR419_26', 'TR419_14'), ('TR419_14_27', 'TR419_14', 'TR419_27'), ('TR419_14_27', 'TR419_27', 'TR419_14'), ('TR419_15_28', 'TR419_15', 'TR419_28'), ('TR419_15_28', 'TR419_28', 'TR419_15'), ('TR419_16_17', 'TR419_16', 'TR419_17'), ('TR419_16_17', 'TR419_17', 'TR419_16'), ('TR419_16_29', 'TR419_16', 'TR419_29'), ('TR419_16_29', 'TR419_29', 'TR419_16'), ('TR419_16_30', 'TR419_16', 'TR419_30'), ('TR419_16_30', 'TR419_30', 'TR419_16'), ('TR419_17_31', 'TR419_17', 'TR419_31'), ('TR419_17_31', 'TR419_31', 'TR419_17'), ('TR419_1_6', 'TR419_1', 'TR419_6'), ('TR419_1_6', 'TR419_6', 'TR419_1'), ('TR419_1_8', 'TR419_1', 'TR419_8'), ('TR419_1_8', 'TR419_8', 'TR419_1'), ('TR419_2_18', 'TR419_18', 'TR419_2'), ('TR419_2_18', 'TR419_2', 'TR419_18'), ('TR419_2_3', 'TR419_2', 'TR419_3'), ('TR419_2_3', 'TR419_3', 'TR419_2'), ('TR419_3_19', 'TR419_19', 'TR419_3'), ('TR419_3_19', 'TR419_3', 'TR419_19'), ('TR419_4_11', 'TR419_11', 'TR419_4'), ('TR419_4_11', 'TR419_4', 'TR419_11'), ('TR419_4_5', 'TR419_4', 'TR419_5'), ('TR419_4_5', 'TR419_5', 'TR419_4'), ('TR419_5_7', 'TR419_5', 'TR419_7'), ('TR419_5_7', 'TR419_7', 'TR419_5'), ('TR419_6_20', 'TR419_20', 'TR419_6'), ('TR419_6_20', 'TR419_6', 'TR419_20'), ('TR419_7_21', 'TR419_21', 'TR419_7'), ('TR419_7_21', 'TR419_7', 'TR419_21'), ('TR419_8_9', 'TR419_8', 'TR419_9'), ('TR419_8_9', 'TR419_9', 'TR419_8'), ('TR420_10_12', 'TR420_10', 'TR420_12'), ('TR420_10_12', 'TR420_12', 'TR420_10'), ('TR420_10_13', 'TR420_10', 'TR420_13'), ('TR420_10_13', 'TR420_13', 'TR420_10'), ('TR420_11_22', 'TR420_11', 'TR420_22'), ('TR420_11_22', 'TR420_22', 'TR420_11'), ('TR420_11_23', 'TR420_11', 'TR420_23'), ('TR420_11_23', 'TR420_23', 'TR420_11'), ('TR420_12_14', 'TR420_12', 'TR420_14'), ('TR420_12_14', 'TR420_14', 'TR420_12'), ('TR420_13_16', 'TR420_13', 'TR420_16'), ('TR420_13_16', 'TR420_16', 'TR420_13'), ('TR420_14_24', 'TR420_14', 'TR420_24'), ('TR420_14_24', 'TR420_24', 'TR420_14'), ('TR420_14_25', 'TR420_14', 'TR420_25'), ('TR420_14_25', 'TR420_25', 'TR420_14'), ('TR420_15_17', 'TR420_15', 'TR420_17'), ('TR420_15_17', 'TR420_17', 'TR420_15'), ('TR420_15_26', 'TR420_15', 'TR420_26'), ('TR420_15_26', 'TR420_26', 'TR420_15'), ('TR420_16_27', 'TR420_16', 'TR420_27'), ('TR420_16_27', 'TR420_27', 'TR420_16'), ('TR420_17_28', 'TR420_17', 'TR420_28'), ('TR420_17_28', 'TR420_28', 'TR420_17'), ('TR420_18_19', 'TR420_18', 'TR420_19'), ('TR420_18_19', 'TR420_19', 'TR420_18'), ('TR420_18_29', 'TR420_18', 'TR420_29'), ('TR420_18_29', 'TR420_29', 'TR420_18'), ('TR420_19_30', 'TR420_19', 'TR420_30'), ('TR420_19_30', 'TR420_30', 'TR420_19'), ('TR420_1_2', 'TR420_1', 'TR420_2'), ('TR420_1_2', 'TR420_2', 'TR420_1'), ('TR420_1_20', 'TR420_1', 'TR420_20'), ('TR420_1_20', 'TR420_20', 'TR420_1'), ('TR420_1_21', 'TR420_1', 'TR420_21'), ('TR420_1_21', 'TR420_21', 'TR420_1'), ('TR420_2_4', 'TR420_2', 'TR420_4'), ('TR420_2_4', 'TR420_4', 'TR420_2'), ('TR420_3_5', 'TR420_3', 'TR420_5'), ('TR420_3_5', 'TR420_5', 'TR420_3'), ('TR420_3_6', 'TR420_3', 'TR420_6'), ('TR420_3_6', 'TR420_6', 'TR420_3'), ('TR420_5_8', 'TR420_5', 'TR420_8'), ('TR420_5_8', 'TR420_8', 'TR420_5'), ('TR420_7_11', 'TR420_11', 'TR420_7'), ('TR420_7_11', 'TR420_7', 'TR420_11'), ('TR420_7_9', 'TR420_7', 'TR420_9'), ('TR420_7_9', 'TR420_9', 'TR420_7'), ('TR422_1_12', 'TR422_1', 'TR422_12'), ('TR422_1_12', 'TR422_12', 'TR422_1'), ('TR422_1_6', 'TR422_1', 'TR422_6'), ('TR422_1_6', 'TR422_6', 'TR422_1'), ('TR422_2_13', 'TR422_13', 'TR422_2'), ('TR422_2_13', 'TR422_2', 'TR422_13'), ('TR422_2_3', 'TR422_2', 'TR422_3'), ('TR422_2_3', 'TR422_3', 'TR422_2'), ('TR422_3_14', 'TR422_14', 'TR422_3'), ('TR422_3_14', 'TR422_3', 'TR422_14'), ('TR422_4_5', 'TR422_4', 'TR422_5'), ('TR422_4_5', 'TR422_5', 'TR422_4'), ('TR422_4_7', 'TR422_4', 'TR422_7'), ('TR422_4_7', 'TR422_7', 'TR422_4'), ('TR422_5_10', 'TR422_10', 'TR422_5'), ('TR422_5_10', 'TR422_5', 'TR422_10'), ('TR422_6_15', 'TR422_15', 'TR422_6'), ('TR422_6_15', 'TR422_6', 'TR422_15'), ('TR422_7_16', 'TR422_16', 'TR422_7'), ('TR422_7_16', 'TR422_7', 'TR422_16'), ('TR422_8_17', 'TR422_17', 'TR422_8'), ('TR422_8_17', 'TR422_8', 'TR422_17'), ('TR422_8_9', 'TR422_8', 'TR422_9'), ('TR422_8_9', 'TR422_9', 'TR422_8'), ('TR422_9_10', 'TR422_10', 'TR422_9'), ('TR422_9_10', 'TR422_9', 'TR422_10'), ('TR423_10_11', 'TR423_10', 'TR423_11'), ('TR423_10_11', 'TR423_11', 'TR423_10'), ('TR423_10_18', 'TR423_10', 'TR423_18'), ('TR423_10_18', 'TR423_18', 'TR423_10'), ('TR423_11_19', 'TR423_11', 'TR423_19'), ('TR423_11_19', 'TR423_19', 'TR423_11'), ('TR423_2_3', 'TR423_2', 'TR423_3'), ('TR423_2_3', 'TR423_3', 'TR423_2'), ('TR423_2_4', 'TR423_2', 'TR423_4'), ('TR423_2_4', 'TR423_4', 'TR423_2'), ('TR423_3_5', 'TR423_3', 'TR423_5'), ('TR423_3_5', 'TR423_5', 'TR423_3'), ('TR423_4_12', 'TR423_12', 'TR423_4'), ('TR423_4_12', 'TR423_4', 'TR423_12'), ('TR423_4_13', 'TR423_13', 'TR423_4'), ('TR423_4_13', 'TR423_4', 'TR423_13'), ('TR423_4_6', 'TR423_4', 'TR423_6'), ('TR423_4_6', 'TR423_6', 'TR423_4'), ('TR423_5_8', 'TR423_5', 'TR423_8'), ('TR423_5_8', 'TR423_8', 'TR423_5'), ('TR423_6_14', 'TR423_14', 'TR423_6'), ('TR423_6_14', 'TR423_6', 'TR423_14'), ('TR423_6_15', 'TR423_15', 'TR423_6'), ('TR423_6_15', 'TR423_6', 'TR423_15'), ('TR423_6_7', 'TR423_6', 'TR423_7'), ('TR423_6_7', 'TR423_7', 'TR423_6'), ('TR423_7_9', 'TR423_7', 'TR423_9'), ('TR423_7_9', 'TR423_9', 'TR423_7'), ('TR423_8_16', 'TR423_16', 'TR423_8'), ('TR423_8_16', 'TR423_8', 'TR423_16'), ('TR423_9_17', 'TR423_17', 'TR423_9'), ('TR423_9_17', 'TR423_9', 'TR423_17'), ('TR424_10_15', 'TR424_10', 'TR424_15'), ('TR424_10_15', 'TR424_15', 'TR424_10'), ('TR424_11_12', 'TR424_11', 'TR424_12'), ('TR424_11_12', 'TR424_12', 'TR424_11'), ('TR424_11_22', 'TR424_11', 'TR424_22'), ('TR424_11_22', 'TR424_22', 'TR424_11'), ('TR424_12_23', 'TR424_12', 'TR424_23'), ('TR424_12_23', 'TR424_23', 'TR424_12'), ('TR424_13_14', 'TR424_13', 'TR424_14'), ('TR424_13_14', 'TR424_14', 'TR424_13'), ('TR424_13_24', 'TR424_13', 'TR424_24'), ('TR424_13_24', 'TR424_24', 'TR424_13'), ('TR424_14_25', 'TR424_14', 'TR424_25'), ('TR424_14_25', 'TR424_25', 'TR424_14'), ('TR424_15_26', 'TR424_15', 'TR424_26'), ('TR424_15_26', 'TR424_26', 'TR424_15'), ('TR424_1_16', 'TR424_1', 'TR424_16'), ('TR424_1_16', 'TR424_16', 'TR424_1'), ('TR424_1_6', 'TR424_1', 'TR424_6'), ('TR424_1_6', 'TR424_6', 'TR424_1'), ('TR424_2_17', 'TR424_17', 'TR424_2'), ('TR424_2_17', 'TR424_2', 'TR424_17'), ('TR424_2_3', 'TR424_2', 'TR424_3'), ('TR424_2_3', 'TR424_3', 'TR424_2'), ('TR424_3_8', 'TR424_3', 'TR424_8'), ('TR424_3_8', 'TR424_8', 'TR424_3'), ('TR424_4_5', 'TR424_4', 'TR424_5'), ('TR424_4_5', 'TR424_5', 'TR424_4'), ('TR424_4_9', 'TR424_4', 'TR424_9'), ('TR424_4_9', 'TR424_9', 'TR424_4'), ('TR424_5_18', 'TR424_18', 'TR424_5'), ('TR424_5_18', 'TR424_5', 'TR424_18'), ('TR424_6_7', 'TR424_6', 'TR424_7'), ('TR424_6_7', 'TR424_7', 'TR424_6'), ('TR424_8_19', 'TR424_19', 'TR424_8'), ('TR424_8_19', 'TR424_8', 'TR424_19'), ('TR424_9_10', 'TR424_10', 'TR424_9'), ('TR424_9_10', 'TR424_9', 'TR424_10'), ('TR424_9_20', 'TR424_20', 'TR424_9'), ('TR424_9_20', 'TR424_9', 'TR424_20'), ('TR424_9_21', 'TR424_21', 'TR424_9'), ('TR424_9_21', 'TR424_9', 'TR424_21'), ('TR425_10_14', 'TR425_10', 'TR425_14'), ('TR425_10_14', 'TR425_14', 'TR425_10'), ('TR425_10_15', 'TR425_10', 'TR425_15'), ('TR425_10_15', 'TR425_15', 'TR425_10'), ('TR425_11_33', 'TR425_11', 'TR425_33'), ('TR425_11_33', 'TR425_33', 'TR425_11'), ('TR425_12_14', 'TR425_12', 'TR425_14'), ('TR425_12_14', 'TR425_14', 'TR425_12'), ('TR425_12_17', 'TR425_12', 'TR425_17'), ('TR425_12_17', 'TR425_17', 'TR425_12'), ('TR425_13_34', 'TR425_13', 'TR425_34'), ('TR425_13_34', 'TR425_34', 'TR425_13'), ('TR425_15_35', 'TR425_15', 'TR425_35'), ('TR425_15_35', 'TR425_35', 'TR425_15'), ('TR425_16_19', 'TR425_16', 'TR425_19'), ('TR425_16_19', 'TR425_19', 'TR425_16'), ('TR425_16_36', 'TR425_16', 'TR425_36'), ('TR425_16_36', 'TR425_36', 'TR425_16'), ('TR425_17_37', 'TR425_17', 'TR425_37'), ('TR425_17_37', 'TR425_37', 'TR425_17'), ('TR425_18_20', 'TR425_18', 'TR425_20'), ('TR425_18_20', 'TR425_20', 'TR425_18'), ('TR425_18_38', 'TR425_18', 'TR425_38'), ('TR425_18_38', 'TR425_38', 'TR425_18'), ('TR425_19_39', 'TR425_19', 'TR425_39'), ('TR425_19_39', 'TR425_39', 'TR425_19'), ('TR425_1_2', 'TR425_1', 'TR425_2'), ('TR425_1_2', 'TR425_2', 'TR425_1'), ('TR425_1_21', 'TR425_1', 'TR425_21'), ('TR425_1_21', 'TR425_21', 'TR425_1'), ('TR425_1_22', 'TR425_1', 'TR425_22'), ('TR425_1_22', 'TR425_22', 'TR425_1'), ('TR425_1_3', 'TR425_1', 'TR425_3'), ('TR425_1_3', 'TR425_3', 'TR425_1'), ('TR425_20_40', 'TR425_20', 'TR425_40'), ('TR425_20_40', 'TR425_40', 'TR425_20'), ('TR425_2_23', 'TR425_2', 'TR425_23'), ('TR425_2_23', 'TR425_23', 'TR425_2'), ('TR425_2_4', 'TR425_2', 'TR425_4'), ('TR425_2_4', 'TR425_4', 'TR425_2'), ('TR425_2_5', 'TR425_2', 'TR425_5'), ('TR425_2_5', 'TR425_5', 'TR425_2'), ('TR425_3_6', 'TR425_3', 'TR425_6'), ('TR425_3_6', 'TR425_6', 'TR425_3'), ('TR425_3_7', 'TR425_3', 'TR425_7'), ('TR425_3_7', 'TR425_7', 'TR425_3'), ('TR425_41_42', 'TR425_41', 'TR425_42'), ('TR425_41_42', 'TR425_42', 'TR425_41'), ('TR425_4_8', 'TR425_4', 'TR425_8'), ('TR425_4_8', 'TR425_8', 'TR425_4'), ('TR425_4_9', 'TR425_4', 'TR425_9'), ('TR425_4_9', 'TR425_9', 'TR425_4'), ('TR425_5_24', 'TR425_24', 'TR425_5'), ('TR425_5_24', 'TR425_5', 'TR425_24'), ('TR425_5_25', 'TR425_25', 'TR425_5'), ('TR425_5_25', 'TR425_5', 'TR425_25'), ('TR425_5_26', 'TR425_26', 'TR425_5'), ('TR425_5_26', 'TR425_5', 'TR425_26'), ('TR425_6_11', 'TR425_11', 'TR425_6'), ('TR425_6_11', 'TR425_6', 'TR425_11'), ('TR425_7_13', 'TR425_13', 'TR425_7'), ('TR425_7_13', 'TR425_7', 'TR425_13'), ('TR425_8_27', 'TR425_27', 'TR425_8'), ('TR425_8_27', 'TR425_8', 'TR425_27'), ('TR425_8_28', 'TR425_28', 'TR425_8'), ('TR425_8_28', 'TR425_8', 'TR425_28'), ('TR425_8_29', 'TR425_29', 'TR425_8'), ('TR425_8_29', 'TR425_8', 'TR425_29'), ('TR425_9_30', 'TR425_30', 'TR425_9'), ('TR425_9_30', 'TR425_9', 'TR425_30'), ('TR425_9_31', 'TR425_31', 'TR425_9'), ('TR425_9_31', 'TR425_9', 'TR425_31'), ('TR425_9_32', 'TR425_32', 'TR425_9'), ('TR425_9_32', 'TR425_9', 'TR425_32'), ('TR426_10_16', 'TR426_10', 'TR426_16'), ('TR426_10_16', 'TR426_16', 'TR426_10'), ('TR426_10_39', 'TR426_10', 'TR426_39'), ('TR426_10_39', 'TR426_39', 'TR426_10'), ('TR426_10_40', 'TR426_10', 'TR426_40'), ('TR426_10_40', 'TR426_40', 'TR426_10'), ('TR426_12_17', 'TR426_12', 'TR426_17'), ('TR426_12_17', 'TR426_17', 'TR426_12'), ('TR426_12_41', 'TR426_12', 'TR426_41'), ('TR426_12_41', 'TR426_41', 'TR426_12'), ('TR426_12_42', 'TR426_12', 'TR426_42'), ('TR426_12_42', 'TR426_42', 'TR426_12'), ('TR426_14_18', 'TR426_14', 'TR426_18'), ('TR426_14_18', 'TR426_18', 'TR426_14'), ('TR426_14_43', 'TR426_14', 'TR426_43'), ('TR426_14_43', 'TR426_43', 'TR426_14'), ('TR426_14_44', 'TR426_14', 'TR426_44'), ('TR426_14_44', 'TR426_44', 'TR426_14'), ('TR426_16_19', 'TR426_16', 'TR426_19'), ('TR426_16_19', 'TR426_19', 'TR426_16'), ('TR426_16_45', 'TR426_16', 'TR426_45'), ('TR426_16_45', 'TR426_45', 'TR426_16'), ('TR426_16_46', 'TR426_16', 'TR426_46'), ('TR426_16_46', 'TR426_46', 'TR426_16'), ('TR426_17_20', 'TR426_17', 'TR426_20'), ('TR426_17_20', 'TR426_20', 'TR426_17'), ('TR426_17_47', 'TR426_17', 'TR426_47'), ('TR426_17_47', 'TR426_47', 'TR426_17'), ('TR426_17_48', 'TR426_17', 'TR426_48'), ('TR426_17_48', 'TR426_48', 'TR426_17'), ('TR426_18_21', 'TR426_18', 'TR426_21'), ('TR426_18_21', 'TR426_21', 'TR426_18'), ('TR426_18_49', 'TR426_18', 'TR426_49'), ('TR426_18_49', 'TR426_49', 'TR426_18'), ('TR426_18_50', 'TR426_18', 'TR426_50'), ('TR426_18_50', 'TR426_50', 'TR426_18'), ('TR426_19_22', 'TR426_19', 'TR426_22'), ('TR426_19_22', 'TR426_22', 'TR426_19'), ('TR426_19_51', 'TR426_19', 'TR426_51'), ('TR426_19_51', 'TR426_51', 'TR426_19'), ('TR426_19_52', 'TR426_19', 'TR426_52'), ('TR426_19_52', 'TR426_52', 'TR426_19'), ('TR426_1_2', 'TR426_1', 'TR426_2'), ('TR426_1_2', 'TR426_2', 'TR426_1'), ('TR426_1_3', 'TR426_1', 'TR426_3'), ('TR426_1_3', 'TR426_3', 'TR426_1'), ('TR426_1_34', 'TR426_1', 'TR426_34'), ('TR426_1_34', 'TR426_34', 'TR426_1'), ('TR426_1_4', 'TR426_1', 'TR426_4'), ('TR426_1_4', 'TR426_4', 'TR426_1'), ('TR426_20_23', 'TR426_20', 'TR426_23'), ('TR426_20_23', 'TR426_23', 'TR426_20'), ('TR426_20_53', 'TR426_20', 'TR426_53'), ('TR426_20_53', 'TR426_53', 'TR426_20'), ('TR426_20_54', 'TR426_20', 'TR426_54'), ('TR426_20_54', 'TR426_54', 'TR426_20'), ('TR426_21_24', 'TR426_21', 'TR426_24'), ('TR426_21_24', 'TR426_24', 'TR426_21'), ('TR426_21_55', 'TR426_21', 'TR426_55'), ('TR426_21_55', 'TR426_55', 'TR426_21'), ('TR426_21_56', 'TR426_21', 'TR426_56'), ('TR426_21_56', 'TR426_56', 'TR426_21'), ('TR426_22_25', 'TR426_22', 'TR426_25'), ('TR426_22_25', 'TR426_25', 'TR426_22'), ('TR426_22_57', 'TR426_22', 'TR426_57'), ('TR426_22_57', 'TR426_57', 'TR426_22'), ('TR426_22_58', 'TR426_22', 'TR426_58'), ('TR426_22_58', 'TR426_58', 'TR426_22'), ('TR426_23_26', 'TR426_23', 'TR426_26'), ('TR426_23_26', 'TR426_26', 'TR426_23'), ('TR426_23_59', 'TR426_23', 'TR426_59'), ('TR426_23_59', 'TR426_59', 'TR426_23'), ('TR426_23_60', 'TR426_23', 'TR426_60'), ('TR426_23_60', 'TR426_60', 'TR426_23'), ('TR426_24_27', 'TR426_24', 'TR426_27'), ('TR426_24_27', 'TR426_27', 'TR426_24'), ('TR426_24_61', 'TR426_24', 'TR426_61'), ('TR426_24_61', 'TR426_61', 'TR426_24'), ('TR426_24_62', 'TR426_24', 'TR426_62'), ('TR426_24_62', 'TR426_62', 'TR426_24'), ('TR426_25_28', 'TR426_25', 'TR426_28'), ('TR426_25_28', 'TR426_28', 'TR426_25'), ('TR426_25_63', 'TR426_25', 'TR426_63'), ('TR426_25_63', 'TR426_63', 'TR426_25'), ('TR426_25_64', 'TR426_25', 'TR426_64'), ('TR426_25_64', 'TR426_64', 'TR426_25'), ('TR426_26_29', 'TR426_26', 'TR426_29'), ('TR426_26_29', 'TR426_29', 'TR426_26'), ('TR426_26_65', 'TR426_26', 'TR426_65'), ('TR426_26_65', 'TR426_65', 'TR426_26'), ('TR426_26_66', 'TR426_26', 'TR426_66'), ('TR426_26_66', 'TR426_66', 'TR426_26'), ('TR426_27_30', 'TR426_27', 'TR426_30'), ('TR426_27_30', 'TR426_30', 'TR426_27'), ('TR426_27_67', 'TR426_27', 'TR426_67'), ('TR426_27_67', 'TR426_67', 'TR426_27'), ('TR426_27_68', 'TR426_27', 'TR426_68'), ('TR426_27_68', 'TR426_68', 'TR426_27'), ('TR426_28_31', 'TR426_28', 'TR426_31'), ('TR426_28_31', 'TR426_31', 'TR426_28'), ('TR426_28_69', 'TR426_28', 'TR426_69'), ('TR426_28_69', 'TR426_69', 'TR426_28'), ('TR426_28_70', 'TR426_28', 'TR426_70'), ('TR426_28_70', 'TR426_70', 'TR426_28'), ('TR426_29_32', 'TR426_29', 'TR426_32'), ('TR426_29_32', 'TR426_32', 'TR426_29'), ('TR426_29_71', 'TR426_29', 'TR426_71'), ('TR426_29_71', 'TR426_71', 'TR426_29'), ('TR426_29_72', 'TR426_29', 'TR426_72'), ('TR426_29_72', 'TR426_72', 'TR426_29'), ('TR426_2_35', 'TR426_2', 'TR426_35'), ('TR426_2_35', 'TR426_35', 'TR426_2'), ('TR426_2_36', 'TR426_2', 'TR426_36'), ('TR426_2_36', 'TR426_36', 'TR426_2'), ('TR426_2_5', 'TR426_2', 'TR426_5'), ('TR426_2_5', 'TR426_5', 'TR426_2'), ('TR426_30_33', 'TR426_30', 'TR426_33'), ('TR426_30_33', 'TR426_33', 'TR426_30'), ('TR426_30_73', 'TR426_30', 'TR426_73'), ('TR426_30_73', 'TR426_73', 'TR426_30'), ('TR426_30_74', 'TR426_30', 'TR426_74'), ('TR426_30_74', 'TR426_74', 'TR426_30'), ('TR426_31_75', 'TR426_31', 'TR426_75'), ('TR426_31_75', 'TR426_75', 'TR426_31'), ('TR426_31_76', 'TR426_31', 'TR426_76'), ('TR426_31_76', 'TR426_76', 'TR426_31'), ('TR426_31_77', 'TR426_31', 'TR426_77'), ('TR426_31_77', 'TR426_77', 'TR426_31'), ('TR426_32_78', 'TR426_32', 'TR426_78'), ('TR426_32_78', 'TR426_78', 'TR426_32'), ('TR426_32_79', 'TR426_32', 'TR426_79'), ('TR426_32_79', 'TR426_79', 'TR426_32'), ('TR426_32_80', 'TR426_32', 'TR426_80'), ('TR426_32_80', 'TR426_80', 'TR426_32'), ('TR426_33_81', 'TR426_33', 'TR426_81'), ('TR426_33_81', 'TR426_81', 'TR426_33'), ('TR426_33_82', 'TR426_33', 'TR426_82'), ('TR426_33_82', 'TR426_82', 'TR426_33'), ('TR426_33_83', 'TR426_33', 'TR426_83'), ('TR426_33_83', 'TR426_83', 'TR426_33'), ('TR426_3_37', 'TR426_3', 'TR426_37'), ('TR426_3_37', 'TR426_37', 'TR426_3'), ('TR426_3_38', 'TR426_3', 'TR426_38'), ('TR426_3_38', 'TR426_38', 'TR426_3'), ('TR426_3_6', 'TR426_3', 'TR426_6'), ('TR426_3_6', 'TR426_6', 'TR426_3'), ('TR426_4_7', 'TR426_4', 'TR426_7'), ('TR426_4_7', 'TR426_7', 'TR426_4'), ('TR426_5_8', 'TR426_5', 'TR426_8'), ('TR426_5_8', 'TR426_8', 'TR426_5'), ('TR426_6_9', 'TR426_6', 'TR426_9'), ('TR426_6_9', 'TR426_9', 'TR426_6'), ('TR426_7_10', 'TR426_10', 'TR426_7'), ('TR426_7_10', 'TR426_7', 'TR426_10'), ('TR426_8_12', 'TR426_12', 'TR426_8'), ('TR426_8_12', 'TR426_8', 'TR426_12'), ('TR426_9_14', 'TR426_14', 'TR426_9'), ('TR426_9_14', 'TR426_9', 'TR426_14'), ('TR427_10_16', 'TR427_10', 'TR427_16'), ('TR427_10_16', 'TR427_16', 'TR427_10'), ('TR427_11_21', 'TR427_11', 'TR427_21'), ('TR427_11_21', 'TR427_21', 'TR427_11'), ('TR427_12_13', 'TR427_12', 'TR427_13'), ('TR427_12_13', 'TR427_13', 'TR427_12'), ('TR427_12_34', 'TR427_12', 'TR427_34'), ('TR427_12_34', 'TR427_34', 'TR427_12'), ('TR427_13_23', 'TR427_13', 'TR427_23'), ('TR427_13_23', 'TR427_23', 'TR427_13'), ('TR427_14_15', 'TR427_14', 'TR427_15'), ('TR427_14_15', 'TR427_15', 'TR427_14'), ('TR427_14_22', 'TR427_14', 'TR427_22'), ('TR427_14_22', 'TR427_22', 'TR427_14'), ('TR427_15_35', 'TR427_15', 'TR427_35'), ('TR427_15_35', 'TR427_35', 'TR427_15'), ('TR427_16_36', 'TR427_16', 'TR427_36'), ('TR427_16_36', 'TR427_36', 'TR427_16'), ('TR427_17_18', 'TR427_17', 'TR427_18'), ('TR427_17_18', 'TR427_18', 'TR427_17'), ('TR427_17_37', 'TR427_17', 'TR427_37'), ('TR427_17_37', 'TR427_37', 'TR427_17'), ('TR427_18_38', 'TR427_18', 'TR427_38'), ('TR427_18_38', 'TR427_38', 'TR427_18'), ('TR427_19_20', 'TR427_19', 'TR427_20'), ('TR427_19_20', 'TR427_20', 'TR427_19'), ('TR427_19_25', 'TR427_19', 'TR427_25'), ('TR427_19_25', 'TR427_25', 'TR427_19'), ('TR427_1_2', 'TR427_1', 'TR427_2'), ('TR427_1_2', 'TR427_2', 'TR427_1'), ('TR427_1_28', 'TR427_1', 'TR427_28'), ('TR427_1_28', 'TR427_28', 'TR427_1'), ('TR427_1_29', 'TR427_1', 'TR427_29'), ('TR427_1_29', 'TR427_29', 'TR427_1'), ('TR427_1_3', 'TR427_1', 'TR427_3'), ('TR427_1_3', 'TR427_3', 'TR427_1'), ('TR427_20_26', 'TR427_20', 'TR427_26'), ('TR427_20_26', 'TR427_26', 'TR427_20'), ('TR427_21_39', 'TR427_21', 'TR427_39'), ('TR427_21_39', 'TR427_39', 'TR427_21'), ('TR427_22_40', 'TR427_22', 'TR427_40'), ('TR427_22_40', 'TR427_40', 'TR427_22'), ('TR427_23_24', 'TR427_23', 'TR427_24'), ('TR427_23_24', 'TR427_24', 'TR427_23'), ('TR427_24_41', 'TR427_24', 'TR427_41'), ('TR427_24_41', 'TR427_41', 'TR427_24'), ('TR427_24_42', 'TR427_24', 'TR427_42'), ('TR427_24_42', 'TR427_42', 'TR427_24'), ('TR427_24_43', 'TR427_24', 'TR427_43'), ('TR427_24_43', 'TR427_43', 'TR427_24'), ('TR427_25_44', 'TR427_25', 'TR427_44'), ('TR427_25_44', 'TR427_44', 'TR427_25'), ('TR427_26_27', 'TR427_26', 'TR427_27'), ('TR427_26_27', 'TR427_27', 'TR427_26'), ('TR427_27_45', 'TR427_27', 'TR427_45'), ('TR427_27_45', 'TR427_45', 'TR427_27'), ('TR427_27_46', 'TR427_27', 'TR427_46'), ('TR427_27_46', 'TR427_46', 'TR427_27'), ('TR427_27_47', 'TR427_27', 'TR427_47'), ('TR427_27_47', 'TR427_47', 'TR427_27'), ('TR427_2_4', 'TR427_2', 'TR427_4'), ('TR427_2_4', 'TR427_4', 'TR427_2'), ('TR427_3_7', 'TR427_3', 'TR427_7'), ('TR427_3_7', 'TR427_7', 'TR427_3'), ('TR427_4_30', 'TR427_30', 'TR427_4'), ('TR427_4_30', 'TR427_4', 'TR427_30'), ('TR427_7_31', 'TR427_31', 'TR427_7'), ('TR427_7_31', 'TR427_7', 'TR427_31'), ('TR427_8_10', 'TR427_10', 'TR427_8'), ('TR427_8_10', 'TR427_8', 'TR427_10'), ('TR427_8_32', 'TR427_32', 'TR427_8'), ('TR427_8_32', 'TR427_8', 'TR427_32'), ('TR427_9_11', 'TR427_11', 'TR427_9'), ('TR427_9_11', 'TR427_9', 'TR427_11'), ('TR427_9_33', 'TR427_33', 'TR427_9'), ('TR427_9_33', 'TR427_9', 'TR427_33'), ('TR429_11_15', 'TR429_11', 'TR429_15'), ('TR429_11_15', 'TR429_15', 'TR429_11'), ('TR429_13_14', 'TR429_13', 'TR429_14'), ('TR429_13_14', 'TR429_14', 'TR429_13'), ('TR429_13_21', 'TR429_13', 'TR429_21'), ('TR429_13_21', 'TR429_21', 'TR429_13'), ('TR429_13_22', 'TR429_13', 'TR429_22'), ('TR429_13_22', 'TR429_22', 'TR429_13'), ('TR429_14_23', 'TR429_14', 'TR429_23'), ('TR429_14_23', 'TR429_23', 'TR429_14'), ('TR429_14_24', 'TR429_14', 'TR429_24'), ('TR429_14_24', 'TR429_24', 'TR429_14'), ('TR429_14_25', 'TR429_14', 'TR429_25'), ('TR429_14_25', 'TR429_25', 'TR429_14'), ('TR429_15_16', 'TR429_15', 'TR429_16'), ('TR429_15_16', 'TR429_16', 'TR429_15'), ('TR429_15_26', 'TR429_15', 'TR429_26'), ('TR429_15_26', 'TR429_26', 'TR429_15'), ('TR429_15_27', 'TR429_15', 'TR429_27'), ('TR429_15_27', 'TR429_27', 'TR429_15'), ('TR429_16_28', 'TR429_16', 'TR429_28'), ('TR429_16_28', 'TR429_28', 'TR429_16'), ('TR429_16_29', 'TR429_16', 'TR429_29'), ('TR429_16_29', 'TR429_29', 'TR429_16'), ('TR429_16_30', 'TR429_16', 'TR429_30'), ('TR429_16_30', 'TR429_30', 'TR429_16'), ('TR429_1_17', 'TR429_1', 'TR429_17'), ('TR429_1_17', 'TR429_17', 'TR429_1'), ('TR429_1_6', 'TR429_1', 'TR429_6'), ('TR429_1_6', 'TR429_6', 'TR429_1'), ('TR429_2_18', 'TR429_18', 'TR429_2'), ('TR429_2_18', 'TR429_2', 'TR429_18'), ('TR429_2_3', 'TR429_2', 'TR429_3'), ('TR429_2_3', 'TR429_3', 'TR429_2'), ('TR429_31_36', 'TR429_31', 'TR429_36'), ('TR429_31_36', 'TR429_36', 'TR429_31'), ('TR429_31_45', 'TR429_31', 'TR429_45'), ('TR429_31_45', 'TR429_45', 'TR429_31'), ('TR429_32_33', 'TR429_32', 'TR429_33'), ('TR429_32_33', 'TR429_33', 'TR429_32'), ('TR429_32_46', 'TR429_32', 'TR429_46'), ('TR429_32_46', 'TR429_46', 'TR429_32'), ('TR429_33_47', 'TR429_33', 'TR429_47'), ('TR429_33_47', 'TR429_47', 'TR429_33'), ('TR429_34_35', 'TR429_34', 'TR429_35'), ('TR429_34_35', 'TR429_35', 'TR429_34'), ('TR429_34_38', 'TR429_34', 'TR429_38'), ('TR429_34_38', 'TR429_38', 'TR429_34'), ('TR429_35_37', 'TR429_35', 'TR429_37'), ('TR429_35_37', 'TR429_37', 'TR429_35'), ('TR429_36_48', 'TR429_36', 'TR429_48'), ('TR429_36_48', 'TR429_48', 'TR429_36'), ('TR429_37_39', 'TR429_37', 'TR429_39'), ('TR429_37_39', 'TR429_39', 'TR429_37'), ('TR429_38_40', 'TR429_38', 'TR429_40'), ('TR429_38_40', 'TR429_40', 'TR429_38'), ('TR429_39_44', 'TR429_39', 'TR429_44'), ('TR429_39_44', 'TR429_44', 'TR429_39'), ('TR429_3_19', 'TR429_19', 'TR429_3'), ('TR429_3_19', 'TR429_3', 'TR429_19'), ('TR429_40_43', 'TR429_40', 'TR429_43'), ('TR429_40_43', 'TR429_43', 'TR429_40'), ('TR429_43_49', 'TR429_43', 'TR429_49'), ('TR429_43_49', 'TR429_49', 'TR429_43'), ('TR429_43_50', 'TR429_43', 'TR429_50'), ('TR429_43_50', 'TR429_50', 'TR429_43'), ('TR429_43_51', 'TR429_43', 'TR429_51'), ('TR429_43_51', 'TR429_51', 'TR429_43'), ('TR429_44_52', 'TR429_44', 'TR429_52'), ('TR429_44_52', 'TR429_52', 'TR429_44'), ('TR429_44_53', 'TR429_44', 'TR429_53'), ('TR429_44_53', 'TR429_53', 'TR429_44'), ('TR429_44_54', 'TR429_44', 'TR429_54'), ('TR429_44_54', 'TR429_54', 'TR429_44'), ('TR429_4_5', 'TR429_4', 'TR429_5'), ('TR429_4_5', 'TR429_5', 'TR429_4'), ('TR429_4_8', 'TR429_4', 'TR429_8'), ('TR429_4_8', 'TR429_8', 'TR429_4'), ('TR429_5_7', 'TR429_5', 'TR429_7'), ('TR429_5_7', 'TR429_7', 'TR429_5'), ('TR429_6_20', 'TR429_20', 'TR429_6'), ('TR429_6_20', 'TR429_6', 'TR429_20'), ('TR429_7_9', 'TR429_7', 'TR429_9'), ('TR429_7_9', 'TR429_9', 'TR429_7'), ('TR429_8_11', 'TR429_11', 'TR429_8'), ('TR429_8_11', 'TR429_8', 'TR429_11'), ('TR429_9_13', 'TR429_13', 'TR429_9'), ('TR429_9_13', 'TR429_9', 'TR429_13'), ('TR430_10_61', 'TR430_10', 'TR430_61'), ('TR430_10_61', 'TR430_61', 'TR430_10'), ('TR430_11_52', 'TR430_11', 'TR430_52'), ('TR430_11_52', 'TR430_52', 'TR430_11'), ('TR430_12_49', 'TR430_12', 'TR430_49'), ('TR430_12_49', 'TR430_49', 'TR430_12'), ('TR430_13_62', 'TR430_13', 'TR430_62'), ('TR430_13_62', 'TR430_62', 'TR430_13'), ('TR430_13_63', 'TR430_13', 'TR430_63'), ('TR430_13_63', 'TR430_63', 'TR430_13'), ('TR430_16_17', 'TR430_16', 'TR430_17'), ('TR430_16_17', 'TR430_17', 'TR430_16'), ('TR430_17_22', 'TR430_17', 'TR430_22'), ('TR430_17_22', 'TR430_22', 'TR430_17'), ('TR430_18_19', 'TR430_18', 'TR430_19'), ('TR430_18_19', 'TR430_19', 'TR430_18'), ('TR430_18_64', 'TR430_18', 'TR430_64'), ('TR430_18_64', 'TR430_64', 'TR430_18'), ('TR430_19_65', 'TR430_19', 'TR430_65'), ('TR430_19_65', 'TR430_65', 'TR430_19'), ('TR430_1_6', 'TR430_1', 'TR430_6'), ('TR430_1_6', 'TR430_6', 'TR430_1'), ('TR430_1_7', 'TR430_1', 'TR430_7'), ('TR430_1_7', 'TR430_7', 'TR430_1'), ('TR430_20_21', 'TR430_20', 'TR430_21'), ('TR430_20_21', 'TR430_21', 'TR430_20'), ('TR430_20_43', 'TR430_20', 'TR430_43'), ('TR430_20_43', 'TR430_43', 'TR430_20'), ('TR430_21_66', 'TR430_21', 'TR430_66'), ('TR430_21_66', 'TR430_66', 'TR430_21'), ('TR430_22_23', 'TR430_22', 'TR430_23'), ('TR430_22_23', 'TR430_23', 'TR430_22'), ('TR430_24_25', 'TR430_24', 'TR430_25'), ('TR430_24_25', 'TR430_25', 'TR430_24'), ('TR430_24_30', 'TR430_24', 'TR430_30'), ('TR430_24_30', 'TR430_30', 'TR430_24'), ('TR430_25_33', 'TR430_25', 'TR430_33'), ('TR430_25_33', 'TR430_33', 'TR430_25'), ('TR430_26_27', 'TR430_26', 'TR430_27'), ('TR430_26_27', 'TR430_27', 'TR430_26'), ('TR430_26_67', 'TR430_26', 'TR430_67'), ('TR430_26_67', 'TR430_67', 'TR430_26'), ('TR430_27_35', 'TR430_27', 'TR430_35'), ('TR430_27_35', 'TR430_35', 'TR430_27'), ('TR430_28_29', 'TR430_28', 'TR430_29'), ('TR430_28_29', 'TR430_29', 'TR430_28'), ('TR430_28_38', 'TR430_28', 'TR430_38'), ('TR430_28_38', 'TR430_38', 'TR430_28'), ('TR430_29_37', 'TR430_29', 'TR430_37'), ('TR430_29_37', 'TR430_37', 'TR430_29'), ('TR430_2_10', 'TR430_10', 'TR430_2'), ('TR430_2_10', 'TR430_2', 'TR430_10'), ('TR430_2_3', 'TR430_2', 'TR430_3'), ('TR430_2_3', 'TR430_3', 'TR430_2'), ('TR430_30_36', 'TR430_30', 'TR430_36'), ('TR430_30_36', 'TR430_36', 'TR430_30'), ('TR430_31_32', 'TR430_31', 'TR430_32'), ('TR430_31_32', 'TR430_32', 'TR430_31'), ('TR430_31_68', 'TR430_31', 'TR430_68'), ('TR430_31_68', 'TR430_68', 'TR430_31'), ('TR430_32_34', 'TR430_32', 'TR430_34'), ('TR430_32_34', 'TR430_34', 'TR430_32'), ('TR430_33_69', 'TR430_33', 'TR430_69'), ('TR430_33_69', 'TR430_69', 'TR430_33'), ('TR430_34_55', 'TR430_34', 'TR430_55'), ('TR430_34_55', 'TR430_55', 'TR430_34'), ('TR430_35_58', 'TR430_35', 'TR430_58'), ('TR430_35_58', 'TR430_58', 'TR430_35'), ('TR430_36_70', 'TR430_36', 'TR430_70'), ('TR430_36_70', 'TR430_70', 'TR430_36'), ('TR430_36_71', 'TR430_36', 'TR430_71'), ('TR430_36_71', 'TR430_71', 'TR430_36'), ('TR430_39_40', 'TR430_39', 'TR430_40'), ('TR430_39_40', 'TR430_40', 'TR430_39'), ('TR430_3_59', 'TR430_3', 'TR430_59'), ('TR430_3_59', 'TR430_59', 'TR430_3'), ('TR430_40_45', 'TR430_40', 'TR430_45'), ('TR430_40_45', 'TR430_45', 'TR430_40'), ('TR430_41_42', 'TR430_41', 'TR430_42'), ('TR430_41_42', 'TR430_42', 'TR430_41'), ('TR430_41_72', 'TR430_41', 'TR430_72'), ('TR430_41_72', 'TR430_72', 'TR430_41'), ('TR430_42_73', 'TR430_42', 'TR430_73'), ('TR430_42_73', 'TR430_73', 'TR430_42'), ('TR430_43_44', 'TR430_43', 'TR430_44'), ('TR430_43_44', 'TR430_44', 'TR430_43'), ('TR430_44_74', 'TR430_44', 'TR430_74'), ('TR430_44_74', 'TR430_74', 'TR430_44'), ('TR430_45_46', 'TR430_45', 'TR430_46'), ('TR430_45_46', 'TR430_46', 'TR430_45'), ('TR430_4_12', 'TR430_12', 'TR430_4'), ('TR430_4_12', 'TR430_4', 'TR430_12'), ('TR430_4_5', 'TR430_4', 'TR430_5'), ('TR430_4_5', 'TR430_5', 'TR430_4'), ('TR430_5_15', 'TR430_15', 'TR430_5'), ('TR430_5_15', 'TR430_5', 'TR430_15'), ('TR430_6_14', 'TR430_14', 'TR430_6'), ('TR430_6_14', 'TR430_6', 'TR430_14'), ('TR430_75_76', 'TR430_75', 'TR430_76'), ('TR430_75_76', 'TR430_76', 'TR430_75'), ('TR430_75_77', 'TR430_75', 'TR430_77'), ('TR430_75_77', 'TR430_77', 'TR430_75'), ('TR430_75_78', 'TR430_75', 'TR430_78'), ('TR430_75_78', 'TR430_78', 'TR430_75'), ('TR430_79_80', 'TR430_79', 'TR430_80'), ('TR430_79_80', 'TR430_80', 'TR430_79'), ('TR430_79_81', 'TR430_79', 'TR430_81'), ('TR430_79_81', 'TR430_81', 'TR430_79'), ('TR430_79_82', 'TR430_79', 'TR430_82'), ('TR430_79_82', 'TR430_82', 'TR430_79'), ('TR430_7_13', 'TR430_13', 'TR430_7'), ('TR430_7_13', 'TR430_7', 'TR430_13'), ('TR430_8_60', 'TR430_60', 'TR430_8'), ('TR430_8_60', 'TR430_8', 'TR430_60'), ('TR430_8_9', 'TR430_8', 'TR430_9'), ('TR430_8_9', 'TR430_9', 'TR430_8'), ('TR430_9_11', 'TR430_11', 'TR430_9'), ('TR430_9_11', 'TR430_9', 'TR430_11'), ('TR431_10_20', 'TR431_10', 'TR431_20'), ('TR431_10_20', 'TR431_20', 'TR431_10'), ('TR431_11_21', 'TR431_11', 'TR431_21'), ('TR431_11_21', 'TR431_21', 'TR431_11'), ('TR431_1_12', 'TR431_1', 'TR431_12'), ('TR431_1_12', 'TR431_12', 'TR431_1'), ('TR431_1_13', 'TR431_1', 'TR431_13'), ('TR431_1_13', 'TR431_13', 'TR431_1'), ('TR431_1_14', 'TR431_1', 'TR431_14'), ('TR431_1_14', 'TR431_14', 'TR431_1'), ('TR431_1_2', 'TR431_1', 'TR431_2'), ('TR431_1_2', 'TR431_2', 'TR431_1'), ('TR431_2_3', 'TR431_2', 'TR431_3'), ('TR431_2_3', 'TR431_3', 'TR431_2'), ('TR431_3_4', 'TR431_3', 'TR431_4'), ('TR431_3_4', 'TR431_4', 'TR431_3'), ('TR431_4_15', 'TR431_15', 'TR431_4'), ('TR431_4_15', 'TR431_4', 'TR431_15'), ('TR431_4_16', 'TR431_16', 'TR431_4'), ('TR431_4_16', 'TR431_4', 'TR431_16'), ('TR431_4_5', 'TR431_4', 'TR431_5'), ('TR431_4_5', 'TR431_5', 'TR431_4'), ('TR431_5_11', 'TR431_11', 'TR431_5'), ('TR431_5_11', 'TR431_5', 'TR431_11'), ('TR431_6_17', 'TR431_17', 'TR431_6'), ('TR431_6_17', 'TR431_6', 'TR431_17'), ('TR431_6_8', 'TR431_6', 'TR431_8'), ('TR431_6_8', 'TR431_8', 'TR431_6'), ('TR431_8_18', 'TR431_18', 'TR431_8'), ('TR431_8_18', 'TR431_8', 'TR431_18'), ('TR431_9_10', 'TR431_10', 'TR431_9'), ('TR431_9_10', 'TR431_9', 'TR431_10'), ('TR431_9_19', 'TR431_19', 'TR431_9'), ('TR431_9_19', 'TR431_9', 'TR431_19'), ('TR433_10_28', 'TR433_10', 'TR433_28'), ('TR433_10_28', 'TR433_28', 'TR433_10'), ('TR433_11_12', 'TR433_11', 'TR433_12'), ('TR433_11_12', 'TR433_12', 'TR433_11'), ('TR433_11_29', 'TR433_11', 'TR433_29'), ('TR433_11_29', 'TR433_29', 'TR433_11'), ('TR433_12_30', 'TR433_12', 'TR433_30'), ('TR433_12_30', 'TR433_30', 'TR433_12'), ('TR433_13_31', 'TR433_13', 'TR433_31'), ('TR433_13_31', 'TR433_31', 'TR433_13'), ('TR433_14_15', 'TR433_14', 'TR433_15'), ('TR433_14_15', 'TR433_15', 'TR433_14'), ('TR433_14_25', 'TR433_14', 'TR433_25'), ('TR433_14_25', 'TR433_25', 'TR433_14'), ('TR433_15_32', 'TR433_15', 'TR433_32'), ('TR433_15_32', 'TR433_32', 'TR433_15'), ('TR433_16_17', 'TR433_16', 'TR433_17'), ('TR433_16_17', 'TR433_17', 'TR433_16'), ('TR433_16_33', 'TR433_16', 'TR433_33'), ('TR433_16_33', 'TR433_33', 'TR433_16'), ('TR433_17_34', 'TR433_17', 'TR433_34'), ('TR433_17_34', 'TR433_34', 'TR433_17'), ('TR433_18_35', 'TR433_18', 'TR433_35'), ('TR433_18_35', 'TR433_35', 'TR433_18'), ('TR433_19_20', 'TR433_19', 'TR433_20'), ('TR433_19_20', 'TR433_20', 'TR433_19'), ('TR433_19_24', 'TR433_19', 'TR433_24'), ('TR433_19_24', 'TR433_24', 'TR433_19'), ('TR433_1_2', 'TR433_1', 'TR433_2'), ('TR433_1_2', 'TR433_2', 'TR433_1'), ('TR433_1_27', 'TR433_1', 'TR433_27'), ('TR433_1_27', 'TR433_27', 'TR433_1'), ('TR433_20_36', 'TR433_20', 'TR433_36'), ('TR433_20_36', 'TR433_36', 'TR433_20'), ('TR433_21_22', 'TR433_21', 'TR433_22'), ('TR433_21_22', 'TR433_22', 'TR433_21'), ('TR433_21_37', 'TR433_21', 'TR433_37'), ('TR433_21_37', 'TR433_37', 'TR433_21'), ('TR433_22_38', 'TR433_22', 'TR433_38'), ('TR433_22_38', 'TR433_38', 'TR433_22'), ('TR433_23_39', 'TR433_23', 'TR433_39'), ('TR433_23_39', 'TR433_39', 'TR433_23'), ('TR433_24_40', 'TR433_24', 'TR433_40'), ('TR433_24_40', 'TR433_40', 'TR433_24'), ('TR433_24_41', 'TR433_24', 'TR433_41'), ('TR433_24_41', 'TR433_41', 'TR433_24'), ('TR433_24_42', 'TR433_24', 'TR433_42'), ('TR433_24_42', 'TR433_42', 'TR433_24'), ('TR433_25_43', 'TR433_25', 'TR433_43'), ('TR433_25_43', 'TR433_43', 'TR433_25'), ('TR433_25_44', 'TR433_25', 'TR433_44'), ('TR433_25_44', 'TR433_44', 'TR433_25'), ('TR433_25_45', 'TR433_25', 'TR433_45'), ('TR433_25_45', 'TR433_45', 'TR433_25'), ('TR433_26_46', 'TR433_26', 'TR433_46'), ('TR433_26_46', 'TR433_46', 'TR433_26'), ('TR433_26_47', 'TR433_26', 'TR433_47'), ('TR433_26_47', 'TR433_47', 'TR433_26'), ('TR433_26_48', 'TR433_26', 'TR433_48'), ('TR433_26_48', 'TR433_48', 'TR433_26'), ('TR433_2_3', 'TR433_2', 'TR433_3'), ('TR433_2_3', 'TR433_3', 'TR433_2'), ('TR433_2_4', 'TR433_2', 'TR433_4'), ('TR433_2_4', 'TR433_4', 'TR433_2'), ('TR433_2_5', 'TR433_2', 'TR433_5'), ('TR433_2_5', 'TR433_5', 'TR433_2'), ('TR433_3_9', 'TR433_3', 'TR433_9'), ('TR433_3_9', 'TR433_9', 'TR433_3'), ('TR433_4_8', 'TR433_4', 'TR433_8'), ('TR433_4_8', 'TR433_8', 'TR433_4'), ('TR433_5_6', 'TR433_5', 'TR433_6'), ('TR433_5_6', 'TR433_6', 'TR433_5'), ('TR433_6_13', 'TR433_13', 'TR433_6'), ('TR433_6_13', 'TR433_6', 'TR433_13'), ('TR433_7_10', 'TR433_10', 'TR433_7'), ('TR433_7_10', 'TR433_7', 'TR433_10'), ('TR433_7_26', 'TR433_26', 'TR433_7'), ('TR433_7_26', 'TR433_7', 'TR433_26'), ('TR433_8_18', 'TR433_18', 'TR433_8'), ('TR433_8_18', 'TR433_8', 'TR433_18'), ('TR433_9_23', 'TR433_23', 'TR433_9'), ('TR433_9_23', 'TR433_9', 'TR433_23'), ('TR434_1_5', 'TR434_1', 'TR434_5'), ('TR434_1_5', 'TR434_5', 'TR434_1'), ('TR434_1_6', 'TR434_1', 'TR434_6'), ('TR434_1_6', 'TR434_6', 'TR434_1'), ('TR434_2_3', 'TR434_2', 'TR434_3'), ('TR434_2_3', 'TR434_3', 'TR434_2'), ('TR434_2_7', 'TR434_2', 'TR434_7'), ('TR434_2_7', 'TR434_7', 'TR434_2'), ('TR434_3_8', 'TR434_3', 'TR434_8'), ('TR434_3_8', 'TR434_8', 'TR434_3'), ('TR434_4_10', 'TR434_10', 'TR434_4'), ('TR434_4_10', 'TR434_4', 'TR434_10'), ('TR434_4_9', 'TR434_4', 'TR434_9'), ('TR434_4_9', 'TR434_9', 'TR434_4'), ('TR435_10_12', 'TR435_10', 'TR435_12'), ('TR435_10_12', 'TR435_12', 'TR435_10'), ('TR435_10_37', 'TR435_10', 'TR435_37'), ('TR435_10_37', 'TR435_37', 'TR435_10'), ('TR435_11_13', 'TR435_11', 'TR435_13'), ('TR435_11_13', 'TR435_13', 'TR435_11'), ('TR435_12_14', 'TR435_12', 'TR435_14'), ('TR435_12_14', 'TR435_14', 'TR435_12'), ('TR435_13_16', 'TR435_13', 'TR435_16'), ('TR435_13_16', 'TR435_16', 'TR435_13'), ('TR435_14_38', 'TR435_14', 'TR435_38'), ('TR435_14_38', 'TR435_38', 'TR435_14'), ('TR435_14_39', 'TR435_14', 'TR435_39'), ('TR435_14_39', 'TR435_39', 'TR435_14'), ('TR435_14_40', 'TR435_14', 'TR435_40'), ('TR435_14_40', 'TR435_40', 'TR435_14'), ('TR435_15_17', 'TR435_15', 'TR435_17'), ('TR435_15_17', 'TR435_17', 'TR435_15'), ('TR435_15_41', 'TR435_15', 'TR435_41'), ('TR435_15_41', 'TR435_41', 'TR435_15'), ('TR435_16_18', 'TR435_16', 'TR435_18'), ('TR435_16_18', 'TR435_18', 'TR435_16'), ('TR435_17_20', 'TR435_17', 'TR435_20'), ('TR435_17_20', 'TR435_20', 'TR435_17'), ('TR435_18_42', 'TR435_18', 'TR435_42'), ('TR435_18_42', 'TR435_42', 'TR435_18'), ('TR435_18_43', 'TR435_18', 'TR435_43'), ('TR435_18_43', 'TR435_43', 'TR435_18'), ('TR435_18_44', 'TR435_18', 'TR435_44'), ('TR435_18_44', 'TR435_44', 'TR435_18'), ('TR435_19_21', 'TR435_19', 'TR435_21'), ('TR435_19_21', 'TR435_21', 'TR435_19'), ('TR435_19_45', 'TR435_19', 'TR435_45'), ('TR435_19_45', 'TR435_45', 'TR435_19'), ('TR435_1_2', 'TR435_1', 'TR435_2'), ('TR435_1_2', 'TR435_2', 'TR435_1'), ('TR435_1_3', 'TR435_1', 'TR435_3'), ('TR435_1_3', 'TR435_3', 'TR435_1'), ('TR435_1_4', 'TR435_1', 'TR435_4'), ('TR435_1_4', 'TR435_4', 'TR435_1'), ('TR435_1_5', 'TR435_1', 'TR435_5'), ('TR435_1_5', 'TR435_5', 'TR435_1'), ('TR435_20_22', 'TR435_20', 'TR435_22'), ('TR435_20_22', 'TR435_22', 'TR435_20'), ('TR435_20_23', 'TR435_20', 'TR435_23'), ('TR435_20_23', 'TR435_23', 'TR435_20'), ('TR435_20_24', 'TR435_20', 'TR435_24'), ('TR435_20_24', 'TR435_24', 'TR435_20'), ('TR435_21_25', 'TR435_21', 'TR435_25'), ('TR435_21_25', 'TR435_25', 'TR435_21'), ('TR435_22_46', 'TR435_22', 'TR435_46'), ('TR435_22_46', 'TR435_46', 'TR435_22'), ('TR435_22_47', 'TR435_22', 'TR435_47'), ('TR435_22_47', 'TR435_47', 'TR435_22'), ('TR435_22_48', 'TR435_22', 'TR435_48'), ('TR435_22_48', 'TR435_48', 'TR435_22'), ('TR435_23_49', 'TR435_23', 'TR435_49'), ('TR435_23_49', 'TR435_49', 'TR435_23'), ('TR435_23_50', 'TR435_23', 'TR435_50'), ('TR435_23_50', 'TR435_50', 'TR435_23'), ('TR435_23_51', 'TR435_23', 'TR435_51'), ('TR435_23_51', 'TR435_51', 'TR435_23'), ('TR435_24_52', 'TR435_24', 'TR435_52'), ('TR435_24_52', 'TR435_52', 'TR435_24'), ('TR435_24_53', 'TR435_24', 'TR435_53'), ('TR435_24_53', 'TR435_53', 'TR435_24'), ('TR435_24_54', 'TR435_24', 'TR435_54'), ('TR435_24_54', 'TR435_54', 'TR435_24'), ('TR435_25_55', 'TR435_25', 'TR435_55'), ('TR435_25_55', 'TR435_55', 'TR435_25'), ('TR435_2_26', 'TR435_2', 'TR435_26'), ('TR435_2_26', 'TR435_26', 'TR435_2'), ('TR435_2_27', 'TR435_2', 'TR435_27'), ('TR435_2_27', 'TR435_27', 'TR435_2'), ('TR435_2_28', 'TR435_2', 'TR435_28'), ('TR435_2_28', 'TR435_28', 'TR435_2'), ('TR435_3_29', 'TR435_29', 'TR435_3'), ('TR435_3_29', 'TR435_3', 'TR435_29'), ('TR435_3_30', 'TR435_3', 'TR435_30'), ('TR435_3_30', 'TR435_30', 'TR435_3'), ('TR435_3_31', 'TR435_3', 'TR435_31'), ('TR435_3_31', 'TR435_31', 'TR435_3'), ('TR435_4_32', 'TR435_32', 'TR435_4'), ('TR435_4_32', 'TR435_4', 'TR435_32'), ('TR435_4_33', 'TR435_33', 'TR435_4'), ('TR435_4_33', 'TR435_4', 'TR435_33'), ('TR435_4_34', 'TR435_34', 'TR435_4'), ('TR435_4_34', 'TR435_4', 'TR435_34'), ('TR435_5_7', 'TR435_5', 'TR435_7'), ('TR435_5_7', 'TR435_7', 'TR435_5'), ('TR435_6_35', 'TR435_35', 'TR435_6'), ('TR435_6_35', 'TR435_6', 'TR435_35'), ('TR435_6_8', 'TR435_6', 'TR435_8'), ('TR435_6_8', 'TR435_8', 'TR435_6'), ('TR435_7_9', 'TR435_7', 'TR435_9'), ('TR435_7_9', 'TR435_9', 'TR435_7'), ('TR435_8_11', 'TR435_11', 'TR435_8'), ('TR435_8_11', 'TR435_8', 'TR435_11'), ('TR435_9_36', 'TR435_36', 'TR435_9'), ('TR435_9_36', 'TR435_9', 'TR435_36'), ('TR436_1_2', 'TR436_1', 'TR436_2'), ('TR436_1_2', 'TR436_2', 'TR436_1'), ('TR436_1_6', 'TR436_1', 'TR436_6'), ('TR436_1_6', 'TR436_6', 'TR436_1'), ('TR436_2_3', 'TR436_2', 'TR436_3'), ('TR436_2_3', 'TR436_3', 'TR436_2'), ('TR436_2_4', 'TR436_2', 'TR436_4'), ('TR436_2_4', 'TR436_4', 'TR436_2'), ('TR436_2_5', 'TR436_2', 'TR436_5'), ('TR436_2_5', 'TR436_5', 'TR436_2'), ('TR436_3_7', 'TR436_3', 'TR436_7'), ('TR436_3_7', 'TR436_7', 'TR436_3'), ('TR436_3_8', 'TR436_3', 'TR436_8'), ('TR436_3_8', 'TR436_8', 'TR436_3'), ('TR436_3_9', 'TR436_3', 'TR436_9'), ('TR436_3_9', 'TR436_9', 'TR436_3'), ('TR436_4_10', 'TR436_10', 'TR436_4'), ('TR436_4_10', 'TR436_4', 'TR436_10'), ('TR436_4_11', 'TR436_11', 'TR436_4'), ('TR436_4_11', 'TR436_4', 'TR436_11'), ('TR436_4_12', 'TR436_12', 'TR436_4'), ('TR436_4_12', 'TR436_4', 'TR436_12'), ('TR436_5_13', 'TR436_13', 'TR436_5'), ('TR436_5_13', 'TR436_5', 'TR436_13'), ('TR436_5_14', 'TR436_14', 'TR436_5'), ('TR436_5_14', 'TR436_5', 'TR436_14'), ('TR436_5_15', 'TR436_15', 'TR436_5'), ('TR436_5_15', 'TR436_5', 'TR436_15'), ('TR437_1_2', 'TR437_1', 'TR437_2'), ('TR437_1_2', 'TR437_2', 'TR437_1'), ('TR437_2_3', 'TR437_2', 'TR437_3'), ('TR437_2_3', 'TR437_3', 'TR437_2'), ('TR437_2_4', 'TR437_2', 'TR437_4'), ('TR437_2_4', 'TR437_4', 'TR437_2'), ('TR437_2_5', 'TR437_2', 'TR437_5'), ('TR437_2_5', 'TR437_5', 'TR437_2'), ('TR437_4_6', 'TR437_4', 'TR437_6'), ('TR437_4_6', 'TR437_6', 'TR437_4'), ('TR437_5_8', 'TR437_5', 'TR437_8'), ('TR437_5_8', 'TR437_8', 'TR437_5'), ('TR437_7_10', 'TR437_10', 'TR437_7'), ('TR437_7_10', 'TR437_7', 'TR437_10'), ('TR437_7_9', 'TR437_7', 'TR437_9'), ('TR437_7_9', 'TR437_9', 'TR437_7'), ('TR437_9_11', 'TR437_11', 'TR437_9'), ('TR437_9_11', 'TR437_9', 'TR437_11'), ('TR438_10_44', 'TR438_10', 'TR438_44'), ('TR438_10_44', 'TR438_44', 'TR438_10'), ('TR438_10_45', 'TR438_10', 'TR438_45'), ('TR438_10_45', 'TR438_45', 'TR438_10'), ('TR438_10_46', 'TR438_10', 'TR438_46'), ('TR438_10_46', 'TR438_46', 'TR438_10'), ('TR438_11_47', 'TR438_11', 'TR438_47'), ('TR438_11_47', 'TR438_47', 'TR438_11'), ('TR438_11_48', 'TR438_11', 'TR438_48'), ('TR438_11_48', 'TR438_48', 'TR438_11'), ('TR438_11_49', 'TR438_11', 'TR438_49'), ('TR438_11_49', 'TR438_49', 'TR438_11'), ('TR438_12_50', 'TR438_12', 'TR438_50'), ('TR438_12_50', 'TR438_50', 'TR438_12'), ('TR438_13_14', 'TR438_13', 'TR438_14'), ('TR438_13_14', 'TR438_14', 'TR438_13'), ('TR438_13_51', 'TR438_13', 'TR438_51'), ('TR438_13_51', 'TR438_51', 'TR438_13'), ('TR438_14_15', 'TR438_14', 'TR438_15'), ('TR438_14_15', 'TR438_15', 'TR438_14'), ('TR438_15_16', 'TR438_15', 'TR438_16'), ('TR438_15_16', 'TR438_16', 'TR438_15'), ('TR438_16_17', 'TR438_16', 'TR438_17'), ('TR438_16_17', 'TR438_17', 'TR438_16'), ('TR438_16_52', 'TR438_16', 'TR438_52'), ('TR438_16_52', 'TR438_52', 'TR438_16'), ('TR438_16_53', 'TR438_16', 'TR438_53'), ('TR438_16_53', 'TR438_53', 'TR438_16'), ('TR438_17_18', 'TR438_17', 'TR438_18'), ('TR438_17_18', 'TR438_18', 'TR438_17'), ('TR438_17_54', 'TR438_17', 'TR438_54'), ('TR438_17_54', 'TR438_54', 'TR438_17'), ('TR438_17_55', 'TR438_17', 'TR438_55'), ('TR438_17_55', 'TR438_55', 'TR438_17'), ('TR438_18_19', 'TR438_18', 'TR438_19'), ('TR438_18_19', 'TR438_19', 'TR438_18'), ('TR438_19_20', 'TR438_19', 'TR438_20'), ('TR438_19_20', 'TR438_20', 'TR438_19'), ('TR438_19_56', 'TR438_19', 'TR438_56'), ('TR438_19_56', 'TR438_56', 'TR438_19'), ('TR438_19_57', 'TR438_19', 'TR438_57'), ('TR438_19_57', 'TR438_57', 'TR438_19'), ('TR438_1_2', 'TR438_1', 'TR438_2'), ('TR438_1_2', 'TR438_2', 'TR438_1'), ('TR438_1_3', 'TR438_1', 'TR438_3'), ('TR438_1_3', 'TR438_3', 'TR438_1'), ('TR438_1_4', 'TR438_1', 'TR438_4'), ('TR438_1_4', 'TR438_4', 'TR438_1'), ('TR438_1_5', 'TR438_1', 'TR438_5'), ('TR438_1_5', 'TR438_5', 'TR438_1'), ('TR438_20_21', 'TR438_20', 'TR438_21'), ('TR438_20_21', 'TR438_21', 'TR438_20'), ('TR438_20_58', 'TR438_20', 'TR438_58'), ('TR438_20_58', 'TR438_58', 'TR438_20'), ('TR438_20_59', 'TR438_20', 'TR438_59'), ('TR438_20_59', 'TR438_59', 'TR438_20'), ('TR438_21_22', 'TR438_21', 'TR438_22'), ('TR438_21_22', 'TR438_22', 'TR438_21'), ('TR438_21_23', 'TR438_21', 'TR438_23'), ('TR438_21_23', 'TR438_23', 'TR438_21'), ('TR438_21_24', 'TR438_21', 'TR438_24'), ('TR438_21_24', 'TR438_24', 'TR438_21'), ('TR438_22_25', 'TR438_22', 'TR438_25'), ('TR438_22_25', 'TR438_25', 'TR438_22'), ('TR438_22_60', 'TR438_22', 'TR438_60'), ('TR438_22_60', 'TR438_60', 'TR438_22'), ('TR438_22_61', 'TR438_22', 'TR438_61'), ('TR438_22_61', 'TR438_61', 'TR438_22'), ('TR438_23_62', 'TR438_23', 'TR438_62'), ('TR438_23_62', 'TR438_62', 'TR438_23'), ('TR438_23_63', 'TR438_23', 'TR438_63'), ('TR438_23_63', 'TR438_63', 'TR438_23'), ('TR438_23_64', 'TR438_23', 'TR438_64'), ('TR438_23_64', 'TR438_64', 'TR438_23'), ('TR438_24_65', 'TR438_24', 'TR438_65'), ('TR438_24_65', 'TR438_65', 'TR438_24'), ('TR438_24_66', 'TR438_24', 'TR438_66'), ('TR438_24_66', 'TR438_66', 'TR438_24'), ('TR438_24_67', 'TR438_24', 'TR438_67'), ('TR438_24_67', 'TR438_67', 'TR438_24'), ('TR438_25_27', 'TR438_25', 'TR438_27'), ('TR438_25_27', 'TR438_27', 'TR438_25'), ('TR438_26_28', 'TR438_26', 'TR438_28'), ('TR438_26_28', 'TR438_28', 'TR438_26'), ('TR438_26_68', 'TR438_26', 'TR438_68'), ('TR438_26_68', 'TR438_68', 'TR438_26'), ('TR438_27_69', 'TR438_27', 'TR438_69'), ('TR438_27_69', 'TR438_69', 'TR438_27'), ('TR438_28_70', 'TR438_28', 'TR438_70'), ('TR438_28_70', 'TR438_70', 'TR438_28'), ('TR438_29_30', 'TR438_29', 'TR438_30'), ('TR438_29_30', 'TR438_30', 'TR438_29'), ('TR438_29_71', 'TR438_29', 'TR438_71'), ('TR438_29_71', 'TR438_71', 'TR438_29'), ('TR438_2_31', 'TR438_2', 'TR438_31'), ('TR438_2_31', 'TR438_31', 'TR438_2'), ('TR438_2_32', 'TR438_2', 'TR438_32'), ('TR438_2_32', 'TR438_32', 'TR438_2'), ('TR438_2_6', 'TR438_2', 'TR438_6'), ('TR438_2_6', 'TR438_6', 'TR438_2'), ('TR438_30_72', 'TR438_30', 'TR438_72'), ('TR438_30_72', 'TR438_72', 'TR438_30'), ('TR438_3_33', 'TR438_3', 'TR438_33'), ('TR438_3_33', 'TR438_33', 'TR438_3'), ('TR438_3_34', 'TR438_3', 'TR438_34'), ('TR438_3_34', 'TR438_34', 'TR438_3'), ('TR438_3_35', 'TR438_3', 'TR438_35'), ('TR438_3_35', 'TR438_35', 'TR438_3'), ('TR438_4_36', 'TR438_36', 'TR438_4'), ('TR438_4_36', 'TR438_4', 'TR438_36'), ('TR438_4_37', 'TR438_37', 'TR438_4'), ('TR438_4_37', 'TR438_4', 'TR438_37'), ('TR438_4_38', 'TR438_38', 'TR438_4'), ('TR438_4_38', 'TR438_4', 'TR438_38'), ('TR438_5_8', 'TR438_5', 'TR438_8'), ('TR438_5_8', 'TR438_8', 'TR438_5'), ('TR438_6_10', 'TR438_10', 'TR438_6'), ('TR438_6_10', 'TR438_6', 'TR438_10'), ('TR438_6_11', 'TR438_11', 'TR438_6'), ('TR438_6_11', 'TR438_6', 'TR438_11'), ('TR438_6_9', 'TR438_6', 'TR438_9'), ('TR438_6_9', 'TR438_9', 'TR438_6'), ('TR438_7_12', 'TR438_12', 'TR438_7'), ('TR438_7_12', 'TR438_7', 'TR438_12'), ('TR438_7_39', 'TR438_39', 'TR438_7'), ('TR438_7_39', 'TR438_7', 'TR438_39'), ('TR438_8_40', 'TR438_40', 'TR438_8'), ('TR438_8_40', 'TR438_8', 'TR438_40'), ('TR438_9_41', 'TR438_41', 'TR438_9'), ('TR438_9_41', 'TR438_9', 'TR438_41'), ('TR438_9_42', 'TR438_42', 'TR438_9'), ('TR438_9_42', 'TR438_9', 'TR438_42'), ('TR438_9_43', 'TR438_43', 'TR438_9'), ('TR438_9_43', 'TR438_9', 'TR438_43'), ('TR439_10_15', 'TR439_10', 'TR439_15'), ('TR439_10_15', 'TR439_15', 'TR439_10'), ('TR439_10_24', 'TR439_10', 'TR439_24'), ('TR439_10_24', 'TR439_24', 'TR439_10'), ('TR439_11_25', 'TR439_11', 'TR439_25'), ('TR439_11_25', 'TR439_25', 'TR439_11'), ('TR439_11_26', 'TR439_11', 'TR439_26'), ('TR439_11_26', 'TR439_26', 'TR439_11'), ('TR439_11_27', 'TR439_11', 'TR439_27'), ('TR439_11_27', 'TR439_27', 'TR439_11'), ('TR439_12_28', 'TR439_12', 'TR439_28'), ('TR439_12_28', 'TR439_28', 'TR439_12'), ('TR439_13_16', 'TR439_13', 'TR439_16'), ('TR439_13_16', 'TR439_16', 'TR439_13'), ('TR439_13_29', 'TR439_13', 'TR439_29'), ('TR439_13_29', 'TR439_29', 'TR439_13'), ('TR439_14_17', 'TR439_14', 'TR439_17'), ('TR439_14_17', 'TR439_17', 'TR439_14'), ('TR439_14_30', 'TR439_14', 'TR439_30'), ('TR439_14_30', 'TR439_30', 'TR439_14'), ('TR439_14_31', 'TR439_14', 'TR439_31'), ('TR439_14_31', 'TR439_31', 'TR439_14'), ('TR439_15_17', 'TR439_15', 'TR439_17'), ('TR439_15_17', 'TR439_17', 'TR439_15'), ('TR439_15_32', 'TR439_15', 'TR439_32'), ('TR439_15_32', 'TR439_32', 'TR439_15'), ('TR439_15_33', 'TR439_15', 'TR439_33'), ('TR439_15_33', 'TR439_33', 'TR439_15'), ('TR439_16_34', 'TR439_16', 'TR439_34'), ('TR439_16_34', 'TR439_34', 'TR439_16'), ('TR439_17_35', 'TR439_17', 'TR439_35'), ('TR439_17_35', 'TR439_35', 'TR439_17'), ('TR439_17_36', 'TR439_17', 'TR439_36'), ('TR439_17_36', 'TR439_36', 'TR439_17'), ('TR439_1_18', 'TR439_1', 'TR439_18'), ('TR439_1_18', 'TR439_18', 'TR439_1'), ('TR439_1_2', 'TR439_1', 'TR439_2'), ('TR439_1_2', 'TR439_2', 'TR439_1'), ('TR439_1_3', 'TR439_1', 'TR439_3'), ('TR439_1_3', 'TR439_3', 'TR439_1'), ('TR439_1_4', 'TR439_1', 'TR439_4'), ('TR439_1_4', 'TR439_4', 'TR439_1'), ('TR439_2_5', 'TR439_2', 'TR439_5'), ('TR439_2_5', 'TR439_5', 'TR439_2'), ('TR439_37_38', 'TR439_37', 'TR439_38'), ('TR439_37_38', 'TR439_38', 'TR439_37'), ('TR439_3_8', 'TR439_3', 'TR439_8'), ('TR439_3_8', 'TR439_8', 'TR439_3'), ('TR439_4_10', 'TR439_10', 'TR439_4'), ('TR439_4_10', 'TR439_4', 'TR439_10'), ('TR439_4_19', 'TR439_19', 'TR439_4'), ('TR439_4_19', 'TR439_4', 'TR439_19'), ('TR439_4_9', 'TR439_4', 'TR439_9'), ('TR439_4_9', 'TR439_9', 'TR439_4'), ('TR439_5_11', 'TR439_11', 'TR439_5'), ('TR439_5_11', 'TR439_5', 'TR439_11'), ('TR439_7_12', 'TR439_12', 'TR439_7'), ('TR439_7_12', 'TR439_7', 'TR439_12'), ('TR439_7_20', 'TR439_20', 'TR439_7'), ('TR439_7_20', 'TR439_7', 'TR439_20'), ('TR439_8_21', 'TR439_21', 'TR439_8'), ('TR439_8_21', 'TR439_8', 'TR439_21'), ('TR439_9_14', 'TR439_14', 'TR439_9'), ('TR439_9_14', 'TR439_9', 'TR439_14'), ('TR439_9_22', 'TR439_22', 'TR439_9'), ('TR439_9_22', 'TR439_9', 'TR439_22'), ('TR439_9_23', 'TR439_23', 'TR439_9'), ('TR439_9_23', 'TR439_9', 'TR439_23'), ('TR440_10_11', 'TR440_10', 'TR440_11'), ('TR440_10_11', 'TR440_11', 'TR440_10'), ('TR440_11_12', 'TR440_11', 'TR440_12'), ('TR440_11_12', 'TR440_12', 'TR440_11'), ('TR440_11_23', 'TR440_11', 'TR440_23'), ('TR440_11_23', 'TR440_23', 'TR440_11'), ('TR440_11_24', 'TR440_11', 'TR440_24'), ('TR440_11_24', 'TR440_24', 'TR440_11'), ('TR440_12_13', 'TR440_12', 'TR440_13'), ('TR440_12_13', 'TR440_13', 'TR440_12'), ('TR440_12_25', 'TR440_12', 'TR440_25'), ('TR440_12_25', 'TR440_25', 'TR440_12'), ('TR440_12_26', 'TR440_12', 'TR440_26'), ('TR440_12_26', 'TR440_26', 'TR440_12'), ('TR440_13_14', 'TR440_13', 'TR440_14'), ('TR440_13_14', 'TR440_14', 'TR440_13'), ('TR440_13_27', 'TR440_13', 'TR440_27'), ('TR440_13_27', 'TR440_27', 'TR440_13'), ('TR440_13_28', 'TR440_13', 'TR440_28'), ('TR440_13_28', 'TR440_28', 'TR440_13'), ('TR440_14_15', 'TR440_14', 'TR440_15'), ('TR440_14_15', 'TR440_15', 'TR440_14'), ('TR440_14_16', 'TR440_14', 'TR440_16'), ('TR440_14_16', 'TR440_16', 'TR440_14'), ('TR440_15_29', 'TR440_15', 'TR440_29'), ('TR440_15_29', 'TR440_29', 'TR440_15'), ('TR440_15_30', 'TR440_15', 'TR440_30'), ('TR440_15_30', 'TR440_30', 'TR440_15'), ('TR440_15_31', 'TR440_15', 'TR440_31'), ('TR440_15_31', 'TR440_31', 'TR440_15'), ('TR440_2_3', 'TR440_2', 'TR440_3'), ('TR440_2_3', 'TR440_3', 'TR440_2'), ('TR440_4_19', 'TR440_19', 'TR440_4'), ('TR440_4_19', 'TR440_4', 'TR440_19'), ('TR440_4_9', 'TR440_4', 'TR440_9'), ('TR440_4_9', 'TR440_9', 'TR440_4'), ('TR440_5_20', 'TR440_20', 'TR440_5'), ('TR440_5_20', 'TR440_5', 'TR440_20'), ('TR440_5_6', 'TR440_5', 'TR440_6'), ('TR440_5_6', 'TR440_6', 'TR440_5'), ('TR440_6_21', 'TR440_21', 'TR440_6'), ('TR440_6_21', 'TR440_6', 'TR440_21'), ('TR440_7_10', 'TR440_10', 'TR440_7'), ('TR440_7_10', 'TR440_7', 'TR440_10'), ('TR440_7_8', 'TR440_7', 'TR440_8'), ('TR440_7_8', 'TR440_8', 'TR440_7'), ('TR440_8_22', 'TR440_22', 'TR440_8'), ('TR440_8_22', 'TR440_8', 'TR440_22'), ('TR442_10_11', 'TR442_10', 'TR442_11'), ('TR442_10_11', 'TR442_11', 'TR442_10'), ('TR442_1_13', 'TR442_1', 'TR442_13'), ('TR442_1_13', 'TR442_13', 'TR442_1'), ('TR442_1_6', 'TR442_1', 'TR442_6'), ('TR442_1_6', 'TR442_6', 'TR442_1'), ('TR442_2_14', 'TR442_14', 'TR442_2'), ('TR442_2_14', 'TR442_2', 'TR442_14'), ('TR442_2_3', 'TR442_2', 'TR442_3'), ('TR442_2_3', 'TR442_3', 'TR442_2'), ('TR442_3_10', 'TR442_10', 'TR442_3'), ('TR442_3_10', 'TR442_3', 'TR442_10'), ('TR442_4_15', 'TR442_15', 'TR442_4'), ('TR442_4_15', 'TR442_4', 'TR442_15'), ('TR442_4_5', 'TR442_4', 'TR442_5'), ('TR442_4_5', 'TR442_5', 'TR442_4'), ('TR442_5_16', 'TR442_16', 'TR442_5'), ('TR442_5_16', 'TR442_5', 'TR442_16'), ('TR442_6_7', 'TR442_6', 'TR442_7'), ('TR442_6_7', 'TR442_7', 'TR442_6'), ('TR442_7_8', 'TR442_7', 'TR442_8'), ('TR442_7_8', 'TR442_8', 'TR442_7'), ('TR442_8_17', 'TR442_17', 'TR442_8'), ('TR442_8_17', 'TR442_8', 'TR442_17'), ('TR443_10_14', 'TR443_10', 'TR443_14'), ('TR443_10_14', 'TR443_14', 'TR443_10'), ('TR443_11_15', 'TR443_11', 'TR443_15'), ('TR443_11_15', 'TR443_15', 'TR443_11'), ('TR443_11_24', 'TR443_11', 'TR443_24'), ('TR443_11_24', 'TR443_24', 'TR443_11'), ('TR443_12_15', 'TR443_12', 'TR443_15'), ('TR443_12_15', 'TR443_15', 'TR443_12'), ('TR443_12_16', 'TR443_12', 'TR443_16'), ('TR443_12_16', 'TR443_16', 'TR443_12'), ('TR443_12_25', 'TR443_12', 'TR443_25'), ('TR443_12_25', 'TR443_25', 'TR443_12'), ('TR443_13_17', 'TR443_13', 'TR443_17'), ('TR443_13_17', 'TR443_17', 'TR443_13'), ('TR443_13_26', 'TR443_13', 'TR443_26'), ('TR443_13_26', 'TR443_26', 'TR443_13'), ('TR443_14_27', 'TR443_14', 'TR443_27'), ('TR443_14_27', 'TR443_27', 'TR443_14'), ('TR443_16_28', 'TR443_16', 'TR443_28'), ('TR443_16_28', 'TR443_28', 'TR443_16'), ('TR443_17_29', 'TR443_17', 'TR443_29'), ('TR443_17_29', 'TR443_29', 'TR443_17'), ('TR443_18_20', 'TR443_18', 'TR443_20'), ('TR443_18_20', 'TR443_20', 'TR443_18'), ('TR443_18_30', 'TR443_18', 'TR443_30'), ('TR443_18_30', 'TR443_30', 'TR443_18'), ('TR443_1_2', 'TR443_1', 'TR443_2'), ('TR443_1_2', 'TR443_2', 'TR443_1'), ('TR443_20_31', 'TR443_20', 'TR443_31'), ('TR443_20_31', 'TR443_31', 'TR443_20'), ('TR443_2_4', 'TR443_2', 'TR443_4'), ('TR443_2_4', 'TR443_4', 'TR443_2'), ('TR443_3_21', 'TR443_21', 'TR443_3'), ('TR443_3_21', 'TR443_3', 'TR443_21'), ('TR443_3_5', 'TR443_3', 'TR443_5'), ('TR443_3_5', 'TR443_5', 'TR443_3'), ('TR443_4_22', 'TR443_22', 'TR443_4'), ('TR443_4_22', 'TR443_4', 'TR443_22'), ('TR443_5_7', 'TR443_5', 'TR443_7'), ('TR443_5_7', 'TR443_7', 'TR443_5'), ('TR443_6_23', 'TR443_23', 'TR443_6'), ('TR443_6_23', 'TR443_6', 'TR443_23'), ('TR443_6_8', 'TR443_6', 'TR443_8'), ('TR443_6_8', 'TR443_8', 'TR443_6'), ('TR443_7_10', 'TR443_10', 'TR443_7'), ('TR443_7_10', 'TR443_7', 'TR443_10'), ('TR443_8_11', 'TR443_11', 'TR443_8'), ('TR443_8_11', 'TR443_8', 'TR443_11'), ('TR443_9_12', 'TR443_12', 'TR443_9'), ('TR443_9_12', 'TR443_9', 'TR443_12'), ('TR444_10_15', 'TR444_10', 'TR444_15'), ('TR444_10_15', 'TR444_15', 'TR444_10'), ('TR444_11_12', 'TR444_11', 'TR444_12'), ('TR444_11_12', 'TR444_12', 'TR444_11'), ('TR444_11_22', 'TR444_11', 'TR444_22'), ('TR444_11_22', 'TR444_22', 'TR444_11'), ('TR444_12_23', 'TR444_12', 'TR444_23'), ('TR444_12_23', 'TR444_23', 'TR444_12'), ('TR444_13_14', 'TR444_13', 'TR444_14'), ('TR444_13_14', 'TR444_14', 'TR444_13'), ('TR444_13_24', 'TR444_13', 'TR444_24'), ('TR444_13_24', 'TR444_24', 'TR444_13'), ('TR444_14_25', 'TR444_14', 'TR444_25'), ('TR444_14_25', 'TR444_25', 'TR444_14'), ('TR444_15_26', 'TR444_15', 'TR444_26'), ('TR444_15_26', 'TR444_26', 'TR444_15'), ('TR444_1_16', 'TR444_1', 'TR444_16'), ('TR444_1_16', 'TR444_16', 'TR444_1'), ('TR444_1_6', 'TR444_1', 'TR444_6'), ('TR444_1_6', 'TR444_6', 'TR444_1'), ('TR444_2_17', 'TR444_17', 'TR444_2'), ('TR444_2_17', 'TR444_2', 'TR444_17'), ('TR444_2_3', 'TR444_2', 'TR444_3'), ('TR444_2_3', 'TR444_3', 'TR444_2'), ('TR444_3_8', 'TR444_3', 'TR444_8'), ('TR444_3_8', 'TR444_8', 'TR444_3'), ('TR444_4_5', 'TR444_4', 'TR444_5'), ('TR444_4_5', 'TR444_5', 'TR444_4'), ('TR444_4_9', 'TR444_4', 'TR444_9'), ('TR444_4_9', 'TR444_9', 'TR444_4'), ('TR444_5_18', 'TR444_18', 'TR444_5'), ('TR444_5_18', 'TR444_5', 'TR444_18'), ('TR444_6_7', 'TR444_6', 'TR444_7'), ('TR444_6_7', 'TR444_7', 'TR444_6'), ('TR444_8_19', 'TR444_19', 'TR444_8'), ('TR444_8_19', 'TR444_8', 'TR444_19'), ('TR444_9_10', 'TR444_10', 'TR444_9'), ('TR444_9_10', 'TR444_9', 'TR444_10'), ('TR444_9_20', 'TR444_20', 'TR444_9'), ('TR444_9_20', 'TR444_9', 'TR444_20'), ('TR444_9_21', 'TR444_21', 'TR444_9'), ('TR444_9_21', 'TR444_9', 'TR444_21'), ('TR445_10_11', 'TR445_10', 'TR445_11'), ('TR445_10_11', 'TR445_11', 'TR445_10'), ('TR445_10_34', 'TR445_10', 'TR445_34'), ('TR445_10_34', 'TR445_34', 'TR445_10'), ('TR445_11_12', 'TR445_11', 'TR445_12'), ('TR445_11_12', 'TR445_12', 'TR445_11'), ('TR445_12_13', 'TR445_12', 'TR445_13'), ('TR445_12_13', 'TR445_13', 'TR445_12'), ('TR445_13_15', 'TR445_13', 'TR445_15'), ('TR445_13_15', 'TR445_15', 'TR445_13'), ('TR445_13_16', 'TR445_13', 'TR445_16'), ('TR445_13_16', 'TR445_16', 'TR445_13'), ('TR445_13_35', 'TR445_13', 'TR445_35'), ('TR445_13_35', 'TR445_35', 'TR445_13'), ('TR445_15_17', 'TR445_15', 'TR445_17'), ('TR445_15_17', 'TR445_17', 'TR445_15'), ('TR445_15_36', 'TR445_15', 'TR445_36'), ('TR445_15_36', 'TR445_36', 'TR445_15'), ('TR445_15_37', 'TR445_15', 'TR445_37'), ('TR445_15_37', 'TR445_37', 'TR445_15'), ('TR445_16_19', 'TR445_16', 'TR445_19'), ('TR445_16_19', 'TR445_19', 'TR445_16'), ('TR445_17_38', 'TR445_17', 'TR445_38'), ('TR445_17_38', 'TR445_38', 'TR445_17'), ('TR445_18_20', 'TR445_18', 'TR445_20'), ('TR445_18_20', 'TR445_20', 'TR445_18'), ('TR445_18_39', 'TR445_18', 'TR445_39'), ('TR445_18_39', 'TR445_39', 'TR445_18'), ('TR445_19_40', 'TR445_19', 'TR445_40'), ('TR445_19_40', 'TR445_40', 'TR445_19'), ('TR445_1_2', 'TR445_1', 'TR445_2'), ('TR445_1_2', 'TR445_2', 'TR445_1'), ('TR445_1_23', 'TR445_1', 'TR445_23'), ('TR445_1_23', 'TR445_23', 'TR445_1'), ('TR445_1_24', 'TR445_1', 'TR445_24'), ('TR445_1_24', 'TR445_24', 'TR445_1'), ('TR445_1_25', 'TR445_1', 'TR445_25'), ('TR445_1_25', 'TR445_25', 'TR445_1'), ('TR445_20_41', 'TR445_20', 'TR445_41'), ('TR445_20_41', 'TR445_41', 'TR445_20'), ('TR445_21_22', 'TR445_21', 'TR445_22'), ('TR445_21_22', 'TR445_22', 'TR445_21'), ('TR445_21_42', 'TR445_21', 'TR445_42'), ('TR445_21_42', 'TR445_42', 'TR445_21'), ('TR445_22_43', 'TR445_22', 'TR445_43'), ('TR445_22_43', 'TR445_43', 'TR445_22'), ('TR445_2_3', 'TR445_2', 'TR445_3'), ('TR445_2_3', 'TR445_3', 'TR445_2'), ('TR445_2_4', 'TR445_2', 'TR445_4'), ('TR445_2_4', 'TR445_4', 'TR445_2'), ('TR445_3_26', 'TR445_26', 'TR445_3'), ('TR445_3_26', 'TR445_3', 'TR445_26'), ('TR445_3_5', 'TR445_3', 'TR445_5'), ('TR445_3_5', 'TR445_5', 'TR445_3'), ('TR445_3_6', 'TR445_3', 'TR445_6'), ('TR445_3_6', 'TR445_6', 'TR445_3'), ('TR445_44_45', 'TR445_44', 'TR445_45'), ('TR445_44_45', 'TR445_45', 'TR445_44'), ('TR445_46_47', 'TR445_46', 'TR445_47'), ('TR445_46_47', 'TR445_47', 'TR445_46'), ('TR445_46_48', 'TR445_46', 'TR445_48'), ('TR445_46_48', 'TR445_48', 'TR445_46'), ('TR445_49_50', 'TR445_49', 'TR445_50'), ('TR445_49_50', 'TR445_50', 'TR445_49'), ('TR445_49_51', 'TR445_49', 'TR445_51'), ('TR445_49_51', 'TR445_51', 'TR445_49'), ('TR445_4_27', 'TR445_27', 'TR445_4'), ('TR445_4_27', 'TR445_4', 'TR445_27'), ('TR445_4_7', 'TR445_4', 'TR445_7'), ('TR445_4_7', 'TR445_7', 'TR445_4'), ('TR445_4_8', 'TR445_4', 'TR445_8'), ('TR445_4_8', 'TR445_8', 'TR445_4'), ('TR445_52_53', 'TR445_52', 'TR445_53'), ('TR445_52_53', 'TR445_53', 'TR445_52'), ('TR445_52_54', 'TR445_52', 'TR445_54'), ('TR445_52_54', 'TR445_54', 'TR445_52'), ('TR445_5_28', 'TR445_28', 'TR445_5'), ('TR445_5_28', 'TR445_5', 'TR445_28'), ('TR445_5_7', 'TR445_5', 'TR445_7'), ('TR445_5_7', 'TR445_7', 'TR445_5'), ('TR445_5_9', 'TR445_5', 'TR445_9'), ('TR445_5_9', 'TR445_9', 'TR445_5'), ('TR445_6_10', 'TR445_10', 'TR445_6'), ('TR445_6_10', 'TR445_6', 'TR445_10'), ('TR445_6_29', 'TR445_29', 'TR445_6'), ('TR445_6_29', 'TR445_6', 'TR445_29'), ('TR445_6_30', 'TR445_30', 'TR445_6'), ('TR445_6_30', 'TR445_6', 'TR445_30'), ('TR445_7_31', 'TR445_31', 'TR445_7'), ('TR445_7_31', 'TR445_7', 'TR445_31'), ('TR445_7_9', 'TR445_7', 'TR445_9'), ('TR445_7_9', 'TR445_9', 'TR445_7'), ('TR445_8_10', 'TR445_10', 'TR445_8'), ('TR445_8_10', 'TR445_8', 'TR445_10'), ('TR445_8_32', 'TR445_32', 'TR445_8'), ('TR445_8_32', 'TR445_8', 'TR445_32'), ('TR445_8_33', 'TR445_33', 'TR445_8'), ('TR445_8_33', 'TR445_8', 'TR445_33'), ('TR446_10_14', 'TR446_10', 'TR446_14'), ('TR446_10_14', 'TR446_14', 'TR446_10'), ('TR446_11_17', 'TR446_11', 'TR446_17'), ('TR446_11_17', 'TR446_17', 'TR446_11'), ('TR446_12_34', 'TR446_12', 'TR446_34'), ('TR446_12_34', 'TR446_34', 'TR446_12'), ('TR446_12_35', 'TR446_12', 'TR446_35'), ('TR446_12_35', 'TR446_35', 'TR446_12'), ('TR446_12_36', 'TR446_12', 'TR446_36'), ('TR446_12_36', 'TR446_36', 'TR446_12'), ('TR446_13_37', 'TR446_13', 'TR446_37'), ('TR446_13_37', 'TR446_37', 'TR446_13'), ('TR446_13_38', 'TR446_13', 'TR446_38'), ('TR446_13_38', 'TR446_38', 'TR446_13'), ('TR446_13_39', 'TR446_13', 'TR446_39'), ('TR446_13_39', 'TR446_39', 'TR446_13'), ('TR446_14_40', 'TR446_14', 'TR446_40'), ('TR446_14_40', 'TR446_40', 'TR446_14'), ('TR446_15_16', 'TR446_15', 'TR446_16'), ('TR446_15_16', 'TR446_16', 'TR446_15'), ('TR446_15_18', 'TR446_15', 'TR446_18'), ('TR446_15_18', 'TR446_18', 'TR446_15'), ('TR446_16_41', 'TR446_16', 'TR446_41'), ('TR446_16_41', 'TR446_41', 'TR446_16'), ('TR446_17_23', 'TR446_17', 'TR446_23'), ('TR446_17_23', 'TR446_23', 'TR446_17'), ('TR446_18_19', 'TR446_18', 'TR446_19'), ('TR446_18_19', 'TR446_19', 'TR446_18'), ('TR446_18_42', 'TR446_18', 'TR446_42'), ('TR446_18_42', 'TR446_42', 'TR446_18'), ('TR446_18_43', 'TR446_18', 'TR446_43'), ('TR446_18_43', 'TR446_43', 'TR446_18'), ('TR446_19_20', 'TR446_19', 'TR446_20'), ('TR446_19_20', 'TR446_20', 'TR446_19'), ('TR446_19_44', 'TR446_19', 'TR446_44'), ('TR446_19_44', 'TR446_44', 'TR446_19'), ('TR446_19_45', 'TR446_19', 'TR446_45'), ('TR446_19_45', 'TR446_45', 'TR446_19'), ('TR446_1_2', 'TR446_1', 'TR446_2'), ('TR446_1_2', 'TR446_2', 'TR446_1'), ('TR446_1_24', 'TR446_1', 'TR446_24'), ('TR446_1_24', 'TR446_24', 'TR446_1'), ('TR446_1_25', 'TR446_1', 'TR446_25'), ('TR446_1_25', 'TR446_25', 'TR446_1'), ('TR446_1_26', 'TR446_1', 'TR446_26'), ('TR446_1_26', 'TR446_26', 'TR446_1'), ('TR446_20_21', 'TR446_20', 'TR446_21'), ('TR446_20_21', 'TR446_21', 'TR446_20'), ('TR446_20_46', 'TR446_20', 'TR446_46'), ('TR446_20_46', 'TR446_46', 'TR446_20'), ('TR446_20_47', 'TR446_20', 'TR446_47'), ('TR446_20_47', 'TR446_47', 'TR446_20'), ('TR446_21_22', 'TR446_21', 'TR446_22'), ('TR446_21_22', 'TR446_22', 'TR446_21'), ('TR446_21_48', 'TR446_21', 'TR446_48'), ('TR446_21_48', 'TR446_48', 'TR446_21'), ('TR446_21_49', 'TR446_21', 'TR446_49'), ('TR446_21_49', 'TR446_49', 'TR446_21'), ('TR446_22_50', 'TR446_22', 'TR446_50'), ('TR446_22_50', 'TR446_50', 'TR446_22'), ('TR446_22_51', 'TR446_22', 'TR446_51'), ('TR446_22_51', 'TR446_51', 'TR446_22'), ('TR446_22_52', 'TR446_22', 'TR446_52'), ('TR446_22_52', 'TR446_52', 'TR446_22'), ('TR446_23_53', 'TR446_23', 'TR446_53'), ('TR446_23_53', 'TR446_53', 'TR446_23'), ('TR446_2_3', 'TR446_2', 'TR446_3'), ('TR446_2_3', 'TR446_3', 'TR446_2'), ('TR446_3_27', 'TR446_27', 'TR446_3'), ('TR446_3_27', 'TR446_3', 'TR446_27'), ('TR446_3_28', 'TR446_28', 'TR446_3'), ('TR446_3_28', 'TR446_3', 'TR446_28'), ('TR446_3_4', 'TR446_3', 'TR446_4'), ('TR446_3_4', 'TR446_4', 'TR446_3'), ('TR446_4_29', 'TR446_29', 'TR446_4'), ('TR446_4_29', 'TR446_4', 'TR446_29'), ('TR446_4_30', 'TR446_30', 'TR446_4'), ('TR446_4_30', 'TR446_4', 'TR446_30'), ('TR446_4_5', 'TR446_4', 'TR446_5'), ('TR446_4_5', 'TR446_5', 'TR446_4'), ('TR446_5_31', 'TR446_31', 'TR446_5'), ('TR446_5_31', 'TR446_5', 'TR446_31'), ('TR446_5_6', 'TR446_5', 'TR446_6'), ('TR446_5_6', 'TR446_6', 'TR446_5'), ('TR446_5_8', 'TR446_5', 'TR446_8'), ('TR446_5_8', 'TR446_8', 'TR446_5'), ('TR446_6_11', 'TR446_11', 'TR446_6'), ('TR446_6_11', 'TR446_6', 'TR446_11'), ('TR446_6_32', 'TR446_32', 'TR446_6'), ('TR446_6_32', 'TR446_6', 'TR446_32'), ('TR446_6_7', 'TR446_6', 'TR446_7'), ('TR446_6_7', 'TR446_7', 'TR446_6'), ('TR446_7_33', 'TR446_33', 'TR446_7'), ('TR446_7_33', 'TR446_7', 'TR446_33'), ('TR446_8_12', 'TR446_12', 'TR446_8'), ('TR446_8_12', 'TR446_8', 'TR446_12'), ('TR446_8_13', 'TR446_13', 'TR446_8'), ('TR446_8_13', 'TR446_8', 'TR446_13'), ('TR446_8_9', 'TR446_8', 'TR446_9'), ('TR446_8_9', 'TR446_9', 'TR446_8'), ('TR446_9_10', 'TR446_10', 'TR446_9'), ('TR446_9_10', 'TR446_9', 'TR446_10'), ('TR447_1_2', 'TR447_1', 'TR447_2'), ('TR447_1_2', 'TR447_2', 'TR447_1'), ('TR447_2_4', 'TR447_2', 'TR447_4'), ('TR447_2_4', 'TR447_4', 'TR447_2'), ('TR447_2_5', 'TR447_2', 'TR447_5'), ('TR447_2_5', 'TR447_5', 'TR447_2'), ('TR447_2_6', 'TR447_2', 'TR447_6'), ('TR447_2_6', 'TR447_6', 'TR447_2'), ('TR448_1_2', 'TR448_1', 'TR448_2'), ('TR448_1_2', 'TR448_2', 'TR448_1'), ('TR448_1_6', 'TR448_1', 'TR448_6'), ('TR448_1_6', 'TR448_6', 'TR448_1'), ('TR448_1_7', 'TR448_1', 'TR448_7'), ('TR448_1_7', 'TR448_7', 'TR448_1'), ('TR448_1_8', 'TR448_1', 'TR448_8'), ('TR448_1_8', 'TR448_8', 'TR448_1'), ('TR448_2_10', 'TR448_10', 'TR448_2'), ('TR448_2_10', 'TR448_2', 'TR448_10'), ('TR448_2_3', 'TR448_2', 'TR448_3'), ('TR448_2_3', 'TR448_3', 'TR448_2'), ('TR448_2_9', 'TR448_2', 'TR448_9'), ('TR448_2_9', 'TR448_9', 'TR448_2'), ('TR448_3_4', 'TR448_3', 'TR448_4'), ('TR448_3_4', 'TR448_4', 'TR448_3'), ('TR448_6_11', 'TR448_11', 'TR448_6'), ('TR448_6_11', 'TR448_6', 'TR448_11'), ('TR448_6_12', 'TR448_12', 'TR448_6'), ('TR448_6_12', 'TR448_6', 'TR448_12'), ('TR448_6_13', 'TR448_13', 'TR448_6'), ('TR448_6_13', 'TR448_6', 'TR448_13'), ('TR448_7_14', 'TR448_14', 'TR448_7'), ('TR448_7_14', 'TR448_7', 'TR448_14'), ('TR448_7_15', 'TR448_15', 'TR448_7'), ('TR448_7_15', 'TR448_7', 'TR448_15'), ('TR448_7_16', 'TR448_16', 'TR448_7'), ('TR448_7_16', 'TR448_7', 'TR448_16'), ('TR449_10_25', 'TR449_10', 'TR449_25'), ('TR449_10_25', 'TR449_25', 'TR449_10'), ('TR449_1_2', 'TR449_1', 'TR449_2'), ('TR449_1_2', 'TR449_2', 'TR449_1'), ('TR449_1_3', 'TR449_1', 'TR449_3'), ('TR449_1_3', 'TR449_3', 'TR449_1'), ('TR449_1_8', 'TR449_1', 'TR449_8'), ('TR449_1_8', 'TR449_8', 'TR449_1'), ('TR449_2_11', 'TR449_11', 'TR449_2'), ('TR449_2_11', 'TR449_2', 'TR449_11'), ('TR449_2_12', 'TR449_12', 'TR449_2'), ('TR449_2_12', 'TR449_2', 'TR449_12'), ('TR449_2_6', 'TR449_2', 'TR449_6'), ('TR449_2_6', 'TR449_6', 'TR449_2'), ('TR449_3_13', 'TR449_13', 'TR449_3'), ('TR449_3_13', 'TR449_3', 'TR449_13'), ('TR449_3_14', 'TR449_14', 'TR449_3'), ('TR449_3_14', 'TR449_3', 'TR449_14'), ('TR449_3_4', 'TR449_3', 'TR449_4'), ('TR449_3_4', 'TR449_4', 'TR449_3'), ('TR449_4_15', 'TR449_15', 'TR449_4'), ('TR449_4_15', 'TR449_4', 'TR449_15'), ('TR449_4_16', 'TR449_16', 'TR449_4'), ('TR449_4_16', 'TR449_4', 'TR449_16'), ('TR449_4_5', 'TR449_4', 'TR449_5'), ('TR449_4_5', 'TR449_5', 'TR449_4'), ('TR449_5_17', 'TR449_17', 'TR449_5'), ('TR449_5_17', 'TR449_5', 'TR449_17'), ('TR449_6_18', 'TR449_18', 'TR449_6'), ('TR449_6_18', 'TR449_6', 'TR449_18'), ('TR449_6_19', 'TR449_19', 'TR449_6'), ('TR449_6_19', 'TR449_6', 'TR449_19'), ('TR449_6_7', 'TR449_6', 'TR449_7'), ('TR449_6_7', 'TR449_7', 'TR449_6'), ('TR449_7_20', 'TR449_20', 'TR449_7'), ('TR449_7_20', 'TR449_7', 'TR449_20'), ('TR449_8_21', 'TR449_21', 'TR449_8'), ('TR449_8_21', 'TR449_8', 'TR449_21'), ('TR449_8_22', 'TR449_22', 'TR449_8'), ('TR449_8_22', 'TR449_8', 'TR449_22'), ('TR449_8_9', 'TR449_8', 'TR449_9'), ('TR449_8_9', 'TR449_9', 'TR449_8'), ('TR449_9_10', 'TR449_10', 'TR449_9'), ('TR449_9_10', 'TR449_9', 'TR449_10'), ('TR449_9_23', 'TR449_23', 'TR449_9'), ('TR449_9_23', 'TR449_9', 'TR449_23'), ('TR449_9_24', 'TR449_24', 'TR449_9'), ('TR449_9_24', 'TR449_9', 'TR449_24'), ('TR450_1_5', 'TR450_1', 'TR450_5'), ('TR450_1_5', 'TR450_5', 'TR450_1'), ('TR450_1_6', 'TR450_1', 'TR450_6'), ('TR450_1_6', 'TR450_6', 'TR450_1'), ('TR450_2_3', 'TR450_2', 'TR450_3'), ('TR450_2_3', 'TR450_3', 'TR450_2'), ('TR450_2_4', 'TR450_2', 'TR450_4'), ('TR450_2_4', 'TR450_4', 'TR450_2'), ('TR452_1_2', 'TR452_1', 'TR452_2'), ('TR452_1_2', 'TR452_2', 'TR452_1'), ('TR452_1_3', 'TR452_1', 'TR452_3'), ('TR452_1_3', 'TR452_3', 'TR452_1'), ('TR452_1_4', 'TR452_1', 'TR452_4'), ('TR452_1_4', 'TR452_4', 'TR452_1'), ('TR452_1_5', 'TR452_1', 'TR452_5'), ('TR452_1_5', 'TR452_5', 'TR452_1'), ('TR452_2_10', 'TR452_10', 'TR452_2'), ('TR452_2_10', 'TR452_2', 'TR452_10'), ('TR452_2_11', 'TR452_11', 'TR452_2'), ('TR452_2_11', 'TR452_2', 'TR452_11'), ('TR452_2_6', 'TR452_2', 'TR452_6'), ('TR452_2_6', 'TR452_6', 'TR452_2'), ('TR452_3_12', 'TR452_12', 'TR452_3'), ('TR452_3_12', 'TR452_3', 'TR452_12'), ('TR452_3_13', 'TR452_13', 'TR452_3'), ('TR452_3_13', 'TR452_3', 'TR452_13'), ('TR452_3_7', 'TR452_3', 'TR452_7'), ('TR452_3_7', 'TR452_7', 'TR452_3'), ('TR452_4_14', 'TR452_14', 'TR452_4'), ('TR452_4_14', 'TR452_4', 'TR452_14'), ('TR452_4_15', 'TR452_15', 'TR452_4'), ('TR452_4_15', 'TR452_4', 'TR452_15'), ('TR452_4_8', 'TR452_4', 'TR452_8'), ('TR452_4_8', 'TR452_8', 'TR452_4'), ('TR452_5_16', 'TR452_16', 'TR452_5'), ('TR452_5_16', 'TR452_5', 'TR452_16'), ('TR452_5_17', 'TR452_17', 'TR452_5'), ('TR452_5_17', 'TR452_5', 'TR452_17'), ('TR452_5_9', 'TR452_5', 'TR452_9'), ('TR452_5_9', 'TR452_9', 'TR452_5'), ('TR452_8_18', 'TR452_18', 'TR452_8'), ('TR452_8_18', 'TR452_8', 'TR452_18'), ('TR452_9_19', 'TR452_19', 'TR452_9'), ('TR452_9_19', 'TR452_9', 'TR452_19'), ('TR455_10_27', 'TR455_10', 'TR455_27'), ('TR455_10_27', 'TR455_27', 'TR455_10'), ('TR455_10_28', 'TR455_10', 'TR455_28'), ('TR455_10_28', 'TR455_28', 'TR455_10'), ('TR455_11_12', 'TR455_11', 'TR455_12'), ('TR455_11_12', 'TR455_12', 'TR455_11'), ('TR455_11_17', 'TR455_11', 'TR455_17'), ('TR455_11_17', 'TR455_17', 'TR455_11'), ('TR455_11_29', 'TR455_11', 'TR455_29'), ('TR455_11_29', 'TR455_29', 'TR455_11'), ('TR455_12_13', 'TR455_12', 'TR455_13'), ('TR455_12_13', 'TR455_13', 'TR455_12'), ('TR455_12_16', 'TR455_12', 'TR455_16'), ('TR455_12_16', 'TR455_16', 'TR455_12'), ('TR455_12_30', 'TR455_12', 'TR455_30'), ('TR455_12_30', 'TR455_30', 'TR455_12'), ('TR455_13_31', 'TR455_13', 'TR455_31'), ('TR455_13_31', 'TR455_31', 'TR455_13'), ('TR455_14_32', 'TR455_14', 'TR455_32'), ('TR455_14_32', 'TR455_32', 'TR455_14'), ('TR455_15_22', 'TR455_15', 'TR455_22'), ('TR455_15_22', 'TR455_22', 'TR455_15'), ('TR455_16_33', 'TR455_16', 'TR455_33'), ('TR455_16_33', 'TR455_33', 'TR455_16'), ('TR455_18_20', 'TR455_18', 'TR455_20'), ('TR455_18_20', 'TR455_20', 'TR455_18'), ('TR455_18_21', 'TR455_18', 'TR455_21'), ('TR455_18_21', 'TR455_21', 'TR455_18'), ('TR455_19_20', 'TR455_19', 'TR455_20'), ('TR455_19_20', 'TR455_20', 'TR455_19'), ('TR455_19_34', 'TR455_19', 'TR455_34'), ('TR455_19_34', 'TR455_34', 'TR455_19'), ('TR455_19_35', 'TR455_19', 'TR455_35'), ('TR455_19_35', 'TR455_35', 'TR455_19'), ('TR455_1_6', 'TR455_1', 'TR455_6'), ('TR455_1_6', 'TR455_6', 'TR455_1'), ('TR455_1_7', 'TR455_1', 'TR455_7'), ('TR455_1_7', 'TR455_7', 'TR455_1'), ('TR455_20_36', 'TR455_20', 'TR455_36'), ('TR455_20_36', 'TR455_36', 'TR455_20'), ('TR455_20_37', 'TR455_20', 'TR455_37'), ('TR455_20_37', 'TR455_37', 'TR455_20'), ('TR455_21_38', 'TR455_21', 'TR455_38'), ('TR455_21_38', 'TR455_38', 'TR455_21'), ('TR455_21_39', 'TR455_21', 'TR455_39'), ('TR455_21_39', 'TR455_39', 'TR455_21'), ('TR455_21_40', 'TR455_21', 'TR455_40'), ('TR455_21_40', 'TR455_40', 'TR455_21'), ('TR455_22_41', 'TR455_22', 'TR455_41'), ('TR455_22_41', 'TR455_41', 'TR455_22'), ('TR455_22_42', 'TR455_22', 'TR455_42'), ('TR455_22_42', 'TR455_42', 'TR455_22'), ('TR455_22_43', 'TR455_22', 'TR455_43'), ('TR455_22_43', 'TR455_43', 'TR455_22'), ('TR455_2_10', 'TR455_10', 'TR455_2'), ('TR455_2_10', 'TR455_2', 'TR455_10'), ('TR455_2_3', 'TR455_2', 'TR455_3'), ('TR455_2_3', 'TR455_3', 'TR455_2'), ('TR455_3_23', 'TR455_23', 'TR455_3'), ('TR455_3_23', 'TR455_3', 'TR455_23'), ('TR455_4_24', 'TR455_24', 'TR455_4'), ('TR455_4_24', 'TR455_4', 'TR455_24'), ('TR455_4_5', 'TR455_4', 'TR455_5'), ('TR455_4_5', 'TR455_5', 'TR455_4'), ('TR455_5_15', 'TR455_15', 'TR455_5'), ('TR455_5_15', 'TR455_5', 'TR455_15'), ('TR455_6_17', 'TR455_17', 'TR455_6'), ('TR455_6_17', 'TR455_6', 'TR455_17'), ('TR455_7_11', 'TR455_11', 'TR455_7'), ('TR455_7_11', 'TR455_7', 'TR455_11'), ('TR455_7_19', 'TR455_19', 'TR455_7'), ('TR455_7_19', 'TR455_7', 'TR455_19'), ('TR455_7_8', 'TR455_7', 'TR455_8'), ('TR455_7_8', 'TR455_8', 'TR455_7'), ('TR455_8_14', 'TR455_14', 'TR455_8'), ('TR455_8_14', 'TR455_8', 'TR455_14'), ('TR455_8_25', 'TR455_25', 'TR455_8'), ('TR455_8_25', 'TR455_8', 'TR455_25'), ('TR455_8_9', 'TR455_8', 'TR455_9'), ('TR455_8_9', 'TR455_9', 'TR455_8'), ('TR455_9_10', 'TR455_10', 'TR455_9'), ('TR455_9_10', 'TR455_9', 'TR455_10'), ('TR455_9_18', 'TR455_18', 'TR455_9'), ('TR455_9_18', 'TR455_9', 'TR455_18'), ('TR455_9_26', 'TR455_26', 'TR455_9'), ('TR455_9_26', 'TR455_9', 'TR455_26'), ('TR456_10_13', 'TR456_10', 'TR456_13'), ('TR456_10_13', 'TR456_13', 'TR456_10'), ('TR456_10_21', 'TR456_10', 'TR456_21'), ('TR456_10_21', 'TR456_21', 'TR456_10'), ('TR456_11_22', 'TR456_11', 'TR456_22'), ('TR456_11_22', 'TR456_22', 'TR456_11'), ('TR456_11_23', 'TR456_11', 'TR456_23'), ('TR456_11_23', 'TR456_23', 'TR456_11'), ('TR456_11_24', 'TR456_11', 'TR456_24'), ('TR456_11_24', 'TR456_24', 'TR456_11'), ('TR456_12_25', 'TR456_12', 'TR456_25'), ('TR456_12_25', 'TR456_25', 'TR456_12'), ('TR456_12_26', 'TR456_12', 'TR456_26'), ('TR456_12_26', 'TR456_26', 'TR456_12'), ('TR456_12_27', 'TR456_12', 'TR456_27'), ('TR456_12_27', 'TR456_27', 'TR456_12'), ('TR456_13_28', 'TR456_13', 'TR456_28'), ('TR456_13_28', 'TR456_28', 'TR456_13'), ('TR456_1_14', 'TR456_1', 'TR456_14'), ('TR456_1_14', 'TR456_14', 'TR456_1'), ('TR456_1_15', 'TR456_1', 'TR456_15'), ('TR456_1_15', 'TR456_15', 'TR456_1'), ('TR456_1_16', 'TR456_1', 'TR456_16'), ('TR456_1_16', 'TR456_16', 'TR456_1'), ('TR456_1_2', 'TR456_1', 'TR456_2'), ('TR456_1_2', 'TR456_2', 'TR456_1'), ('TR456_2_3', 'TR456_2', 'TR456_3'), ('TR456_2_3', 'TR456_3', 'TR456_2'), ('TR456_3_6', 'TR456_3', 'TR456_6'), ('TR456_3_6', 'TR456_6', 'TR456_3'), ('TR456_4_17', 'TR456_17', 'TR456_4'), ('TR456_4_17', 'TR456_4', 'TR456_17'), ('TR456_4_7', 'TR456_4', 'TR456_7'), ('TR456_4_7', 'TR456_7', 'TR456_4'), ('TR456_5_8', 'TR456_5', 'TR456_8'), ('TR456_5_8', 'TR456_8', 'TR456_5'), ('TR456_5_9', 'TR456_5', 'TR456_9'), ('TR456_5_9', 'TR456_9', 'TR456_5'), ('TR456_6_18', 'TR456_18', 'TR456_6'), ('TR456_6_18', 'TR456_6', 'TR456_18'), ('TR456_7_11', 'TR456_11', 'TR456_7'), ('TR456_7_11', 'TR456_7', 'TR456_11'), ('TR456_7_12', 'TR456_12', 'TR456_7'), ('TR456_7_12', 'TR456_7', 'TR456_12'), ('TR456_7_8', 'TR456_7', 'TR456_8'), ('TR456_7_8', 'TR456_8', 'TR456_7'), ('TR456_8_19', 'TR456_19', 'TR456_8'), ('TR456_8_19', 'TR456_8', 'TR456_19'), ('TR456_9_20', 'TR456_20', 'TR456_9'), ('TR456_9_20', 'TR456_9', 'TR456_20'), ('TR457_11_33', 'TR457_11', 'TR457_33'), ('TR457_11_33', 'TR457_33', 'TR457_11'), ('TR457_12_15', 'TR457_12', 'TR457_15'), ('TR457_12_15', 'TR457_15', 'TR457_12'), ('TR457_12_34', 'TR457_12', 'TR457_34'), ('TR457_12_34', 'TR457_34', 'TR457_12'), ('TR457_13_35', 'TR457_13', 'TR457_35'), ('TR457_13_35', 'TR457_35', 'TR457_13'), ('TR457_14_16', 'TR457_14', 'TR457_16'), ('TR457_14_16', 'TR457_16', 'TR457_14'), ('TR457_14_36', 'TR457_14', 'TR457_36'), ('TR457_14_36', 'TR457_36', 'TR457_14'), ('TR457_15_17', 'TR457_15', 'TR457_17'), ('TR457_15_17', 'TR457_17', 'TR457_15'), ('TR457_16_37', 'TR457_16', 'TR457_37'), ('TR457_16_37', 'TR457_37', 'TR457_16'), ('TR457_18_19', 'TR457_18', 'TR457_19'), ('TR457_18_19', 'TR457_19', 'TR457_18'), ('TR457_19_21', 'TR457_19', 'TR457_21'), ('TR457_19_21', 'TR457_21', 'TR457_19'), ('TR457_1_2', 'TR457_1', 'TR457_2'), ('TR457_1_2', 'TR457_2', 'TR457_1'), ('TR457_1_5', 'TR457_1', 'TR457_5'), ('TR457_1_5', 'TR457_5', 'TR457_1'), ('TR457_20_22', 'TR457_20', 'TR457_22'), ('TR457_20_22', 'TR457_22', 'TR457_20'), ('TR457_20_38', 'TR457_20', 'TR457_38'), ('TR457_20_38', 'TR457_38', 'TR457_20'), ('TR457_21_39', 'TR457_21', 'TR457_39'), ('TR457_21_39', 'TR457_39', 'TR457_21'), ('TR457_22_24', 'TR457_22', 'TR457_24'), ('TR457_22_24', 'TR457_24', 'TR457_22'), ('TR457_23_25', 'TR457_23', 'TR457_25'), ('TR457_23_25', 'TR457_25', 'TR457_23'), ('TR457_23_40', 'TR457_23', 'TR457_40'), ('TR457_23_40', 'TR457_40', 'TR457_23'), ('TR457_24_27', 'TR457_24', 'TR457_27'), ('TR457_24_27', 'TR457_27', 'TR457_24'), ('TR457_25_28', 'TR457_25', 'TR457_28'), ('TR457_25_28', 'TR457_28', 'TR457_25'), ('TR457_27_41', 'TR457_27', 'TR457_41'), ('TR457_27_41', 'TR457_41', 'TR457_27'), ('TR457_28_42', 'TR457_28', 'TR457_42'), ('TR457_28_42', 'TR457_42', 'TR457_28'), ('TR457_2_29', 'TR457_2', 'TR457_29'), ('TR457_2_29', 'TR457_29', 'TR457_2'), ('TR457_2_6', 'TR457_2', 'TR457_6'), ('TR457_2_6', 'TR457_6', 'TR457_2'), ('TR457_5_8', 'TR457_5', 'TR457_8'), ('TR457_5_8', 'TR457_8', 'TR457_5'), ('TR457_6_10', 'TR457_10', 'TR457_6'), ('TR457_6_10', 'TR457_6', 'TR457_10'), ('TR457_7_11', 'TR457_11', 'TR457_7'), ('TR457_7_11', 'TR457_7', 'TR457_11'), ('TR457_7_30', 'TR457_30', 'TR457_7'), ('TR457_7_30', 'TR457_7', 'TR457_30'), ('TR457_8_31', 'TR457_31', 'TR457_8'), ('TR457_8_31', 'TR457_8', 'TR457_31'), ('TR457_9_13', 'TR457_13', 'TR457_9'), ('TR457_9_13', 'TR457_9', 'TR457_13'), ('TR457_9_32', 'TR457_32', 'TR457_9'), ('TR457_9_32', 'TR457_9', 'TR457_32'), ('TR458_10_13', 'TR458_10', 'TR458_13'), ('TR458_10_13', 'TR458_13', 'TR458_10'), ('TR458_12_14', 'TR458_12', 'TR458_14'), ('TR458_12_14', 'TR458_14', 'TR458_12'), ('TR458_13_15', 'TR458_13', 'TR458_15'), ('TR458_13_15', 'TR458_15', 'TR458_13'), ('TR458_13_28', 'TR458_13', 'TR458_28'), ('TR458_13_28', 'TR458_28', 'TR458_13'), ('TR458_13_29', 'TR458_13', 'TR458_29'), ('TR458_13_29', 'TR458_29', 'TR458_13'), ('TR458_14_16', 'TR458_14', 'TR458_16'), ('TR458_14_16', 'TR458_16', 'TR458_14'), ('TR458_14_30', 'TR458_14', 'TR458_30'), ('TR458_14_30', 'TR458_30', 'TR458_14'), ('TR458_14_31', 'TR458_14', 'TR458_31'), ('TR458_14_31', 'TR458_31', 'TR458_14'), ('TR458_15_23', 'TR458_15', 'TR458_23'), ('TR458_15_23', 'TR458_23', 'TR458_15'), ('TR458_16_17', 'TR458_16', 'TR458_17'), ('TR458_16_17', 'TR458_17', 'TR458_16'), ('TR458_16_32', 'TR458_16', 'TR458_32'), ('TR458_16_32', 'TR458_32', 'TR458_16'), ('TR458_16_33', 'TR458_16', 'TR458_33'), ('TR458_16_33', 'TR458_33', 'TR458_16'), ('TR458_17_18', 'TR458_17', 'TR458_18'), ('TR458_17_18', 'TR458_18', 'TR458_17'), ('TR458_17_34', 'TR458_17', 'TR458_34'), ('TR458_17_34', 'TR458_34', 'TR458_17'), ('TR458_17_35', 'TR458_17', 'TR458_35'), ('TR458_17_35', 'TR458_35', 'TR458_17'), ('TR458_18_36', 'TR458_18', 'TR458_36'), ('TR458_18_36', 'TR458_36', 'TR458_18'), ('TR458_18_37', 'TR458_18', 'TR458_37'), ('TR458_18_37', 'TR458_37', 'TR458_18'), ('TR458_18_38', 'TR458_18', 'TR458_38'), ('TR458_18_38', 'TR458_38', 'TR458_18'), ('TR458_19_20', 'TR458_19', 'TR458_20'), ('TR458_19_20', 'TR458_20', 'TR458_19'), ('TR458_19_39', 'TR458_19', 'TR458_39'), ('TR458_19_39', 'TR458_39', 'TR458_19'), ('TR458_1_24', 'TR458_1', 'TR458_24'), ('TR458_1_24', 'TR458_24', 'TR458_1'), ('TR458_1_6', 'TR458_1', 'TR458_6'), ('TR458_1_6', 'TR458_6', 'TR458_1'), ('TR458_20_40', 'TR458_20', 'TR458_40'), ('TR458_20_40', 'TR458_40', 'TR458_20'), ('TR458_21_22', 'TR458_21', 'TR458_22'), ('TR458_21_22', 'TR458_22', 'TR458_21'), ('TR458_21_41', 'TR458_21', 'TR458_41'), ('TR458_21_41', 'TR458_41', 'TR458_21'), ('TR458_22_42', 'TR458_22', 'TR458_42'), ('TR458_22_42', 'TR458_42', 'TR458_22'), ('TR458_23_43', 'TR458_23', 'TR458_43'), ('TR458_23_43', 'TR458_43', 'TR458_23'), ('TR458_2_25', 'TR458_2', 'TR458_25'), ('TR458_2_25', 'TR458_25', 'TR458_2'), ('TR458_2_3', 'TR458_2', 'TR458_3'), ('TR458_2_3', 'TR458_3', 'TR458_2'), ('TR458_3_26', 'TR458_26', 'TR458_3'), ('TR458_3_26', 'TR458_3', 'TR458_26'), ('TR458_4_5', 'TR458_4', 'TR458_5'), ('TR458_4_5', 'TR458_5', 'TR458_4'), ('TR458_4_8', 'TR458_4', 'TR458_8'), ('TR458_4_8', 'TR458_8', 'TR458_4'), ('TR458_5_7', 'TR458_5', 'TR458_7'), ('TR458_5_7', 'TR458_7', 'TR458_5'), ('TR458_6_27', 'TR458_27', 'TR458_6'), ('TR458_6_27', 'TR458_6', 'TR458_27'), ('TR458_7_10', 'TR458_10', 'TR458_7'), ('TR458_7_10', 'TR458_7', 'TR458_10'), ('TR458_8_12', 'TR458_12', 'TR458_8'), ('TR458_8_12', 'TR458_8', 'TR458_12'), ('TR459_10_11', 'TR459_10', 'TR459_11'), ('TR459_10_11', 'TR459_11', 'TR459_10'), ('TR459_10_12', 'TR459_10', 'TR459_12'), ('TR459_10_12', 'TR459_12', 'TR459_10'), ('TR459_11_25', 'TR459_11', 'TR459_25'), ('TR459_11_25', 'TR459_25', 'TR459_11'), ('TR459_12_26', 'TR459_12', 'TR459_26'), ('TR459_12_26', 'TR459_26', 'TR459_12'), ('TR459_1_2', 'TR459_1', 'TR459_2'), ('TR459_1_2', 'TR459_2', 'TR459_1'), ('TR459_1_3', 'TR459_1', 'TR459_3'), ('TR459_1_3', 'TR459_3', 'TR459_1'), ('TR459_1_4', 'TR459_1', 'TR459_4'), ('TR459_1_4', 'TR459_4', 'TR459_1'), ('TR459_1_5', 'TR459_1', 'TR459_5'), ('TR459_1_5', 'TR459_5', 'TR459_1'), ('TR459_2_13', 'TR459_13', 'TR459_2'), ('TR459_2_13', 'TR459_2', 'TR459_13'), ('TR459_2_14', 'TR459_14', 'TR459_2'), ('TR459_2_14', 'TR459_2', 'TR459_14'), ('TR459_2_15', 'TR459_15', 'TR459_2'), ('TR459_2_15', 'TR459_2', 'TR459_15'), ('TR459_3_16', 'TR459_16', 'TR459_3'), ('TR459_3_16', 'TR459_3', 'TR459_16'), ('TR459_3_17', 'TR459_17', 'TR459_3'), ('TR459_3_17', 'TR459_3', 'TR459_17'), ('TR459_3_18', 'TR459_18', 'TR459_3'), ('TR459_3_18', 'TR459_3', 'TR459_18'), ('TR459_4_19', 'TR459_19', 'TR459_4'), ('TR459_4_19', 'TR459_4', 'TR459_19'), ('TR459_4_20', 'TR459_20', 'TR459_4'), ('TR459_4_20', 'TR459_4', 'TR459_20'), ('TR459_4_21', 'TR459_21', 'TR459_4'), ('TR459_4_21', 'TR459_4', 'TR459_21'), ('TR459_5_7', 'TR459_5', 'TR459_7'), ('TR459_5_7', 'TR459_7', 'TR459_5'), ('TR459_6_8', 'TR459_6', 'TR459_8'), ('TR459_6_8', 'TR459_8', 'TR459_6'), ('TR459_6_9', 'TR459_6', 'TR459_9'), ('TR459_6_9', 'TR459_9', 'TR459_6'), ('TR459_7_22', 'TR459_22', 'TR459_7'), ('TR459_7_22', 'TR459_7', 'TR459_22'), ('TR459_8_23', 'TR459_23', 'TR459_8'), ('TR459_8_23', 'TR459_8', 'TR459_23'), ('TR459_9_24', 'TR459_24', 'TR459_9'), ('TR459_9_24', 'TR459_9', 'TR459_24'), ('TR461_1_2', 'TR461_1', 'TR461_2'), ('TR461_1_2', 'TR461_2', 'TR461_1'), ('TR461_1_5', 'TR461_1', 'TR461_5'), ('TR461_1_5', 'TR461_5', 'TR461_1'), ('TR461_1_6', 'TR461_1', 'TR461_6'), ('TR461_1_6', 'TR461_6', 'TR461_1'), ('TR461_1_7', 'TR461_1', 'TR461_7'), ('TR461_1_7', 'TR461_7', 'TR461_1'), ('TR461_2_3', 'TR461_2', 'TR461_3'), ('TR461_2_3', 'TR461_3', 'TR461_2'), ('TR463_10_27', 'TR463_10', 'TR463_27'), ('TR463_10_27', 'TR463_27', 'TR463_10'), ('TR463_11_12', 'TR463_11', 'TR463_12'), ('TR463_11_12', 'TR463_12', 'TR463_11'), ('TR463_11_15', 'TR463_11', 'TR463_15'), ('TR463_11_15', 'TR463_15', 'TR463_11'), ('TR463_11_28', 'TR463_11', 'TR463_28'), ('TR463_11_28', 'TR463_28', 'TR463_11'), ('TR463_12_13', 'TR463_12', 'TR463_13'), ('TR463_12_13', 'TR463_13', 'TR463_12'), ('TR463_13_18', 'TR463_13', 'TR463_18'), ('TR463_13_18', 'TR463_18', 'TR463_13'), ('TR463_14_15', 'TR463_14', 'TR463_15'), ('TR463_14_15', 'TR463_15', 'TR463_14'), ('TR463_14_21', 'TR463_14', 'TR463_21'), ('TR463_14_21', 'TR463_21', 'TR463_14'), ('TR463_18_29', 'TR463_18', 'TR463_29'), ('TR463_18_29', 'TR463_29', 'TR463_18'), ('TR463_19_20', 'TR463_19', 'TR463_20'), ('TR463_19_20', 'TR463_20', 'TR463_19'), ('TR463_19_30', 'TR463_19', 'TR463_30'), ('TR463_19_30', 'TR463_30', 'TR463_19'), ('TR463_1_22', 'TR463_1', 'TR463_22'), ('TR463_1_22', 'TR463_22', 'TR463_1'), ('TR463_1_6', 'TR463_1', 'TR463_6'), ('TR463_1_6', 'TR463_6', 'TR463_1'), ('TR463_20_31', 'TR463_20', 'TR463_31'), ('TR463_20_31', 'TR463_31', 'TR463_20'), ('TR463_21_32', 'TR463_21', 'TR463_32'), ('TR463_21_32', 'TR463_32', 'TR463_21'), ('TR463_2_23', 'TR463_2', 'TR463_23'), ('TR463_2_23', 'TR463_23', 'TR463_2'), ('TR463_2_3', 'TR463_2', 'TR463_3'), ('TR463_2_3', 'TR463_3', 'TR463_2'), ('TR463_3_24', 'TR463_24', 'TR463_3'), ('TR463_3_24', 'TR463_3', 'TR463_24'), ('TR463_4_25', 'TR463_25', 'TR463_4'), ('TR463_4_25', 'TR463_4', 'TR463_25'), ('TR463_4_5', 'TR463_4', 'TR463_5'), ('TR463_4_5', 'TR463_5', 'TR463_4'), ('TR463_5_7', 'TR463_5', 'TR463_7'), ('TR463_5_7', 'TR463_7', 'TR463_5'), ('TR463_6_10', 'TR463_10', 'TR463_6'), ('TR463_6_10', 'TR463_6', 'TR463_10'), ('TR463_8_11', 'TR463_11', 'TR463_8'), ('TR463_8_11', 'TR463_8', 'TR463_11'), ('TR463_8_9', 'TR463_8', 'TR463_9'), ('TR463_8_9', 'TR463_9', 'TR463_8'), ('TR463_9_26', 'TR463_26', 'TR463_9'), ('TR463_9_26', 'TR463_9', 'TR463_26'), ('TR464_11_16', 'TR464_11', 'TR464_16'), ('TR464_11_16', 'TR464_16', 'TR464_11'), ('TR464_11_17', 'TR464_11', 'TR464_17'), ('TR464_11_17', 'TR464_17', 'TR464_11'), ('TR464_11_18', 'TR464_11', 'TR464_18'), ('TR464_11_18', 'TR464_18', 'TR464_11'), ('TR464_12_19', 'TR464_12', 'TR464_19'), ('TR464_12_19', 'TR464_19', 'TR464_12'), ('TR464_12_20', 'TR464_12', 'TR464_20'), ('TR464_12_20', 'TR464_20', 'TR464_12'), ('TR464_12_21', 'TR464_12', 'TR464_21'), ('TR464_12_21', 'TR464_21', 'TR464_12'), ('TR464_1_11', 'TR464_1', 'TR464_11'), ('TR464_1_11', 'TR464_11', 'TR464_1'), ('TR464_1_6', 'TR464_1', 'TR464_6'), ('TR464_1_6', 'TR464_6', 'TR464_1'), ('TR464_2_13', 'TR464_13', 'TR464_2'), ('TR464_2_13', 'TR464_2', 'TR464_13'), ('TR464_2_3', 'TR464_2', 'TR464_3'), ('TR464_2_3', 'TR464_3', 'TR464_2'), ('TR464_3_12', 'TR464_12', 'TR464_3'), ('TR464_3_12', 'TR464_3', 'TR464_12'), ('TR464_4_14', 'TR464_14', 'TR464_4'), ('TR464_4_14', 'TR464_4', 'TR464_14'), ('TR464_4_5', 'TR464_4', 'TR464_5'), ('TR464_4_5', 'TR464_5', 'TR464_4'), ('TR464_5_7', 'TR464_5', 'TR464_7'), ('TR464_5_7', 'TR464_7', 'TR464_5'), ('TR464_6_15', 'TR464_15', 'TR464_6'), ('TR464_6_15', 'TR464_6', 'TR464_15'), ('TR464_7_8', 'TR464_7', 'TR464_8'), ('TR464_7_8', 'TR464_8', 'TR464_7'), ('TR465_10_30', 'TR465_10', 'TR465_30'), ('TR465_10_30', 'TR465_30', 'TR465_10'), ('TR465_11_12', 'TR465_11', 'TR465_12'), ('TR465_11_12', 'TR465_12', 'TR465_11'), ('TR465_11_22', 'TR465_11', 'TR465_22'), ('TR465_11_22', 'TR465_22', 'TR465_11'), ('TR465_12_31', 'TR465_12', 'TR465_31'), ('TR465_12_31', 'TR465_31', 'TR465_12'), ('TR465_13_32', 'TR465_13', 'TR465_32'), ('TR465_13_32', 'TR465_32', 'TR465_13'), ('TR465_14_18', 'TR465_14', 'TR465_18'), ('TR465_14_18', 'TR465_18', 'TR465_14'), ('TR465_15_16', 'TR465_15', 'TR465_16'), ('TR465_15_16', 'TR465_16', 'TR465_15'), ('TR465_15_21', 'TR465_15', 'TR465_21'), ('TR465_15_21', 'TR465_21', 'TR465_15'), ('TR465_16_17', 'TR465_16', 'TR465_17'), ('TR465_16_17', 'TR465_17', 'TR465_16'), ('TR465_18_33', 'TR465_18', 'TR465_33'), ('TR465_18_33', 'TR465_33', 'TR465_18'), ('TR465_19_20', 'TR465_19', 'TR465_20'), ('TR465_19_20', 'TR465_20', 'TR465_19'), ('TR465_19_34', 'TR465_19', 'TR465_34'), ('TR465_19_34', 'TR465_34', 'TR465_19'), ('TR465_1_14', 'TR465_1', 'TR465_14'), ('TR465_1_14', 'TR465_14', 'TR465_1'), ('TR465_1_17', 'TR465_1', 'TR465_17'), ('TR465_1_17', 'TR465_17', 'TR465_1'), ('TR465_1_2', 'TR465_1', 'TR465_2'), ('TR465_1_2', 'TR465_2', 'TR465_1'), ('TR465_1_3', 'TR465_1', 'TR465_3'), ('TR465_1_3', 'TR465_3', 'TR465_1'), ('TR465_20_35', 'TR465_20', 'TR465_35'), ('TR465_20_35', 'TR465_35', 'TR465_20'), ('TR465_21_36', 'TR465_21', 'TR465_36'), ('TR465_21_36', 'TR465_36', 'TR465_21'), ('TR465_22_37', 'TR465_22', 'TR465_37'), ('TR465_22_37', 'TR465_37', 'TR465_22'), ('TR465_23_38', 'TR465_23', 'TR465_38'), ('TR465_23_38', 'TR465_38', 'TR465_23'), ('TR465_2_8', 'TR465_2', 'TR465_8'), ('TR465_2_8', 'TR465_8', 'TR465_2'), ('TR465_3_13', 'TR465_13', 'TR465_3'), ('TR465_3_13', 'TR465_3', 'TR465_13'), ('TR465_4_25', 'TR465_25', 'TR465_4'), ('TR465_4_25', 'TR465_4', 'TR465_25'), ('TR465_4_5', 'TR465_4', 'TR465_5'), ('TR465_4_5', 'TR465_5', 'TR465_4'), ('TR465_5_26', 'TR465_26', 'TR465_5'), ('TR465_5_26', 'TR465_5', 'TR465_26'), ('TR465_6_23', 'TR465_23', 'TR465_6'), ('TR465_6_23', 'TR465_6', 'TR465_23'), ('TR465_6_7', 'TR465_6', 'TR465_7'), ('TR465_6_7', 'TR465_7', 'TR465_6'), ('TR465_7_27', 'TR465_27', 'TR465_7'), ('TR465_7_27', 'TR465_7', 'TR465_27'), ('TR465_8_28', 'TR465_28', 'TR465_8'), ('TR465_8_28', 'TR465_8', 'TR465_28'), ('TR465_9_10', 'TR465_10', 'TR465_9'), ('TR465_9_10', 'TR465_9', 'TR465_10'), ('TR465_9_29', 'TR465_29', 'TR465_9'), ('TR465_9_29', 'TR465_9', 'TR465_29'), ('TR466_1_10', 'TR466_1', 'TR466_10'), ('TR466_1_10', 'TR466_10', 'TR466_1'), ('TR466_1_2', 'TR466_1', 'TR466_2'), ('TR466_1_2', 'TR466_2', 'TR466_1'), ('TR466_1_3', 'TR466_1', 'TR466_3'), ('TR466_1_3', 'TR466_3', 'TR466_1'), ('TR466_1_9', 'TR466_1', 'TR466_9'), ('TR466_1_9', 'TR466_9', 'TR466_1'), ('TR466_2_11', 'TR466_11', 'TR466_2'), ('TR466_2_11', 'TR466_2', 'TR466_11'), ('TR466_2_12', 'TR466_12', 'TR466_2'), ('TR466_2_12', 'TR466_2', 'TR466_12'), ('TR466_2_13', 'TR466_13', 'TR466_2'), ('TR466_2_13', 'TR466_2', 'TR466_13'), ('TR466_3_5', 'TR466_3', 'TR466_5'), ('TR466_3_5', 'TR466_5', 'TR466_3'), ('TR466_4_14', 'TR466_14', 'TR466_4'), ('TR466_4_14', 'TR466_4', 'TR466_14'), ('TR466_4_6', 'TR466_4', 'TR466_6'), ('TR466_4_6', 'TR466_6', 'TR466_4'), ('TR466_5_15', 'TR466_15', 'TR466_5'), ('TR466_5_15', 'TR466_5', 'TR466_15'), ('TR466_6_16', 'TR466_16', 'TR466_6'), ('TR466_6_16', 'TR466_6', 'TR466_16'), ('TR466_7_17', 'TR466_17', 'TR466_7'), ('TR466_7_17', 'TR466_7', 'TR466_17'), ('TR466_7_8', 'TR466_7', 'TR466_8'), ('TR466_7_8', 'TR466_8', 'TR466_7'), ('TR466_8_18', 'TR466_18', 'TR466_8'), ('TR466_8_18', 'TR466_8', 'TR466_18'), ('TR467_1_6', 'TR467_1', 'TR467_6'), ('TR467_1_6', 'TR467_6', 'TR467_1'), ('TR467_1_7', 'TR467_1', 'TR467_7'), ('TR467_1_7', 'TR467_7', 'TR467_1'), ('TR467_2_3', 'TR467_2', 'TR467_3'), ('TR467_2_3', 'TR467_3', 'TR467_2'), ('TR467_2_5', 'TR467_2', 'TR467_5'), ('TR467_2_5', 'TR467_5', 'TR467_2'), ('TR467_3_8', 'TR467_3', 'TR467_8'), ('TR467_3_8', 'TR467_8', 'TR467_3'), ('TR467_4_10', 'TR467_10', 'TR467_4'), ('TR467_4_10', 'TR467_4', 'TR467_10'), ('TR467_4_9', 'TR467_4', 'TR467_9'), ('TR467_4_9', 'TR467_9', 'TR467_4'), ('TR468_10_14', 'TR468_10', 'TR468_14'), ('TR468_10_14', 'TR468_14', 'TR468_10'), ('TR468_11_15', 'TR468_11', 'TR468_15'), ('TR468_11_15', 'TR468_15', 'TR468_11'), ('TR468_11_24', 'TR468_11', 'TR468_24'), ('TR468_11_24', 'TR468_24', 'TR468_11'), ('TR468_12_15', 'TR468_12', 'TR468_15'), ('TR468_12_15', 'TR468_15', 'TR468_12'), ('TR468_12_16', 'TR468_12', 'TR468_16'), ('TR468_12_16', 'TR468_16', 'TR468_12'), ('TR468_12_25', 'TR468_12', 'TR468_25'), ('TR468_12_25', 'TR468_25', 'TR468_12'), ('TR468_13_17', 'TR468_13', 'TR468_17'), ('TR468_13_17', 'TR468_17', 'TR468_13'), ('TR468_13_26', 'TR468_13', 'TR468_26'), ('TR468_13_26', 'TR468_26', 'TR468_13'), ('TR468_14_27', 'TR468_14', 'TR468_27'), ('TR468_14_27', 'TR468_27', 'TR468_14'), ('TR468_16_28', 'TR468_16', 'TR468_28'), ('TR468_16_28', 'TR468_28', 'TR468_16'), ('TR468_17_29', 'TR468_17', 'TR468_29'), ('TR468_17_29', 'TR468_29', 'TR468_17'), ('TR468_18_20', 'TR468_18', 'TR468_20'), ('TR468_18_20', 'TR468_20', 'TR468_18'), ('TR468_18_30', 'TR468_18', 'TR468_30'), ('TR468_18_30', 'TR468_30', 'TR468_18'), ('TR468_1_2', 'TR468_1', 'TR468_2'), ('TR468_1_2', 'TR468_2', 'TR468_1'), ('TR468_20_31', 'TR468_20', 'TR468_31'), ('TR468_20_31', 'TR468_31', 'TR468_20'), ('TR468_2_4', 'TR468_2', 'TR468_4'), ('TR468_2_4', 'TR468_4', 'TR468_2'), ('TR468_3_21', 'TR468_21', 'TR468_3'), ('TR468_3_21', 'TR468_3', 'TR468_21'), ('TR468_3_5', 'TR468_3', 'TR468_5'), ('TR468_3_5', 'TR468_5', 'TR468_3'), ('TR468_4_22', 'TR468_22', 'TR468_4'), ('TR468_4_22', 'TR468_4', 'TR468_22'), ('TR468_5_7', 'TR468_5', 'TR468_7'), ('TR468_5_7', 'TR468_7', 'TR468_5'), ('TR468_6_23', 'TR468_23', 'TR468_6'), ('TR468_6_23', 'TR468_6', 'TR468_23'), ('TR468_6_8', 'TR468_6', 'TR468_8'), ('TR468_6_8', 'TR468_8', 'TR468_6'), ('TR468_7_10', 'TR468_10', 'TR468_7'), ('TR468_7_10', 'TR468_7', 'TR468_10'), ('TR468_8_11', 'TR468_11', 'TR468_8'), ('TR468_8_11', 'TR468_8', 'TR468_11'), ('TR468_9_12', 'TR468_12', 'TR468_9'), ('TR468_9_12', 'TR468_9', 'TR468_12'), ('TR469_10_11', 'TR469_10', 'TR469_11'), ('TR469_10_11', 'TR469_11', 'TR469_10'), ('TR469_10_14', 'TR469_10', 'TR469_14'), ('TR469_10_14', 'TR469_14', 'TR469_10'), ('TR469_10_15', 'TR469_10', 'TR469_15'), ('TR469_10_15', 'TR469_15', 'TR469_10'), ('TR469_10_25', 'TR469_10', 'TR469_25'), ('TR469_10_25', 'TR469_25', 'TR469_10'), ('TR469_11_12', 'TR469_11', 'TR469_12'), ('TR469_11_12', 'TR469_12', 'TR469_11'), ('TR469_11_26', 'TR469_11', 'TR469_26'), ('TR469_11_26', 'TR469_26', 'TR469_11'), ('TR469_11_27', 'TR469_11', 'TR469_27'), ('TR469_11_27', 'TR469_27', 'TR469_11'), ('TR469_12_13', 'TR469_12', 'TR469_13'), ('TR469_12_13', 'TR469_13', 'TR469_12'), ('TR469_12_28', 'TR469_12', 'TR469_28'), ('TR469_12_28', 'TR469_28', 'TR469_12'), ('TR469_13_14', 'TR469_13', 'TR469_14'), ('TR469_13_14', 'TR469_14', 'TR469_13'), ('TR469_14_16', 'TR469_14', 'TR469_16'), ('TR469_14_16', 'TR469_16', 'TR469_14'), ('TR469_14_29', 'TR469_14', 'TR469_29'), ('TR469_14_29', 'TR469_29', 'TR469_14'), ('TR469_16_17', 'TR469_16', 'TR469_17'), ('TR469_16_17', 'TR469_17', 'TR469_16'), ('TR469_16_30', 'TR469_16', 'TR469_30'), ('TR469_16_30', 'TR469_30', 'TR469_16'), ('TR469_16_31', 'TR469_16', 'TR469_31'), ('TR469_16_31', 'TR469_31', 'TR469_16'), ('TR469_17_32', 'TR469_17', 'TR469_32'), ('TR469_17_32', 'TR469_32', 'TR469_17'), ('TR469_1_2', 'TR469_1', 'TR469_2'), ('TR469_1_2', 'TR469_2', 'TR469_1'), ('TR469_1_20', 'TR469_1', 'TR469_20'), ('TR469_1_20', 'TR469_20', 'TR469_1'), ('TR469_1_6', 'TR469_1', 'TR469_6'), ('TR469_1_6', 'TR469_6', 'TR469_1'), ('TR469_2_3', 'TR469_2', 'TR469_3'), ('TR469_2_3', 'TR469_3', 'TR469_2'), ('TR469_3_12', 'TR469_12', 'TR469_3'), ('TR469_3_12', 'TR469_3', 'TR469_12'), ('TR469_3_4', 'TR469_3', 'TR469_4'), ('TR469_3_4', 'TR469_4', 'TR469_3'), ('TR469_4_21', 'TR469_21', 'TR469_4'), ('TR469_4_21', 'TR469_4', 'TR469_21'), ('TR469_5_6', 'TR469_5', 'TR469_6'), ('TR469_5_6', 'TR469_6', 'TR469_5'), ('TR469_5_9', 'TR469_5', 'TR469_9'), ('TR469_5_9', 'TR469_9', 'TR469_5'), ('TR469_9_22', 'TR469_22', 'TR469_9'), ('TR469_9_22', 'TR469_9', 'TR469_22'), ('TR469_9_23', 'TR469_23', 'TR469_9'), ('TR469_9_23', 'TR469_9', 'TR469_23'), ('TR469_9_24', 'TR469_24', 'TR469_9'), ('TR469_9_24', 'TR469_9', 'TR469_24'), ('TR470_1_6', 'TR470_1', 'TR470_6'), ('TR470_1_6', 'TR470_6', 'TR470_1'), ('TR470_1_7', 'TR470_1', 'TR470_7'), ('TR470_1_7', 'TR470_7', 'TR470_1'), ('TR470_2_3', 'TR470_2', 'TR470_3'), ('TR470_2_3', 'TR470_3', 'TR470_2'), ('TR470_2_8', 'TR470_2', 'TR470_8'), ('TR470_2_8', 'TR470_8', 'TR470_2'), ('TR470_4_5', 'TR470_4', 'TR470_5'), ('TR470_4_5', 'TR470_5', 'TR470_4'), ('TR470_4_9', 'TR470_4', 'TR470_9'), ('TR470_4_9', 'TR470_9', 'TR470_4'), ('TR470_5_10', 'TR470_10', 'TR470_5'), ('TR470_5_10', 'TR470_5', 'TR470_10'), ('TR470_6_11', 'TR470_11', 'TR470_6'), ('TR470_6_11', 'TR470_6', 'TR470_11'), ('TR472_1_2', 'TR472_1', 'TR472_2'), ('TR472_1_2', 'TR472_2', 'TR472_1'), ('TR472_1_3', 'TR472_1', 'TR472_3'), ('TR472_1_3', 'TR472_3', 'TR472_1'), ('TR472_1_4', 'TR472_1', 'TR472_4'), ('TR472_1_4', 'TR472_4', 'TR472_1'), ('TR472_1_6', 'TR472_1', 'TR472_6'), ('TR472_1_6', 'TR472_6', 'TR472_1'), ('TR472_2_7', 'TR472_2', 'TR472_7'), ('TR472_2_7', 'TR472_7', 'TR472_2'), ('TR472_3_10', 'TR472_10', 'TR472_3'), ('TR472_3_10', 'TR472_3', 'TR472_10'), ('TR472_3_8', 'TR472_3', 'TR472_8'), ('TR472_3_8', 'TR472_8', 'TR472_3'), ('TR472_3_9', 'TR472_3', 'TR472_9'), ('TR472_3_9', 'TR472_9', 'TR472_3'), ('TR472_4_11', 'TR472_11', 'TR472_4'), ('TR472_4_11', 'TR472_4', 'TR472_11'), ('TR472_4_12', 'TR472_12', 'TR472_4'), ('TR472_4_12', 'TR472_4', 'TR472_12'), ('TR472_4_13', 'TR472_13', 'TR472_4'), ('TR472_4_13', 'TR472_4', 'TR472_13'), ('TR473_10_11', 'TR473_10', 'TR473_11'), ('TR473_10_11', 'TR473_11', 'TR473_10'), ('TR473_10_17', 'TR473_10', 'TR473_17'), ('TR473_10_17', 'TR473_17', 'TR473_10'), ('TR473_11_18', 'TR473_11', 'TR473_18'), ('TR473_11_18', 'TR473_18', 'TR473_11'), ('TR473_13_19', 'TR473_13', 'TR473_19'), ('TR473_13_19', 'TR473_19', 'TR473_13'), ('TR473_13_20', 'TR473_13', 'TR473_20'), ('TR473_13_20', 'TR473_20', 'TR473_13'), ('TR473_13_21', 'TR473_13', 'TR473_21'), ('TR473_13_21', 'TR473_21', 'TR473_13'), ('TR473_2_3', 'TR473_2', 'TR473_3'), ('TR473_2_3', 'TR473_3', 'TR473_2'), ('TR473_2_4', 'TR473_2', 'TR473_4'), ('TR473_2_4', 'TR473_4', 'TR473_2'), ('TR473_3_6', 'TR473_3', 'TR473_6'), ('TR473_3_6', 'TR473_6', 'TR473_3'), ('TR473_4_7', 'TR473_4', 'TR473_7'), ('TR473_4_7', 'TR473_7', 'TR473_4'), ('TR473_4_8', 'TR473_4', 'TR473_8'), ('TR473_4_8', 'TR473_8', 'TR473_4'), ('TR473_5_10', 'TR473_10', 'TR473_5'), ('TR473_5_10', 'TR473_5', 'TR473_10'), ('TR473_5_9', 'TR473_5', 'TR473_9'), ('TR473_5_9', 'TR473_9', 'TR473_5'), ('TR473_7_14', 'TR473_14', 'TR473_7'), ('TR473_7_14', 'TR473_7', 'TR473_14'), ('TR473_7_15', 'TR473_15', 'TR473_7'), ('TR473_7_15', 'TR473_7', 'TR473_15'), ('TR473_7_16', 'TR473_16', 'TR473_7'), ('TR473_7_16', 'TR473_7', 'TR473_16'), ('TR473_8_9', 'TR473_8', 'TR473_9'), ('TR473_8_9', 'TR473_9', 'TR473_8'), ('TR473_9_13', 'TR473_13', 'TR473_9'), ('TR473_9_13', 'TR473_9', 'TR473_13'), ('TR474_1_3', 'TR474_1', 'TR474_3'), ('TR474_1_3', 'TR474_3', 'TR474_1'), ('TR474_1_4', 'TR474_1', 'TR474_4'), ('TR474_1_4', 'TR474_4', 'TR474_1'), ('TR474_2_5', 'TR474_2', 'TR474_5'), ('TR474_2_5', 'TR474_5', 'TR474_2'), ('TR474_2_6', 'TR474_2', 'TR474_6'), ('TR474_2_6', 'TR474_6', 'TR474_2'), ('TR474_3_7', 'TR474_3', 'TR474_7'), ('TR474_3_7', 'TR474_7', 'TR474_3'), ('TR475_1_2', 'TR475_1', 'TR475_2'), ('TR475_1_2', 'TR475_2', 'TR475_1'), ('TR475_1_5', 'TR475_1', 'TR475_5'), ('TR475_1_5', 'TR475_5', 'TR475_1'), ('TR475_1_6', 'TR475_1', 'TR475_6'), ('TR475_1_6', 'TR475_6', 'TR475_1'), ('TR475_1_7', 'TR475_1', 'TR475_7'), ('TR475_1_7', 'TR475_7', 'TR475_1'), ('TR475_2_3', 'TR475_2', 'TR475_3'), ('TR475_2_3', 'TR475_3', 'TR475_2'), ('TR475_2_8', 'TR475_2', 'TR475_8'), ('TR475_2_8', 'TR475_8', 'TR475_2'), ('TR475_2_9', 'TR475_2', 'TR475_9'), ('TR475_2_9', 'TR475_9', 'TR475_2'), ('TR475_3_10', 'TR475_10', 'TR475_3'), ('TR475_3_10', 'TR475_3', 'TR475_10'), ('TR475_3_11', 'TR475_11', 'TR475_3'), ('TR475_3_11', 'TR475_3', 'TR475_11'), ('TR475_3_4', 'TR475_3', 'TR475_4'), ('TR475_3_4', 'TR475_4', 'TR475_3'), ('TR475_4_5', 'TR475_4', 'TR475_5'), ('TR475_4_5', 'TR475_5', 'TR475_4'), ('TR475_5_12', 'TR475_12', 'TR475_5'), ('TR475_5_12', 'TR475_5', 'TR475_12'), ('TR475_5_13', 'TR475_13', 'TR475_5'), ('TR475_5_13', 'TR475_5', 'TR475_13'), ('TR476_10_11', 'TR476_10', 'TR476_11'), ('TR476_10_11', 'TR476_11', 'TR476_10'), ('TR476_10_21', 'TR476_10', 'TR476_21'), ('TR476_10_21', 'TR476_21', 'TR476_10'), ('TR476_10_22', 'TR476_10', 'TR476_22'), ('TR476_10_22', 'TR476_22', 'TR476_10'), ('TR476_11_23', 'TR476_11', 'TR476_23'), ('TR476_11_23', 'TR476_23', 'TR476_11'), ('TR476_11_24', 'TR476_11', 'TR476_24'), ('TR476_11_24', 'TR476_24', 'TR476_11'), ('TR476_11_25', 'TR476_11', 'TR476_25'), ('TR476_11_25', 'TR476_25', 'TR476_11'), ('TR476_12_13', 'TR476_12', 'TR476_13'), ('TR476_12_13', 'TR476_13', 'TR476_12'), ('TR476_12_26', 'TR476_12', 'TR476_26'), ('TR476_12_26', 'TR476_26', 'TR476_12'), ('TR476_13_27', 'TR476_13', 'TR476_27'), ('TR476_13_27', 'TR476_27', 'TR476_13'), ('TR476_14_15', 'TR476_14', 'TR476_15'), ('TR476_14_15', 'TR476_15', 'TR476_14'), ('TR476_14_28', 'TR476_14', 'TR476_28'), ('TR476_14_28', 'TR476_28', 'TR476_14'), ('TR476_15_29', 'TR476_15', 'TR476_29'), ('TR476_15_29', 'TR476_29', 'TR476_15'), ('TR476_16_30', 'TR476_16', 'TR476_30'), ('TR476_16_30', 'TR476_30', 'TR476_16'), ('TR476_1_2', 'TR476_1', 'TR476_2'), ('TR476_1_2', 'TR476_2', 'TR476_1'), ('TR476_1_6', 'TR476_1', 'TR476_6'), ('TR476_1_6', 'TR476_6', 'TR476_1'), ('TR476_2_10', 'TR476_10', 'TR476_2'), ('TR476_2_10', 'TR476_2', 'TR476_10'), ('TR476_2_3', 'TR476_2', 'TR476_3'), ('TR476_2_3', 'TR476_3', 'TR476_2'), ('TR476_2_9', 'TR476_2', 'TR476_9'), ('TR476_2_9', 'TR476_9', 'TR476_2'), ('TR476_3_4', 'TR476_3', 'TR476_4'), ('TR476_3_4', 'TR476_4', 'TR476_3'), ('TR476_4_17', 'TR476_17', 'TR476_4'), ('TR476_4_17', 'TR476_4', 'TR476_17'), ('TR476_4_5', 'TR476_4', 'TR476_5'), ('TR476_4_5', 'TR476_5', 'TR476_4'), ('TR476_5_18', 'TR476_18', 'TR476_5'), ('TR476_5_18', 'TR476_5', 'TR476_18'), ('TR476_5_19', 'TR476_19', 'TR476_5'), ('TR476_5_19', 'TR476_5', 'TR476_19'), ('TR476_5_6', 'TR476_5', 'TR476_6'), ('TR476_5_6', 'TR476_6', 'TR476_5'), ('TR476_6_20', 'TR476_20', 'TR476_6'), ('TR476_6_20', 'TR476_6', 'TR476_20'), ('TR476_9_16', 'TR476_16', 'TR476_9'), ('TR476_9_16', 'TR476_9', 'TR476_16'), ('TR477_1_2', 'TR477_1', 'TR477_2'), ('TR477_1_2', 'TR477_2', 'TR477_1'), ('TR477_1_3', 'TR477_1', 'TR477_3'), ('TR477_1_3', 'TR477_3', 'TR477_1'), ('TR477_1_4', 'TR477_1', 'TR477_4'), ('TR477_1_4', 'TR477_4', 'TR477_1'), ('TR477_1_6', 'TR477_1', 'TR477_6'), ('TR477_1_6', 'TR477_6', 'TR477_1'), ('TR477_2_5', 'TR477_2', 'TR477_5'), ('TR477_2_5', 'TR477_5', 'TR477_2'), ('TR477_2_7', 'TR477_2', 'TR477_7'), ('TR477_2_7', 'TR477_7', 'TR477_2'), ('TR477_2_8', 'TR477_2', 'TR477_8'), ('TR477_2_8', 'TR477_8', 'TR477_2'), ('TR477_3_10', 'TR477_10', 'TR477_3'), ('TR477_3_10', 'TR477_3', 'TR477_10'), ('TR477_3_11', 'TR477_11', 'TR477_3'), ('TR477_3_11', 'TR477_3', 'TR477_11'), ('TR477_3_9', 'TR477_3', 'TR477_9'), ('TR477_3_9', 'TR477_9', 'TR477_3'), ('TR477_4_12', 'TR477_12', 'TR477_4'), ('TR477_4_12', 'TR477_4', 'TR477_12'), ('TR478_1_2', 'TR478_1', 'TR478_2'), ('TR478_1_2', 'TR478_2', 'TR478_1'), ('TR478_1_3', 'TR478_1', 'TR478_3'), ('TR478_1_3', 'TR478_3', 'TR478_1'), ('TR478_1_8', 'TR478_1', 'TR478_8'), ('TR478_1_8', 'TR478_8', 'TR478_1'), ('TR478_2_10', 'TR478_10', 'TR478_2'), ('TR478_2_10', 'TR478_2', 'TR478_10'), ('TR478_2_6', 'TR478_2', 'TR478_6'), ('TR478_2_6', 'TR478_6', 'TR478_2'), ('TR478_2_9', 'TR478_2', 'TR478_9'), ('TR478_2_9', 'TR478_9', 'TR478_2'), ('TR478_3_11', 'TR478_11', 'TR478_3'), ('TR478_3_11', 'TR478_3', 'TR478_11'), ('TR478_3_12', 'TR478_12', 'TR478_3'), ('TR478_3_12', 'TR478_3', 'TR478_12'), ('TR478_3_4', 'TR478_3', 'TR478_4'), ('TR478_3_4', 'TR478_4', 'TR478_3'), ('TR478_4_13', 'TR478_13', 'TR478_4'), ('TR478_4_13', 'TR478_4', 'TR478_13'), ('TR478_4_14', 'TR478_14', 'TR478_4'), ('TR478_4_14', 'TR478_4', 'TR478_14'), ('TR478_4_5', 'TR478_4', 'TR478_5'), ('TR478_4_5', 'TR478_5', 'TR478_4'), ('TR478_5_15', 'TR478_15', 'TR478_5'), ('TR478_5_15', 'TR478_5', 'TR478_15'), ('TR478_6_16', 'TR478_16', 'TR478_6'), ('TR478_6_16', 'TR478_6', 'TR478_16'), ('TR478_6_17', 'TR478_17', 'TR478_6'), ('TR478_6_17', 'TR478_6', 'TR478_17'), ('TR478_6_7', 'TR478_6', 'TR478_7'), ('TR478_6_7', 'TR478_7', 'TR478_6'), ('TR478_7_18', 'TR478_18', 'TR478_7'), ('TR478_7_18', 'TR478_7', 'TR478_18'), ('TR480_10_11', 'TR480_10', 'TR480_11'), ('TR480_10_11', 'TR480_11', 'TR480_10'), ('TR480_10_39', 'TR480_10', 'TR480_39'), ('TR480_10_39', 'TR480_39', 'TR480_10'), ('TR480_10_40', 'TR480_10', 'TR480_40'), ('TR480_10_40', 'TR480_40', 'TR480_10'), ('TR480_11_12', 'TR480_11', 'TR480_12'), ('TR480_11_12', 'TR480_12', 'TR480_11'), ('TR480_11_41', 'TR480_11', 'TR480_41'), ('TR480_11_41', 'TR480_41', 'TR480_11'), ('TR480_11_42', 'TR480_11', 'TR480_42'), ('TR480_11_42', 'TR480_42', 'TR480_11'), ('TR480_12_13', 'TR480_12', 'TR480_13'), ('TR480_12_13', 'TR480_13', 'TR480_12'), ('TR480_12_43', 'TR480_12', 'TR480_43'), ('TR480_12_43', 'TR480_43', 'TR480_12'), ('TR480_12_44', 'TR480_12', 'TR480_44'), ('TR480_12_44', 'TR480_44', 'TR480_12'), ('TR480_13_14', 'TR480_13', 'TR480_14'), ('TR480_13_14', 'TR480_14', 'TR480_13'), ('TR480_13_15', 'TR480_13', 'TR480_15'), ('TR480_13_15', 'TR480_15', 'TR480_13'), ('TR480_14_18', 'TR480_14', 'TR480_18'), ('TR480_14_18', 'TR480_18', 'TR480_14'), ('TR480_14_45', 'TR480_14', 'TR480_45'), ('TR480_14_45', 'TR480_45', 'TR480_14'), ('TR480_14_46', 'TR480_14', 'TR480_46'), ('TR480_14_46', 'TR480_46', 'TR480_14'), ('TR480_15_16', 'TR480_15', 'TR480_16'), ('TR480_15_16', 'TR480_16', 'TR480_15'), ('TR480_15_47', 'TR480_15', 'TR480_47'), ('TR480_15_47', 'TR480_47', 'TR480_15'), ('TR480_15_48', 'TR480_15', 'TR480_48'), ('TR480_15_48', 'TR480_48', 'TR480_15'), ('TR480_16_17', 'TR480_16', 'TR480_17'), ('TR480_16_17', 'TR480_17', 'TR480_16'), ('TR480_16_49', 'TR480_16', 'TR480_49'), ('TR480_16_49', 'TR480_49', 'TR480_16'), ('TR480_16_50', 'TR480_16', 'TR480_50'), ('TR480_16_50', 'TR480_50', 'TR480_16'), ('TR480_17_51', 'TR480_17', 'TR480_51'), ('TR480_17_51', 'TR480_51', 'TR480_17'), ('TR480_18_19', 'TR480_18', 'TR480_19'), ('TR480_18_19', 'TR480_19', 'TR480_18'), ('TR480_18_52', 'TR480_18', 'TR480_52'), ('TR480_18_52', 'TR480_52', 'TR480_18'), ('TR480_18_53', 'TR480_18', 'TR480_53'), ('TR480_18_53', 'TR480_53', 'TR480_18'), ('TR480_19_54', 'TR480_19', 'TR480_54'), ('TR480_19_54', 'TR480_54', 'TR480_19'), ('TR480_1_2', 'TR480_1', 'TR480_2'), ('TR480_1_2', 'TR480_2', 'TR480_1'), ('TR480_1_20', 'TR480_1', 'TR480_20'), ('TR480_1_20', 'TR480_20', 'TR480_1'), ('TR480_1_21', 'TR480_1', 'TR480_21'), ('TR480_1_21', 'TR480_21', 'TR480_1'), ('TR480_1_22', 'TR480_1', 'TR480_22'), ('TR480_1_22', 'TR480_22', 'TR480_1'), ('TR480_2_23', 'TR480_2', 'TR480_23'), ('TR480_2_23', 'TR480_23', 'TR480_2'), ('TR480_2_24', 'TR480_2', 'TR480_24'), ('TR480_2_24', 'TR480_24', 'TR480_2'), ('TR480_2_3', 'TR480_2', 'TR480_3'), ('TR480_2_3', 'TR480_3', 'TR480_2'), ('TR480_3_25', 'TR480_25', 'TR480_3'), ('TR480_3_25', 'TR480_3', 'TR480_25'), ('TR480_3_26', 'TR480_26', 'TR480_3'), ('TR480_3_26', 'TR480_3', 'TR480_26'), ('TR480_3_4', 'TR480_3', 'TR480_4'), ('TR480_3_4', 'TR480_4', 'TR480_3'), ('TR480_4_27', 'TR480_27', 'TR480_4'), ('TR480_4_27', 'TR480_4', 'TR480_27'), ('TR480_4_28', 'TR480_28', 'TR480_4'), ('TR480_4_28', 'TR480_4', 'TR480_28'), ('TR480_4_5', 'TR480_4', 'TR480_5'), ('TR480_4_5', 'TR480_5', 'TR480_4'), ('TR480_5_29', 'TR480_29', 'TR480_5'), ('TR480_5_29', 'TR480_5', 'TR480_29'), ('TR480_5_30', 'TR480_30', 'TR480_5'), ('TR480_5_30', 'TR480_5', 'TR480_30'), ('TR480_5_6', 'TR480_5', 'TR480_6'), ('TR480_5_6', 'TR480_6', 'TR480_5'), ('TR480_6_31', 'TR480_31', 'TR480_6'), ('TR480_6_31', 'TR480_6', 'TR480_31'), ('TR480_6_32', 'TR480_32', 'TR480_6'), ('TR480_6_32', 'TR480_6', 'TR480_32'), ('TR480_6_7', 'TR480_6', 'TR480_7'), ('TR480_6_7', 'TR480_7', 'TR480_6'), ('TR480_7_33', 'TR480_33', 'TR480_7'), ('TR480_7_33', 'TR480_7', 'TR480_33'), ('TR480_7_34', 'TR480_34', 'TR480_7'), ('TR480_7_34', 'TR480_7', 'TR480_34'), ('TR480_7_8', 'TR480_7', 'TR480_8'), ('TR480_7_8', 'TR480_8', 'TR480_7'), ('TR480_8_35', 'TR480_35', 'TR480_8'), ('TR480_8_35', 'TR480_8', 'TR480_35'), ('TR480_8_36', 'TR480_36', 'TR480_8'), ('TR480_8_36', 'TR480_8', 'TR480_36'), ('TR480_8_9', 'TR480_8', 'TR480_9'), ('TR480_8_9', 'TR480_9', 'TR480_8'), ('TR480_9_10', 'TR480_10', 'TR480_9'), ('TR480_9_10', 'TR480_9', 'TR480_10'), ('TR480_9_37', 'TR480_37', 'TR480_9'), ('TR480_9_37', 'TR480_9', 'TR480_37'), ('TR480_9_38', 'TR480_38', 'TR480_9'), ('TR480_9_38', 'TR480_9', 'TR480_38'), ('TR481_10_11', 'TR481_10', 'TR481_11'), ('TR481_10_11', 'TR481_11', 'TR481_10'), ('TR481_10_43', 'TR481_10', 'TR481_43'), ('TR481_10_43', 'TR481_43', 'TR481_10'), ('TR481_11_12', 'TR481_11', 'TR481_12'), ('TR481_11_12', 'TR481_12', 'TR481_11'), ('TR481_11_44', 'TR481_11', 'TR481_44'), ('TR481_11_44', 'TR481_44', 'TR481_11'), ('TR481_11_45', 'TR481_11', 'TR481_45'), ('TR481_11_45', 'TR481_45', 'TR481_11'), ('TR481_12_13', 'TR481_12', 'TR481_13'), ('TR481_12_13', 'TR481_13', 'TR481_12'), ('TR481_12_46', 'TR481_12', 'TR481_46'), ('TR481_12_46', 'TR481_46', 'TR481_12'), ('TR481_12_47', 'TR481_12', 'TR481_47'), ('TR481_12_47', 'TR481_47', 'TR481_12'), ('TR481_13_14', 'TR481_13', 'TR481_14'), ('TR481_13_14', 'TR481_14', 'TR481_13'), ('TR481_13_48', 'TR481_13', 'TR481_48'), ('TR481_13_48', 'TR481_48', 'TR481_13'), ('TR481_13_49', 'TR481_13', 'TR481_49'), ('TR481_13_49', 'TR481_49', 'TR481_13'), ('TR481_14_15', 'TR481_14', 'TR481_15'), ('TR481_14_15', 'TR481_15', 'TR481_14'), ('TR481_14_50', 'TR481_14', 'TR481_50'), ('TR481_14_50', 'TR481_50', 'TR481_14'), ('TR481_14_51', 'TR481_14', 'TR481_51'), ('TR481_14_51', 'TR481_51', 'TR481_14'), ('TR481_15_16', 'TR481_15', 'TR481_16'), ('TR481_15_16', 'TR481_16', 'TR481_15'), ('TR481_15_52', 'TR481_15', 'TR481_52'), ('TR481_15_52', 'TR481_52', 'TR481_15'), ('TR481_15_53', 'TR481_15', 'TR481_53'), ('TR481_15_53', 'TR481_53', 'TR481_15'), ('TR481_16_17', 'TR481_16', 'TR481_17'), ('TR481_16_17', 'TR481_17', 'TR481_16'), ('TR481_16_54', 'TR481_16', 'TR481_54'), ('TR481_16_54', 'TR481_54', 'TR481_16'), ('TR481_16_55', 'TR481_16', 'TR481_55'), ('TR481_16_55', 'TR481_55', 'TR481_16'), ('TR481_17_18', 'TR481_17', 'TR481_18'), ('TR481_17_18', 'TR481_18', 'TR481_17'), ('TR481_17_56', 'TR481_17', 'TR481_56'), ('TR481_17_56', 'TR481_56', 'TR481_17'), ('TR481_17_57', 'TR481_17', 'TR481_57'), ('TR481_17_57', 'TR481_57', 'TR481_17'), ('TR481_18_19', 'TR481_18', 'TR481_19'), ('TR481_18_19', 'TR481_19', 'TR481_18'), ('TR481_19_21', 'TR481_19', 'TR481_21'), ('TR481_19_21', 'TR481_21', 'TR481_19'), ('TR481_19_22', 'TR481_19', 'TR481_22'), ('TR481_19_22', 'TR481_22', 'TR481_19'), ('TR481_1_2', 'TR481_1', 'TR481_2'), ('TR481_1_2', 'TR481_2', 'TR481_1'), ('TR481_1_25', 'TR481_1', 'TR481_25'), ('TR481_1_25', 'TR481_25', 'TR481_1'), ('TR481_1_26', 'TR481_1', 'TR481_26'), ('TR481_1_26', 'TR481_26', 'TR481_1'), ('TR481_1_3', 'TR481_1', 'TR481_3'), ('TR481_1_3', 'TR481_3', 'TR481_1'), ('TR481_21_24', 'TR481_21', 'TR481_24'), ('TR481_21_24', 'TR481_24', 'TR481_21'), ('TR481_21_58', 'TR481_21', 'TR481_58'), ('TR481_21_58', 'TR481_58', 'TR481_21'), ('TR481_21_59', 'TR481_21', 'TR481_59'), ('TR481_21_59', 'TR481_59', 'TR481_21'), ('TR481_22_23', 'TR481_22', 'TR481_23'), ('TR481_22_23', 'TR481_23', 'TR481_22'), ('TR481_22_60', 'TR481_22', 'TR481_60'), ('TR481_22_60', 'TR481_60', 'TR481_22'), ('TR481_22_61', 'TR481_22', 'TR481_61'), ('TR481_22_61', 'TR481_61', 'TR481_22'), ('TR481_23_62', 'TR481_23', 'TR481_62'), ('TR481_23_62', 'TR481_62', 'TR481_23'), ('TR481_23_63', 'TR481_23', 'TR481_63'), ('TR481_23_63', 'TR481_63', 'TR481_23'), ('TR481_23_64', 'TR481_23', 'TR481_64'), ('TR481_23_64', 'TR481_64', 'TR481_23'), ('TR481_24_65', 'TR481_24', 'TR481_65'), ('TR481_24_65', 'TR481_65', 'TR481_24'), ('TR481_24_66', 'TR481_24', 'TR481_66'), ('TR481_24_66', 'TR481_66', 'TR481_24'), ('TR481_24_67', 'TR481_24', 'TR481_67'), ('TR481_24_67', 'TR481_67', 'TR481_24'), ('TR481_2_27', 'TR481_2', 'TR481_27'), ('TR481_2_27', 'TR481_27', 'TR481_2'), ('TR481_3_28', 'TR481_28', 'TR481_3'), ('TR481_3_28', 'TR481_3', 'TR481_28'), ('TR481_3_29', 'TR481_29', 'TR481_3'), ('TR481_3_29', 'TR481_3', 'TR481_29'), ('TR481_3_4', 'TR481_3', 'TR481_4'), ('TR481_3_4', 'TR481_4', 'TR481_3'), ('TR481_4_30', 'TR481_30', 'TR481_4'), ('TR481_4_30', 'TR481_4', 'TR481_30'), ('TR481_4_31', 'TR481_31', 'TR481_4'), ('TR481_4_31', 'TR481_4', 'TR481_31'), ('TR481_4_5', 'TR481_4', 'TR481_5'), ('TR481_4_5', 'TR481_5', 'TR481_4'), ('TR481_5_32', 'TR481_32', 'TR481_5'), ('TR481_5_32', 'TR481_5', 'TR481_32'), ('TR481_5_33', 'TR481_33', 'TR481_5'), ('TR481_5_33', 'TR481_5', 'TR481_33'), ('TR481_5_6', 'TR481_5', 'TR481_6'), ('TR481_5_6', 'TR481_6', 'TR481_5'), ('TR481_6_34', 'TR481_34', 'TR481_6'), ('TR481_6_34', 'TR481_6', 'TR481_34'), ('TR481_6_35', 'TR481_35', 'TR481_6'), ('TR481_6_35', 'TR481_6', 'TR481_35'), ('TR481_6_7', 'TR481_6', 'TR481_7'), ('TR481_6_7', 'TR481_7', 'TR481_6'), ('TR481_7_36', 'TR481_36', 'TR481_7'), ('TR481_7_36', 'TR481_7', 'TR481_36'), ('TR481_7_37', 'TR481_37', 'TR481_7'), ('TR481_7_37', 'TR481_7', 'TR481_37'), ('TR481_7_8', 'TR481_7', 'TR481_8'), ('TR481_7_8', 'TR481_8', 'TR481_7'), ('TR481_8_38', 'TR481_38', 'TR481_8'), ('TR481_8_38', 'TR481_8', 'TR481_38'), ('TR481_8_39', 'TR481_39', 'TR481_8'), ('TR481_8_39', 'TR481_8', 'TR481_39'), ('TR481_8_9', 'TR481_8', 'TR481_9'), ('TR481_8_9', 'TR481_9', 'TR481_8'), ('TR481_9_40', 'TR481_40', 'TR481_9'), ('TR481_9_40', 'TR481_9', 'TR481_40'), ('TR481_9_41', 'TR481_41', 'TR481_9'), ('TR481_9_41', 'TR481_9', 'TR481_41'), ('TR481_9_42', 'TR481_42', 'TR481_9'), ('TR481_9_42', 'TR481_9', 'TR481_42'), ('TR482_1_2', 'TR482_1', 'TR482_2'), ('TR482_1_2', 'TR482_2', 'TR482_1'), ('TR482_1_3', 'TR482_1', 'TR482_3'), ('TR482_1_3', 'TR482_3', 'TR482_1'), ('TR482_1_8', 'TR482_1', 'TR482_8'), ('TR482_1_8', 'TR482_8', 'TR482_1'), ('TR482_1_9', 'TR482_1', 'TR482_9'), ('TR482_1_9', 'TR482_9', 'TR482_1'), ('TR482_2_10', 'TR482_10', 'TR482_2'), ('TR482_2_10', 'TR482_2', 'TR482_10'), ('TR482_3_5', 'TR482_3', 'TR482_5'), ('TR482_3_5', 'TR482_5', 'TR482_3'), ('TR482_4_11', 'TR482_11', 'TR482_4'), ('TR482_4_11', 'TR482_4', 'TR482_11'), ('TR482_4_6', 'TR482_4', 'TR482_6'), ('TR482_4_6', 'TR482_6', 'TR482_4'), ('TR482_5_7', 'TR482_5', 'TR482_7'), ('TR482_5_7', 'TR482_7', 'TR482_5'), ('TR482_6_12', 'TR482_12', 'TR482_6'), ('TR482_6_12', 'TR482_6', 'TR482_12'), ('TR482_7_13', 'TR482_13', 'TR482_7'), ('TR482_7_13', 'TR482_7', 'TR482_13'), ('TR483_1_12', 'TR483_1', 'TR483_12'), ('TR483_1_12', 'TR483_12', 'TR483_1'), ('TR483_1_6', 'TR483_1', 'TR483_6'), ('TR483_1_6', 'TR483_6', 'TR483_1'), ('TR483_2_11', 'TR483_11', 'TR483_2'), ('TR483_2_11', 'TR483_2', 'TR483_11'), ('TR483_2_3', 'TR483_2', 'TR483_3'), ('TR483_2_3', 'TR483_3', 'TR483_2'), ('TR483_3_10', 'TR483_10', 'TR483_3'), ('TR483_3_10', 'TR483_3', 'TR483_10'), ('TR483_4_5', 'TR483_4', 'TR483_5'), ('TR483_4_5', 'TR483_5', 'TR483_4'), ('TR483_4_9', 'TR483_4', 'TR483_9'), ('TR483_4_9', 'TR483_9', 'TR483_4'), ('TR483_5_8', 'TR483_5', 'TR483_8'), ('TR483_5_8', 'TR483_8', 'TR483_5'), ('TR483_6_7', 'TR483_6', 'TR483_7'), ('TR483_6_7', 'TR483_7', 'TR483_6'), ('TR483_7_13', 'TR483_13', 'TR483_7'), ('TR483_7_13', 'TR483_7', 'TR483_13'), ('TR484_1_10', 'TR484_1', 'TR484_10'), ('TR484_1_10', 'TR484_10', 'TR484_1'), ('TR484_1_11', 'TR484_1', 'TR484_11'), ('TR484_1_11', 'TR484_11', 'TR484_1'), ('TR484_1_2', 'TR484_1', 'TR484_2'), ('TR484_1_2', 'TR484_2', 'TR484_1'), ('TR484_1_9', 'TR484_1', 'TR484_9'), ('TR484_1_9', 'TR484_9', 'TR484_1'), ('TR484_2_12', 'TR484_12', 'TR484_2'), ('TR484_2_12', 'TR484_2', 'TR484_12'), ('TR484_2_13', 'TR484_13', 'TR484_2'), ('TR484_2_13', 'TR484_2', 'TR484_13'), ('TR484_2_3', 'TR484_2', 'TR484_3'), ('TR484_2_3', 'TR484_3', 'TR484_2'), ('TR484_3_14', 'TR484_14', 'TR484_3'), ('TR484_3_14', 'TR484_3', 'TR484_14'), ('TR484_3_15', 'TR484_15', 'TR484_3'), ('TR484_3_15', 'TR484_3', 'TR484_15'), ('TR484_3_4', 'TR484_3', 'TR484_4'), ('TR484_3_4', 'TR484_4', 'TR484_3'), ('TR484_4_16', 'TR484_16', 'TR484_4'), ('TR484_4_16', 'TR484_4', 'TR484_16'), ('TR484_4_17', 'TR484_17', 'TR484_4'), ('TR484_4_17', 'TR484_4', 'TR484_17'), ('TR484_4_5', 'TR484_4', 'TR484_5'), ('TR484_4_5', 'TR484_5', 'TR484_4'), ('TR484_5_6', 'TR484_5', 'TR484_6'), ('TR484_5_6', 'TR484_6', 'TR484_5'), ('TR484_6_18', 'TR484_18', 'TR484_6'), ('TR484_6_18', 'TR484_6', 'TR484_18'), ('TR484_6_19', 'TR484_19', 'TR484_6'), ('TR484_6_19', 'TR484_6', 'TR484_19'), ('TR484_6_7', 'TR484_6', 'TR484_7'), ('TR484_6_7', 'TR484_7', 'TR484_6'), ('TR484_7_20', 'TR484_20', 'TR484_7'), ('TR484_7_20', 'TR484_7', 'TR484_20'), ('TR484_7_21', 'TR484_21', 'TR484_7'), ('TR484_7_21', 'TR484_7', 'TR484_21'), ('TR484_7_8', 'TR484_7', 'TR484_8'), ('TR484_7_8', 'TR484_8', 'TR484_7'), ('TR484_8_22', 'TR484_22', 'TR484_8'), ('TR484_8_22', 'TR484_8', 'TR484_22'), ('TR485_10_11', 'TR485_10', 'TR485_11'), ('TR485_10_11', 'TR485_11', 'TR485_10'), ('TR485_10_34', 'TR485_10', 'TR485_34'), ('TR485_10_34', 'TR485_34', 'TR485_10'), ('TR485_10_35', 'TR485_10', 'TR485_35'), ('TR485_10_35', 'TR485_35', 'TR485_10'), ('TR485_11_22', 'TR485_11', 'TR485_22'), ('TR485_11_22', 'TR485_22', 'TR485_11'), ('TR485_11_36', 'TR485_11', 'TR485_36'), ('TR485_11_36', 'TR485_36', 'TR485_11'), ('TR485_11_37', 'TR485_11', 'TR485_37'), ('TR485_11_37', 'TR485_37', 'TR485_11'), ('TR485_12_13', 'TR485_12', 'TR485_13'), ('TR485_12_13', 'TR485_13', 'TR485_12'), ('TR485_12_23', 'TR485_12', 'TR485_23'), ('TR485_12_23', 'TR485_23', 'TR485_12'), ('TR485_12_38', 'TR485_12', 'TR485_38'), ('TR485_12_38', 'TR485_38', 'TR485_12'), ('TR485_12_39', 'TR485_12', 'TR485_39'), ('TR485_12_39', 'TR485_39', 'TR485_12'), ('TR485_13_14', 'TR485_13', 'TR485_14'), ('TR485_13_14', 'TR485_14', 'TR485_13'), ('TR485_13_40', 'TR485_13', 'TR485_40'), ('TR485_13_40', 'TR485_40', 'TR485_13'), ('TR485_13_41', 'TR485_13', 'TR485_41'), ('TR485_13_41', 'TR485_41', 'TR485_13'), ('TR485_14_19', 'TR485_14', 'TR485_19'), ('TR485_14_19', 'TR485_19', 'TR485_14'), ('TR485_14_20', 'TR485_14', 'TR485_20'), ('TR485_14_20', 'TR485_20', 'TR485_14'), ('TR485_16_17', 'TR485_16', 'TR485_17'), ('TR485_16_17', 'TR485_17', 'TR485_16'), ('TR485_16_42', 'TR485_16', 'TR485_42'), ('TR485_16_42', 'TR485_42', 'TR485_16'), ('TR485_17_43', 'TR485_17', 'TR485_43'), ('TR485_17_43', 'TR485_43', 'TR485_17'), ('TR485_18_44', 'TR485_18', 'TR485_44'), ('TR485_18_44', 'TR485_44', 'TR485_18'), ('TR485_18_45', 'TR485_18', 'TR485_45'), ('TR485_18_45', 'TR485_45', 'TR485_18'), ('TR485_18_46', 'TR485_18', 'TR485_46'), ('TR485_18_46', 'TR485_46', 'TR485_18'), ('TR485_19_47', 'TR485_19', 'TR485_47'), ('TR485_19_47', 'TR485_47', 'TR485_19'), ('TR485_1_2', 'TR485_1', 'TR485_2'), ('TR485_1_2', 'TR485_2', 'TR485_1'), ('TR485_1_6', 'TR485_1', 'TR485_6'), ('TR485_1_6', 'TR485_6', 'TR485_1'), ('TR485_20_48', 'TR485_20', 'TR485_48'), ('TR485_20_48', 'TR485_48', 'TR485_20'), ('TR485_20_49', 'TR485_20', 'TR485_49'), ('TR485_20_49', 'TR485_49', 'TR485_20'), ('TR485_20_50', 'TR485_20', 'TR485_50'), ('TR485_20_50', 'TR485_50', 'TR485_20'), ('TR485_21_51', 'TR485_21', 'TR485_51'), ('TR485_21_51', 'TR485_51', 'TR485_21'), ('TR485_21_52', 'TR485_21', 'TR485_52'), ('TR485_21_52', 'TR485_52', 'TR485_21'), ('TR485_21_53', 'TR485_21', 'TR485_53'), ('TR485_21_53', 'TR485_53', 'TR485_21'), ('TR485_22_24', 'TR485_22', 'TR485_24'), ('TR485_22_24', 'TR485_24', 'TR485_22'), ('TR485_22_54', 'TR485_22', 'TR485_54'), ('TR485_22_54', 'TR485_54', 'TR485_22'), ('TR485_23_24', 'TR485_23', 'TR485_24'), ('TR485_23_24', 'TR485_24', 'TR485_23'), ('TR485_23_55', 'TR485_23', 'TR485_55'), ('TR485_23_55', 'TR485_55', 'TR485_23'), ('TR485_24_56', 'TR485_24', 'TR485_56'), ('TR485_24_56', 'TR485_56', 'TR485_24'), ('TR485_2_3', 'TR485_2', 'TR485_3'), ('TR485_2_3', 'TR485_3', 'TR485_2'), ('TR485_3_25', 'TR485_25', 'TR485_3'), ('TR485_3_25', 'TR485_3', 'TR485_25'), ('TR485_3_26', 'TR485_26', 'TR485_3'), ('TR485_3_26', 'TR485_3', 'TR485_26'), ('TR485_3_4', 'TR485_3', 'TR485_4'), ('TR485_3_4', 'TR485_4', 'TR485_3'), ('TR485_4_27', 'TR485_27', 'TR485_4'), ('TR485_4_27', 'TR485_4', 'TR485_27'), ('TR485_4_5', 'TR485_4', 'TR485_5'), ('TR485_4_5', 'TR485_5', 'TR485_4'), ('TR485_4_7', 'TR485_4', 'TR485_7'), ('TR485_4_7', 'TR485_7', 'TR485_4'), ('TR485_5_18', 'TR485_18', 'TR485_5'), ('TR485_5_18', 'TR485_5', 'TR485_18'), ('TR485_5_22', 'TR485_22', 'TR485_5'), ('TR485_5_22', 'TR485_5', 'TR485_22'), ('TR485_5_6', 'TR485_5', 'TR485_6'), ('TR485_5_6', 'TR485_6', 'TR485_5'), ('TR485_6_28', 'TR485_28', 'TR485_6'), ('TR485_6_28', 'TR485_6', 'TR485_28'), ('TR485_6_29', 'TR485_29', 'TR485_6'), ('TR485_6_29', 'TR485_6', 'TR485_29'), ('TR485_7_30', 'TR485_30', 'TR485_7'), ('TR485_7_30', 'TR485_7', 'TR485_30'), ('TR485_7_31', 'TR485_31', 'TR485_7'), ('TR485_7_31', 'TR485_7', 'TR485_31'), ('TR485_7_8', 'TR485_7', 'TR485_8'), ('TR485_7_8', 'TR485_8', 'TR485_7'), ('TR485_8_24', 'TR485_24', 'TR485_8'), ('TR485_8_24', 'TR485_8', 'TR485_24'), ('TR485_8_32', 'TR485_32', 'TR485_8'), ('TR485_8_32', 'TR485_8', 'TR485_32'), ('TR485_8_33', 'TR485_33', 'TR485_8'), ('TR485_8_33', 'TR485_8', 'TR485_33'), ('TR485_9_10', 'TR485_10', 'TR485_9'), ('TR485_9_10', 'TR485_9', 'TR485_10'), ('TR485_9_14', 'TR485_14', 'TR485_9'), ('TR485_9_14', 'TR485_9', 'TR485_14'), ('TR485_9_21', 'TR485_21', 'TR485_9'), ('TR485_9_21', 'TR485_9', 'TR485_21'), ('TR485_9_23', 'TR485_23', 'TR485_9'), ('TR485_9_23', 'TR485_9', 'TR485_23'), ('TR486_1_6', 'TR486_1', 'TR486_6'), ('TR486_1_6', 'TR486_6', 'TR486_1'), ('TR486_1_7', 'TR486_1', 'TR486_7'), ('TR486_1_7', 'TR486_7', 'TR486_1'), ('TR486_2_3', 'TR486_2', 'TR486_3'), ('TR486_2_3', 'TR486_3', 'TR486_2'), ('TR486_2_4', 'TR486_2', 'TR486_4'), ('TR486_2_4', 'TR486_4', 'TR486_2'), ('TR486_3_10', 'TR486_10', 'TR486_3'), ('TR486_3_10', 'TR486_3', 'TR486_10'), ('TR486_3_8', 'TR486_3', 'TR486_8'), ('TR486_3_8', 'TR486_8', 'TR486_3'), ('TR486_3_9', 'TR486_3', 'TR486_9'), ('TR486_3_9', 'TR486_9', 'TR486_3'), ('TR486_4_11', 'TR486_11', 'TR486_4'), ('TR486_4_11', 'TR486_4', 'TR486_11'), ('TR486_5_12', 'TR486_12', 'TR486_5'), ('TR486_5_12', 'TR486_5', 'TR486_12'), ('TR486_5_13', 'TR486_13', 'TR486_5'), ('TR486_5_13', 'TR486_5', 'TR486_13'), ('TR487_1_5', 'TR487_1', 'TR487_5'), ('TR487_1_5', 'TR487_5', 'TR487_1'), ('TR487_1_6', 'TR487_1', 'TR487_6'), ('TR487_1_6', 'TR487_6', 'TR487_1'), ('TR487_2_3', 'TR487_2', 'TR487_3'), ('TR487_2_3', 'TR487_3', 'TR487_2'), ('TR487_2_4', 'TR487_2', 'TR487_4'), ('TR487_2_4', 'TR487_4', 'TR487_2'), ('TR487_3_7', 'TR487_3', 'TR487_7'), ('TR487_3_7', 'TR487_7', 'TR487_3'), ('TR487_3_8', 'TR487_3', 'TR487_8'), ('TR487_3_8', 'TR487_8', 'TR487_3'), ('TR487_3_9', 'TR487_3', 'TR487_9'), ('TR487_3_9', 'TR487_9', 'TR487_3'), ('TR487_4_10', 'TR487_10', 'TR487_4'), ('TR487_4_10', 'TR487_4', 'TR487_10'), ('TR487_4_11', 'TR487_11', 'TR487_4'), ('TR487_4_11', 'TR487_4', 'TR487_11'), ('TR487_4_12', 'TR487_12', 'TR487_4'), ('TR487_4_12', 'TR487_4', 'TR487_12'), ('TR490_1_2', 'TR490_1', 'TR490_2'), ('TR490_1_2', 'TR490_2', 'TR490_1'), ('TR490_1_8', 'TR490_1', 'TR490_8'), ('TR490_1_8', 'TR490_8', 'TR490_1'), ('TR490_2_10', 'TR490_10', 'TR490_2'), ('TR490_2_10', 'TR490_2', 'TR490_10'), ('TR490_2_3', 'TR490_2', 'TR490_3'), ('TR490_2_3', 'TR490_3', 'TR490_2'), ('TR490_2_9', 'TR490_2', 'TR490_9'), ('TR490_2_9', 'TR490_9', 'TR490_2'), ('TR490_3_11', 'TR490_11', 'TR490_3'), ('TR490_3_11', 'TR490_3', 'TR490_11'), ('TR490_3_12', 'TR490_12', 'TR490_3'), ('TR490_3_12', 'TR490_3', 'TR490_12'), ('TR490_3_4', 'TR490_3', 'TR490_4'), ('TR490_3_4', 'TR490_4', 'TR490_3'), ('TR490_4_13', 'TR490_13', 'TR490_4'), ('TR490_4_13', 'TR490_4', 'TR490_13'), ('TR490_4_14', 'TR490_14', 'TR490_4'), ('TR490_4_14', 'TR490_4', 'TR490_14'), ('TR490_4_5', 'TR490_4', 'TR490_5'), ('TR490_4_5', 'TR490_5', 'TR490_4'), ('TR490_5_15', 'TR490_15', 'TR490_5'), ('TR490_5_15', 'TR490_5', 'TR490_15'), ('TR491_10_22', 'TR491_10', 'TR491_22'), ('TR491_10_22', 'TR491_22', 'TR491_10'), ('TR491_11_12', 'TR491_11', 'TR491_12'), ('TR491_11_12', 'TR491_12', 'TR491_11'), ('TR491_11_23', 'TR491_11', 'TR491_23'), ('TR491_11_23', 'TR491_23', 'TR491_11'), ('TR491_11_24', 'TR491_11', 'TR491_24'), ('TR491_11_24', 'TR491_24', 'TR491_11'), ('TR491_12_25', 'TR491_12', 'TR491_25'), ('TR491_12_25', 'TR491_25', 'TR491_12'), ('TR491_13_26', 'TR491_13', 'TR491_26'), ('TR491_13_26', 'TR491_26', 'TR491_13'), ('TR491_13_27', 'TR491_13', 'TR491_27'), ('TR491_13_27', 'TR491_27', 'TR491_13'), ('TR491_1_2', 'TR491_1', 'TR491_2'), ('TR491_1_2', 'TR491_2', 'TR491_1'), ('TR491_1_3', 'TR491_1', 'TR491_3'), ('TR491_1_3', 'TR491_3', 'TR491_1'), ('TR491_2_14', 'TR491_14', 'TR491_2'), ('TR491_2_14', 'TR491_2', 'TR491_14'), ('TR491_2_15', 'TR491_15', 'TR491_2'), ('TR491_2_15', 'TR491_2', 'TR491_15'), ('TR491_2_16', 'TR491_16', 'TR491_2'), ('TR491_2_16', 'TR491_2', 'TR491_16'), ('TR491_3_5', 'TR491_3', 'TR491_5'), ('TR491_3_5', 'TR491_5', 'TR491_3'), ('TR491_4_6', 'TR491_4', 'TR491_6'), ('TR491_4_6', 'TR491_6', 'TR491_4'), ('TR491_4_7', 'TR491_4', 'TR491_7'), ('TR491_4_7', 'TR491_7', 'TR491_4'), ('TR491_5_17', 'TR491_17', 'TR491_5'), ('TR491_5_17', 'TR491_5', 'TR491_17'), ('TR491_6_9', 'TR491_6', 'TR491_9'), ('TR491_6_9', 'TR491_9', 'TR491_6'), ('TR491_7_18', 'TR491_18', 'TR491_7'), ('TR491_7_18', 'TR491_7', 'TR491_18'), ('TR491_8_10', 'TR491_10', 'TR491_8'), ('TR491_8_10', 'TR491_8', 'TR491_10'), ('TR491_8_11', 'TR491_11', 'TR491_8'), ('TR491_8_11', 'TR491_8', 'TR491_11'), ('TR491_9_19', 'TR491_19', 'TR491_9'), ('TR491_9_19', 'TR491_9', 'TR491_19'), ('TR491_9_20', 'TR491_20', 'TR491_9'), ('TR491_9_20', 'TR491_9', 'TR491_20'), ('TR491_9_21', 'TR491_21', 'TR491_9'), ('TR491_9_21', 'TR491_9', 'TR491_21'), ('TR493_11_15', 'TR493_11', 'TR493_15'), ('TR493_11_15', 'TR493_15', 'TR493_11'), ('TR493_12_13', 'TR493_12', 'TR493_13'), ('TR493_12_13', 'TR493_13', 'TR493_12'), ('TR493_12_23', 'TR493_12', 'TR493_23'), ('TR493_12_23', 'TR493_23', 'TR493_12'), ('TR493_13_20', 'TR493_13', 'TR493_20'), ('TR493_13_20', 'TR493_20', 'TR493_13'), ('TR493_14_24', 'TR493_14', 'TR493_24'), ('TR493_14_24', 'TR493_24', 'TR493_14'), ('TR493_15_25', 'TR493_15', 'TR493_25'), ('TR493_15_25', 'TR493_25', 'TR493_15'), ('TR493_16_26', 'TR493_16', 'TR493_26'), ('TR493_16_26', 'TR493_26', 'TR493_16'), ('TR493_17_27', 'TR493_17', 'TR493_27'), ('TR493_17_27', 'TR493_27', 'TR493_17'), ('TR493_1_6', 'TR493_1', 'TR493_6'), ('TR493_1_6', 'TR493_6', 'TR493_1'), ('TR493_1_7', 'TR493_1', 'TR493_7'), ('TR493_1_7', 'TR493_7', 'TR493_1'), ('TR493_20_28', 'TR493_20', 'TR493_28'), ('TR493_20_28', 'TR493_28', 'TR493_20'), ('TR493_20_29', 'TR493_20', 'TR493_29'), ('TR493_20_29', 'TR493_29', 'TR493_20'), ('TR493_20_30', 'TR493_20', 'TR493_30'), ('TR493_20_30', 'TR493_30', 'TR493_20'), ('TR493_2_10', 'TR493_10', 'TR493_2'), ('TR493_2_10', 'TR493_2', 'TR493_10'), ('TR493_2_3', 'TR493_2', 'TR493_3'), ('TR493_2_3', 'TR493_3', 'TR493_2'), ('TR493_3_21', 'TR493_21', 'TR493_3'), ('TR493_3_21', 'TR493_3', 'TR493_21'), ('TR493_4_17', 'TR493_17', 'TR493_4'), ('TR493_4_17', 'TR493_4', 'TR493_17'), ('TR493_4_5', 'TR493_4', 'TR493_5'), ('TR493_4_5', 'TR493_5', 'TR493_4'), ('TR493_5_22', 'TR493_22', 'TR493_5'), ('TR493_5_22', 'TR493_5', 'TR493_22'), ('TR493_6_16', 'TR493_16', 'TR493_6'), ('TR493_6_16', 'TR493_6', 'TR493_16'), ('TR493_7_8', 'TR493_7', 'TR493_8'), ('TR493_7_8', 'TR493_8', 'TR493_7'), ('TR493_8_11', 'TR493_11', 'TR493_8'), ('TR493_8_11', 'TR493_8', 'TR493_11'), ('TR493_9_10', 'TR493_10', 'TR493_9'), ('TR493_9_10', 'TR493_9', 'TR493_10'), ('TR493_9_14', 'TR493_14', 'TR493_9'), ('TR493_9_14', 'TR493_9', 'TR493_14'), ('TR494_11_21', 'TR494_11', 'TR494_21'), ('TR494_11_21', 'TR494_21', 'TR494_11'), ('TR494_12_13', 'TR494_12', 'TR494_13'), ('TR494_12_13', 'TR494_13', 'TR494_12'), ('TR494_12_22', 'TR494_12', 'TR494_22'), ('TR494_12_22', 'TR494_22', 'TR494_12'), ('TR494_13_23', 'TR494_13', 'TR494_23'), ('TR494_13_23', 'TR494_23', 'TR494_13'), ('TR494_14_24', 'TR494_14', 'TR494_24'), ('TR494_14_24', 'TR494_24', 'TR494_14'), ('TR494_1_6', 'TR494_1', 'TR494_6'), ('TR494_1_6', 'TR494_6', 'TR494_1'), ('TR494_1_7', 'TR494_1', 'TR494_7'), ('TR494_1_7', 'TR494_7', 'TR494_1'), ('TR494_2_10', 'TR494_10', 'TR494_2'), ('TR494_2_10', 'TR494_2', 'TR494_10'), ('TR494_2_3', 'TR494_2', 'TR494_3'), ('TR494_2_3', 'TR494_3', 'TR494_2'), ('TR494_3_17', 'TR494_17', 'TR494_3'), ('TR494_3_17', 'TR494_3', 'TR494_17'), ('TR494_4_18', 'TR494_18', 'TR494_4'), ('TR494_4_18', 'TR494_4', 'TR494_18'), ('TR494_4_5', 'TR494_4', 'TR494_5'), ('TR494_4_5', 'TR494_5', 'TR494_4'), ('TR494_5_19', 'TR494_19', 'TR494_5'), ('TR494_5_19', 'TR494_5', 'TR494_19'), ('TR494_6_20', 'TR494_20', 'TR494_6'), ('TR494_6_20', 'TR494_6', 'TR494_20'), ('TR494_7_8', 'TR494_7', 'TR494_8'), ('TR494_7_8', 'TR494_8', 'TR494_7'), ('TR494_8_11', 'TR494_11', 'TR494_8'), ('TR494_8_11', 'TR494_8', 'TR494_11'), ('TR494_9_10', 'TR494_10', 'TR494_9'), ('TR494_9_10', 'TR494_9', 'TR494_10'), ('TR494_9_14', 'TR494_14', 'TR494_9'), ('TR494_9_14', 'TR494_9', 'TR494_14'), ('TR495_2_3', 'TR495_2', 'TR495_3'), ('TR495_2_3', 'TR495_3', 'TR495_2'), ('TR496_10_11', 'TR496_10', 'TR496_11'), ('TR496_10_11', 'TR496_11', 'TR496_10'), ('TR496_10_45', 'TR496_10', 'TR496_45'), ('TR496_10_45', 'TR496_45', 'TR496_10'), ('TR496_10_60', 'TR496_10', 'TR496_60'), ('TR496_10_60', 'TR496_60', 'TR496_10'), ('TR496_11_12', 'TR496_11', 'TR496_12'), ('TR496_11_12', 'TR496_12', 'TR496_11'), ('TR496_11_61', 'TR496_11', 'TR496_61'), ('TR496_11_61', 'TR496_61', 'TR496_11'), ('TR496_11_62', 'TR496_11', 'TR496_62'), ('TR496_11_62', 'TR496_62', 'TR496_11'), ('TR496_12_13', 'TR496_12', 'TR496_13'), ('TR496_12_13', 'TR496_13', 'TR496_12'), ('TR496_12_46', 'TR496_12', 'TR496_46'), ('TR496_12_46', 'TR496_46', 'TR496_12'), ('TR496_12_63', 'TR496_12', 'TR496_63'), ('TR496_12_63', 'TR496_63', 'TR496_12'), ('TR496_13_14', 'TR496_13', 'TR496_14'), ('TR496_13_14', 'TR496_14', 'TR496_13'), ('TR496_13_64', 'TR496_13', 'TR496_64'), ('TR496_13_64', 'TR496_64', 'TR496_13'), ('TR496_13_65', 'TR496_13', 'TR496_65'), ('TR496_13_65', 'TR496_65', 'TR496_13'), ('TR496_14_15', 'TR496_14', 'TR496_15'), ('TR496_14_15', 'TR496_15', 'TR496_14'), ('TR496_14_66', 'TR496_14', 'TR496_66'), ('TR496_14_66', 'TR496_66', 'TR496_14'), ('TR496_14_67', 'TR496_14', 'TR496_67'), ('TR496_14_67', 'TR496_67', 'TR496_14'), ('TR496_15_16', 'TR496_15', 'TR496_16'), ('TR496_15_16', 'TR496_16', 'TR496_15'), ('TR496_15_68', 'TR496_15', 'TR496_68'), ('TR496_15_68', 'TR496_68', 'TR496_15'), ('TR496_15_69', 'TR496_15', 'TR496_69'), ('TR496_15_69', 'TR496_69', 'TR496_15'), ('TR496_16_17', 'TR496_16', 'TR496_17'), ('TR496_16_17', 'TR496_17', 'TR496_16'), ('TR496_16_70', 'TR496_16', 'TR496_70'), ('TR496_16_70', 'TR496_70', 'TR496_16'), ('TR496_16_71', 'TR496_16', 'TR496_71'), ('TR496_16_71', 'TR496_71', 'TR496_16'), ('TR496_17_18', 'TR496_17', 'TR496_18'), ('TR496_17_18', 'TR496_18', 'TR496_17'), ('TR496_17_47', 'TR496_17', 'TR496_47'), ('TR496_17_47', 'TR496_47', 'TR496_17'), ('TR496_17_72', 'TR496_17', 'TR496_72'), ('TR496_17_72', 'TR496_72', 'TR496_17'), ('TR496_18_19', 'TR496_18', 'TR496_19'), ('TR496_18_19', 'TR496_19', 'TR496_18'), ('TR496_18_73', 'TR496_18', 'TR496_73'), ('TR496_18_73', 'TR496_73', 'TR496_18'), ('TR496_18_74', 'TR496_18', 'TR496_74'), ('TR496_18_74', 'TR496_74', 'TR496_18'), ('TR496_19_20', 'TR496_19', 'TR496_20'), ('TR496_19_20', 'TR496_20', 'TR496_19'), ('TR496_19_48', 'TR496_19', 'TR496_48'), ('TR496_19_48', 'TR496_48', 'TR496_19'), ('TR496_19_75', 'TR496_19', 'TR496_75'), ('TR496_19_75', 'TR496_75', 'TR496_19'), ('TR496_1_2', 'TR496_1', 'TR496_2'), ('TR496_1_2', 'TR496_2', 'TR496_1'), ('TR496_1_21', 'TR496_1', 'TR496_21'), ('TR496_1_21', 'TR496_21', 'TR496_1'), ('TR496_20_49', 'TR496_20', 'TR496_49'), ('TR496_20_49', 'TR496_49', 'TR496_20'), ('TR496_20_50', 'TR496_20', 'TR496_50'), ('TR496_20_50', 'TR496_50', 'TR496_20'), ('TR496_20_76', 'TR496_20', 'TR496_76'), ('TR496_20_76', 'TR496_76', 'TR496_20'), ('TR496_21_77', 'TR496_21', 'TR496_77'), ('TR496_21_77', 'TR496_77', 'TR496_21'), ('TR496_23_24', 'TR496_23', 'TR496_24'), ('TR496_23_24', 'TR496_24', 'TR496_23'), ('TR496_24_78', 'TR496_24', 'TR496_78'), ('TR496_24_78', 'TR496_78', 'TR496_24'), ('TR496_27_28', 'TR496_27', 'TR496_28'), ('TR496_27_28', 'TR496_28', 'TR496_27'), ('TR496_27_29', 'TR496_27', 'TR496_29'), ('TR496_27_29', 'TR496_29', 'TR496_27'), ('TR496_27_79', 'TR496_27', 'TR496_79'), ('TR496_27_79', 'TR496_79', 'TR496_27'), ('TR496_28_80', 'TR496_28', 'TR496_80'), ('TR496_28_80', 'TR496_80', 'TR496_28'), ('TR496_28_81', 'TR496_28', 'TR496_81'), ('TR496_28_81', 'TR496_81', 'TR496_28'), ('TR496_28_82', 'TR496_28', 'TR496_82'), ('TR496_28_82', 'TR496_82', 'TR496_28'), ('TR496_29_30', 'TR496_29', 'TR496_30'), ('TR496_29_30', 'TR496_30', 'TR496_29'), ('TR496_29_83', 'TR496_29', 'TR496_83'), ('TR496_29_83', 'TR496_83', 'TR496_29'), ('TR496_29_84', 'TR496_29', 'TR496_84'), ('TR496_29_84', 'TR496_84', 'TR496_29'), ('TR496_2_3', 'TR496_2', 'TR496_3'), ('TR496_2_3', 'TR496_3', 'TR496_2'), ('TR496_2_51', 'TR496_2', 'TR496_51'), ('TR496_2_51', 'TR496_51', 'TR496_2'), ('TR496_2_52', 'TR496_2', 'TR496_52'), ('TR496_2_52', 'TR496_52', 'TR496_2'), ('TR496_30_31', 'TR496_30', 'TR496_31'), ('TR496_30_31', 'TR496_31', 'TR496_30'), ('TR496_30_85', 'TR496_30', 'TR496_85'), ('TR496_30_85', 'TR496_85', 'TR496_30'), ('TR496_30_86', 'TR496_30', 'TR496_86'), ('TR496_30_86', 'TR496_86', 'TR496_30'), ('TR496_31_32', 'TR496_31', 'TR496_32'), ('TR496_31_32', 'TR496_32', 'TR496_31'), ('TR496_31_87', 'TR496_31', 'TR496_87'), ('TR496_31_87', 'TR496_87', 'TR496_31'), ('TR496_31_88', 'TR496_31', 'TR496_88'), ('TR496_31_88', 'TR496_88', 'TR496_31'), ('TR496_32_89', 'TR496_32', 'TR496_89'), ('TR496_32_89', 'TR496_89', 'TR496_32'), ('TR496_32_90', 'TR496_32', 'TR496_90'), ('TR496_32_90', 'TR496_90', 'TR496_32'), ('TR496_32_91', 'TR496_32', 'TR496_91'), ('TR496_32_91', 'TR496_91', 'TR496_32'), ('TR496_33_34', 'TR496_33', 'TR496_34'), ('TR496_33_34', 'TR496_34', 'TR496_33'), ('TR496_34_36', 'TR496_34', 'TR496_36'), ('TR496_34_36', 'TR496_36', 'TR496_34'), ('TR496_36_37', 'TR496_36', 'TR496_37'), ('TR496_36_37', 'TR496_37', 'TR496_36'), ('TR496_36_92', 'TR496_36', 'TR496_92'), ('TR496_36_92', 'TR496_92', 'TR496_36'), ('TR496_36_93', 'TR496_36', 'TR496_93'), ('TR496_36_93', 'TR496_93', 'TR496_36'), ('TR496_37_38', 'TR496_37', 'TR496_38'), ('TR496_37_38', 'TR496_38', 'TR496_37'), ('TR496_37_39', 'TR496_37', 'TR496_39'), ('TR496_37_39', 'TR496_39', 'TR496_37'), ('TR496_37_94', 'TR496_37', 'TR496_94'), ('TR496_37_94', 'TR496_94', 'TR496_37'), ('TR496_38_42', 'TR496_38', 'TR496_42'), ('TR496_38_42', 'TR496_42', 'TR496_38'), ('TR496_38_95', 'TR496_38', 'TR496_95'), ('TR496_38_95', 'TR496_95', 'TR496_38'), ('TR496_38_96', 'TR496_38', 'TR496_96'), ('TR496_38_96', 'TR496_96', 'TR496_38'), ('TR496_39_40', 'TR496_39', 'TR496_40'), ('TR496_39_40', 'TR496_40', 'TR496_39'), ('TR496_3_23', 'TR496_23', 'TR496_3'), ('TR496_3_23', 'TR496_3', 'TR496_23'), ('TR496_3_4', 'TR496_3', 'TR496_4'), ('TR496_3_4', 'TR496_4', 'TR496_3'), ('TR496_3_53', 'TR496_3', 'TR496_53'), ('TR496_3_53', 'TR496_53', 'TR496_3'), ('TR496_40_97', 'TR496_40', 'TR496_97'), ('TR496_40_97', 'TR496_97', 'TR496_40'), ('TR496_42_43', 'TR496_42', 'TR496_43'), ('TR496_42_43', 'TR496_43', 'TR496_42'), ('TR496_43_98', 'TR496_43', 'TR496_98'), ('TR496_43_98', 'TR496_98', 'TR496_43'), ('TR496_45_100', 'TR496_100', 'TR496_45'), ('TR496_45_100', 'TR496_45', 'TR496_100'), ('TR496_45_101', 'TR496_101', 'TR496_45'), ('TR496_45_101', 'TR496_45', 'TR496_101'), ('TR496_45_99', 'TR496_45', 'TR496_99'), ('TR496_45_99', 'TR496_99', 'TR496_45'), ('TR496_46_102', 'TR496_102', 'TR496_46'), ('TR496_46_102', 'TR496_46', 'TR496_102'), ('TR496_47_103', 'TR496_103', 'TR496_47'), ('TR496_47_103', 'TR496_47', 'TR496_103'), ('TR496_48_104', 'TR496_104', 'TR496_48'), ('TR496_48_104', 'TR496_48', 'TR496_104'), ('TR496_49_105', 'TR496_105', 'TR496_49'), ('TR496_49_105', 'TR496_49', 'TR496_105'), ('TR496_49_106', 'TR496_106', 'TR496_49'), ('TR496_49_106', 'TR496_49', 'TR496_106'), ('TR496_49_107', 'TR496_107', 'TR496_49'), ('TR496_49_107', 'TR496_49', 'TR496_107'), ('TR496_4_5', 'TR496_4', 'TR496_5'), ('TR496_4_5', 'TR496_5', 'TR496_4'), ('TR496_4_54', 'TR496_4', 'TR496_54'), ('TR496_4_54', 'TR496_54', 'TR496_4'), ('TR496_4_55', 'TR496_4', 'TR496_55'), ('TR496_4_55', 'TR496_55', 'TR496_4'), ('TR496_50_108', 'TR496_108', 'TR496_50'), ('TR496_50_108', 'TR496_50', 'TR496_108'), ('TR496_50_109', 'TR496_109', 'TR496_50'), ('TR496_50_109', 'TR496_50', 'TR496_109'), ('TR496_5_6', 'TR496_5', 'TR496_6'), ('TR496_5_6', 'TR496_6', 'TR496_5'), ('TR496_6_7', 'TR496_6', 'TR496_7'), ('TR496_6_7', 'TR496_7', 'TR496_6'), ('TR496_7_27', 'TR496_27', 'TR496_7'), ('TR496_7_27', 'TR496_7', 'TR496_27'), ('TR496_7_56', 'TR496_56', 'TR496_7'), ('TR496_7_56', 'TR496_7', 'TR496_56'), ('TR496_7_8', 'TR496_7', 'TR496_8'), ('TR496_7_8', 'TR496_8', 'TR496_7'), ('TR496_8_33', 'TR496_33', 'TR496_8'), ('TR496_8_33', 'TR496_8', 'TR496_33'), ('TR496_8_57', 'TR496_57', 'TR496_8'), ('TR496_8_57', 'TR496_8', 'TR496_57'), ('TR496_8_9', 'TR496_8', 'TR496_9'), ('TR496_8_9', 'TR496_9', 'TR496_8'), ('TR496_9_10', 'TR496_10', 'TR496_9'), ('TR496_9_10', 'TR496_9', 'TR496_10'), ('TR496_9_58', 'TR496_58', 'TR496_9'), ('TR496_9_58', 'TR496_9', 'TR496_58'), ('TR496_9_59', 'TR496_59', 'TR496_9'), ('TR496_9_59', 'TR496_9', 'TR496_59'), ('TR499_2_3', 'TR499_2', 'TR499_3'), ('TR499_2_3', 'TR499_3', 'TR499_2'), ('TR499_2_4', 'TR499_2', 'TR499_4'), ('TR499_2_4', 'TR499_4', 'TR499_2'), ('TR501_10_22', 'TR501_10', 'TR501_22'), ('TR501_10_22', 'TR501_22', 'TR501_10'), ('TR501_11_14', 'TR501_11', 'TR501_14'), ('TR501_11_14', 'TR501_14', 'TR501_11'), ('TR501_11_23', 'TR501_11', 'TR501_23'), ('TR501_11_23', 'TR501_23', 'TR501_11'), ('TR501_12_24', 'TR501_12', 'TR501_24'), ('TR501_12_24', 'TR501_24', 'TR501_12'), ('TR501_13_15', 'TR501_13', 'TR501_15'), ('TR501_13_15', 'TR501_15', 'TR501_13'), ('TR501_13_25', 'TR501_13', 'TR501_25'), ('TR501_13_25', 'TR501_25', 'TR501_13'), ('TR501_14_16', 'TR501_14', 'TR501_16'), ('TR501_14_16', 'TR501_16', 'TR501_14'), ('TR501_15_17', 'TR501_15', 'TR501_17'), ('TR501_15_17', 'TR501_17', 'TR501_15'), ('TR501_1_4', 'TR501_1', 'TR501_4'), ('TR501_1_4', 'TR501_4', 'TR501_1'), ('TR501_1_5', 'TR501_1', 'TR501_5'), ('TR501_1_5', 'TR501_5', 'TR501_1'), ('TR501_4_7', 'TR501_4', 'TR501_7'), ('TR501_4_7', 'TR501_7', 'TR501_4'), ('TR501_5_9', 'TR501_5', 'TR501_9'), ('TR501_5_9', 'TR501_9', 'TR501_5'), ('TR501_6_10', 'TR501_10', 'TR501_6'), ('TR501_6_10', 'TR501_6', 'TR501_10'), ('TR501_6_18', 'TR501_18', 'TR501_6'), ('TR501_6_18', 'TR501_6', 'TR501_18'), ('TR501_7_19', 'TR501_19', 'TR501_7'), ('TR501_7_19', 'TR501_7', 'TR501_19'), ('TR501_8_12', 'TR501_12', 'TR501_8'), ('TR501_8_12', 'TR501_8', 'TR501_12'), ('TR501_8_20', 'TR501_20', 'TR501_8'), ('TR501_8_20', 'TR501_8', 'TR501_20'), ('TR501_9_21', 'TR501_21', 'TR501_9'), ('TR501_9_21', 'TR501_9', 'TR501_21'), ('TR502_1_3', 'TR502_1', 'TR502_3'), ('TR502_1_3', 'TR502_3', 'TR502_1'), ('TR502_1_6', 'TR502_1', 'TR502_6'), ('TR502_1_6', 'TR502_6', 'TR502_1'), ('TR502_1_7', 'TR502_1', 'TR502_7'), ('TR502_1_7', 'TR502_7', 'TR502_1'), ('TR502_1_8', 'TR502_1', 'TR502_8'), ('TR502_1_8', 'TR502_8', 'TR502_1'), ('TR502_2_3', 'TR502_2', 'TR502_3'), ('TR502_2_3', 'TR502_3', 'TR502_2'), ('TR502_3_4', 'TR502_3', 'TR502_4'), ('TR502_3_4', 'TR502_4', 'TR502_3'), ('TR502_3_5', 'TR502_3', 'TR502_5'), ('TR502_3_5', 'TR502_5', 'TR502_3'), ('TR502_6_9', 'TR502_6', 'TR502_9'), ('TR502_6_9', 'TR502_9', 'TR502_6'), ('TR502_7_10', 'TR502_10', 'TR502_7'), ('TR502_7_10', 'TR502_7', 'TR502_10')]",
    "table_infos": "df1:\n|    | bond_id   | molecule_id   | bond_type   |\n|---:|:----------|:--------------|:------------|\n|  0 | TR000_1_2 | TR000         | -           |\n|  1 | TR000_2_3 | TR000         | -           |\n|  2 | TR000_2_4 | TR000         | -           |\ndf2:\n|    | atom_id   | atom_id2   | bond_id   |\n|---:|:----------|:-----------|:----------|\n|  0 | TR000_1   | TR000_2    | TR000_1_2 |\n|  1 | TR000_2   | TR000_1    | TR000_1_2 |\n|  2 | TR000_2   | TR000_3    | TR000_2_3 |\nForeign keys:\ndf2.bond_id = df1.bond_id\n"
  },
  {
    "table_paths": [
      "datasets/BIRD_dev-toxicology/connected.csv",
      "datasets/BIRD_dev-toxicology/atom.csv"
    ],
    "query": "Name the atoms' elements that form bond TR000_2_3.",
    "cot": "To solve this problem, we need to join df1 and df2 on the atom_id and atom_id2 columns. Then, we can filter the joined dataframe to get the rows where bond_id is 'TR000_2_3'. Finally, we can select the element column from the filtered dataframe.\n",
    "code": "import numpy as np\nimport pandas as pd\n\n# Assuming df1 and df2 are the dataframes given in the question\n\n# Merge df1 and df2 on atom_id and atom_id2\nmerged_df = pd.merge(df1, df2, left_on='atom_id', right_on='atom_id2')\n\n# Filter the merged dataframe to get the rows where bond_id is 'TR000_2_3'\nfiltered_df = merged_df[merged_df['bond_id'] == 'TR000_2_3']\n\n# Select the element column from the filtered dataframe\nelements = filtered_df['element']\n\n# Print the elements\nprint(elements)",
    "observation": "KeyError: 'atom_id2'",
    "true_result": "[('c',), ('cl',)]",
    "table_infos": "df1:\n|    | atom_id   | atom_id2   | bond_id   |\n|---:|:----------|:-----------|:----------|\n|  0 | TR000_1   | TR000_2    | TR000_1_2 |\n|  1 | TR000_2   | TR000_1    | TR000_1_2 |\n|  2 | TR000_2   | TR000_3    | TR000_2_3 |\ndf2:\n|    | atom_id   | molecule_id   | element   |\n|---:|:----------|:--------------|:----------|\n|  0 | TR000_1   | TR000         | cl        |\n|  1 | TR000_2   | TR000         | c         |\n|  2 | TR000_3   | TR000         | cl        |\nForeign keys:\ndf1.atom_id2 = df2.atom_id,df1.atom_id = df2.atom_id\n"
  },
  {
    "table_paths": [
      "datasets/BIRD_dev-toxicology/connected.csv",
      "datasets/BIRD_dev-toxicology/atom.csv"
    ],
    "query": "How many bonds are created by bonding atoms with chlorine element?",
    "cot": "To solve this problem, we need to join df1 and df2 on the atom_id and atom_id2 columns. Then, we can filter the rows where the element of the atom is 'cl'. Finally, we can count the number of rows in the resulting DataFrame.\n",
    "code": "import numpy as np\nimport pandas as pd\n\n# Assuming df1 and df2 are the DataFrames given in the question\n\n# Join df1 and df2 on atom_id and atom_id2\ndf = pd.merge(df1, df2, left_on='atom_id', right_on='atom_id2', how='left')\n\n# Filter rows where the element of the atom is 'cl'\ndf = df[df['element'] == 'cl']\n\n# Count the number of rows in the resulting DataFrame\nnum_bonds = len(df)\n\nprint(f\"The number of bonds created by bonding atoms with chlorine element is {num_bonds}\")",
    "observation": "KeyError: 'atom_id2'",
    "true_result": "[(424,)]",
    "table_infos": "df1:\n|    | atom_id   | atom_id2   | bond_id   |\n|---:|:----------|:-----------|:----------|\n|  0 | TR000_1   | TR000_2    | TR000_1_2 |\n|  1 | TR000_2   | TR000_1    | TR000_1_2 |\n|  2 | TR000_2   | TR000_3    | TR000_2_3 |\ndf2:\n|    | atom_id   | molecule_id   | element   |\n|---:|:----------|:--------------|:----------|\n|  0 | TR000_1   | TR000         | cl        |\n|  1 | TR000_2   | TR000         | c         |\n|  2 | TR000_3   | TR000         | cl        |\nForeign keys:\ndf1.atom_id2 = df2.atom_id,df1.atom_id = df2.atom_id\n"
  },
  {
    "table_paths": [
      "datasets/BIRD_dev-toxicology/atom.csv",
      "datasets/BIRD_dev-toxicology/molecule.csv"
    ],
    "query": "What is the element with the atom ID of TR004_7 in molecule that is not carcinogenic?",
    "cot": "To solve this problem, we need to join df1 and df2 on molecule_id. Then, we need to filter out the molecules that are carcinogenic (label = '-'). Finally, we need to find the element of the atom with atom_id 'TR004_7'.\n",
    "code": "import numpy as np\nimport pandas as pd\n\n# Assuming df1 and df2 are the dataframes given in the question\n\n# Join df1 and df2 on molecule_id\ndf = pd.merge(df1, df2, on='molecule_id')\n\n# Filter out the molecules that are carcinogenic\ndf = df[df['label'] != '-']\n\n# Find the element of the atom with atom_id 'TR004_7'\nelement = df[df['atom_id'] == 'TR004_7']['element'].values[0]\n\nprint(element)",
    "observation": "IndexError: index 0 is out of bounds for axis 0 with size 0",
    "true_result": "[('c',)]",
    "table_infos": "df1:\n|    | atom_id   | molecule_id   | element   |\n|---:|:----------|:--------------|:----------|\n|  0 | TR000_1   | TR000         | cl        |\n|  1 | TR000_2   | TR000         | c         |\n|  2 | TR000_3   | TR000         | cl        |\ndf2:\n|    | molecule_id   | label   |\n|---:|:--------------|:--------|\n|  0 | TR000         | +       |\n|  1 | TR001         | +       |\n|  2 | TR002         | -       |\nForeign keys:\ndf1.molecule_id = df2.molecule_id\n"
  },
  {
    "table_paths": [
      "datasets/BIRD_dev-card_games/sets.csv",
      "datasets/BIRD_dev-card_games/set_translations.csv"
    ],
    "query": "What percentage of Japanese translated sets are expansion sets?",
    "cot": "\nTo solve this problem, we need to:\n\n1. Filter the df2 dataframe to get only the Japanese translations.\n2. Merge this filtered df2 dataframe with df1 dataframe on 'code' column.\n3. Count the number of expansion sets in the merged dataframe.\n4. Divide this count by the total number of Japanese translated sets to get the percentage.\n",
    "code": "import numpy as np\nimport pandas as pd\n\n# Load the data\n\n\n\n# Filter df2 to get only Japanese translations\ndf2_jp = df2[df2['language'] == 'Japanese']\n\n# Merge df2_jp with df1 on 'code' column\nmerged_df = pd.merge(df2_jp, df1, on='code')\n\n# Count the number of expansion sets\nexpansion_count = merged_df[merged_df['type'] == 'expansion'].shape[0]\n\n# Count the total number of Japanese translated sets\ntotal_count = merged_df.shape[0]\n\n# Calculate the percentage\npercentage = (expansion_count / total_count) * 100\n\n# Print the result\nprint(f'{percentage}% of Japanese translated sets are expansion sets.')",
    "observation": "KeyError: 'code'",
    "true_result": "[(10.0,)]",
    "table_infos": "df1:\n|    |   id |   baseSetSize | block    | booster                                                                                                                                                                                                                                                         | code   |   isFoilOnly |   isForeignOnly |   isNonFoilOnly |   isOnlineOnly |   isPartialPreview | keyruneCode   |   mcmId |   mcmIdExtras | mcmName        | mtgoCode   | name              | parentCode   | releaseDate   |   tcgplayerGroupId |   totalSetSize | type    |\n|---:|-----:|--------------:|:---------|:----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|:-------|-------------:|----------------:|----------------:|---------------:|-------------------:|:--------------|--------:|--------------:|:---------------|:-----------|:------------------|:-------------|:--------------|-------------------:|---------------:|:--------|\n|  0 |    1 |           383 | Core Set | {'default': {'boosters': [{'contents': {'basic': 1, 'common': 10, 'rare': 1, 'uncommon': 3}, 'weight': 1913922}, {'contents': {'basic': 1, 'common': 9, 'foilCommon': 1, 'rare': 1, 'uncommon': 3}, 'weight': 318987}, {'contents': {'basic': 1, 'common': 10,  | 10E    |            0 |               0 |               0 |              0 |                  0 | 10E           |      74 |           nan | Tenth Edition  | 10E        | Tenth Edition     |              | 2007-07-13    |                  1 |            508 | core    |\n|  1 |    2 |           302 | Core Set | {'default': {'boosters': [{'contents': {'common': 11, 'rare': 1, 'uncommon': 3}, 'weight': 1}], 'boostersTotalWeight': 1, 'sheets': {'common': {'cards': {'0ab4e3e6-f9fe-5fdc-9697-fd20690a0e15': 1, '0b326a61-0389-54e2-ac58-7bb47ca88202': 1, '0f099574-e9f7- | 2ED    |            0 |               0 |               1 |              0 |                  0 | 2ED           |     nan |           nan |                |            | Unlimited Edition |              | 1993-12-01    |                115 |            302 | core    |\n|  2 |    3 |           332 |          | {'default': {'boosters': [{'contents': {'common': 8, 'dedicatedFoil2xm': 2, 'rareMythic': 2, 'uncommon': 3}, 'weight': 1}], 'boostersTotalWeight': 1, 'sheets': {'common': {'balanceColors': True, 'cards': {'01df4e32-7fe4-5b8d-9460-0f08fa29153e': 1, '032c60 | 2XM    |            0 |               0 |               0 |              0 |                  0 | 2XM           |    3204 |          3209 | Double Masters | 2XM        | Double Masters    |              | 2020-08-07    |               2655 |            384 | masters |\ndf2:\n|    |   id | language            | setCode   | translation     |\n|---:|-----:|:--------------------|:----------|:----------------|\n|  0 |    1 | Chinese Simplified  | 10E       | 核心系列第十版         |\n|  1 |    2 | Chinese Traditional | 10E       | 核心系列第十版         |\n|  2 |    3 | French              | 10E       | Dixième édition |\nForeign keys:\ndf2.setCode = df1.code\n"
  },
  {
    "table_paths": ["datasets/BIRD_dev-card_games/sets.csv"],
    "query": "Please provide top three sets that don't appear in Magic: The Gathering Online, along with their names in in alphabetical order.",
    "cot": "",
    "code": "import numpy as np\nimport pandas as p np\n\n# Load the data\n\n\n# Filter the dataframe to only include sets that are not online only\nnon_online_df = df[df['isOnlineOnly'] == 0]\n\n# Sort the dataframe by the name of the set in alphabetical order\nsorted_df = non_online_df.sort_values('name')\n\n# Select the top three sets\ntop_three_df = sorted_df.head(3)\n\n# Print the final result\nprint(top_three_df[['name']])",
    "observation": "SyntaxError: invalid syntax (<unknown>, line 2)",
    "true_result": "[('15th Anniversary Cards',), ('2016 Heroes of the Realm',), ('2017 Gift Pack',)]",
    "table_infos": "df:\n|    |   id |   baseSetSize | block    | booster                                                                                                                                                                                                                                                        | code   |   isFoilOnly |   isForeignOnly |   isNonFoilOnly |   isOnlineOnly |   isPartialPreview | keyruneCode   |   mcmId |   mcmIdExtras | mcmName       | mtgoCode   | name          | parentCode   | releaseDate   |   tcgplayerGroupId |   totalSetSize | type   |\n|---:|-----:|--------------:|:---------|:---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|:-------|-------------:|----------------:|----------------:|---------------:|-------------------:|:--------------|--------:|--------------:|:--------------|:-----------|:--------------|:-------------|:--------------|-------------------:|---------------:|:-------|\n|  0 |    1 |           383 | Core Set | {'default': {'boosters': [{'contents': {'basic': 1, 'common': 10, 'rare': 1, 'uncommon': 3}, 'weight': 1913922}, {'contents': {'basic': 1, 'common': 9, 'foilCommon': 1, 'rare': 1, 'uncommon': 3}, 'weight': 318987}, {'contents': {'basic': 1, 'common': 10, | 10E    |            0 |               0 |               0 |              0 |                  0 | 10E           |      74 |           nan | Tenth Edition | 10E        | Tenth Edition |              | 2007-07-13    |                  1 |            508 | core   |\n"
  },
  {
    "table_paths": [
      "datasets/BIRD_dev-card_games/sets.csv",
      "datasets/BIRD_dev-card_games/set_translations.csv"
    ],
    "query": "What is the name of set number 5 and its translation?",
    "cot": "\nWe need to join df1 and df2 on the setCode column. Then, we can filter the rows where id is 5 and get the name and translation.\n",
    "code": "# Data Preparation\ndf1['mcmId'] = df1['mcmId'].replace(np.nan, 'nan')\ndf2['setCode'] = df2['setCode'].replace(np.nan, 'nan')\n\n# Data Processing\nfinal_df = pd.merge(df1, df2, how='left', left_on='code', right_on='setCode')\nfinal_df = final_df[final_df['id'] == 5]\n\n# Declare `final_df` Variable\nfinal_df = final_df[['name_x', 'translation']]\n\n# Print the final result\nprint(final_df)",
    "observation": "KeyError: 'id'",
    "true_result": "[('Tenth Edition', 'Set Base Decima Edizione')]",
    "table_infos": "df1:\n|    |   id |   baseSetSize | block    | booster                                                                                                                                                                                                                                                         | code   |   isFoilOnly |   isForeignOnly |   isNonFoilOnly |   isOnlineOnly |   isPartialPreview | keyruneCode   |   mcmId |   mcmIdExtras | mcmName        | mtgoCode   | name              | parentCode   | releaseDate   |   tcgplayerGroupId |   totalSetSize | type    |\n|---:|-----:|--------------:|:---------|:----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|:-------|-------------:|----------------:|----------------:|---------------:|-------------------:|:--------------|--------:|--------------:|:---------------|:-----------|:------------------|:-------------|:--------------|-------------------:|---------------:|:--------|\n|  0 |    1 |           383 | Core Set | {'default': {'boosters': [{'contents': {'basic': 1, 'common': 10, 'rare': 1, 'uncommon': 3}, 'weight': 1913922}, {'contents': {'basic': 1, 'common': 9, 'foilCommon': 1, 'rare': 1, 'uncommon': 3}, 'weight': 318987}, {'contents': {'basic': 1, 'common': 10,  | 10E    |            0 |               0 |               0 |              0 |                  0 | 10E           |      74 |           nan | Tenth Edition  | 10E        | Tenth Edition     |              | 2007-07-13    |                  1 |            508 | core    |\n|  1 |    2 |           302 | Core Set | {'default': {'boosters': [{'contents': {'common': 11, 'rare': 1, 'uncommon': 3}, 'weight': 1}], 'boostersTotalWeight': 1, 'sheets': {'common': {'cards': {'0ab4e3e6-f9fe-5fdc-9697-fd20690a0e15': 1, '0b326a61-0389-54e2-ac58-7bb47ca88202': 1, '0f099574-e9f7- | 2ED    |            0 |               0 |               1 |              0 |                  0 | 2ED           |     nan |           nan |                |            | Unlimited Edition |              | 1993-12-01    |                115 |            302 | core    |\n|  2 |    3 |           332 |          | {'default': {'boosters': [{'contents': {'common': 8, 'dedicatedFoil2xm': 2, 'rareMythic': 2, 'uncommon': 3}, 'weight': 1}], 'boostersTotalWeight': 1, 'sheets': {'common': {'balanceColors': True, 'cards': {'01df4e32-7fe4-5b8d-9460-0f08fa29153e': 1, '032c60 | 2XM    |            0 |               0 |               0 |              0 |                  0 | 2XM           |    3204 |          3209 | Double Masters | 2XM        | Double Masters    |              | 2020-08-07    |               2655 |            384 | masters |\ndf2:\n|    |   id | language            | setCode   | translation     |\n|---:|-----:|:--------------------|:----------|:----------------|\n|  0 |    1 | Chinese Simplified  | 10E       | 核心系列第十版         |\n|  1 |    2 | Chinese Traditional | 10E       | 核心系列第十版         |\n|  2 |    3 | French              | 10E       | Dixième édition |\nForeign keys:\ndf2.setCode = df1.code\n"
  },
  {
    "table_paths": [
      "datasets/BIRD_dev-card_games/sets.csv",
      "datasets/BIRD_dev-card_games/set_translations.csv"
    ],
    "query": "What is the language and expansion type of set number 206?",
    "cot": "\nTo answer this question, we need to join df1 and df2 on the 'code' column. Then, we can filter the dataframe to get the set number 206 and select the 'language' and 'type' columns.\n",
    "code": "import numpy as np\nimport pandas as pd\n\n# Load the dataframes\n\n\n\n# Join df1 and df2 on 'code'\ndf = pd.merge(df1, df2, on='code')\n\n# Filter the dataframe to get the set number 206\ndf = df[df['id'] == 206]\n\n# Select the 'language' and 'type' columns\nfinal_df = df[['language', 'type']]\n\n# Print the final result\nprint(final_df)",
    "observation": "KeyError: 'code'",
    "true_result": "[('Japanese', 'commander')]",
    "table_infos": "df1:\n|    |   id |   baseSetSize | block    | booster                                                                                                                                                                                                                                                         | code   |   isFoilOnly |   isForeignOnly |   isNonFoilOnly |   isOnlineOnly |   isPartialPreview | keyruneCode   |   mcmId |   mcmIdExtras | mcmName        | mtgoCode   | name              | parentCode   | releaseDate   |   tcgplayerGroupId |   totalSetSize | type    |\n|---:|-----:|--------------:|:---------|:----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|:-------|-------------:|----------------:|----------------:|---------------:|-------------------:|:--------------|--------:|--------------:|:---------------|:-----------|:------------------|:-------------|:--------------|-------------------:|---------------:|:--------|\n|  0 |    1 |           383 | Core Set | {'default': {'boosters': [{'contents': {'basic': 1, 'common': 10, 'rare': 1, 'uncommon': 3}, 'weight': 1913922}, {'contents': {'basic': 1, 'common': 9, 'foilCommon': 1, 'rare': 1, 'uncommon': 3}, 'weight': 318987}, {'contents': {'basic': 1, 'common': 10,  | 10E    |            0 |               0 |               0 |              0 |                  0 | 10E           |      74 |           nan | Tenth Edition  | 10E        | Tenth Edition     |              | 2007-07-13    |                  1 |            508 | core    |\n|  1 |    2 |           302 | Core Set | {'default': {'boosters': [{'contents': {'common': 11, 'rare': 1, 'uncommon': 3}, 'weight': 1}], 'boostersTotalWeight': 1, 'sheets': {'common': {'cards': {'0ab4e3e6-f9fe-5fdc-9697-fd20690a0e15': 1, '0b326a61-0389-54e2-ac58-7bb47ca88202': 1, '0f099574-e9f7- | 2ED    |            0 |               0 |               1 |              0 |                  0 | 2ED           |     nan |           nan |                |            | Unlimited Edition |              | 1993-12-01    |                115 |            302 | core    |\n|  2 |    3 |           332 |          | {'default': {'boosters': [{'contents': {'common': 8, 'dedicatedFoil2xm': 2, 'rareMythic': 2, 'uncommon': 3}, 'weight': 1}], 'boostersTotalWeight': 1, 'sheets': {'common': {'balanceColors': True, 'cards': {'01df4e32-7fe4-5b8d-9460-0f08fa29153e': 1, '032c60 | 2XM    |            0 |               0 |               0 |              0 |                  0 | 2XM           |    3204 |          3209 | Double Masters | 2XM        | Double Masters    |              | 2020-08-07    |               2655 |            384 | masters |\ndf2:\n|    |   id | language            | setCode   | translation     |\n|---:|-----:|:--------------------|:----------|:----------------|\n|  0 |    1 | Chinese Simplified  | 10E       | 核心系列第十版         |\n|  1 |    2 | Chinese Traditional | 10E       | 核心系列第十版         |\n|  2 |    3 | French              | 10E       | Dixième édition |\nForeign keys:\ndf2.setCode = df1.code\n"
  },
  {
    "table_paths": [
      "datasets/BIRD_dev-card_games/sets.csv",
      "datasets/BIRD_dev-card_games/set_translations.csv"
    ],
    "query": "Please list top two sets of cards with their IDs that have Italian-language cards and are located in the Shadowmoor block in alphabetical order.",
    "cot": "\nTo solve this problem, we need to filter the data based on the language and block. Then, we need to sort the data by the set name and select the top two sets.\n",
    "code": "# Data Preparation\ndf1['block'] = df1['block'].str.lower()\ndf2['language'] = df2['language'].str.lower()\n\n# Data Processing\nfiltered_df = pd.merge(df1, df2, left_on='code', right_on='setCode', how='inner')\nfiltered_df = filtered_df[(filtered_df['block'] == 'shadowmoor') & (filtered_df['language'] == 'italian')]\nfiltered_df = filtered_df.sort_values('name')\n\nfinal_df = filtered_df[['id', 'name']].head(2)\n\n# Print the final result\nprint(final_df)",
    "observation": "KeyError: \"['id'] not in index\"",
    "true_result": "[('Eventide', 101), ('Shadowmoor', 485)]",
    "table_infos": "df1:\n|    |   id |   baseSetSize | block    | booster                                                                                                                                                                                                                                                         | code   |   isFoilOnly |   isForeignOnly |   isNonFoilOnly |   isOnlineOnly |   isPartialPreview | keyruneCode   |   mcmId |   mcmIdExtras | mcmName        | mtgoCode   | name              | parentCode   | releaseDate   |   tcgplayerGroupId |   totalSetSize | type    |\n|---:|-----:|--------------:|:---------|:----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|:-------|-------------:|----------------:|----------------:|---------------:|-------------------:|:--------------|--------:|--------------:|:---------------|:-----------|:------------------|:-------------|:--------------|-------------------:|---------------:|:--------|\n|  0 |    1 |           383 | Core Set | {'default': {'boosters': [{'contents': {'basic': 1, 'common': 10, 'rare': 1, 'uncommon': 3}, 'weight': 1913922}, {'contents': {'basic': 1, 'common': 9, 'foilCommon': 1, 'rare': 1, 'uncommon': 3}, 'weight': 318987}, {'contents': {'basic': 1, 'common': 10,  | 10E    |            0 |               0 |               0 |              0 |                  0 | 10E           |      74 |           nan | Tenth Edition  | 10E        | Tenth Edition     |              | 2007-07-13    |                  1 |            508 | core    |\n|  1 |    2 |           302 | Core Set | {'default': {'boosters': [{'contents': {'common': 11, 'rare': 1, 'uncommon': 3}, 'weight': 1}], 'boostersTotalWeight': 1, 'sheets': {'common': {'cards': {'0ab4e3e6-f9fe-5fdc-9697-fd20690a0e15': 1, '0b326a61-0389-54e2-ac58-7bb47ca88202': 1, '0f099574-e9f7- | 2ED    |            0 |               0 |               1 |              0 |                  0 | 2ED           |     nan |           nan |                |            | Unlimited Edition |              | 1993-12-01    |                115 |            302 | core    |\n|  2 |    3 |           332 |          | {'default': {'boosters': [{'contents': {'common': 8, 'dedicatedFoil2xm': 2, 'rareMythic': 2, 'uncommon': 3}, 'weight': 1}], 'boostersTotalWeight': 1, 'sheets': {'common': {'balanceColors': True, 'cards': {'01df4e32-7fe4-5b8d-9460-0f08fa29153e': 1, '032c60 | 2XM    |            0 |               0 |               0 |              0 |                  0 | 2XM           |    3204 |          3209 | Double Masters | 2XM        | Double Masters    |              | 2020-08-07    |               2655 |            384 | masters |\ndf2:\n|    |   id | language            | setCode   | translation     |\n|---:|-----:|:--------------------|:----------|:----------------|\n|  0 |    1 | Chinese Simplified  | 10E       | 核心系列第十版         |\n|  1 |    2 | Chinese Traditional | 10E       | 核心系列第十版         |\n|  2 |    3 | French              | 10E       | Dixième édition |\nForeign keys:\ndf2.setCode = df1.code\n"
  },
  {
    "table_paths": [
      "datasets/BIRD_dev-card_games/sets.csv",
      "datasets/BIRD_dev-card_games/set_translations.csv"
    ],
    "query": "Which set is not available outside of the United States and has foil cards with Japanese writing on them? Please include the set ID in your response.",
    "cot": "\nTo solve this problem, we need to filter the data in df1 where isForeignOnly is 1 and isFoilOnly is 1. Then, we need to join this filtered data with df2 to get the translation of the set.\n",
    "code": "import numpy as np\nimport pandas as pd\n\n# Load the data\n\n\n\n# Filter the data\nfiltered_df1 = df1[(df1['isForeignOnly'] == 1) & (df1['isFoilOnly'] == 1)]\n\n# Join the data\nfinal_df = pd.merge(filtered_df1, df2, on='setCode', how='inner')\n\n# Print the final result\nprint(final_df[['id', 'language', 'setCode', 'translation']])",
    "observation": "KeyError: 'setCode'",
    "true_result": "[(\"Commander's Arsenal\", 50), ('Premium Deck Series: Fire and Lightning', 307), ('From the Vault: Exiled', 522), ('From the Vault: Relics', 523), ('From the Vault: Legends', 524), ('From the Vault: Realms', 525), ('From the Vault: Twenty', 526), ('From the Vault: Annihilation', 527), ('From the Vault: Angels', 528), ('From the Vault: Lore', 529)]",
    "table_infos": "df1:\n|    |   id |   baseSetSize | block    | booster                                                                                                                                                                                                                                                         | code   |   isFoilOnly |   isForeignOnly |   isNonFoilOnly |   isOnlineOnly |   isPartialPreview | keyruneCode   |   mcmId |   mcmIdExtras | mcmName        | mtgoCode   | name              | parentCode   | releaseDate   |   tcgplayerGroupId |   totalSetSize | type    |\n|---:|-----:|--------------:|:---------|:----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|:-------|-------------:|----------------:|----------------:|---------------:|-------------------:|:--------------|--------:|--------------:|:---------------|:-----------|:------------------|:-------------|:--------------|-------------------:|---------------:|:--------|\n|  0 |    1 |           383 | Core Set | {'default': {'boosters': [{'contents': {'basic': 1, 'common': 10, 'rare': 1, 'uncommon': 3}, 'weight': 1913922}, {'contents': {'basic': 1, 'common': 9, 'foilCommon': 1, 'rare': 1, 'uncommon': 3}, 'weight': 318987}, {'contents': {'basic': 1, 'common': 10,  | 10E    |            0 |               0 |               0 |              0 |                  0 | 10E           |      74 |           nan | Tenth Edition  | 10E        | Tenth Edition     |              | 2007-07-13    |                  1 |            508 | core    |\n|  1 |    2 |           302 | Core Set | {'default': {'boosters': [{'contents': {'common': 11, 'rare': 1, 'uncommon': 3}, 'weight': 1}], 'boostersTotalWeight': 1, 'sheets': {'common': {'cards': {'0ab4e3e6-f9fe-5fdc-9697-fd20690a0e15': 1, '0b326a61-0389-54e2-ac58-7bb47ca88202': 1, '0f099574-e9f7- | 2ED    |            0 |               0 |               1 |              0 |                  0 | 2ED           |     nan |           nan |                |            | Unlimited Edition |              | 1993-12-01    |                115 |            302 | core    |\n|  2 |    3 |           332 |          | {'default': {'boosters': [{'contents': {'common': 8, 'dedicatedFoil2xm': 2, 'rareMythic': 2, 'uncommon': 3}, 'weight': 1}], 'boostersTotalWeight': 1, 'sheets': {'common': {'balanceColors': True, 'cards': {'01df4e32-7fe4-5b8d-9460-0f08fa29153e': 1, '032c60 | 2XM    |            0 |               0 |               0 |              0 |                  0 | 2XM           |    3204 |          3209 | Double Masters | 2XM        | Double Masters    |              | 2020-08-07    |               2655 |            384 | masters |\ndf2:\n|    |   id | language            | setCode   | translation     |\n|---:|-----:|:--------------------|:----------|:----------------|\n|  0 |    1 | Chinese Simplified  | 10E       | 核心系列第十版         |\n|  1 |    2 | Chinese Traditional | 10E       | 核心系列第十版         |\n|  2 |    3 | French              | 10E       | Dixième édition |\nForeign keys:\ndf2.setCode = df1.code\n"
  },
  {
    "table_paths": ["datasets/BIRD_dev-card_games/sets.csv"],
    "query": "List out the set name of the set code \"ALL\".",
    "cot": "",
    "code": "import numpy as np\nimport pandas as pd\n\n# Assuming df is your DataFrame\n\n# Data Processing\nfinal_df = df[df['code'] == 'ALL']\n\n# Print the final result\nprint(final_df['mcmName'].values[0])",
    "observation": "SyntaxError: closing parenthesis '}' does not match opening parenthesis '[' (<unknown>, line 9)",
    "true_result": "[('Alliances',)]",
    "table_infos": "df:\n|    |   id |   baseSetSize | block    | booster                                                                                                                                                                                                                                                        | code   |   isFoilOnly |   isForeignOnly |   isNonFoilOnly |   isOnlineOnly |   isPartialPreview | keyruneCode   |   mcmId |   mcmIdExtras | mcmName       | mtgoCode   | name          | parentCode   | releaseDate   |   tcgplayerGroupId |   totalSetSize | type   |\n|---:|-----:|--------------:|:---------|:---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|:-------|-------------:|----------------:|----------------:|---------------:|-------------------:|:--------------|--------:|--------------:|:--------------|:-----------|:--------------|:-------------|:--------------|-------------------:|---------------:|:-------|\n|  0 |    1 |           383 | Core Set | {'default': {'boosters': [{'contents': {'basic': 1, 'common': 10, 'rare': 1, 'uncommon': 3}, 'weight': 1913922}, {'contents': {'basic': 1, 'common': 9, 'foilCommon': 1, 'rare': 1, 'uncommon': 3}, 'weight': 318987}, {'contents': {'basic': 1, 'common': 10, | 10E    |            0 |               0 |               0 |              0 |                  0 | 10E           |      74 |           nan | Tenth Edition | 10E        | Tenth Edition |              | 2007-07-13    |                  1 |            508 | core   |\n"
  },
  {
    "table_paths": [
      "datasets/BIRD_dev-card_games/sets.csv",
      "datasets/BIRD_dev-card_games/set_translations.csv"
    ],
    "query": "Mention the base set size and set code of the set that was in block named \"Masques\" and \"Mirage\".",
    "cot": "",
    "code": "# Load the data\n\n\n\n# Merge the dataframes on 'code'\ndf = pd.merge(df1, df2, on='code')\n\n# Filter the dataframe to get the rows where block is either 'Masques' or 'Mirage'\ndf_filtered = df[df['block'].isin(['Masques', 'Mirage'])]\n\n# Select the baseSetSize and setCode columns\nfinal_df = df_filtered[['baseSetSize', 'code']]\n\n# Print the final dataframe\nprint(final_df)",
    "observation": "KeyError: 'code'",
    "true_result": "[(350, 'MMQ'), (144, 'PCY'), (167, 'WTH')]",
    "table_infos": "df1:\n|    |   id |   baseSetSize | block    | booster                                                                                                                                                                                                                                                         | code   |   isFoilOnly |   isForeignOnly |   isNonFoilOnly |   isOnlineOnly |   isPartialPreview | keyruneCode   |   mcmId |   mcmIdExtras | mcmName        | mtgoCode   | name              | parentCode   | releaseDate   |   tcgplayerGroupId |   totalSetSize | type    |\n|---:|-----:|--------------:|:---------|:----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|:-------|-------------:|----------------:|----------------:|---------------:|-------------------:|:--------------|--------:|--------------:|:---------------|:-----------|:------------------|:-------------|:--------------|-------------------:|---------------:|:--------|\n|  0 |    1 |           383 | Core Set | {'default': {'boosters': [{'contents': {'basic': 1, 'common': 10, 'rare': 1, 'uncommon': 3}, 'weight': 1913922}, {'contents': {'basic': 1, 'common': 9, 'foilCommon': 1, 'rare': 1, 'uncommon': 3}, 'weight': 318987}, {'contents': {'basic': 1, 'common': 10,  | 10E    |            0 |               0 |               0 |              0 |                  0 | 10E           |      74 |           nan | Tenth Edition  | 10E        | Tenth Edition     |              | 2007-07-13    |                  1 |            508 | core    |\n|  1 |    2 |           302 | Core Set | {'default': {'boosters': [{'contents': {'common': 11, 'rare': 1, 'uncommon': 3}, 'weight': 1}], 'boostersTotalWeight': 1, 'sheets': {'common': {'cards': {'0ab4e3e6-f9fe-5fdc-9697-fd20690a0e15': 1, '0b326a61-0389-54e2-ac58-7bb47ca88202': 1, '0f099574-e9f7- | 2ED    |            0 |               0 |               1 |              0 |                  0 | 2ED           |     nan |           nan |                |            | Unlimited Edition |              | 1993-12-01    |                115 |            302 | core    |\n|  2 |    3 |           332 |          | {'default': {'boosters': [{'contents': {'common': 8, 'dedicatedFoil2xm': 2, 'rareMythic': 2, 'uncommon': 3}, 'weight': 1}], 'boostersTotalWeight': 1, 'sheets': {'common': {'balanceColors': True, 'cards': {'01df4e32-7fe4-5b8d-9460-0f08fa29153e': 1, '032c60 | 2XM    |            0 |               0 |               0 |              0 |                  0 | 2XM           |    3204 |          3209 | Double Masters | 2XM        | Double Masters    |              | 2020-08-07    |               2655 |            384 | masters |\ndf2:\n|    |   id | language            | setCode   | translation     |\n|---:|-----:|:--------------------|:----------|:----------------|\n|  0 |    1 | Chinese Simplified  | 10E       | 核心系列第十版         |\n|  1 |    2 | Chinese Traditional | 10E       | 核心系列第十版         |\n|  2 |    3 | French              | 10E       | Dixième édition |\nForeign keys:\ndf2.setCode = df1.code\n"
  },
  {
    "table_paths": [
      "datasets/BIRD_dev-card_games/sets.csv",
      "datasets/BIRD_dev-card_games/set_translations.csv"
    ],
    "query": "Give the code of sets have expansion type of 'expansion'?",
    "cot": "\nWe need to filter the dataframe df1 where the type column is 'expansion'.\n",
    "code": "import numpy as np\nimport pandas as pd\n\n# Load the dataframes\n\n\n\n# Merge the dataframes on 'code'\ndf = pd.merge(df1, df2, on='code')\n\n# Filter the dataframe where type is 'expansion'\nfinal_df = df[df['type'] == 'expansion']\n\n# Print the final result\nprint(final_df)",
    "observation": "KeyError: 'code'",
    "true_result": "[('5DN',), ('AER',), ('AKH',), ('ALA',), ('APC',), ('ARB',), ('BFZ',), ('BNG',), ('BOK',), ('CHK',), ('CON',), ('CSP',), ('DIS',), ('DOM',), ('DST',), ('DTK',), ('ELD',), ('EMN',), ('EVE',), ('EXO',), ('FRF',), ('FUT',), ('GPT',), ('GTC',), ('HML',), ('ICE',), ('IKO',), ('JOU',), ('JUD',), ('KLD',), ('KTK',), ('LGN',), ('LRW',), ('MBS',), ('MMQ',), ('MOR',), ('MRD',), ('ODY',), ('OGW',), ('ONS',), ('PCY',), ('PLC',), ('RAV',), ('RIX',), ('RNA',), ('RTR',), ('SCG',), ('SHM',), ('SOI',), ('SOK',), ('STH',), ('THB',), ('THS',), ('TMP',), ('TOR',), ('TSP',), ('UDS',), ('ULG',), ('USG',), ('WAR',), ('WTH',)]",
    "table_infos": "df1:\n|    |   id |   baseSetSize | block    | booster                                                                                                                                                                                                                                                         | code   |   isFoilOnly |   isForeignOnly |   isNonFoilOnly |   isOnlineOnly |   isPartialPreview | keyruneCode   |   mcmId |   mcmIdExtras | mcmName        | mtgoCode   | name              | parentCode   | releaseDate   |   tcgplayerGroupId |   totalSetSize | type    |\n|---:|-----:|--------------:|:---------|:----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|:-------|-------------:|----------------:|----------------:|---------------:|-------------------:|:--------------|--------:|--------------:|:---------------|:-----------|:------------------|:-------------|:--------------|-------------------:|---------------:|:--------|\n|  0 |    1 |           383 | Core Set | {'default': {'boosters': [{'contents': {'basic': 1, 'common': 10, 'rare': 1, 'uncommon': 3}, 'weight': 1913922}, {'contents': {'basic': 1, 'common': 9, 'foilCommon': 1, 'rare': 1, 'uncommon': 3}, 'weight': 318987}, {'contents': {'basic': 1, 'common': 10,  | 10E    |            0 |               0 |               0 |              0 |                  0 | 10E           |      74 |           nan | Tenth Edition  | 10E        | Tenth Edition     |              | 2007-07-13    |                  1 |            508 | core    |\n|  1 |    2 |           302 | Core Set | {'default': {'boosters': [{'contents': {'common': 11, 'rare': 1, 'uncommon': 3}, 'weight': 1}], 'boostersTotalWeight': 1, 'sheets': {'common': {'cards': {'0ab4e3e6-f9fe-5fdc-9697-fd20690a0e15': 1, '0b326a61-0389-54e2-ac58-7bb47ca88202': 1, '0f099574-e9f7- | 2ED    |            0 |               0 |               1 |              0 |                  0 | 2ED           |     nan |           nan |                |            | Unlimited Edition |              | 1993-12-01    |                115 |            302 | core    |\n|  2 |    3 |           332 |          | {'default': {'boosters': [{'contents': {'common': 8, 'dedicatedFoil2xm': 2, 'rareMythic': 2, 'uncommon': 3}, 'weight': 1}], 'boostersTotalWeight': 1, 'sheets': {'common': {'balanceColors': True, 'cards': {'01df4e32-7fe4-5b8d-9460-0f08fa29153e': 1, '032c60 | 2XM    |            0 |               0 |               0 |              0 |                  0 | 2XM           |    3204 |          3209 | Double Masters | 2XM        | Double Masters    |              | 2020-08-07    |               2655 |            384 | masters |\ndf2:\n|    |   id | language            | setCode   | translation     |\n|---:|-----:|:--------------------|:----------|:----------------|\n|  0 |    1 | Chinese Simplified  | 10E       | 核心系列第十版         |\n|  1 |    2 | Chinese Traditional | 10E       | 核心系列第十版         |\n|  2 |    3 | French              | 10E       | Dixième édition |\nForeign keys:\ndf2.setCode = df1.code\n"
  },
  {
    "table_paths": [
      "datasets/BIRD_dev-card_games/sets.csv",
      "datasets/BIRD_dev-card_games/set_translations.csv"
    ],
    "query": "How many cards are there in the base set of \"Hauptset Zehnte Edition\"?",
    "cot": "",
    "code": "import numpy as np\nimport pandas as pd\n\n# Load the data\n\n\n\n# Merge the dataframes on the 'code' column\ndf = pd.merge(df1, df2, on='code')\n\n# Filter the dataframe to get the row for 'Hauptset Zehnte Edition'\nfiltered_df = df[df['name'] == 'Hauptset Zehnte Edition']\n\n# Get the baseSetSize for the filtered row\nbase_set_size = filtered_df['baseSetSize'].values[0]\n\nprint(f\"There are {base_set_size} cards in the base set of 'Hauptset Zehnte Edition'.\")",
    "observation": "KeyError: 'code'",
    "true_result": "[(383,)]",
    "table_infos": "df1:\n|    |   id |   baseSetSize | block    | booster                                                                                                                                                                                                                                                         | code   |   isFoilOnly |   isForeignOnly |   isNonFoilOnly |   isOnlineOnly |   isPartialPreview | keyruneCode   |   mcmId |   mcmIdExtras | mcmName        | mtgoCode   | name              | parentCode   | releaseDate   |   tcgplayerGroupId |   totalSetSize | type    |\n|---:|-----:|--------------:|:---------|:----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|:-------|-------------:|----------------:|----------------:|---------------:|-------------------:|:--------------|--------:|--------------:|:---------------|:-----------|:------------------|:-------------|:--------------|-------------------:|---------------:|:--------|\n|  0 |    1 |           383 | Core Set | {'default': {'boosters': [{'contents': {'basic': 1, 'common': 10, 'rare': 1, 'uncommon': 3}, 'weight': 1913922}, {'contents': {'basic': 1, 'common': 9, 'foilCommon': 1, 'rare': 1, 'uncommon': 3}, 'weight': 318987}, {'contents': {'basic': 1, 'common': 10,  | 10E    |            0 |               0 |               0 |              0 |                  0 | 10E           |      74 |           nan | Tenth Edition  | 10E        | Tenth Edition     |              | 2007-07-13    |                  1 |            508 | core    |\n|  1 |    2 |           302 | Core Set | {'default': {'boosters': [{'contents': {'common': 11, 'rare': 1, 'uncommon': 3}, 'weight': 1}], 'boostersTotalWeight': 1, 'sheets': {'common': {'cards': {'0ab4e3e6-f9fe-5fdc-9697-fd20690a0e15': 1, '0b326a61-0389-54e2-ac58-7bb47ca88202': 1, '0f099574-e9f7- | 2ED    |            0 |               0 |               1 |              0 |                  0 | 2ED           |     nan |           nan |                |            | Unlimited Edition |              | 1993-12-01    |                115 |            302 | core    |\n|  2 |    3 |           332 |          | {'default': {'boosters': [{'contents': {'common': 8, 'dedicatedFoil2xm': 2, 'rareMythic': 2, 'uncommon': 3}, 'weight': 1}], 'boostersTotalWeight': 1, 'sheets': {'common': {'balanceColors': True, 'cards': {'01df4e32-7fe4-5b8d-9460-0f08fa29153e': 1, '032c60 | 2XM    |            0 |               0 |               0 |              0 |                  0 | 2XM           |    3204 |          3209 | Double Masters | 2XM        | Double Masters    |              | 2020-08-07    |               2655 |            384 | masters |\ndf2:\n|    |   id | language            | setCode   | translation     |\n|---:|-----:|:--------------------|:----------|:----------------|\n|  0 |    1 | Chinese Simplified  | 10E       | 核心系列第十版         |\n|  1 |    2 | Chinese Traditional | 10E       | 核心系列第十版         |\n|  2 |    3 | French              | 10E       | Dixième édition |\nForeign keys:\ndf2.setCode = df1.code\n"
  },
  {
    "table_paths": [
      "datasets/BIRD_dev-card_games/sets.csv",
      "datasets/BIRD_dev-card_games/set_translations.csv"
    ],
    "query": "What is the expansion type of the set \"Hauptset Zehnte Edition\"?",
    "cot": "",
    "code": "import numpy as np\nimport pandas as pd\n\n# Load the data\n\n\n\n# Merge the dataframes on 'code'\ndf = pd.merge(df1, df2, on='code')\n\n# Filter the dataframe to get the expansion type of the set \"Hauptset Zehnte Edition\"\nexpansion_type = df[df['name'] == 'Hauptset Zehnte Edition']['type'].values[0]\n\nprint(expansion_type)",
    "observation": "KeyError: 'code'",
    "true_result": "[('core',)]",
    "table_infos": "df1:\n|    |   id |   baseSetSize | block    | booster                                                                                                                                                                                                                                                         | code   |   isFoilOnly |   isForeignOnly |   isNonFoilOnly |   isOnlineOnly |   isPartialPreview | keyruneCode   |   mcmId |   mcmIdExtras | mcmName        | mtgoCode   | name              | parentCode   | releaseDate   |   tcgplayerGroupId |   totalSetSize | type    |\n|---:|-----:|--------------:|:---------|:----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|:-------|-------------:|----------------:|----------------:|---------------:|-------------------:|:--------------|--------:|--------------:|:---------------|:-----------|:------------------|:-------------|:--------------|-------------------:|---------------:|:--------|\n|  0 |    1 |           383 | Core Set | {'default': {'boosters': [{'contents': {'basic': 1, 'common': 10, 'rare': 1, 'uncommon': 3}, 'weight': 1913922}, {'contents': {'basic': 1, 'common': 9, 'foilCommon': 1, 'rare': 1, 'uncommon': 3}, 'weight': 318987}, {'contents': {'basic': 1, 'common': 10,  | 10E    |            0 |               0 |               0 |              0 |                  0 | 10E           |      74 |           nan | Tenth Edition  | 10E        | Tenth Edition     |              | 2007-07-13    |                  1 |            508 | core    |\n|  1 |    2 |           302 | Core Set | {'default': {'boosters': [{'contents': {'common': 11, 'rare': 1, 'uncommon': 3}, 'weight': 1}], 'boostersTotalWeight': 1, 'sheets': {'common': {'cards': {'0ab4e3e6-f9fe-5fdc-9697-fd20690a0e15': 1, '0b326a61-0389-54e2-ac58-7bb47ca88202': 1, '0f099574-e9f7- | 2ED    |            0 |               0 |               1 |              0 |                  0 | 2ED           |     nan |           nan |                |            | Unlimited Edition |              | 1993-12-01    |                115 |            302 | core    |\n|  2 |    3 |           332 |          | {'default': {'boosters': [{'contents': {'common': 8, 'dedicatedFoil2xm': 2, 'rareMythic': 2, 'uncommon': 3}, 'weight': 1}], 'boostersTotalWeight': 1, 'sheets': {'common': {'balanceColors': True, 'cards': {'01df4e32-7fe4-5b8d-9460-0f08fa29153e': 1, '032c60 | 2XM    |            0 |               0 |               0 |              0 |                  0 | 2XM           |    3204 |          3209 | Double Masters | 2XM        | Double Masters    |              | 2020-08-07    |               2655 |            384 | masters |\ndf2:\n|    |   id | language            | setCode   | translation     |\n|---:|-----:|:--------------------|:----------|:----------------|\n|  0 |    1 | Chinese Simplified  | 10E       | 核心系列第十版         |\n|  1 |    2 | Chinese Traditional | 10E       | 核心系列第十版         |\n|  2 |    3 | French              | 10E       | Dixième édition |\nForeign keys:\ndf2.setCode = df1.code\n"
  },
  {
    "table_paths": ["datasets/BIRD_dev-card_games/sets.csv"],
    "query": "List the keyrune code for the set whose code is 'PKHC'.",
    "cot": "",
    "code": "import numpy as np\nimport pandas as pd\n\n# Assuming df is your DataFrame\n\n# Data Processing\nfinal_df = df[df['code'] == 'PKHC']\n\n# Print the final result\nprint(final_df['keyruneCode'].values[0])",
    "observation": "SyntaxError: closing parenthesis ']' does not match opening parenthesis '{' (<unknown>, line 9)",
    "true_result": "[('KHC',)]",
    "table_infos": "df:\n|    |   id |   baseSetSize | block    | booster                                                                                                                                                                                                                                                        | code   |   isFoilOnly |   isForeignOnly |   isNonFoilOnly |   isOnlineOnly |   isPartialPreview | keyruneCode   |   mcmId |   mcmIdExtras | mcmName       | mtgoCode   | name          | parentCode   | releaseDate   |   tcgplayerGroupId |   totalSetSize | type   |\n|---:|-----:|--------------:|:---------|:---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|:-------|-------------:|----------------:|----------------:|---------------:|-------------------:|:--------------|--------:|--------------:|:--------------|:-----------|:--------------|:-------------|:--------------|-------------------:|---------------:|:-------|\n|  0 |    1 |           383 | Core Set | {'default': {'boosters': [{'contents': {'basic': 1, 'common': 10, 'rare': 1, 'uncommon': 3}, 'weight': 1913922}, {'contents': {'basic': 1, 'common': 9, 'foilCommon': 1, 'rare': 1, 'uncommon': 3}, 'weight': 318987}, {'contents': {'basic': 1, 'common': 10, | 10E    |            0 |               0 |               0 |              0 |                  0 | 10E           |      74 |           nan | Tenth Edition | 10E        | Tenth Edition |              | 2007-07-13    |                  1 |            508 | core   |\n"
  },
  {
    "table_paths": ["datasets/BIRD_dev-card_games/sets.csv"],
    "query": "For the set which had 'SS2' as the code, what is its magic card market id?",
    "cot": "",
    "code": "import numpy as np\nimport pandas as pd\n\n# Assuming df is your dataframe\n\n# Data Processing\nfiltered_df = df[df['code'] == 'SS2']\nmcmId = filtered_df['mcmId'].values[0]\n\n# Print the result\nprint(f\"The magic card market id for the set with 'SS2' as the code is: {mcmId}\")",
    "observation": "SyntaxError: closing parenthesis ']' does not match opening parenthesis '{' (<unknown>, line 9)",
    "true_result": "[(2460,)]",
    "table_infos": "df:\n|    |   id |   baseSetSize | block    | booster                                                                                                                                                                                                                                                        | code   |   isFoilOnly |   isForeignOnly |   isNonFoilOnly |   isOnlineOnly |   isPartialPreview | keyruneCode   |   mcmId |   mcmIdExtras | mcmName       | mtgoCode   | name          | parentCode   | releaseDate   |   tcgplayerGroupId |   totalSetSize | type   |\n|---:|-----:|--------------:|:---------|:---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|:-------|-------------:|----------------:|----------------:|---------------:|-------------------:|:--------------|--------:|--------------:|:--------------|:-----------|:--------------|:-------------|:--------------|-------------------:|---------------:|:-------|\n|  0 |    1 |           383 | Core Set | {'default': {'boosters': [{'contents': {'basic': 1, 'common': 10, 'rare': 1, 'uncommon': 3}, 'weight': 1913922}, {'contents': {'basic': 1, 'common': 9, 'foilCommon': 1, 'rare': 1, 'uncommon': 3}, 'weight': 318987}, {'contents': {'basic': 1, 'common': 10, | 10E    |            0 |               0 |               0 |              0 |                  0 | 10E           |      74 |           nan | Tenth Edition | 10E        | Tenth Edition |              | 2007-07-13    |                  1 |            508 | core   |\n"
  },
  {
    "table_paths": [
      "datasets/BIRD_dev-card_games/sets.csv",
      "datasets/BIRD_dev-card_games/set_translations.csv"
    ],
    "query": "What is the number of cards are there in the set of \"Rinascita di Alara\"?",
    "cot": "\nTo solve this problem, we need to find the 'setCode' for the set named \"Rinascita di Alara\" in df1 and then find the corresponding 'totalSetSize' in df1.\n",
    "code": "import numpy as np\nimport pandas as pd\n\n# Load the data\n\n\n\n# Merge the dataframes on 'setCode'\ndf = pd.merge(df1, df2, left_on='code', right_on='setCode', how='left')\n\n# Find the totalSetSize for the set named \"Rinascita di Alara\"\ntotal_set_size = df[df['name'] == 'Rinascita di Alara']['totalSetSize'].values[0]\n\nprint(f\"The number of cards in the set 'Rinascita di Alara' is {total_set_size}\")",
    "observation": "IndexError: index 0 is out of bounds for axis 0 with size 0",
    "true_result": "[(145,)]",
    "table_infos": "df1:\n|    |   id |   baseSetSize | block    | booster                                                                                                                                                                                                                                                         | code   |   isFoilOnly |   isForeignOnly |   isNonFoilOnly |   isOnlineOnly |   isPartialPreview | keyruneCode   |   mcmId |   mcmIdExtras | mcmName        | mtgoCode   | name              | parentCode   | releaseDate   |   tcgplayerGroupId |   totalSetSize | type    |\n|---:|-----:|--------------:|:---------|:----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|:-------|-------------:|----------------:|----------------:|---------------:|-------------------:|:--------------|--------:|--------------:|:---------------|:-----------|:------------------|:-------------|:--------------|-------------------:|---------------:|:--------|\n|  0 |    1 |           383 | Core Set | {'default': {'boosters': [{'contents': {'basic': 1, 'common': 10, 'rare': 1, 'uncommon': 3}, 'weight': 1913922}, {'contents': {'basic': 1, 'common': 9, 'foilCommon': 1, 'rare': 1, 'uncommon': 3}, 'weight': 318987}, {'contents': {'basic': 1, 'common': 10,  | 10E    |            0 |               0 |               0 |              0 |                  0 | 10E           |      74 |           nan | Tenth Edition  | 10E        | Tenth Edition     |              | 2007-07-13    |                  1 |            508 | core    |\n|  1 |    2 |           302 | Core Set | {'default': {'boosters': [{'contents': {'common': 11, 'rare': 1, 'uncommon': 3}, 'weight': 1}], 'boostersTotalWeight': 1, 'sheets': {'common': {'cards': {'0ab4e3e6-f9fe-5fdc-9697-fd20690a0e15': 1, '0b326a61-0389-54e2-ac58-7bb47ca88202': 1, '0f099574-e9f7- | 2ED    |            0 |               0 |               1 |              0 |                  0 | 2ED           |     nan |           nan |                |            | Unlimited Edition |              | 1993-12-01    |                115 |            302 | core    |\n|  2 |    3 |           332 |          | {'default': {'boosters': [{'contents': {'common': 8, 'dedicatedFoil2xm': 2, 'rareMythic': 2, 'uncommon': 3}, 'weight': 1}], 'boostersTotalWeight': 1, 'sheets': {'common': {'balanceColors': True, 'cards': {'01df4e32-7fe4-5b8d-9460-0f08fa29153e': 1, '032c60 | 2XM    |            0 |               0 |               0 |              0 |                  0 | 2XM           |    3204 |          3209 | Double Masters | 2XM        | Double Masters    |              | 2020-08-07    |               2655 |            384 | masters |\ndf2:\n|    |   id | language            | setCode   | translation     |\n|---:|-----:|:--------------------|:----------|:----------------|\n|  0 |    1 | Chinese Simplified  | 10E       | 核心系列第十版         |\n|  1 |    2 | Chinese Traditional | 10E       | 核心系列第十版         |\n|  2 |    3 | French              | 10E       | Dixième édition |\nForeign keys:\ndf2.setCode = df1.code\n"
  },
  {
    "table_paths": [
      "datasets/BIRD_dev-card_games/sets.csv",
      "datasets/BIRD_dev-card_games/set_translations.csv"
    ],
    "query": "What is the release date for the set \"Ola de frío\"?",
    "cot": "",
    "code": "# Load the data\n\n\n\n# Merge the dataframes on the 'setCode' column\ndf = pd.merge(df1, df2, left_on='code', right_on='setCode')\n\n# Filter the dataframe to get the release date for the set \"Ola de frío\"\nrelease_date = df[df['name'] == 'Ola de frío']['releaseDate'].values[0]\n\nprint(f\"The release date for the set 'Ola de frío' is: {release_date}\")",
    "observation": "IndexError: index 0 is out of bounds for axis 0 with size 0",
    "true_result": "[('2006-07-21',)]",
    "table_infos": "df1:\n|    |   id |   baseSetSize | block    | booster                                                                                                                                                                                                                                                         | code   |   isFoilOnly |   isForeignOnly |   isNonFoilOnly |   isOnlineOnly |   isPartialPreview | keyruneCode   |   mcmId |   mcmIdExtras | mcmName        | mtgoCode   | name              | parentCode   | releaseDate   |   tcgplayerGroupId |   totalSetSize | type    |\n|---:|-----:|--------------:|:---------|:----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|:-------|-------------:|----------------:|----------------:|---------------:|-------------------:|:--------------|--------:|--------------:|:---------------|:-----------|:------------------|:-------------|:--------------|-------------------:|---------------:|:--------|\n|  0 |    1 |           383 | Core Set | {'default': {'boosters': [{'contents': {'basic': 1, 'common': 10, 'rare': 1, 'uncommon': 3}, 'weight': 1913922}, {'contents': {'basic': 1, 'common': 9, 'foilCommon': 1, 'rare': 1, 'uncommon': 3}, 'weight': 318987}, {'contents': {'basic': 1, 'common': 10,  | 10E    |            0 |               0 |               0 |              0 |                  0 | 10E           |      74 |           nan | Tenth Edition  | 10E        | Tenth Edition     |              | 2007-07-13    |                  1 |            508 | core    |\n|  1 |    2 |           302 | Core Set | {'default': {'boosters': [{'contents': {'common': 11, 'rare': 1, 'uncommon': 3}, 'weight': 1}], 'boostersTotalWeight': 1, 'sheets': {'common': {'cards': {'0ab4e3e6-f9fe-5fdc-9697-fd20690a0e15': 1, '0b326a61-0389-54e2-ac58-7bb47ca88202': 1, '0f099574-e9f7- | 2ED    |            0 |               0 |               1 |              0 |                  0 | 2ED           |     nan |           nan |                |            | Unlimited Edition |              | 1993-12-01    |                115 |            302 | core    |\n|  2 |    3 |           332 |          | {'default': {'boosters': [{'contents': {'common': 8, 'dedicatedFoil2xm': 2, 'rareMythic': 2, 'uncommon': 3}, 'weight': 1}], 'boostersTotalWeight': 1, 'sheets': {'common': {'balanceColors': True, 'cards': {'01df4e32-7fe4-5b8d-9460-0f08fa29153e': 1, '032c60 | 2XM    |            0 |               0 |               0 |              0 |                  0 | 2XM           |    3204 |          3209 | Double Masters | 2XM        | Double Masters    |              | 2020-08-07    |               2655 |            384 | masters |\ndf2:\n|    |   id | language            | setCode   | translation     |\n|---:|-----:|:--------------------|:----------|:----------------|\n|  0 |    1 | Chinese Simplified  | 10E       | 核心系列第十版         |\n|  1 |    2 | Chinese Traditional | 10E       | 核心系列第十版         |\n|  2 |    3 | French              | 10E       | Dixième édition |\nForeign keys:\ndf2.setCode = df1.code\n"
  },
  {
    "table_paths": [
      "datasets/BIRD_dev-card_games/sets.csv",
      "datasets/BIRD_dev-card_games/set_translations.csv"
    ],
    "query": "What is the annual average number of sets that were released between 1/1/2012 to 12/31/2015? Indicate the common langugage of the card.",
    "cot": "\nFirst, we need to convert the releaseDate column to datetime format. Then, we can filter the dataframe to include only the sets released between 2012 and 2015. We can group by language and count the number of unique setCodes for each language. Finally, we can calculate the average number of sets released per year.\n",
    "code": "import numpy as np\nimport pandas as pd\n\n# Convert releaseDate to datetime\ndf1['releaseDate'] = pd.to_datetime(df1['releaseDate'])\n\n# Filter dataframe to include only sets released between 2012 and 2015\ndf1_filtered = df1[(df1['releaseDate'].dt.year >= 2012) & (df1['releaseDate'].dt.year <= 2015)]\n\n# Group by language and count the number of unique setCodes for each language\nlanguage_counts = df1_filtered.groupby('language')['setCode'].nunique()\n\n# Merge with df2 to get the common language for each setCode\ndf1_filtered = df1_filtered.merge(df2[['setCode', 'language']], on='setCode', how='left')\n\n# Group by year and language and count the number of unique setCodes for each year and language\nyear_language_counts = df1_filtered.groupby(['releaseDate', 'language'])['setCode'].nunique()\n\n# Calculate the average number of sets released per year\naverage_sets_per_year = year_language_counts.groupby('releaseDate').mean()\n\n# Print the final result\nprint(average_sets_per_year)",
    "observation": "KeyError: 'language'",
    "true_result": "[(66.95833333333333, 'Japanese')]",
    "table_infos": "df1:\n|    |   id |   baseSetSize | block    | booster                                                                                                                                                                                                                                                         | code   |   isFoilOnly |   isForeignOnly |   isNonFoilOnly |   isOnlineOnly |   isPartialPreview | keyruneCode   |   mcmId |   mcmIdExtras | mcmName        | mtgoCode   | name              | parentCode   | releaseDate   |   tcgplayerGroupId |   totalSetSize | type    |\n|---:|-----:|--------------:|:---------|:----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|:-------|-------------:|----------------:|----------------:|---------------:|-------------------:|:--------------|--------:|--------------:|:---------------|:-----------|:------------------|:-------------|:--------------|-------------------:|---------------:|:--------|\n|  0 |    1 |           383 | Core Set | {'default': {'boosters': [{'contents': {'basic': 1, 'common': 10, 'rare': 1, 'uncommon': 3}, 'weight': 1913922}, {'contents': {'basic': 1, 'common': 9, 'foilCommon': 1, 'rare': 1, 'uncommon': 3}, 'weight': 318987}, {'contents': {'basic': 1, 'common': 10,  | 10E    |            0 |               0 |               0 |              0 |                  0 | 10E           |      74 |           nan | Tenth Edition  | 10E        | Tenth Edition     |              | 2007-07-13    |                  1 |            508 | core    |\n|  1 |    2 |           302 | Core Set | {'default': {'boosters': [{'contents': {'common': 11, 'rare': 1, 'uncommon': 3}, 'weight': 1}], 'boostersTotalWeight': 1, 'sheets': {'common': {'cards': {'0ab4e3e6-f9fe-5fdc-9697-fd20690a0e15': 1, '0b326a61-0389-54e2-ac58-7bb47ca88202': 1, '0f099574-e9f7- | 2ED    |            0 |               0 |               1 |              0 |                  0 | 2ED           |     nan |           nan |                |            | Unlimited Edition |              | 1993-12-01    |                115 |            302 | core    |\n|  2 |    3 |           332 |          | {'default': {'boosters': [{'contents': {'common': 8, 'dedicatedFoil2xm': 2, 'rareMythic': 2, 'uncommon': 3}, 'weight': 1}], 'boostersTotalWeight': 1, 'sheets': {'common': {'balanceColors': True, 'cards': {'01df4e32-7fe4-5b8d-9460-0f08fa29153e': 1, '032c60 | 2XM    |            0 |               0 |               0 |              0 |                  0 | 2XM           |    3204 |          3209 | Double Masters | 2XM        | Double Masters    |              | 2020-08-07    |               2655 |            384 | masters |\ndf2:\n|    |   id | language            | setCode   | translation     |\n|---:|-----:|:--------------------|:----------|:----------------|\n|  0 |    1 | Chinese Simplified  | 10E       | 核心系列第十版         |\n|  1 |    2 | Chinese Traditional | 10E       | 核心系列第十版         |\n|  2 |    3 | French              | 10E       | Dixième édition |\nForeign keys:\ndf2.setCode = df1.code\n"
  },
  {
    "table_paths": ["datasets/BIRD_dev-codebase_community/badges.csv"],
    "query": "Give the number of \"Revival\" badges.",
    "cot": "",
    "code": "revival_count = df[df['Badges'] == 'Revival'].shape[0]\nprint(revival_count)",
    "observation": "KeyError: 'Badges'",
    "true_result": "[(1018,)]",
    "table_infos": "df:\n|    |   Id |   UserId | Name    | Date                  |\n|---:|-----:|---------:|:--------|:----------------------|\n|  0 |    1 |        5 | Teacher | 2010-07-19 19:39:07.0 |\n"
  },
  {
    "table_paths": ["datasets/BIRD_dev-codebase_community/badges.csv"],
    "query": "How many users obtained the \"Announcer\" badge?",
    "cot": "",
    "code": "import numpy as np\nimport pandas as pd\n\n# Assuming df is your DataFrame and 'Badge' is the column containing the badge information\n\n# Data Processing: Count the number of unique users who obtained the \"Announcer\" badge\nannouncer_badge_users = df[df['Badge'] == 'Announcer']['UserId'].nunique()\n\nprint(f'The number of users who obtained the \"Announcer\" badge is: {announcer_badge_users}')",
    "observation": "KeyError: 'Badge'",
    "true_result": "[(207,)]",
    "table_infos": "df:\n|    |   Id |   UserId | Name    | Date                  |\n|---:|-----:|---------:|:--------|:----------------------|\n|  0 |    1 |        5 | Teacher | 2010-07-19 19:39:07.0 |\n"
  },
  {
    "table_paths": ["datasets/BIRD_dev-codebase_community/badges.csv"],
    "query": "How many users were awarded with 'Citizen Patrol' badge?",
    "cot": "",
    "code": "import numpy as np\nimport pandas as pd\n\n# Assuming df is your dataframe\n\n# Filter the dataframe where the badge is 'Citizen Patrol'\ncitizen_patrol_users = df[df['Badge'] == 'Citizen Patrol']\n\n# Count the number of users\nnum_users = len(citizen_patrol_users)\n\nprint(f\"Number of users who were awarded with 'Citizen Patrol' badge: {num_users}\")",
    "observation": "KeyError: 'Badge'",
    "true_result": "[(656,)]",
    "table_infos": "df:\n|    |   Id |   UserId | Name    | Date                  |\n|---:|-----:|---------:|:--------|:----------------------|\n|  0 |    1 |        5 | Teacher | 2010-07-19 19:39:07.0 |\n"
  },
  {
    "table_paths": [
      "datasets/BIRD_dev-superhero/superhero.csv",
      "datasets/BIRD_dev-superhero/colour.csv"
    ],
    "query": "What is the colour of Apocalypse's skin?",
    "cot": "\nWe need to join df1 and df2 on skin_colour_id, hair_colour_id, and eye_colour_id to get the colour of the superhero's skin, hair, and eyes.\n",
    "code": "import numpy as np\nimport pandas as pd\n\n# Load the data\n\n\n\n# Join df1 and df2 on skin_colour_id, hair_colour_id, and eye_colour_id\ndf = pd.merge(df1, df2, left_on=['skin_colour_id', 'hair_colour_id', 'eye_colour_id'], right_on=['id', 'id', 'id'])\n\n# Filter the data to get the colour of Apocalypse's skin\napocalypse_skin_colour = df[df['superhero_name'] == 'Apocalypse']['colour'].values[0]\n\n# Print the result\nprint(f\"The colour of Apocalypse's skin is {apocalypse_skin_colour}\")",
    "observation": "IndexError: index 0 is out of bounds for axis 0 with size 0",
    "true_result": "[('Grey',)]",
    "table_infos": "df1:\n|    |   id | superhero_name   | full_name              |   gender_id |   eye_colour_id |   hair_colour_id |   skin_colour_id |   race_id |   publisher_id |   alignment_id |   height_cm |   weight_kg |\n|---:|-----:|:-----------------|:-----------------------|------------:|----------------:|-----------------:|-----------------:|----------:|---------------:|---------------:|------------:|------------:|\n|  0 |    1 | 3-D Man          | Charles Chandler       |           1 |               9 |               13 |                1 |         1 |             13 |              1 |         188 |          90 |\n|  1 |    2 | A-Bomb           | Richard Milhouse Jones |           1 |              33 |                1 |                1 |        24 |             13 |              1 |         203 |         441 |\n|  2 |    3 | Abe Sapien       | Abraham Sapien         |           1 |               7 |                1 |                7 |        33 |              3 |              1 |         191 |          65 |\ndf2:\n|    |   id | colour    |\n|---:|-----:|:----------|\n|  0 |    1 | No Colour |\n|  1 |    2 | Amber     |\n|  2 |    3 | Auburn    |\nForeign keys:\ndf1.skin_colour_id = df2.id,df1.hair_colour_id = df2.id,df1.eye_colour_id = df2.id\n"
  },
  {
    "table_paths": [
      "datasets/BIRD_dev-superhero/superhero.csv",
      "datasets/BIRD_dev-superhero/colour.csv"
    ],
    "query": "Please list the superhero names of all the superheroes that have blue eyes and blond hair.",
    "cot": "\nWe need to join df1 and df2 on the id columns for skin_colour_id, hair_colour_id, and eye_colour_id. Then, we can filter the dataframe based on the colour of the eyes, hair, and skin.\n",
    "code": "import numpy as np\nimport pandas as pd\n\n# Assuming df1 and df2 are the dataframes\n\n# Join df1 and df2 on the id columns\ndf = pd.merge(df1, df2, left_on='eye_colour_id', right_on='id', how='left')\ndf.columns = ['id', 'superhero_name', 'full_name', 'gender_id', 'eye_colour_id', 'hair_colour_id', 'skin_colour_id', 'race_id', 'publisher_id', 'alignment_id', 'height_cm', 'weight_kg', 'id_x', 'colour']\ndf = pd.merge(df, df2, left_on='hair_colour_id', right_on='id', how='left')\ndf.columns = ['id', 'superhero_name', 'full_name', 'gender_id', 'eye_colour_id', 'hair_colour_id', 'skin_colour_id', 'race_id', 'publisher_id', 'alignment_id', 'height_cm', 'weight_kg', 'id_x', 'colour_x', 'id_y', 'colour_y']\ndf = pd.merge(df, df2, left_on='skin_colour_id', right_on='id', how='left')\ndf.columns = ['id', 'superhero_name', 'full_name', 'gender_id', 'eye_colour_id', 'hair_colour_id', 'skin_colour_id', 'race_id', 'publisher_id', 'alignment_id', 'height_cm', 'weight_kg', 'id_x', 'colour_x', 'id_y', 'colour_y', 'id_z', 'colour_z']\n\n# Filter the dataframe based on the colour of the eyes, hair, and skin\ndf_final = df[(df['colour_x'] == 'Blue') & (df['colour_y'] == 'Blond') & (df['colour_z'] == 'Blue')]\n\n# Print the superhero names\nprint(df_final['superhero_name'])",
    "observation": "MergeError: Passing 'suffixes' which cause duplicate columns {'id_x'} is not allowed.",
    "true_result": "[('Adam Monroe',), ('Adam Strange',), ('Agent 13',), ('Alan Scott',), ('Angel',), ('Animal Man',), ('Ant-Man',), ('Ant-Man II',), ('Anti-Venom',), ('Aquababy',), ('Aquaman',), ('Arachne',), ('Archangel',), ('Batgirl VI',), ('Binary',), ('Black Canary',), ('Black Canary II',), ('Black Widow II',), ('Boom-Boom',), ('Booster Gold',), ('Box III',), ('Bullseye',), ('Cannonball',), ('Captain America',), ('Captain Britain',), ('Captain Mar-vell',), ('Captain Marvel',), ('Cat',), ('Claire Bennet',), ('Cypher',), ('Dagger',), ('Dash',), ('Dazzler',), ('Doctor Fate',), ('Elle Bishop',), ('Emma Frost',), ('Enchantress',), ('Flash II',), ('Franklin Richards',), ('Genesis',), ('Green Lantern',), ('Harley Quinn',), ('Havok',), ('Hawkeye',), ('Human Torch',), ('Husk',), ('Invisible Woman',), ('Iron Fist',), ('James Bond',), ('James Bond (Craig)',), ('Jennifer Kale',), ('John Constantine',), ('Kick-Ass',), ('Killer Frost',), ('Longshot',), ('Luke Skywalker',), ('Magog',), ('Meltdown',), ('Mister Zsasz',), ('Mockingbird',), ('Moonstone',), ('Mr Immortal',), ('Mr Incredible',), ('Namora',), ('Namorita',), ('Niki Sanders',), ('Ozymandias',), ('Penance II',), ('Power Girl',), ('Pyro',), ('Question',), ('Rip Hunter',), ('Ronin',), ('Saturn Girl',), ('Scarlet Spider',), ('Sentry',), ('Spider-Gwen',), ('Star-Lord',), ('Stargirl',), ('Supergirl',), ('Thor',), ('Thor Girl',), ('Thunderstrike',), ('Trickster',), ('Ultragirl',), ('Valkyrie',), ('Warbird',), ('White Queen',), ('Wonder Girl',), ('Yellowjacket',)]",
    "table_infos": "df1:\n|    |   id | superhero_name   | full_name              |   gender_id |   eye_colour_id |   hair_colour_id |   skin_colour_id |   race_id |   publisher_id |   alignment_id |   height_cm |   weight_kg |\n|---:|-----:|:-----------------|:-----------------------|------------:|----------------:|-----------------:|-----------------:|----------:|---------------:|---------------:|------------:|------------:|\n|  0 |    1 | 3-D Man          | Charles Chandler       |           1 |               9 |               13 |                1 |         1 |             13 |              1 |         188 |          90 |\n|  1 |    2 | A-Bomb           | Richard Milhouse Jones |           1 |              33 |                1 |                1 |        24 |             13 |              1 |         203 |         441 |\n|  2 |    3 | Abe Sapien       | Abraham Sapien         |           1 |               7 |                1 |                7 |        33 |              3 |              1 |         191 |          65 |\ndf2:\n|    |   id | colour    |\n|---:|-----:|:----------|\n|  0 |    1 | No Colour |\n|  1 |    2 | Amber     |\n|  2 |    3 | Auburn    |\nForeign keys:\ndf1.skin_colour_id = df2.id,df1.hair_colour_id = df2.id,df1.eye_colour_id = df2.id\n"
  },
  {
    "table_paths": [
      "datasets/BIRD_dev-superhero/superhero.csv",
      "datasets/BIRD_dev-superhero/hero_power.csv",
      "datasets/BIRD_dev-superhero/superpower.csv",
      "datasets/BIRD_dev-superhero/publisher.csv"
    ],
    "query": "Among the superheroes from Marvel Comics, what is the percentage of those who have the super power of \"Super Strength\"?",
    "cot": "\nTo solve this problem, we need to join the four given dataframes on the appropriate foreign keys. Then, we can filter the dataframe to include only superheroes with the power of \"Super Strength\" and calculate the percentage of superheroes in this subset.\n",
    "code": "import numpy as np\nimport pandas as pd\n\n# Assuming df1, df2, df3, df4 are the dataframes given\n\n# Join df1 and df2 on hero_id\ndf = pd.merge(df1, df2, left_on='id', right_on='hero_id', how='inner')\n\n# Join df with df3 on power_id\ndf = pd.merge(df, df3, left_on='power_id', right_on='id', how='inner')\n\n# Join df with df4 on publisher_id\ndf = pd.merge(df, df4, left_on='publisher_id', right_on='id', how='inner')\n\n# Filter df to include only superheroes from Marvel Comics with the power of \"Super Strength\"\ndf = df[(df['publisher_name'] == 'Marvel Comics') & (df['power_name'] == 'Super Strength')]\n\n# Calculate the percentage of superheroes with the power of \"Super Strength\" among all superheroes from Marvel Comics\npercentage = len(df) / len(df1[df1['publisher_name'] == 'Marvel Comics']) * 100\n\n# Print the result\nprint(f\"The percentage of superheroes from Marvel Comics with the power of 'Super Strength' is {percentage}%\")",
    "observation": "KeyError: 'publisher_name'",
    "true_result": "[(6.760847628657921,)]",
    "table_infos": "df1:\n|    |   id | superhero_name   | full_name              |   gender_id |   eye_colour_id |   hair_colour_id |   skin_colour_id |   race_id |   publisher_id |   alignment_id |   height_cm |   weight_kg |\n|---:|-----:|:-----------------|:-----------------------|------------:|----------------:|-----------------:|-----------------:|----------:|---------------:|---------------:|------------:|------------:|\n|  0 |    1 | 3-D Man          | Charles Chandler       |           1 |               9 |               13 |                1 |         1 |             13 |              1 |         188 |          90 |\n|  1 |    2 | A-Bomb           | Richard Milhouse Jones |           1 |              33 |                1 |                1 |        24 |             13 |              1 |         203 |         441 |\n|  2 |    3 | Abe Sapien       | Abraham Sapien         |           1 |               7 |                1 |                7 |        33 |              3 |              1 |         191 |          65 |\ndf2:\n|    |   hero_id |   power_id |\n|---:|----------:|-----------:|\n|  0 |         1 |          1 |\n|  1 |         1 |         18 |\n|  2 |         1 |         26 |\ndf3:\n|    |   id | power_name          |\n|---:|-----:|:--------------------|\n|  0 |    1 | Agility             |\n|  1 |    2 | Accelerated Healing |\n|  2 |    3 | Lantern Power Ring  |\ndf4:\n|    |   id | publisher_name    |\n|---:|-----:|:------------------|\n|  0 |    1 |                   |\n|  1 |    2 | ABC Studios       |\n|  2 |    3 | Dark Horse Comics |\nForeign keys:\ndf1.publisher_id = df4.id,df2.power_id = df3.id,df2.hero_id = df1.id\n"
  },
  {
    "table_paths": [
      "datasets/BIRD_dev-superhero/superhero.csv",
      "datasets/BIRD_dev-superhero/publisher.csv"
    ],
    "query": "How many superheroes did DC Comics publish?",
    "cot": "To solve this problem, we need to merge df1 and df2 on 'publisher_id' and then count the number of superheroes for each publisher.\n",
    "code": "import numpy as np\nimport pandas as pd\n\n# Assuming df1 and df2 are the dataframes\n\n# Merge df1 and df2 on 'publisher_id'\nmerged_df = pd.merge(df1, df2, left_on='publisher_id', right_on='id', how='left')\n\n# Count the number of superheroes for each publisher\ncount_df = merged_df.groupby('publisher_name').size().reset_index(name='count')\n\n# Filter out publishers that did not publish any superheroes\ndc_df = count_df[count_df['publisher_name'] == 'ABC Studios']\n\n# Print the number of superheroes DC Comics published\nprint(dc_df['count'].values[0])",
    "observation": "IndexError: index 0 is out of bounds for axis 0 with size 0",
    "true_result": "[(224,)]",
    "table_infos": "df1:\n|    |   id | superhero_name   | full_name              |   gender_id |   eye_colour_id |   hair_colour_id |   skin_colour_id |   race_id |   publisher_id |   alignment_id |   height_cm |   weight_kg |\n|---:|-----:|:-----------------|:-----------------------|------------:|----------------:|-----------------:|-----------------:|----------:|---------------:|---------------:|------------:|------------:|\n|  0 |    1 | 3-D Man          | Charles Chandler       |           1 |               9 |               13 |                1 |         1 |             13 |              1 |         188 |          90 |\n|  1 |    2 | A-Bomb           | Richard Milhouse Jones |           1 |              33 |                1 |                1 |        24 |             13 |              1 |         203 |         441 |\n|  2 |    3 | Abe Sapien       | Abraham Sapien         |           1 |               7 |                1 |                7 |        33 |              3 |              1 |         191 |          65 |\ndf2:\n|    |   id | publisher_name    |\n|---:|-----:|:------------------|\n|  0 |    1 |                   |\n|  1 |    2 | ABC Studios       |\n|  2 |    3 | Dark Horse Comics |\nForeign keys:\ndf1.publisher_id = df2.id\n"
  },
  {
    "table_paths": [
      "datasets/BIRD_dev-superhero/superhero.csv",
      "datasets/BIRD_dev-superhero/publisher.csv",
      "datasets/BIRD_dev-superhero/hero_attribute.csv",
      "datasets/BIRD_dev-superhero/attribute.csv"
    ],
    "query": "Which publisher published the slowest superhero?",
    "cot": "\nTo solve this problem, we need to join the four dataframes based on the foreign keys and then find the superhero with the lowest speed attribute value.\n",
    "code": "import numpy as np\nimport pandas as pd\n\n# Load the dataframes\n\n\n\n\n\n# Join the dataframes\ndf = pd.merge(df1, df2, on='publisher_id', how='left')\ndf = pd.merge(df, df3, left_on='id', right_on='hero_id', how='left')\ndf = pd.merge(df, df4, left_on='attribute_id', right_on='id', how='left')\n\n# Filter out the rows where attribute_name is not 'Speed'\ndf = df[df['attribute_name'] == 'Speed']\n\n# Group by publisher_name and find the minimum attribute_value\ndf_grouped = df.groupby('publisher_name')['attribute_value'].min()\n\n# Find the publisher with the lowest attribute_value\nlowest_speed_publisher = df_grouped.idxmin()\n\nprint(lowest_speed_publisher)",
    "observation": "KeyError: 'publisher_id'",
    "true_result": "[('Marvel Comics',)]",
    "table_infos": "df1:\n|    |   id | superhero_name   | full_name              |   gender_id |   eye_colour_id |   hair_colour_id |   skin_colour_id |   race_id |   publisher_id |   alignment_id |   height_cm |   weight_kg |\n|---:|-----:|:-----------------|:-----------------------|------------:|----------------:|-----------------:|-----------------:|----------:|---------------:|---------------:|------------:|------------:|\n|  0 |    1 | 3-D Man          | Charles Chandler       |           1 |               9 |               13 |                1 |         1 |             13 |              1 |         188 |          90 |\n|  1 |    2 | A-Bomb           | Richard Milhouse Jones |           1 |              33 |                1 |                1 |        24 |             13 |              1 |         203 |         441 |\n|  2 |    3 | Abe Sapien       | Abraham Sapien         |           1 |               7 |                1 |                7 |        33 |              3 |              1 |         191 |          65 |\ndf2:\n|    |   id | publisher_name    |\n|---:|-----:|:------------------|\n|  0 |    1 |                   |\n|  1 |    2 | ABC Studios       |\n|  2 |    3 | Dark Horse Comics |\ndf3:\n|    |   hero_id |   attribute_id |   attribute_value |\n|---:|----------:|---------------:|------------------:|\n|  0 |         1 |              1 |                80 |\n|  1 |         2 |              1 |                75 |\n|  2 |         3 |              1 |                95 |\ndf4:\n|    |   id | attribute_name   |\n|---:|-----:|:-----------------|\n|  0 |    1 | Intelligence     |\n|  1 |    2 | Strength         |\n|  2 |    3 | Speed            |\nForeign keys:\ndf1.publisher_id = df2.id,df3.hero_id = df1.id,df3.attribute_id = df4.id\n"
  },
  {
    "table_paths": [
      "datasets/BIRD_dev-superhero/hero_power.csv",
      "datasets/BIRD_dev-superhero/superpower.csv"
    ],
    "query": "What is the superpower of hero ID 56?",
    "cot": "\nTo find the superpower of hero ID 56, we need to join df1 and df2 on the power_id column. Then, filter the dataframe to only include rows where hero_id is 56. Finally, we can select the power_name column to get the superpower of hero ID 56.\n",
    "code": "import numpy as np\nimport pandas as pd\n\n# Assuming df1 and df2 are the dataframes given in the question\n\n# Join df1 and df2 on power_id\ndf = pd.merge(df1, df2, on='power_id')\n\n# Filter the dataframe to only include rows where hero_id is 56\ndf = df[df['hero_id'] == 56]\n\n# Select the power_name column\nsuperpower = df['power_name'].values[0]\n\nprint(f\"The superpower of hero ID 56 is: {superpower}\")",
    "observation": "KeyError: 'power_id'",
    "true_result": "[('Flight',), ('Super Strength',), ('Size Changing',), ('Density Control',), ('Gliding',)]",
    "table_infos": "df1:\n|    |   hero_id |   power_id |\n|---:|----------:|-----------:|\n|  0 |         1 |          1 |\n|  1 |         1 |         18 |\n|  2 |         1 |         26 |\ndf2:\n|    |   id | power_name          |\n|---:|-----:|:--------------------|\n|  0 |    1 | Agility             |\n|  1 |    2 | Accelerated Healing |\n|  2 |    3 | Lantern Power Ring  |\nForeign keys:\ndf1.power_id = df2.id\n"
  },
  {
    "table_paths": [
      "datasets/BIRD_dev-superhero/superhero.csv",
      "datasets/BIRD_dev-superhero/colour.csv"
    ],
    "query": "What is the eye clolour of the heaviest superhero?",
    "cot": "\nWe need to join df1 and df2 on the eye_colour_id, hair_colour_id, and skin_colour_id columns to get the eye colour of the heaviest superhero.\n",
    "code": "import numpy as np\nimport pandas as pd\n\n# Load the data\n\n\n\n# Join df1 and df2 on the eye_colour_id, hair_colour_id, and skin_colour_id columns\ndf = pd.merge(df1, df2, left_on='eye_colour_id', right_on='id', how='left')\ndf = pd.merge(df, df2, left_on='hair_colour_id', right_on='id', how='left')\ndf = pd.merge(df, df2, left_on='skin_colour_id', right_on='id', how='left')\n\n# Rename the 'colour' column to 'eye_colour'\ndf.rename(columns={'colour': 'eye_colour'}, inplace=True)\n\n# Filter the dataframe to get the row with the maximum weight_kg\nmax_weight_row = df[df['weight_kg'] == df['weight_kg'].max()]\n\n# Get the eye colour of the heaviest superhero\neye_colour = max_weight_row['eye_colour'].values[0]\n\n# Print the eye colour\nprint(eye_colour)",
    "observation": "MergeError: Passing 'suffixes' which cause duplicate columns {'id_x'} is not allowed.",
    "true_result": "[('No Colour',)]",
    "table_infos": "df1:\n|    |   id | superhero_name   | full_name              |   gender_id |   eye_colour_id |   hair_colour_id |   skin_colour_id |   race_id |   publisher_id |   alignment_id |   height_cm |   weight_kg |\n|---:|-----:|:-----------------|:-----------------------|------------:|----------------:|-----------------:|-----------------:|----------:|---------------:|---------------:|------------:|------------:|\n|  0 |    1 | 3-D Man          | Charles Chandler       |           1 |               9 |               13 |                1 |         1 |             13 |              1 |         188 |          90 |\n|  1 |    2 | A-Bomb           | Richard Milhouse Jones |           1 |              33 |                1 |                1 |        24 |             13 |              1 |         203 |         441 |\n|  2 |    3 | Abe Sapien       | Abraham Sapien         |           1 |               7 |                1 |                7 |        33 |              3 |              1 |         191 |          65 |\ndf2:\n|    |   id | colour    |\n|---:|-----:|:----------|\n|  0 |    1 | No Colour |\n|  1 |    2 | Amber     |\n|  2 |    3 | Auburn    |\nForeign keys:\ndf1.skin_colour_id = df2.id,df1.hair_colour_id = df2.id,df1.eye_colour_id = df2.id\n"
  },
  {
    "table_paths": [
      "datasets/BIRD_dev-superhero/superhero.csv",
      "datasets/BIRD_dev-superhero/publisher.csv"
    ],
    "query": "In superheroes with height between 150 to 180, what is the percentage of heroes published by Marvel Comics?",
    "cot": "\nTo solve this problem, we need to filter the superheroes with height between 150 to 180, then count the number of these superheroes published by Marvel Comics. After that, we can calculate the percentage of these superheroes.\n",
    "code": "import numpy as np\nimport pandas as pd\n\n# Load the data\n\n\n\n# Merge the dataframes\ndf = pd.merge(df1, df2, on='publisher_id', how='left')\n\n# Filter the superheroes with height between 150 to 180\nfiltered_df = df[(df['height_cm'] >= 150) & (df['height_cm'] <= 180)]\n\n# Count the number of superheroes published by Marvel Comics\nmarvel_count = filtered_df[filtered_df['publisher_name'] == 'Marvel Comics'].shape[0]\n\n# Count the total number of superheroes with height between 150 to 180\ntotal_count = filtered_df.shape[0]\n\n# Calculate the percentage\npercentage = (marvel_count / total_count) * 100\n\nprint(f'The percentage of superheroes with height between 150 to 180 published by Marvel Comics is {percentage}%')",
    "observation": "KeyError: 'publisher_id'",
    "true_result": "[(60.869565217391305,)]",
    "table_infos": "df1:\n|    |   id | superhero_name   | full_name              |   gender_id |   eye_colour_id |   hair_colour_id |   skin_colour_id |   race_id |   publisher_id |   alignment_id |   height_cm |   weight_kg |\n|---:|-----:|:-----------------|:-----------------------|------------:|----------------:|-----------------:|-----------------:|----------:|---------------:|---------------:|------------:|------------:|\n|  0 |    1 | 3-D Man          | Charles Chandler       |           1 |               9 |               13 |                1 |         1 |             13 |              1 |         188 |          90 |\n|  1 |    2 | A-Bomb           | Richard Milhouse Jones |           1 |              33 |                1 |                1 |        24 |             13 |              1 |         203 |         441 |\n|  2 |    3 | Abe Sapien       | Abraham Sapien         |           1 |               7 |                1 |                7 |        33 |              3 |              1 |         191 |          65 |\ndf2:\n|    |   id | publisher_name    |\n|---:|-----:|:------------------|\n|  0 |    1 |                   |\n|  1 |    2 | ABC Studios       |\n|  2 |    3 | Dark Horse Comics |\nForeign keys:\ndf1.publisher_id = df2.id\n"
  },
  {
    "table_paths": [
      "datasets/BIRD_dev-superhero/hero_power.csv",
      "datasets/BIRD_dev-superhero/superpower.csv"
    ],
    "query": "What are the superpowers of heroes with ID 1?",
    "cot": "To find the superpowers of heroes with ID 1, we need to join df1 and df2 on the power_id column. Then, we can filter the resulting dataframe to only include rows where hero_id is 1.\n",
    "code": "import numpy as np\nimport pandas as pd\n\n# Assuming df1 and df2 are already defined\n\n# Data Processing\ndf = pd.merge(df1, df2, on='power_id')\nfiltered_df = df[df['hero_id'] == 1]\n\n# Declare `final_df` Variable\nfinal_df = filtered_df[['power_name']]\n\n# Print the final result\nprint(final_df)",
    "observation": "KeyError: 'power_id'",
    "true_result": "[('Agility',), ('Super Strength',), ('Stamina',), ('Super Speed',)]",
    "table_infos": "df1:\n|    |   hero_id |   power_id |\n|---:|----------:|-----------:|\n|  0 |         1 |          1 |\n|  1 |         1 |         18 |\n|  2 |         1 |         26 |\ndf2:\n|    |   id | power_name          |\n|---:|-----:|:--------------------|\n|  0 |    1 | Agility             |\n|  1 |    2 | Accelerated Healing |\n|  2 |    3 | Lantern Power Ring  |\nForeign keys:\ndf1.power_id = df2.id\n"
  },
  {
    "table_paths": [
      "datasets/BIRD_dev-superhero/superhero.csv",
      "datasets/BIRD_dev-superhero/colour.csv"
    ],
    "query": "What is the average of superheroes with no skin colour?",
    "cot": "\nWe need to join df1 and df2 on skin_colour_id, hair_colour_id, and eye_colour_id. Then, we can calculate the average of superheroes with no skin colour by filtering out the rows where skin_colour_id is 1 (which represents 'No Colour' in df2).\n",
    "code": "import numpy as np\nimport pandas as pd\n\n# Load the data\n\n\n\n# Join df1 and df2\ndf = pd.merge(df1, df2, left_on='skin_colour_id', right_on='id', how='left')\ndf = pd.merge(df, df2, left_on='hair_colour_id', right_on='id', how='left')\ndf = pd.merge(df, df2, left_on='eye_colour_id', right_on='id', how='left')\n\n# Rename the 'colour' column to 'skin_colour'\ndf.rename(columns={'colour': 'skin_colour'}, inplace=True)\n\n# Filter out the rows where skin_colour is 'No Colour'\ndf = df[df['skin_colour'] != 'No Colour']\n\n# Calculate the average of superheroes with no skin colour\naverage = df['superhero_name'].count() / df1['superhero_name'].count()\n\n# Print the result\nprint(average)",
    "observation": "MergeError: Passing 'suffixes' which cause duplicate columns {'id_x'} is not allowed.",
    "true_result": "[(1.1013215859030836,)]",
    "table_infos": "df1:\n|    |   id | superhero_name   | full_name              |   gender_id |   eye_colour_id |   hair_colour_id |   skin_colour_id |   race_id |   publisher_id |   alignment_id |   height_cm |   weight_kg |\n|---:|-----:|:-----------------|:-----------------------|------------:|----------------:|-----------------:|-----------------:|----------:|---------------:|---------------:|------------:|------------:|\n|  0 |    1 | 3-D Man          | Charles Chandler       |           1 |               9 |               13 |                1 |         1 |             13 |              1 |         188 |          90 |\n|  1 |    2 | A-Bomb           | Richard Milhouse Jones |           1 |              33 |                1 |                1 |        24 |             13 |              1 |         203 |         441 |\n|  2 |    3 | Abe Sapien       | Abraham Sapien         |           1 |               7 |                1 |                7 |        33 |              3 |              1 |         191 |          65 |\ndf2:\n|    |   id | colour    |\n|---:|-----:|:----------|\n|  0 |    1 | No Colour |\n|  1 |    2 | Amber     |\n|  2 |    3 | Auburn    |\nForeign keys:\ndf1.skin_colour_id = df2.id,df1.hair_colour_id = df2.id,df1.eye_colour_id = df2.id\n"
  },
  {
    "table_paths": [
      "datasets/BIRD_dev-superhero/superhero.csv",
      "datasets/BIRD_dev-superhero/publisher.csv"
    ],
    "query": "How many superheroes were published by Dark Horse Comics?",
    "cot": "To solve this problem, we need to merge df1 and df2 on 'publisher_id' and then count the number of superheroes for each publisher.\n",
    "code": "import numpy as np\nimport pandas as p np\n\n# Load the data\n\n\n\n# Merge df1 and df2 on 'publisher_id'\nmerged_df = pd.merge(df1, df2, left_on='publisher_id', right_on='id', how='left')\n\n# Count the number of superheroes for each publisher\ncount_df = merged_df.groupby('publisher_name')['superhero_name'].count()\n\n# Get the count for Dark Horse Comics\ndark_horse_count = count_df['Dark Horse Comics']\n\n# Print the result\nprint(dark_horse_count)",
    "observation": "SyntaxError: invalid syntax (<unknown>, line 2)",
    "true_result": "[(19,)]",
    "table_infos": "df1:\n|    |   id | superhero_name   | full_name              |   gender_id |   eye_colour_id |   hair_colour_id |   skin_colour_id |   race_id |   publisher_id |   alignment_id |   height_cm |   weight_kg |\n|---:|-----:|:-----------------|:-----------------------|------------:|----------------:|-----------------:|-----------------:|----------:|---------------:|---------------:|------------:|------------:|\n|  0 |    1 | 3-D Man          | Charles Chandler       |           1 |               9 |               13 |                1 |         1 |             13 |              1 |         188 |          90 |\n|  1 |    2 | A-Bomb           | Richard Milhouse Jones |           1 |              33 |                1 |                1 |        24 |             13 |              1 |         203 |         441 |\n|  2 |    3 | Abe Sapien       | Abraham Sapien         |           1 |               7 |                1 |                7 |        33 |              3 |              1 |         191 |          65 |\ndf2:\n|    |   id | publisher_name    |\n|---:|-----:|:------------------|\n|  0 |    1 |                   |\n|  1 |    2 | ABC Studios       |\n|  2 |    3 | Dark Horse Comics |\nForeign keys:\ndf1.publisher_id = df2.id\n"
  },
  {
    "table_paths": [
      "datasets/BIRD_dev-superhero/superhero.csv",
      "datasets/BIRD_dev-superhero/hero_attribute.csv",
      "datasets/BIRD_dev-superhero/attribute.csv",
      "datasets/BIRD_dev-superhero/publisher.csv"
    ],
    "query": "Which superhero has the most durability published by Dark Horse Comics?",
    "cot": "\nTo solve this problem, we need to join the four tables on the appropriate keys. Then, we can group by the superhero_name and publisher_name, and find the maximum durability (attribute_value) for each superhero published by Dark Horse Comics.\n",
    "code": "import numpy as np\nimport pandas as pd\n\n# Assuming df1, df2, df3, df4 are the four tables\n\n# Join df1 and df4 on publisher_id\ndf1 = pd.merge(df1, df4, left_on='publisher_id', right_on='id', how='left')\n\n# Join df1 and df2 on hero_id\ndf1 = pd.merge(df1, df2, left_on='id', right_on='hero_id', how='left')\n\n# Join df1 and df3 on attribute_id\ndf1 = pd.merge(df1, df3, left_on='attribute_id', right_on='id', how='left')\n\n# Filter df1 to only include rows where publisher_name is 'Dark Horse Comics'\ndf1 = df1[df1['publisher_name'] == 'Dark Horse Comics']\n\n# Group df1 by superhero_name and find the maximum attribute_value\ndf1 = df1.groupby('superhero_name')['attribute_value'].max().reset_index()\n\n# Sort df1 by attribute_value in descending order\ndf1 = df1.sort_values('attribute_value', ascending=False)\n\n# Assign df1 to final_df\nfinal_df = df1\n\n# Print the final result\nprint(final_df)",
    "observation": "KeyError: 'id'",
    "true_result": "[('Dash',)]",
    "table_infos": "df1:\n|    |   id | superhero_name   | full_name              |   gender_id |   eye_colour_id |   hair_colour_id |   skin_colour_id |   race_id |   publisher_id |   alignment_id |   height_cm |   weight_kg |\n|---:|-----:|:-----------------|:-----------------------|------------:|----------------:|-----------------:|-----------------:|----------:|---------------:|---------------:|------------:|------------:|\n|  0 |    1 | 3-D Man          | Charles Chandler       |           1 |               9 |               13 |                1 |         1 |             13 |              1 |         188 |          90 |\n|  1 |    2 | A-Bomb           | Richard Milhouse Jones |           1 |              33 |                1 |                1 |        24 |             13 |              1 |         203 |         441 |\n|  2 |    3 | Abe Sapien       | Abraham Sapien         |           1 |               7 |                1 |                7 |        33 |              3 |              1 |         191 |          65 |\ndf2:\n|    |   hero_id |   attribute_id |   attribute_value |\n|---:|----------:|---------------:|------------------:|\n|  0 |         1 |              1 |                80 |\n|  1 |         2 |              1 |                75 |\n|  2 |         3 |              1 |                95 |\ndf3:\n|    |   id | attribute_name   |\n|---:|-----:|:-----------------|\n|  0 |    1 | Intelligence     |\n|  1 |    2 | Strength         |\n|  2 |    3 | Speed            |\ndf4:\n|    |   id | publisher_name    |\n|---:|-----:|:------------------|\n|  0 |    1 |                   |\n|  1 |    2 | ABC Studios       |\n|  2 |    3 | Dark Horse Comics |\nForeign keys:\ndf1.publisher_id = df4.id,df2.hero_id = df1.id,df2.attribute_id = df3.id\n"
  },
  {
    "table_paths": [
      "datasets/BIRD_dev-superhero/superhero.csv",
      "datasets/BIRD_dev-superhero/colour.csv"
    ],
    "query": "What is the eyes colour of Abraham Sapien?",
    "cot": "\nWe need to join df1 and df2 on the id columns to get the colour of the eyes, hair and skin of the superhero. Then, we can filter the dataframe to get the information of Abraham Sapien.\n",
    "code": "import numpy as np\nimport pandas as pd\n\n# Load the dataframes\n\n\n\n# Join df1 and df2 on the id columns\ndf = pd.merge(df1, df2, left_on='eye_colour_id', right_on='id', how='left')\ndf = df.rename(columns={'colour': 'eye_colour'})\ndf = pd.merge(df, df2, left_on='hair_colour_id', right_on='id', how='left')\ndf = df.rename(columns={'colour': 'hair_colour'})\ndf = pd.merge(df, df2, left_on='skin_colour_id', right_on='id', how='left')\ndf = df.rename(columns={'colour': 'skin_colour'})\n\n# Filter the dataframe to get the information of Abraham Sapien\nabraham_sapien = df[df['full_name'] == 'Abraham Sapien']\n\n# Print the eye colour of Abraham Sapien\nprint(\"The eye colour of Abraham Sapien is: \", abraham_sapien['eye_colour'].values[0])",
    "observation": "MergeError: Passing 'suffixes' which cause duplicate columns {'id_x'} is not allowed.",
    "true_result": "[('Blue',)]",
    "table_infos": "df1:\n|    |   id | superhero_name   | full_name              |   gender_id |   eye_colour_id |   hair_colour_id |   skin_colour_id |   race_id |   publisher_id |   alignment_id |   height_cm |   weight_kg |\n|---:|-----:|:-----------------|:-----------------------|------------:|----------------:|-----------------:|-----------------:|----------:|---------------:|---------------:|------------:|------------:|\n|  0 |    1 | 3-D Man          | Charles Chandler       |           1 |               9 |               13 |                1 |         1 |             13 |              1 |         188 |          90 |\n|  1 |    2 | A-Bomb           | Richard Milhouse Jones |           1 |              33 |                1 |                1 |        24 |             13 |              1 |         203 |         441 |\n|  2 |    3 | Abe Sapien       | Abraham Sapien         |           1 |               7 |                1 |                7 |        33 |              3 |              1 |         191 |          65 |\ndf2:\n|    |   id | colour    |\n|---:|-----:|:----------|\n|  0 |    1 | No Colour |\n|  1 |    2 | Amber     |\n|  2 |    3 | Auburn    |\nForeign keys:\ndf1.skin_colour_id = df2.id,df1.hair_colour_id = df2.id,df1.eye_colour_id = df2.id\n"
  },
  {
    "table_paths": [
      "datasets/BIRD_dev-superhero/superhero.csv",
      "datasets/BIRD_dev-superhero/publisher.csv",
      "datasets/BIRD_dev-superhero/gender.csv"
    ],
    "query": "List the eyes, hair and skin colour of all female superheroes published by Dark Horse Comics.",
    "cot": "\nTo solve this problem, we need to join the three dataframes on the relevant columns (publisher_id and gender_id). Then, we filter the dataframe to only include rows where the gender is 'Female' and the publisher is 'Dark Horse Comics'. Finally, we select the columns for the eye, hair and skin colours.\n",
    "code": "import numpy as np\nimport pandas as pd\n\n# Assuming df1, df2, df3 are the dataframes\n\n# Merge df1 and df2 on 'publisher_id'\ndf = pd.merge(df1, df2, on='publisher_id', how='left')\n\n# Merge df and df3 on 'gender_id'\ndf = pd.merge(df, df3, on='gender_id', how='left')\n\n# Filter the dataframe to only include rows where the gender is 'Female' and the publisher is 'Dark Horse Comics'\ndf = df[(df['gender'] == 'Female') & (df['publisher_name'] == 'Dark Horse Comics')]\n\n# Select the columns for the eye, hair and skin colours\ndf = df[['eye_colour_id', 'hair_colour_id', 'skin_colour_id']]\n\n# Print the final result\nprint(df)",
    "observation": "KeyError: 'publisher_id'",
    "true_result": "[(14, 6, 1), (9, 9, 1), (1, 1, 1), (1, 1, 28), (30, 4, 1)]",
    "table_infos": "df1:\n|    |   id | superhero_name   | full_name              |   gender_id |   eye_colour_id |   hair_colour_id |   skin_colour_id |   race_id |   publisher_id |   alignment_id |   height_cm |   weight_kg |\n|---:|-----:|:-----------------|:-----------------------|------------:|----------------:|-----------------:|-----------------:|----------:|---------------:|---------------:|------------:|------------:|\n|  0 |    1 | 3-D Man          | Charles Chandler       |           1 |               9 |               13 |                1 |         1 |             13 |              1 |         188 |          90 |\n|  1 |    2 | A-Bomb           | Richard Milhouse Jones |           1 |              33 |                1 |                1 |        24 |             13 |              1 |         203 |         441 |\n|  2 |    3 | Abe Sapien       | Abraham Sapien         |           1 |               7 |                1 |                7 |        33 |              3 |              1 |         191 |          65 |\ndf2:\n|    |   id | publisher_name    |\n|---:|-----:|:------------------|\n|  0 |    1 |                   |\n|  1 |    2 | ABC Studios       |\n|  2 |    3 | Dark Horse Comics |\ndf3:\n|    |   id | gender   |\n|---:|-----:|:---------|\n|  0 |    1 | Male     |\n|  1 |    2 | Female   |\n|  2 |    3 | N/A      |\nForeign keys:\ndf1.publisher_id = df2.id,df1.gender_id = df3.id\n"
  },
  {
    "table_paths": [
      "datasets/BIRD_dev-superhero/superhero.csv",
      "datasets/BIRD_dev-superhero/publisher.csv"
    ],
    "query": "Which superhero has the same eyes, hair and skin colour? Indicate the publisher of the superhero.",
    "cot": "To solve this problem, we need to join df1 and df2 on the publisher_id column. Then, we can group by the eye_colour_id, hair_colour_id, and skin_colour_id columns and filter the groups where the count is more than 1. Finally, we can select the superhero_name and publisher_name columns from the resulting groups.\n",
    "code": "import numpy as np\nimport pandas as pd\n\n# Assuming df1 and df2 are the dataframes\ndf = pd.merge(df1, df2, on='publisher_id', how='left')\n\n# Group by eye_colour_id, hair_colour_id, and skin_colour_id and filter groups with count more than 1\nsame_colour_groups = df.groupby(['eye_colour_id', 'hair_colour_id', 'skin_colour_id']).filter(lambda x: len(x) > 1)\n\n# Select superhero_name and publisher_name from the resulting groups\nfinal_df = same_colour_groups[['superhero_name', 'publisher_name']]\n\n# Print the final result\nprint(final_df)",
    "observation": "KeyError: 'publisher_id'",
    "true_result": "[('Agent Zero', 'Marvel Comics'), ('Alex Mercer', 'Wildstorm'), ('Alex Woolsly', 'NBC - Heroes'), ('Allan Quatermain', 'Wildstorm'), ('Ando Masahashi', 'NBC - Heroes'), ('Angel', 'Dark Horse Comics'), ('Angela', 'Image Comics'), ('Anti-Spawn', 'Image Comics'), ('Arsenal', 'DC Comics'), ('Aztar', 'DC Comics'), ('Bananaman', ''), ('Bane', 'DC Comics'), ('Batgirl III', 'DC Comics'), ('Batgirl V', 'DC Comics'), ('Beast', 'Marvel Comics'), ('Beast Boy', 'DC Comics'), ('Beetle', 'Marvel Comics'), ('Ben 10', 'DC Comics'), ('Beta Ray Bill', 'Marvel Comics'), ('Beyonder', 'Marvel Comics'), ('Big Daddy', 'Icon Comics'), ('Bill Harken', 'SyFy'), ('Billy Kincaid', 'Image Comics'), ('Bird-Brain', 'Marvel Comics'), ('Bird-Man', 'Marvel Comics'), ('Bird-Man II', 'Marvel Comics'), ('Birdman', 'Hanna-Barbera'), ('Black Flash', 'DC Comics'), ('Black Goliath', 'Marvel Comics'), ('Bling!', 'Marvel Comics'), ('Bolt', 'Marvel Comics'), ('Bomb Queen', 'Image Comics'), ('Boomer', 'Marvel Comics'), ('Box', 'Marvel Comics'), ('Brundlefly', ''), ('Bumbleboy', 'Marvel Comics'), ('Bushido', 'DC Comics'), ('Cameron Hicks', 'SyFy'), ('Captain Midnight', 'Dark Horse Comics'), ('Captain Universe', 'Marvel Comics'), ('Cat II', 'Marvel Comics'), ('Cerebra', 'Marvel Comics'), ('Chameleon', 'DC Comics'), ('Chameleon', 'Marvel Comics'), ('Chuck Norris', ''), ('Cogliostro', 'Image Comics'), ('Colossal Boy', 'DC Comics'), ('Curse', 'Image Comics'), ('Cy-Gor', 'Image Comics'), ('Daphne Powell', 'ABC Studios'), ('Darkman', 'Universal Studios'), ('Darkside', ''), ('Destroyer', 'Marvel Comics'), ('DL Hawkins', 'NBC - Heroes'), ('Ego', 'Marvel Comics'), ('Energy', 'HarperCollins'), ('ERG-1', 'DC Comics'), ('Faora', 'DC Comics'), ('Flash Gordon', ''), ('Flash III', 'DC Comics'), ('Garbage Man', 'DC Comics'), ('Gary Bell', 'SyFy'), ('Ghost Rider II', 'Marvel Comics'), ('Giant-Man', 'Marvel Comics'), ('Giant-Man II', 'Marvel Comics'), ('Godzilla', ''), ('Gog', 'DC Comics'), ('Goku', 'Shueisha'), ('Goliath', 'Marvel Comics'), ('Green Goblin III', 'Marvel Comics'), ('Hawkwoman II', 'DC Comics'), ('Hiro Nakamura', 'NBC - Heroes'), ('Hit-Girl', 'Icon Comics'), ('Hulk', 'Marvel Comics'), ('Indiana Jones', 'George Lucas'), ('Isis', 'DC Comics'), ('Jack Bauer', ''), ('Jason Bourne', ''), ('Jean-Luc Picard', 'Star Trek'), ('Jesse Quick', 'DC Comics'), ('Jessica Sanders', 'NBC - Heroes'), ('Jim Powell', 'ABC Studios'), ('JJ Powell', 'ABC Studios'), ('Johann Krauss', 'Dark Horse Comics'), ('Judge Dredd', 'Rebellion'), ('Junkpile', 'Marvel Comics'), ('Kathryn Janeway', 'Star Trek'), ('Katniss Everdeen', ''), ('Kid Flash II', 'DC Comics'), ('Kratos', 'Wildstorm'), ('Kylo Ren', 'George Lucas'), ('Leech', 'Marvel Comics'), ('Liz Sherman', 'Dark Horse Comics'), ('Luke Campbell', 'NBC - Heroes'), ('Luna', 'Marvel Comics'), ('Matt Parkman', 'NBC - Heroes'), ('Maya Herrera', 'NBC - Heroes'), ('Meteorite', 'Marvel Comics'), ('Minna Murray', 'Wildstorm'), ('Mister Freeze', 'DC Comics'), ('Mister Mxyzptlk', 'DC Comics'), ('Mogo', 'DC Comics'), ('Mohinder Suresh', 'NBC - Heroes'), ('Moloch', 'DC Comics'), ('Monica Dawson', 'NBC - Heroes'), ('Nina Theroux', 'SyFy'), ('Nite Owl II', 'DC Comics'), ('Offspring', 'DC Comics'), ('One Punch Man', 'Shueisha'), ('One-Above-All', 'Marvel Comics'), ('Overtkill', 'Image Comics'), ('Parademon', 'DC Comics'), ('Paul Blart', 'Sony Pictures'), ('Penance', 'Marvel Comics'), ('Penance I', 'Marvel Comics'), ('Peter Petrelli', 'NBC - Heroes'), ('Phantom', 'DC Comics'), ('Plastic Lad', 'DC Comics'), ('Power Man', 'Marvel Comics'), ('Predator', 'Dark Horse Comics'), ('Purple Man', 'Marvel Comics'), ('Q', 'Star Trek'), ('Quantum', 'HarperCollins'), ('Rachel Pirzad', 'SyFy'), ('Red Mist', 'Icon Comics'), ('Redeemer II', 'Image Comics'), ('Redeemer III', 'Image Comics'), ('Renata Soliz', 'HarperCollins'), ('Riddler', 'DC Comics'), ('Robocop', ''), ('Sauron', 'J. R. R. Tolkien'), ('Savage Dragon', 'Image Comics'), ('Sebastian Shaw', 'Marvel Comics'), ('Shrinking Violet', 'DC Comics'), ('Silk Spectre', 'DC Comics'), ('Silk Spectre II', 'DC Comics'), ('Snake-Eyes', 'Marvel Comics'), ('Space Ghost', 'DC Comics'), ('Speedball', 'Marvel Comics'), ('Spider-Carnage', 'Marvel Comics'), ('Spider-Woman II', 'Marvel Comics'), ('Stacy X', 'Marvel Comics'), ('Stardust', 'Marvel Comics'), ('Stormtrooper', 'George Lucas'), ('Sylar', 'NBC - Heroes'), ('The Cape', ''), ('The Presence', 'DC Comics'), ('Thunderbird II', 'Marvel Comics'), ('Titan', 'HarperCollins'), ('Tracy Strauss', 'NBC - Heroes'), ('Two-Face', 'DC Comics'), ('Venompool', 'Marvel Comics'), ('Violator', 'Image Comics'), ('Watcher', 'Marvel Comics'), ('Weapon XI', 'Marvel Comics'), ('Wildfire', 'DC Comics'), ('Wondra', 'Marvel Comics')]",
    "table_infos": "df1:\n|    |   id | superhero_name   | full_name              |   gender_id |   eye_colour_id |   hair_colour_id |   skin_colour_id |   race_id |   publisher_id |   alignment_id |   height_cm |   weight_kg |\n|---:|-----:|:-----------------|:-----------------------|------------:|----------------:|-----------------:|-----------------:|----------:|---------------:|---------------:|------------:|------------:|\n|  0 |    1 | 3-D Man          | Charles Chandler       |           1 |               9 |               13 |                1 |         1 |             13 |              1 |         188 |          90 |\n|  1 |    2 | A-Bomb           | Richard Milhouse Jones |           1 |              33 |                1 |                1 |        24 |             13 |              1 |         203 |         441 |\n|  2 |    3 | Abe Sapien       | Abraham Sapien         |           1 |               7 |                1 |                7 |        33 |              3 |              1 |         191 |          65 |\ndf2:\n|    |   id | publisher_name    |\n|---:|-----:|:------------------|\n|  0 |    1 |                   |\n|  1 |    2 | ABC Studios       |\n|  2 |    3 | Dark Horse Comics |\nForeign keys:\ndf1.publisher_id = df2.id\n"
  },
  {
    "table_paths": [
      "datasets/BIRD_dev-superhero/superhero.csv",
      "datasets/BIRD_dev-superhero/gender.csv"
    ],
    "query": "What is the gender of Agent 13 hero?",
    "cot": "To find the gender of Agent 13 hero, we need to join df1 and df2 on gender_id and then filter the dataframe to get the gender of the superhero with id 13.\n",
    "code": "import numpy as np\nimport pandas as pd\n\n# Assuming df1 and df2 are the dataframes\n\n# Join df1 and df2 on gender_id\ndf = pd.merge(df1, df2, left_on='gender_id', right_on='id', how='left')\n\n# Filter the dataframe to get the gender of the superhero with id 13\ngender = df[df['id'] == 3]['gender'].values[0]\n\nprint(f\"The gender of Agent 13 hero is {gender}\")",
    "observation": "KeyError: 'id'",
    "true_result": "[('Female',)]",
    "table_infos": "df1:\n|    |   id | superhero_name   | full_name              |   gender_id |   eye_colour_id |   hair_colour_id |   skin_colour_id |   race_id |   publisher_id |   alignment_id |   height_cm |   weight_kg |\n|---:|-----:|:-----------------|:-----------------------|------------:|----------------:|-----------------:|-----------------:|----------:|---------------:|---------------:|------------:|------------:|\n|  0 |    1 | 3-D Man          | Charles Chandler       |           1 |               9 |               13 |                1 |         1 |             13 |              1 |         188 |          90 |\n|  1 |    2 | A-Bomb           | Richard Milhouse Jones |           1 |              33 |                1 |                1 |        24 |             13 |              1 |         203 |         441 |\n|  2 |    3 | Abe Sapien       | Abraham Sapien         |           1 |               7 |                1 |                7 |        33 |              3 |              1 |         191 |          65 |\ndf2:\n|    |   id | gender   |\n|---:|-----:|:---------|\n|  0 |    1 | Male     |\n|  1 |    2 | Female   |\n|  2 |    3 | N/A      |\nForeign keys:\ndf1.gender_id = df2.id\n"
  },
  {
    "table_paths": [
      "datasets/BIRD_dev-superhero/superhero.csv",
      "datasets/BIRD_dev-superhero/colour.csv"
    ],
    "query": "List the heroes' names whose eyes and hair colours are both black.",
    "cot": "\nWe need to join df1 and df2 on the id columns for skin_colour_id, hair_colour_id, and eye_colour_id. Then, we can filter the dataframe to get the heroes whose eye, hair, and skin colours are both black.\n",
    "code": "import numpy as np\nimport pandas as pd\n\n# Assuming df1, df2 are the dataframes\n\n# Merge df1 and df2 on id\ndf = pd.merge(df1, df2, left_on='skin_colour_id', right_on='id', how='left')\ndf = pd.merge(df, df2, left_on='hair_colour_id', right_on='id', how='left')\ndf = pd.merge(df, df2, left_on='eye_colour_id', right_on='id', how='left')\n\n# Rename the colour columns\ndf.rename(columns={'colour_x': 'skin_colour', 'colour_y': 'hair_colour', 'colour': 'eye_colour'}, inplace=True)\n\n# Filter the dataframe to get the heroes whose eye, hair, and skin colours are both black\nfinal_df = df[(df['eye_colour'] == 'No Colour') & (df['hair_colour'] == 'No Colour') & (df['skin_colour'] == 'No Colour')]\n\n# Print the final result\nprint(final_df['superhero_name'])",
    "observation": "MergeError: Passing 'suffixes' which cause duplicate columns {'id_x'} is not allowed.",
    "true_result": "[('Armor',), ('Atom Girl',), ('Bizarro',), ('Galactus',), ('General Zod',), ('Match',), ('Negasonic Teenage Warhead',), ('Phantom Stranger',), ('Shadow Lass',), ('Sinestro',), ('Vulcan',)]",
    "table_infos": "df1:\n|    |   id | superhero_name   | full_name              |   gender_id |   eye_colour_id |   hair_colour_id |   skin_colour_id |   race_id |   publisher_id |   alignment_id |   height_cm |   weight_kg |\n|---:|-----:|:-----------------|:-----------------------|------------:|----------------:|-----------------:|-----------------:|----------:|---------------:|---------------:|------------:|------------:|\n|  0 |    1 | 3-D Man          | Charles Chandler       |           1 |               9 |               13 |                1 |         1 |             13 |              1 |         188 |          90 |\n|  1 |    2 | A-Bomb           | Richard Milhouse Jones |           1 |              33 |                1 |                1 |        24 |             13 |              1 |         203 |         441 |\n|  2 |    3 | Abe Sapien       | Abraham Sapien         |           1 |               7 |                1 |                7 |        33 |              3 |              1 |         191 |          65 |\ndf2:\n|    |   id | colour    |\n|---:|-----:|:----------|\n|  0 |    1 | No Colour |\n|  1 |    2 | Amber     |\n|  2 |    3 | Auburn    |\nForeign keys:\ndf1.skin_colour_id = df2.id,df1.hair_colour_id = df2.id,df1.eye_colour_id = df2.id\n"
  },
  {
    "table_paths": [
      "datasets/BIRD_dev-superhero/superhero.csv",
      "datasets/BIRD_dev-superhero/race.csv",
      "datasets/BIRD_dev-superhero/alignment.csv"
    ],
    "query": "What are the race and alignment of Cameron Hicks?",
    "cot": "\nTo find the race and alignment of Cameron Hicks, we need to join the three tables on the appropriate keys and then filter the resulting dataframe to get the information for Cameron Hicks.\n",
    "code": "import numpy as np\nimport pandas as pd\n\n# Assuming df1, df2, df3 are the three dataframes\n\n# Merge df1 and df2 on 'race_id'\ndf = pd.merge(df1, df2, left_on='race_id', right_on='id', how='left')\n\n# Merge df with df3 on 'alignment_id'\ndf = pd.merge(df, df3, left_on='alignment_id', right_on='id', how='left')\n\n# Filter the dataframe to get the information for Cameron Hicks\ncameron_hicks = df[df['full_name'] == 'Cameron Hicks']\n\n# Print the race and alignment of Cameron Hicks\nprint(\"Race: \", cameron_hicks['race'].values[0])\nprint(\"Alignment: \", cameron_hicks['alignment'].values[0])",
    "observation": "IndexError: index 0 is out of bounds for axis 0 with size 0",
    "true_result": "[('Alpha', 'Good')]",
    "table_infos": "df1:\n|    |   id | superhero_name   | full_name              |   gender_id |   eye_colour_id |   hair_colour_id |   skin_colour_id |   race_id |   publisher_id |   alignment_id |   height_cm |   weight_kg |\n|---:|-----:|:-----------------|:-----------------------|------------:|----------------:|-----------------:|-----------------:|----------:|---------------:|---------------:|------------:|------------:|\n|  0 |    1 | 3-D Man          | Charles Chandler       |           1 |               9 |               13 |                1 |         1 |             13 |              1 |         188 |          90 |\n|  1 |    2 | A-Bomb           | Richard Milhouse Jones |           1 |              33 |                1 |                1 |        24 |             13 |              1 |         203 |         441 |\n|  2 |    3 | Abe Sapien       | Abraham Sapien         |           1 |               7 |                1 |                7 |        33 |              3 |              1 |         191 |          65 |\ndf2:\n|    |   id | race   |\n|---:|-----:|:-------|\n|  0 |    1 | -      |\n|  1 |    2 | Alien  |\n|  2 |    3 | Alpha  |\ndf3:\n|    |   id | alignment   |\n|---:|-----:|:------------|\n|  0 |    1 | Good        |\n|  1 |    2 | Bad         |\n|  2 |    3 | Neutral     |\nForeign keys:\ndf1.race_id = df2.id,df1.alignment_id = df3.id\n"
  },
  {
    "table_paths": [
      "datasets/BIRD_dev-superhero/superhero.csv",
      "datasets/BIRD_dev-superhero/publisher.csv",
      "datasets/BIRD_dev-superhero/gender.csv"
    ],
    "query": "How many percent of female heroes were published by Marvel Comics?",
    "cot": "To solve this problem, we need to join the three dataframes on the relevant columns, filter for female superheroes and then count the number of superheroes from Marvel Comics. We can then divide this by the total number of female superheroes to get the percentage.\n",
    "code": "import numpy as np\nimport pandas as pd\n\n# Load the dataframes\n\n\n\n\n# Join the dataframes\ndf = pd.merge(df1, df2, on='publisher_id', how='left')\ndf = pd.merge(df, df3, on='gender_id', how='left')\n\n# Filter for female superheroes and count the number of superheroes from Marvel Comics\nfemale_superheroes = df[df['gender'] == 'Female']\nmarvel_comics_female_superheroes = female_superheroes[female_superheroes['publisher_name'] == 'Marvel Comics']\n\n# Calculate the percentage\npercentage = len(marvel_comics_female_superheroes) / len(female_superheroes) * 100\n\nprint(f'{percentage}% of female heroes were published by Marvel Comics.')",
    "observation": "KeyError: 'publisher_id'",
    "true_result": "[(54.95049504950495,)]",
    "table_infos": "df1:\n|    |   id | superhero_name   | full_name              |   gender_id |   eye_colour_id |   hair_colour_id |   skin_colour_id |   race_id |   publisher_id |   alignment_id |   height_cm |   weight_kg |\n|---:|-----:|:-----------------|:-----------------------|------------:|----------------:|-----------------:|-----------------:|----------:|---------------:|---------------:|------------:|------------:|\n|  0 |    1 | 3-D Man          | Charles Chandler       |           1 |               9 |               13 |                1 |         1 |             13 |              1 |         188 |          90 |\n|  1 |    2 | A-Bomb           | Richard Milhouse Jones |           1 |              33 |                1 |                1 |        24 |             13 |              1 |         203 |         441 |\n|  2 |    3 | Abe Sapien       | Abraham Sapien         |           1 |               7 |                1 |                7 |        33 |              3 |              1 |         191 |          65 |\ndf2:\n|    |   id | publisher_name    |\n|---:|-----:|:------------------|\n|  0 |    1 |                   |\n|  1 |    2 | ABC Studios       |\n|  2 |    3 | Dark Horse Comics |\ndf3:\n|    |   id | gender   |\n|---:|-----:|:---------|\n|  0 |    1 | Male     |\n|  1 |    2 | Female   |\n|  2 |    3 | N/A      |\nForeign keys:\ndf1.publisher_id = df2.id,df1.gender_id = df3.id\n"
  },
  {
    "table_paths": [
      "datasets/BIRD_dev-superhero/superhero.csv",
      "datasets/BIRD_dev-superhero/colour.csv"
    ],
    "query": "Which superheroes have blue eyes with brown hair?",
    "cot": "\nTo find the superheroes with blue eyes, brown hair, we need to join df1 and df2 on the id columns for both skin_colour_id, hair_colour_id, and eye_colour_id. Then, we filter the resulting dataframe to find the superheroes with 'Blue' eyes, 'Brown' hair, and any skin colour.\n",
    "code": "import numpy as np\nimport pandas as pd\n\n# Load the dataframes\n\n\n\n# Join df1 and df2 on the id columns\ndf = pd.merge(df1, df2, left_on='skin_colour_id', right_on='id', how='left')\ndf = pd.merge(df, df2, left_on='hair_colour_id', right_on='id', how='left')\ndf = pd.merge(df, df2, left_on='eye_colour_id', right_on='id', how='left')\n\n# Rename the columns for clarity\ndf.rename(columns={'colour_x': 'skin_colour', 'colour_y': 'hair_colour', 'colour': 'eye_colour'}, inplace=True)\n\n# Filter the dataframe to find the superheroes with 'Blue' eyes, 'Brown' hair, and any skin colour\nfinal_df = df[(df['eye_colour'] == 'Blue') & (df['hair_colour'] == 'Brown')]\n\n# Print the final result\nprint(final_df[['superhero_name', 'full_name', 'skin_colour']])",
    "observation": "MergeError: Passing 'suffixes' which cause duplicate columns {'id_x'} is not allowed.",
    "true_result": "[('Atlas',), ('Atlas',), ('Big Man',), ('Bloodaxe',), ('Blue Beetle',), ('Blue Beetle II',), ('Captain Epic',), ('Chewbacca',), ('Fabian Cortez',), ('Gravity',), ('Hawkman',), ('Hercules',), ('Jack-Jack',), ('Mister Knife',), ('Molecule Man',), ('Multiple Man',), ('Rick Flag',), ('Scarecrow',), ('Scarlet Witch',), ('Spider-Girl',), ('Toxin',), ('X-Man',)]",
    "table_infos": "df1:\n|    |   id | superhero_name   | full_name              |   gender_id |   eye_colour_id |   hair_colour_id |   skin_colour_id |   race_id |   publisher_id |   alignment_id |   height_cm |   weight_kg |\n|---:|-----:|:-----------------|:-----------------------|------------:|----------------:|-----------------:|-----------------:|----------:|---------------:|---------------:|------------:|------------:|\n|  0 |    1 | 3-D Man          | Charles Chandler       |           1 |               9 |               13 |                1 |         1 |             13 |              1 |         188 |          90 |\n|  1 |    2 | A-Bomb           | Richard Milhouse Jones |           1 |              33 |                1 |                1 |        24 |             13 |              1 |         203 |         441 |\n|  2 |    3 | Abe Sapien       | Abraham Sapien         |           1 |               7 |                1 |                7 |        33 |              3 |              1 |         191 |          65 |\ndf2:\n|    |   id | colour    |\n|---:|-----:|:----------|\n|  0 |    1 | No Colour |\n|  1 |    2 | Amber     |\n|  2 |    3 | Auburn    |\nForeign keys:\ndf1.skin_colour_id = df2.id,df1.hair_colour_id = df2.id,df1.eye_colour_id = df2.id\n"
  },
  {
    "table_paths": ["datasets/BIRD_dev-superhero/superhero.csv"],
    "query": "Provide the name of superhero with superhero ID 294.",
    "cot": "",
    "code": "import numpy as np\nimport pandas as pd\n\n# Assuming df is the dataframe\n\n# Data Processing\nsuperhero_name = df[df['id'] == 294]['superhero_name'].values[0]\n\n# Print the final result\nprint(superhero_name)",
    "observation": "IndexError: index 0 is out of bounds for axis 0 with size 0",
    "true_result": "[('Gog',)]",
    "table_infos": "df:\n|    |   id | superhero_name   | full_name        |   gender_id |   eye_colour_id |   hair_colour_id |   skin_colour_id |   race_id |   publisher_id |   alignment_id |   height_cm |   weight_kg |\n|---:|-----:|:-----------------|:-----------------|------------:|----------------:|-----------------:|-----------------:|----------:|---------------:|---------------:|------------:|------------:|\n|  0 |    1 | 3-D Man          | Charles Chandler |           1 |               9 |               13 |                1 |         1 |             13 |              1 |         188 |          90 |\n"
  },
  {
    "table_paths": [
      "datasets/BIRD_dev-superhero/superhero.csv",
      "datasets/BIRD_dev-superhero/race.csv"
    ],
    "query": "Find the race of the superhero who weighs 108kg and is 188cm tall.",
    "cot": "\nWe need to find the race of the superhero who weighs 108kg and is 188cm tall. We can do this by merging the two dataframes on the 'race_id' column and then filtering the resulting dataframe based on the given conditions.\n",
    "code": "import numpy as np\nimport pandas as pd\n\n# Assuming df1 and df2 are the dataframes\n\n# Merge df1 and df2 on 'race_id'\ndf = pd.merge(df1, df2, left_on='race_id', right_on='id', how='left')\n\n# Filter the dataframe based on the given conditions\ndf = df[(df['weight_kg'] == 108) & (df['height_cm'] == 188)]\n\n# Print the race of the superhero\nprint(df['race'].values[0])",
    "observation": "IndexError: index 0 is out of bounds for axis 0 with size 0",
    "true_result": "[('-',), ('Human',)]",
    "table_infos": "df1:\n|    |   id | superhero_name   | full_name              |   gender_id |   eye_colour_id |   hair_colour_id |   skin_colour_id |   race_id |   publisher_id |   alignment_id |   height_cm |   weight_kg |\n|---:|-----:|:-----------------|:-----------------------|------------:|----------------:|-----------------:|-----------------:|----------:|---------------:|---------------:|------------:|------------:|\n|  0 |    1 | 3-D Man          | Charles Chandler       |           1 |               9 |               13 |                1 |         1 |             13 |              1 |         188 |          90 |\n|  1 |    2 | A-Bomb           | Richard Milhouse Jones |           1 |              33 |                1 |                1 |        24 |             13 |              1 |         203 |         441 |\n|  2 |    3 | Abe Sapien       | Abraham Sapien         |           1 |               7 |                1 |                7 |        33 |              3 |              1 |         191 |          65 |\ndf2:\n|    |   id | race   |\n|---:|-----:|:-------|\n|  0 |    1 | -      |\n|  1 |    2 | Alien  |\n|  2 |    3 | Alpha  |\nForeign keys:\ndf1.race_id = df2.id\n"
  },
  {
    "table_paths": [
      "datasets/BIRD_dev-superhero/superhero.csv",
      "datasets/BIRD_dev-superhero/publisher.csv"
    ],
    "query": "What is the publisher name of the superhero ID 38?",
    "cot": "\nTo find the publisher name of the superhero with ID 38, we need to merge the two dataframes on the 'publisher_id' column. Then, we can filter the merged dataframe to get the publisher name for the superhero with ID 38.\n",
    "code": "import numpy as np\nimport pandas as pd\n\n# Assuming df1 and df2 are the dataframes\n\n# Merge df1 and df2 on 'publisher_id'\nmerged_df = pd.merge(df1, df2, left_on='publisher_id', right_on='id', how='left')\n\n# Filter merged_df to get the publisher name for the superhero with ID 38\npublisher_name = merged_df.loc[merged_df['id'] == 38, 'publisher_name'].values[0]\n\n# Print the publisher name\nprint(publisher_name)",
    "observation": "KeyError: 'id'",
    "true_result": "[('DC Comics',)]",
    "table_infos": "df1:\n|    |   id | superhero_name   | full_name              |   gender_id |   eye_colour_id |   hair_colour_id |   skin_colour_id |   race_id |   publisher_id |   alignment_id |   height_cm |   weight_kg |\n|---:|-----:|:-----------------|:-----------------------|------------:|----------------:|-----------------:|-----------------:|----------:|---------------:|---------------:|------------:|------------:|\n|  0 |    1 | 3-D Man          | Charles Chandler       |           1 |               9 |               13 |                1 |         1 |             13 |              1 |         188 |          90 |\n|  1 |    2 | A-Bomb           | Richard Milhouse Jones |           1 |              33 |                1 |                1 |        24 |             13 |              1 |         203 |         441 |\n|  2 |    3 | Abe Sapien       | Abraham Sapien         |           1 |               7 |                1 |                7 |        33 |              3 |              1 |         191 |          65 |\ndf2:\n|    |   id | publisher_name    |\n|---:|-----:|:------------------|\n|  0 |    1 |                   |\n|  1 |    2 | ABC Studios       |\n|  2 |    3 | Dark Horse Comics |\nForeign keys:\ndf1.publisher_id = df2.id\n"
  },
  {
    "table_paths": [
      "datasets/BIRD_dev-superhero/superhero.csv",
      "datasets/BIRD_dev-superhero/hero_attribute.csv",
      "datasets/BIRD_dev-superhero/race.csv"
    ],
    "query": "What is the race of the superhero with maximum attribute value?",
    "cot": "\nWe need to join df1, df2 and df3 based on the foreign keys. Then, we can group by race and find the maximum attribute value.\n",
    "code": "import numpy as np\nimport pandas as pd\n\n# Assuming df1, df2 and df3 are the dataframes\n\n# Merge df1 and df3 on 'race_id'\ndf1 = pd.merge(df1, df3, left_on='race_id', right_on='id', how='left')\n\n# Drop 'id' column from df3 as it is not needed\ndf1.drop('id', axis=1, inplace=True)\n\n# Merge df1 and df2 on 'hero_id'\ndf = pd.merge(df1, df2, left_on='id', right_on='hero_id', how='left')\n\n# Drop 'hero_id' column from df2 as it is not needed\ndf.drop('hero_id', axis=1, inplace=True)\n\n# Group by 'race' and find the maximum 'attribute_value'\nmax_attribute_value = df.groupby('race')['attribute_value'].max()\n\n# Find the race with maximum attribute value\nrace_max_attribute = max_attribute_value.idxmax()\n\n# Print the race with maximum attribute value\nprint(\"The race of the superhero with maximum attribute value is: \", race_max_attribute)",
    "observation": "KeyError: \"['id'] not found in axis\"",
    "true_result": "[('Cosmic Entity',)]",
    "table_infos": "df1:\n|    |   id | superhero_name   | full_name              |   gender_id |   eye_colour_id |   hair_colour_id |   skin_colour_id |   race_id |   publisher_id |   alignment_id |   height_cm |   weight_kg |\n|---:|-----:|:-----------------|:-----------------------|------------:|----------------:|-----------------:|-----------------:|----------:|---------------:|---------------:|------------:|------------:|\n|  0 |    1 | 3-D Man          | Charles Chandler       |           1 |               9 |               13 |                1 |         1 |             13 |              1 |         188 |          90 |\n|  1 |    2 | A-Bomb           | Richard Milhouse Jones |           1 |              33 |                1 |                1 |        24 |             13 |              1 |         203 |         441 |\n|  2 |    3 | Abe Sapien       | Abraham Sapien         |           1 |               7 |                1 |                7 |        33 |              3 |              1 |         191 |          65 |\ndf2:\n|    |   hero_id |   attribute_id |   attribute_value |\n|---:|----------:|---------------:|------------------:|\n|  0 |         1 |              1 |                80 |\n|  1 |         2 |              1 |                75 |\n|  2 |         3 |              1 |                95 |\ndf3:\n|    |   id | race   |\n|---:|-----:|:-------|\n|  0 |    1 | -      |\n|  1 |    2 | Alien  |\n|  2 |    3 | Alpha  |\nForeign keys:\ndf1.race_id = df3.id,df2.hero_id = df1.id\n"
  },
  {
    "table_paths": [
      "datasets/BIRD_dev-superhero/superhero.csv",
      "datasets/BIRD_dev-superhero/colour.csv"
    ],
    "query": "List down at least five full names of superheroes with blue eyes.",
    "cot": "To solve this problem, we need to join df1 and df2 on the eye_colour_id, hair_colour_id, and skin_colour_id columns. Then, we filter the resulting dataframe to include only rows where the eye colour is 'Blue'. Finally, we list down the full names of the superheroes with blue eyes.\n",
    "code": "import numpy as np\nimport pandas as pd\n\n# Assuming df1, df2 are the dataframes\ndf = pd.merge(df1, df2, left_on='eye_colour_id', right_on='id', how='left')\ndf.columns = ['id', 'superhero_name', 'full_name', 'gender_id', 'eye_colour_id', 'hair_colour_id', 'skin_colour_id', 'race_id', 'publisher_id', 'alignment_id', 'height_cm', 'weight_kg', 'colour']\ndf = df[df['colour'] == 'Blue']\nfull_names = df['full_name'].tolist()\nprint(full_names)",
    "observation": "ValueError: Length mismatch: Expected axis has 14 elements, new values have 13 elements",
    "true_result": "[('Abe Sapien',), ('Abin Sur',), ('Abraxas',), ('Absorbing Man',), ('Adam Monroe',)]",
    "table_infos": "df1:\n|    |   id | superhero_name   | full_name              |   gender_id |   eye_colour_id |   hair_colour_id |   skin_colour_id |   race_id |   publisher_id |   alignment_id |   height_cm |   weight_kg |\n|---:|-----:|:-----------------|:-----------------------|------------:|----------------:|-----------------:|-----------------:|----------:|---------------:|---------------:|------------:|------------:|\n|  0 |    1 | 3-D Man          | Charles Chandler       |           1 |               9 |               13 |                1 |         1 |             13 |              1 |         188 |          90 |\n|  1 |    2 | A-Bomb           | Richard Milhouse Jones |           1 |              33 |                1 |                1 |        24 |             13 |              1 |         203 |         441 |\n|  2 |    3 | Abe Sapien       | Abraham Sapien         |           1 |               7 |                1 |                7 |        33 |              3 |              1 |         191 |          65 |\ndf2:\n|    |   id | colour    |\n|---:|-----:|:----------|\n|  0 |    1 | No Colour |\n|  1 |    2 | Amber     |\n|  2 |    3 | Auburn    |\nForeign keys:\ndf1.skin_colour_id = df2.id,df1.hair_colour_id = df2.id,df1.eye_colour_id = df2.id\n"
  },
  {
    "table_paths": [
      "datasets/BIRD_dev-superhero/superhero.csv",
      "datasets/BIRD_dev-superhero/colour.csv",
      "datasets/BIRD_dev-superhero/race.csv",
      "datasets/BIRD_dev-superhero/gender.csv"
    ],
    "query": "Give the race of the blue-haired male superhero.",
    "cot": "\nWe need to join the four dataframes based on the foreign keys and then filter the dataframe to get the race of the blue-haired male superhero.\n",
    "code": "import numpy as np\nimport pandas as pd\n\n# Assuming df1, df2, df3, df4 are the four dataframes\n\n# Join df1, df2, df3, df4 based on the foreign keys\ndf = pd.merge(df1, df2, left_on='skin_colour_id', right_on='id', how='left')\ndf = pd.merge(df, df3, left_on='race_id', right_on='id', how='left')\ndf = pd.merge(df, df2, left_on='hair_colour_id', right_on='id', how='left')\ndf = pd.merge(df, df4, left_on='gender_id', right_on='id', how='left')\n\n# Rename the columns for better understanding\ndf.rename(columns={'colour_x':'skin_colour', 'colour_y':'hair_colour', 'gender':'gender'}, inplace=True)\n\n# Filter the dataframe to get the race of the blue-haired male superhero\nblue_hair_male_superhero = df[(df['hair_colour'] == 'No Colour') & (df['gender'] == 'Male')]['race'].values[0]\n\n# Print the result\nprint(\"The race of the blue-haired male superhero is: \", blue_hair_male_superhero)",
    "observation": "MergeError: Passing 'suffixes' which cause duplicate columns {'id_x'} is not allowed.",
    "true_result": "[('Mutant',), ('-',), ('Strontian',)]",
    "table_infos": "df1:\n|    |   id | superhero_name   | full_name              |   gender_id |   eye_colour_id |   hair_colour_id |   skin_colour_id |   race_id |   publisher_id |   alignment_id |   height_cm |   weight_kg |\n|---:|-----:|:-----------------|:-----------------------|------------:|----------------:|-----------------:|-----------------:|----------:|---------------:|---------------:|------------:|------------:|\n|  0 |    1 | 3-D Man          | Charles Chandler       |           1 |               9 |               13 |                1 |         1 |             13 |              1 |         188 |          90 |\n|  1 |    2 | A-Bomb           | Richard Milhouse Jones |           1 |              33 |                1 |                1 |        24 |             13 |              1 |         203 |         441 |\n|  2 |    3 | Abe Sapien       | Abraham Sapien         |           1 |               7 |                1 |                7 |        33 |              3 |              1 |         191 |          65 |\ndf2:\n|    |   id | colour    |\n|---:|-----:|:----------|\n|  0 |    1 | No Colour |\n|  1 |    2 | Amber     |\n|  2 |    3 | Auburn    |\ndf3:\n|    |   id | race   |\n|---:|-----:|:-------|\n|  0 |    1 | -      |\n|  1 |    2 | Alien  |\n|  2 |    3 | Alpha  |\ndf4:\n|    |   id | gender   |\n|---:|-----:|:---------|\n|  0 |    1 | Male     |\n|  1 |    2 | Female   |\n|  2 |    3 | N/A      |\nForeign keys:\ndf1.skin_colour_id = df2.id,df1.race_id = df3.id,df1.hair_colour_id = df2.id,df1.gender_id = df4.id,df1.eye_colour_id = df2.id\n"
  },
  {
    "table_paths": [
      "datasets/BIRD_dev-superhero/superhero.csv",
      "datasets/BIRD_dev-superhero/alignment.csv",
      "datasets/BIRD_dev-superhero/gender.csv"
    ],
    "query": "Among the bad superheroes, what is the percentage of female superheroes?",
    "cot": "\nTo solve this problem, we need to join df1, df2 and df3 on the relevant columns. Then, we can filter the dataframe to get the bad superheroes and count the number of female superheroes. Finally, we can calculate the percentage of female superheroes among the bad superheroes.\n",
    "code": "import numpy as np\nimport pandas as pd\n\n# Assuming df1, df2, df3 are the dataframes given in the question\n\n# Join df1, df2 and df3 on the relevant columns\ndf = pd.merge(df1, df2, on='id')\ndf = pd.merge(df, df3, on='gender_id')\n\n# Filter the dataframe to get the bad superheroes\ndf = df[df['alignment'] == 'Bad']\n\n# Count the number of female superheroes\nnum_female_superheroes = df[df['gender'] == 'Female'].shape[0]\n\n# Calculate the percentage of female superheroes among the bad superheroes\npercentage_female = (num_female_superheroes / df.shape[0]) * 100\n\n# Print the result\nprint(f\"The percentage of bad superheroes that are female is {percentage_female}%\")",
    "observation": "KeyError: 'gender_id'",
    "true_result": "[(16.50943396226415,)]",
    "table_infos": "df1:\n|    |   id | superhero_name   | full_name              |   gender_id |   eye_colour_id |   hair_colour_id |   skin_colour_id |   race_id |   publisher_id |   alignment_id |   height_cm |   weight_kg |\n|---:|-----:|:-----------------|:-----------------------|------------:|----------------:|-----------------:|-----------------:|----------:|---------------:|---------------:|------------:|------------:|\n|  0 |    1 | 3-D Man          | Charles Chandler       |           1 |               9 |               13 |                1 |         1 |             13 |              1 |         188 |          90 |\n|  1 |    2 | A-Bomb           | Richard Milhouse Jones |           1 |              33 |                1 |                1 |        24 |             13 |              1 |         203 |         441 |\n|  2 |    3 | Abe Sapien       | Abraham Sapien         |           1 |               7 |                1 |                7 |        33 |              3 |              1 |         191 |          65 |\ndf2:\n|    |   id | alignment   |\n|---:|-----:|:------------|\n|  0 |    1 | Good        |\n|  1 |    2 | Bad         |\n|  2 |    3 | Neutral     |\ndf3:\n|    |   id | gender   |\n|---:|-----:|:---------|\n|  0 |    1 | Male     |\n|  1 |    2 | Female   |\n|  2 |    3 | N/A      |\nForeign keys:\ndf1.gender_id = df3.id,df1.alignment_id = df2.id\n"
  },
  {
    "table_paths": [
      "datasets/BIRD_dev-superhero/superhero.csv",
      "datasets/BIRD_dev-superhero/hero_power.csv",
      "datasets/BIRD_dev-superhero/superpower.csv"
    ],
    "query": "Identify superheroes who can control wind and list their names in alphabetical order.",
    "cot": "To solve this problem, we need to join df1, df2 and df3 on the appropriate columns. Then, we filter the data to only include superheroes who can control wind. Finally, we sort the data by superhero_name and print the superhero_name column.\n",
    "code": "import numpy as np\nimport pandas as pd\n\n# Assuming df1, df2, df3 are the dataframes\n\n# Join df1, df2 and df3 on the appropriate columns\ndf = pd.merge(df1, df2, on='id')\ndf = pd.merge(df, df3, on='power_id')\n\n# Filter the data to only include superheroes who can control wind\ndf = df[df['power_name'] == 'Agility']\n\n# Sort the data by superhero_name and print the superhero_name column\ndf = df.sort_values('superhero_name')\nfinal_df = df['superhero_name']\n\n# Print the final result\nprint(final_df)",
    "observation": "KeyError: 'id'",
    "true_result": "[('Crystal',), ('Red Tornado',), ('Tempest',)]",
    "table_infos": "df1:\n|    |   id | superhero_name   | full_name              |   gender_id |   eye_colour_id |   hair_colour_id |   skin_colour_id |   race_id |   publisher_id |   alignment_id |   height_cm |   weight_kg |\n|---:|-----:|:-----------------|:-----------------------|------------:|----------------:|-----------------:|-----------------:|----------:|---------------:|---------------:|------------:|------------:|\n|  0 |    1 | 3-D Man          | Charles Chandler       |           1 |               9 |               13 |                1 |         1 |             13 |              1 |         188 |          90 |\n|  1 |    2 | A-Bomb           | Richard Milhouse Jones |           1 |              33 |                1 |                1 |        24 |             13 |              1 |         203 |         441 |\n|  2 |    3 | Abe Sapien       | Abraham Sapien         |           1 |               7 |                1 |                7 |        33 |              3 |              1 |         191 |          65 |\ndf2:\n|    |   hero_id |   power_id |\n|---:|----------:|-----------:|\n|  0 |         1 |          1 |\n|  1 |         1 |         18 |\n|  2 |         1 |         26 |\ndf3:\n|    |   id | power_name          |\n|---:|-----:|:--------------------|\n|  0 |    1 | Agility             |\n|  1 |    2 | Accelerated Healing |\n|  2 |    3 | Lantern Power Ring  |\nForeign keys:\ndf2.power_id = df3.id,df2.hero_id = df1.id\n"
  },
  {
    "table_paths": [
      "datasets/BIRD_dev-superhero/superhero.csv",
      "datasets/BIRD_dev-superhero/hero_power.csv",
      "datasets/BIRD_dev-superhero/superpower.csv",
      "datasets/BIRD_dev-superhero/gender.csv"
    ],
    "query": "Identify the gender of the superhero who has the ability of Phoenix Force.",
    "cot": "\nTo solve this problem, we need to join the four tables on the appropriate keys and then filter the data to find the superhero with the power \"Phoenix Force\".\n",
    "code": "import numpy as np\nimport pandas as pd\n\n# Assuming df1, df2, df3, df4 are the four tables\n\n# Join df1, df2, df3 on the appropriate keys\ndf = pd.merge(df1, df2, left_on='id', right_on='hero_id')\ndf = pd.merge(df, df3, left_on='power_id', right_on='id')\n\n# Filter the data to find the superhero with the power \"Phoenix Force\"\ndf = df[df['power_name'] == 'Phoenix Force']\n\n# Get the gender of the superhero\ngender = df['gender']\n\n# Print the gender\nprint(gender)",
    "observation": "KeyError: 'gender'",
    "true_result": "[('Female',)]",
    "table_infos": "df1:\n|    |   id | superhero_name   | full_name              |   gender_id |   eye_colour_id |   hair_colour_id |   skin_colour_id |   race_id |   publisher_id |   alignment_id |   height_cm |   weight_kg |\n|---:|-----:|:-----------------|:-----------------------|------------:|----------------:|-----------------:|-----------------:|----------:|---------------:|---------------:|------------:|------------:|\n|  0 |    1 | 3-D Man          | Charles Chandler       |           1 |               9 |               13 |                1 |         1 |             13 |              1 |         188 |          90 |\n|  1 |    2 | A-Bomb           | Richard Milhouse Jones |           1 |              33 |                1 |                1 |        24 |             13 |              1 |         203 |         441 |\n|  2 |    3 | Abe Sapien       | Abraham Sapien         |           1 |               7 |                1 |                7 |        33 |              3 |              1 |         191 |          65 |\ndf2:\n|    |   hero_id |   power_id |\n|---:|----------:|-----------:|\n|  0 |         1 |          1 |\n|  1 |         1 |         18 |\n|  2 |         1 |         26 |\ndf3:\n|    |   id | power_name          |\n|---:|-----:|:--------------------|\n|  0 |    1 | Agility             |\n|  1 |    2 | Accelerated Healing |\n|  2 |    3 | Lantern Power Ring  |\ndf4:\n|    |   id | gender   |\n|---:|-----:|:---------|\n|  0 |    1 | Male     |\n|  1 |    2 | Female   |\n|  2 |    3 | N/A      |\nForeign keys:\ndf1.gender_id = df4.id,df2.power_id = df3.id,df2.hero_id = df1.id\n"
  },
  {
    "table_paths": [
      "datasets/BIRD_dev-superhero/superhero.csv",
      "datasets/BIRD_dev-superhero/publisher.csv",
      "datasets/BIRD_dev-superhero/race.csv"
    ],
    "query": "What is the average height of a non-human superhero in Dark Horse Comics?",
    "cot": "\nTo solve this problem, we need to join the three dataframes on the appropriate keys and then filter the data to only include superheroes that are not human (race_id != 1) and belong to Dark Horse Comics (publisher_id = 3). Finally, we calculate the average height of these superheroes.\n",
    "code": "import numpy as np\nimport pandas as pd\n\n# Assuming df1, df2, df3 are the dataframes\n\n# Join df1 and df2 on publisher_id\ndf = pd.merge(df1, df2, on='publisher_id', how='left')\n\n# Join df and df3 on race_id\ndf = pd.merge(df, df3, on='race_id', how='left')\n\n# Filter the data to only include superheroes that are not human and belong to Dark Horse Comics\ndf = df[(df['race'] != 'Human') & (df['publisher_name'] == 'Dark Horse Comics')]\n\n# Calculate the average height of the superheroes\naverage_height = df['height_cm'].mean()\n\nprint(average_height)",
    "observation": "KeyError: 'publisher_id'",
    "true_result": "[(109.0,)]",
    "table_infos": "df1:\n|    |   id | superhero_name   | full_name              |   gender_id |   eye_colour_id |   hair_colour_id |   skin_colour_id |   race_id |   publisher_id |   alignment_id |   height_cm |   weight_kg |\n|---:|-----:|:-----------------|:-----------------------|------------:|----------------:|-----------------:|-----------------:|----------:|---------------:|---------------:|------------:|------------:|\n|  0 |    1 | 3-D Man          | Charles Chandler       |           1 |               9 |               13 |                1 |         1 |             13 |              1 |         188 |          90 |\n|  1 |    2 | A-Bomb           | Richard Milhouse Jones |           1 |              33 |                1 |                1 |        24 |             13 |              1 |         203 |         441 |\n|  2 |    3 | Abe Sapien       | Abraham Sapien         |           1 |               7 |                1 |                7 |        33 |              3 |              1 |         191 |          65 |\ndf2:\n|    |   id | publisher_name    |\n|---:|-----:|:------------------|\n|  0 |    1 |                   |\n|  1 |    2 | ABC Studios       |\n|  2 |    3 | Dark Horse Comics |\ndf3:\n|    |   id | race   |\n|---:|-----:|:-------|\n|  0 |    1 | -      |\n|  1 |    2 | Alien  |\n|  2 |    3 | Alpha  |\nForeign keys:\ndf1.race_id = df3.id,df1.publisher_id = df2.id\n"
  },
  {
    "table_paths": [
      "datasets/BIRD_dev-superhero/hero_attribute.csv",
      "datasets/BIRD_dev-superhero/attribute.csv",
      "datasets/BIRD_dev-superhero/superhero.csv"
    ],
    "query": "Count the fastest superheroes.",
    "cot": "",
    "code": "import numpy as np\nimport pandas as pd\n\n# Assuming df1, df2, df3 are the dataframes\n\n# Merge df1 and df2 on attribute_id\ndf = pd.merge(df1, df2, left_on='attribute_id', right_on='id', how='inner')\n\n# Merge df with df3 on hero_id\ndf = pd.merge(df, df3, left_on='hero_id', right_on='id', how='inner')\n\n# Group by superhero_name and take the maximum of attribute_value\ndf = df.groupby('superhero_name')['attribute_value'].max().reset_index()\n\n# Filter the dataframe to get only those superheroes with attribute_name as 'Speed'\ndf = df[df['attribute_name'] == 'Speed']\n\n# Count the number of superheroes\nnum_fastest_superheroes = df.shape[0]\n\nprint(f\"Number of fastest superheroes: {num_fastest_superheroes}\")",
    "observation": "KeyError: 'attribute_name'",
    "true_result": "[(623,)]",
    "table_infos": "df1:\n|    |   hero_id |   attribute_id |   attribute_value |\n|---:|----------:|---------------:|------------------:|\n|  0 |         1 |              1 |                80 |\n|  1 |         2 |              1 |                75 |\n|  2 |         3 |              1 |                95 |\ndf2:\n|    |   id | attribute_name   |\n|---:|-----:|:-----------------|\n|  0 |    1 | Intelligence     |\n|  1 |    2 | Strength         |\n|  2 |    3 | Speed            |\ndf3:\n|    |   id | superhero_name   | full_name              |   gender_id |   eye_colour_id |   hair_colour_id |   skin_colour_id |   race_id |   publisher_id |   alignment_id |   height_cm |   weight_kg |\n|---:|-----:|:-----------------|:-----------------------|------------:|----------------:|-----------------:|-----------------:|----------:|---------------:|---------------:|------------:|------------:|\n|  0 |    1 | 3-D Man          | Charles Chandler       |           1 |               9 |               13 |                1 |         1 |             13 |              1 |         188 |          90 |\n|  1 |    2 | A-Bomb           | Richard Milhouse Jones |           1 |              33 |                1 |                1 |        24 |             13 |              1 |         203 |         441 |\n|  2 |    3 | Abe Sapien       | Abraham Sapien         |           1 |               7 |                1 |                7 |        33 |              3 |              1 |         191 |          65 |\nForeign keys:\ndf1.hero_id = df3.id,df1.attribute_id = df2.id\n"
  },
  {
    "table_paths": [
      "datasets/BIRD_dev-superhero/superhero.csv",
      "datasets/BIRD_dev-superhero/publisher.csv"
    ],
    "query": "Which publisher created more superheroes: DC or Marvel Comics? Find the difference in the number of superheroes.",
    "cot": "\nTo solve this problem, we need to count the number of superheroes for each publisher in df1 and then compare these counts with df2. We can use the `groupby` function in pandas to group by `publisher_id` and then count the number of rows in each group. We can then join this count with df2 to get the publisher name. Finally, we can compare the counts for DC and Marvel Comics.\n",
    "code": "import numpy as np\nimport pandas as pd\n\n# Load the data\n\n\n\n# Count the number of superheroes for each publisher\nsuperhero_counts = df1.groupby('publisher_id').size()\n\n# Join with df2 to get the publisher name\nsuperhero_counts = superhero_counts.reset_index(name='count')\nsuperhero_counts = superhero_counts.merge(df2, on='id')\n\n# Compare the counts for DC and Marvel Comics\ndc_count = superhero_counts[superhero_counts['publisher_name'] == 'DC Comics']['count'].values[0]\nmarvel_count = superhero_counts[superhero_counts['publisher_name'] == 'Marvel Comics']['count'].values[0]\n\ndifference = dc_count - marvel_count\n\nprint(f\"The difference in the number of superheroes created by DC Comics and Marvel Comics is {difference}.\")",
    "observation": "KeyError: 'id'",
    "true_result": "[(-163,)]",
    "table_infos": "df1:\n|    |   id | superhero_name   | full_name              |   gender_id |   eye_colour_id |   hair_colour_id |   skin_colour_id |   race_id |   publisher_id |   alignment_id |   height_cm |   weight_kg |\n|---:|-----:|:-----------------|:-----------------------|------------:|----------------:|-----------------:|-----------------:|----------:|---------------:|---------------:|------------:|------------:|\n|  0 |    1 | 3-D Man          | Charles Chandler       |           1 |               9 |               13 |                1 |         1 |             13 |              1 |         188 |          90 |\n|  1 |    2 | A-Bomb           | Richard Milhouse Jones |           1 |              33 |                1 |                1 |        24 |             13 |              1 |         203 |         441 |\n|  2 |    3 | Abe Sapien       | Abraham Sapien         |           1 |               7 |                1 |                7 |        33 |              3 |              1 |         191 |          65 |\ndf2:\n|    |   id | publisher_name    |\n|---:|-----:|:------------------|\n|  0 |    1 |                   |\n|  1 |    2 | ABC Studios       |\n|  2 |    3 | Dark Horse Comics |\nForeign keys:\ndf1.publisher_id = df2.id\n"
  },
  {
    "table_paths": [
      "datasets/BIRD_dev-superhero/superhero.csv",
      "datasets/BIRD_dev-superhero/hero_attribute.csv",
      "datasets/BIRD_dev-superhero/attribute.csv"
    ],
    "query": "Identify the weakest attribute of the Black Panther.",
    "cot": "\nTo solve this problem, we need to join df1, df2 and df3 based on the foreign keys. Then, we can group by the superhero_name and find the minimum attribute_value.\n",
    "code": "import numpy as np\nimport pandas as pd\n\n# Assuming df1, df2, df3 are the dataframes\n\n# Join df1, df2 and df3 based on the foreign keys\ndf = pd.merge(df1, df2, left_on='id', right_on='hero_id')\ndf = pd.merge(df, df3, left_on='attribute_id', right_on='id')\n\n# Group by superhero_name and find the minimum attribute_value\ndf_grouped = df.groupby('superhero_name')['attribute_value'].min().reset_index()\n\n# Filter the dataframe to get the weakest attribute of Black Panther\nblack_panther = df_grouped[df_grouped['superhero_name'] == 'Black Panther']\n\n# Print the weakest attribute of Black Panther\nprint(black_panther['attribute_name'].values[0], black_panther['attribute_value'].values[0])",
    "observation": "KeyError: 'attribute_name'",
    "true_result": "[('Strength',)]",
    "table_infos": "df1:\n|    |   id | superhero_name   | full_name              |   gender_id |   eye_colour_id |   hair_colour_id |   skin_colour_id |   race_id |   publisher_id |   alignment_id |   height_cm |   weight_kg |\n|---:|-----:|:-----------------|:-----------------------|------------:|----------------:|-----------------:|-----------------:|----------:|---------------:|---------------:|------------:|------------:|\n|  0 |    1 | 3-D Man          | Charles Chandler       |           1 |               9 |               13 |                1 |         1 |             13 |              1 |         188 |          90 |\n|  1 |    2 | A-Bomb           | Richard Milhouse Jones |           1 |              33 |                1 |                1 |        24 |             13 |              1 |         203 |         441 |\n|  2 |    3 | Abe Sapien       | Abraham Sapien         |           1 |               7 |                1 |                7 |        33 |              3 |              1 |         191 |          65 |\ndf2:\n|    |   hero_id |   attribute_id |   attribute_value |\n|---:|----------:|---------------:|------------------:|\n|  0 |         1 |              1 |                80 |\n|  1 |         2 |              1 |                75 |\n|  2 |         3 |              1 |                95 |\ndf3:\n|    |   id | attribute_name   |\n|---:|-----:|:-----------------|\n|  0 |    1 | Intelligence     |\n|  1 |    2 | Strength         |\n|  2 |    3 | Speed            |\nForeign keys:\ndf2.hero_id = df1.id,df2.attribute_id = df3.id\n"
  },
  {
    "table_paths": ["datasets/BIRD_dev-superhero/superhero.csv"],
    "query": "Provide the full name of the superhero named Alien.",
    "cot": "",
    "code": "import numpy as np\nimport pandas as pd\n\n# Assuming df is the dataframe\n\n# Data Processing\nfull_name = df[df['superhero_name'] == 'Alien']['full_name'].values[0]\n\n# Print the result\nprint(full_name)",
    "observation": "IndexError: index 0 is out of bounds for axis 0 with size 0",
    "true_result": "[('Xenomorph',)]",
    "table_infos": "df:\n|    |   id | superhero_name   | full_name        |   gender_id |   eye_colour_id |   hair_colour_id |   skin_colour_id |   race_id |   publisher_id |   alignment_id |   height_cm |   weight_kg |\n|---:|-----:|:-----------------|:-----------------|------------:|----------------:|-----------------:|-----------------:|----------:|---------------:|---------------:|------------:|------------:|\n|  0 |    1 | 3-D Man          | Charles Chandler |           1 |               9 |               13 |                1 |         1 |             13 |              1 |         188 |          90 |\n"
  },
  {
    "table_paths": [
      "datasets/BIRD_dev-superhero/superhero.csv",
      "datasets/BIRD_dev-superhero/colour.csv"
    ],
    "query": "In superheroes with weight less than 100, list the full name of the superheroes with brown eyes.",
    "cot": "\nTo solve this problem, we need to filter the superheroes with weight less than 100 and eyes with brown colour. We can use the pandas library to filter the dataframe based on these conditions.\n",
    "code": "import numpy as np\nimport pandas as pd\n\n# Assuming df1, df2 are the dataframes\n\n# Merge df1 and df2 on skin_colour_id, hair_colour_id, eye_colour_id\ndf = pd.merge(df1, df2, left_on='skin_colour_id', right_on='id', how='left')\ndf.rename(columns={'colour':'skin_colour'}, inplace=True)\ndf = pd.merge(df, df2, left_on='hair_colour_id', right_on='id', how='left')\ndf.rename(columns={'colour':'hair_colour'}, inplace=True)\ndf = pd.merge(df, df2, left_on='eye_colour_id', right_on='id', how='left')\ndf.rename(columns={'colour':'eye_colour'}, inplace=True)\n\n# Filter the superheroes with weight less than 100 and eyes with brown colour\ndf_filtered = df[(df['weight_kg'] < 100) & (df['eye_colour'] == 'Amber')]\n\n# Get the full name of the superheroes\nfinal_df = df_filtered['full_name']\n\n# Print the final result\nprint(final_df)",
    "observation": "MergeError: Passing 'suffixes' which cause duplicate columns {'id_x'} is not allowed.",
    "true_result": "[('Charles Chandler',), ('Bob',), (None,), ('Angel Salvadore Bohusk',), ('Raymond Palmer',), ('Ryan Choi',), ('Michael Washington Lane',), ('Roberto Velasquez',), ('Dane Whitman',), ('Jefferson Pierce',), (\"T'Challa\",), ('Eric Brooks',), ('Donald Gill',), ('Jaime Reyes',), ('-',), ('Madison Jeffries',), ('Jericho Drumm',), ('Karen Beecher-Duncan',), ('Leonard Snart',), (None,), ('Jonothon Evan Starsmore',), ('Kevin Sidney',), ('Barbara Ann Minerva',), (None,), ('Tyrone Johnson',), ('Christopher Summers',), ('Burchell Clemens',), ('Scott Summers',), ('Christopher Powell',), ('Laynia Petrovna',), (None,), ('Floyd Lawton',), ('Willis Stryker',), ('Helen Parr',), ('Bonita Juarez',), ('Jason Rusch',), ('-',), (None,), ('-',), ('Dr. James McDonald Hudson',), (None,), ('Han Solo',), ('John Hancock',), ('Howard (Last name unrevealed)',), (None,), ('Robert Louis Drake',), (None,), ('John Wraith',), ('-',), ('Alyosha Kravinoff',), ('Yuriko Oyama',), ('Abner Jenkins',), ('Robert Kirkland Langstrom',), ('John Jameson',), ('John-117',), ('-',), ('Micah Sanders',), ('Reed Richards',), ('Moses Magnum',), ('Quentin Beck',), ('Nicholas Joseph Fury',), ('Richard Rider',), (None,), ('Amon Tomaz',), ('Daisy Louise Johnson',), ('Maxwell Jordan',), (None,), ('Rocket Raccoon',), ('Shang-Chi',), ('Gaveedra Seven',), ('Herman Schultz',), ('-',), ('Maria de Guadalupe Santiago',), ('Martha Franklin',), ('-',), (None,), ('Virgil Ovid Hawkins',), ('Roberto DaCosta',), ('Everett Thomas',), ('-',), ('Angel Salvadore Bohusk',), (None,), ('Phineas Mason',), ('Angelo Fortunato',), ('Francisco Paco Ramon',), ('Adrian Toomes',), ('James Rupert Rhodes',), ('Emil LaSalle',), ('-',), (None,), ('Yoda',)]",
    "table_infos": "df1:\n|    |   id | superhero_name   | full_name              |   gender_id |   eye_colour_id |   hair_colour_id |   skin_colour_id |   race_id |   publisher_id |   alignment_id |   height_cm |   weight_kg |\n|---:|-----:|:-----------------|:-----------------------|------------:|----------------:|-----------------:|-----------------:|----------:|---------------:|---------------:|------------:|------------:|\n|  0 |    1 | 3-D Man          | Charles Chandler       |           1 |               9 |               13 |                1 |         1 |             13 |              1 |         188 |          90 |\n|  1 |    2 | A-Bomb           | Richard Milhouse Jones |           1 |              33 |                1 |                1 |        24 |             13 |              1 |         203 |         441 |\n|  2 |    3 | Abe Sapien       | Abraham Sapien         |           1 |               7 |                1 |                7 |        33 |              3 |              1 |         191 |          65 |\ndf2:\n|    |   id | colour    |\n|---:|-----:|:----------|\n|  0 |    1 | No Colour |\n|  1 |    2 | Amber     |\n|  2 |    3 | Auburn    |\nForeign keys:\ndf1.skin_colour_id = df2.id,df1.hair_colour_id = df2.id,df1.eye_colour_id = df2.id\n"
  },
  {
    "table_paths": [
      "datasets/BIRD_dev-superhero/superhero.csv",
      "datasets/BIRD_dev-superhero/hero_attribute.csv"
    ],
    "query": "List the attribute value of the superhero named Aquababy.",
    "cot": "\nTo solve this problem, we need to join the two dataframes on the 'hero_id' and 'id' columns respectively. Then, we can filter the dataframe to get the attribute value of the superhero named Aquababy.\n",
    "code": "import numpy as np\nimport pandas as pd\n\n# Assuming df1 and df2 are the dataframes\n\n# Join the two dataframes on 'hero_id' and 'id'\ndf = pd.merge(df1, df2, left_on='id', right_on='hero_id')\n\n# Filter the dataframe to get the attribute value of the superhero named Aquababy\naquababy_attribute_value = df[df['superhero_name'] == 'Aquababy']['attribute_value'].values[0]\n\n# Print the attribute value\nprint(aquababy_attribute_value)",
    "observation": "IndexError: index 0 is out of bounds for axis 0 with size 0",
    "true_result": "[(60,), (20,), (15,), (15,), (15,), (15,)]",
    "table_infos": "df1:\n|    |   id | superhero_name   | full_name              |   gender_id |   eye_colour_id |   hair_colour_id |   skin_colour_id |   race_id |   publisher_id |   alignment_id |   height_cm |   weight_kg |\n|---:|-----:|:-----------------|:-----------------------|------------:|----------------:|-----------------:|-----------------:|----------:|---------------:|---------------:|------------:|------------:|\n|  0 |    1 | 3-D Man          | Charles Chandler       |           1 |               9 |               13 |                1 |         1 |             13 |              1 |         188 |          90 |\n|  1 |    2 | A-Bomb           | Richard Milhouse Jones |           1 |              33 |                1 |                1 |        24 |             13 |              1 |         203 |         441 |\n|  2 |    3 | Abe Sapien       | Abraham Sapien         |           1 |               7 |                1 |                7 |        33 |              3 |              1 |         191 |          65 |\ndf2:\n|    |   hero_id |   attribute_id |   attribute_value |\n|---:|----------:|---------------:|------------------:|\n|  0 |         1 |              1 |                80 |\n|  1 |         2 |              1 |                75 |\n|  2 |         3 |              1 |                95 |\nForeign keys:\ndf2.hero_id = df1.id\n"
  },
  {
    "table_paths": [
      "datasets/BIRD_dev-superhero/superhero.csv",
      "datasets/BIRD_dev-superhero/race.csv"
    ],
    "query": "Provide the weight and race of the superhero with superhero ID 40.",
    "cot": "\nWe need to join df1 and df2 on the race_id column. Then, we can select the weight_kg and race columns for the superhero with id 40.\n",
    "code": "import numpy as np\nimport pandas as pd\n\n# Assuming df1 and df2 are the dataframes\ndf = pd.merge(df1, df2, left_on='race_id', right_on='id', how='left')\nfinal_df = df[df['id'] == 40][['weight_kg', 'race']]\n\n# Print the final result\nprint(final_df)",
    "observation": "KeyError: 'id'",
    "true_result": "[(63, 'Human')]",
    "table_infos": "df1:\n|    |   id | superhero_name   | full_name              |   gender_id |   eye_colour_id |   hair_colour_id |   skin_colour_id |   race_id |   publisher_id |   alignment_id |   height_cm |   weight_kg |\n|---:|-----:|:-----------------|:-----------------------|------------:|----------------:|-----------------:|-----------------:|----------:|---------------:|---------------:|------------:|------------:|\n|  0 |    1 | 3-D Man          | Charles Chandler       |           1 |               9 |               13 |                1 |         1 |             13 |              1 |         188 |          90 |\n|  1 |    2 | A-Bomb           | Richard Milhouse Jones |           1 |              33 |                1 |                1 |        24 |             13 |              1 |         203 |         441 |\n|  2 |    3 | Abe Sapien       | Abraham Sapien         |           1 |               7 |                1 |                7 |        33 |              3 |              1 |         191 |          65 |\ndf2:\n|    |   id | race   |\n|---:|-----:|:-------|\n|  0 |    1 | -      |\n|  1 |    2 | Alien  |\n|  2 |    3 | Alpha  |\nForeign keys:\ndf1.race_id = df2.id\n"
  },
  {
    "table_paths": [
      "datasets/BIRD_dev-superhero/superhero.csv",
      "datasets/BIRD_dev-superhero/colour.csv"
    ],
    "query": "Give the eye colour of Blackwulf.",
    "cot": "\nTo find the eye colour of Blackwulf, we need to join df1 and df2 on the eye_colour_id and then filter df1 by superhero_name.\n",
    "code": "import numpy as np\nimport pandas as pd\n\n# Assuming df1 and df2 are the dataframes\n\n# Join df1 and df2 on eye_colour_id\ndf = pd.merge(df1, df2, left_on='eye_colour_id', right_on='id', how='left')\n\n# Filter df by superhero_name and get the colour\neye_colour = df[df['superhero_name'] == 'Blackwulf']['colour'].values[0]\n\nprint(eye_colour)",
    "observation": "IndexError: index 0 is out of bounds for axis 0 with size 0",
    "true_result": "[('Red',)]",
    "table_infos": "df1:\n|    |   id | superhero_name   | full_name              |   gender_id |   eye_colour_id |   hair_colour_id |   skin_colour_id |   race_id |   publisher_id |   alignment_id |   height_cm |   weight_kg |\n|---:|-----:|:-----------------|:-----------------------|------------:|----------------:|-----------------:|-----------------:|----------:|---------------:|---------------:|------------:|------------:|\n|  0 |    1 | 3-D Man          | Charles Chandler       |           1 |               9 |               13 |                1 |         1 |             13 |              1 |         188 |          90 |\n|  1 |    2 | A-Bomb           | Richard Milhouse Jones |           1 |              33 |                1 |                1 |        24 |             13 |              1 |         203 |         441 |\n|  2 |    3 | Abe Sapien       | Abraham Sapien         |           1 |               7 |                1 |                7 |        33 |              3 |              1 |         191 |          65 |\ndf2:\n|    |   id | colour    |\n|---:|-----:|:----------|\n|  0 |    1 | No Colour |\n|  1 |    2 | Amber     |\n|  2 |    3 | Auburn    |\nForeign keys:\ndf1.skin_colour_id = df2.id,df1.hair_colour_id = df2.id,df1.eye_colour_id = df2.id\n"
  },
  {
    "table_paths": [
      "datasets/BIRD_dev-formula_1/qualifying.csv",
      "datasets/BIRD_dev-formula_1/drivers.csv"
    ],
    "query": "What is the surname of the driver with the best lap time in race number 19 in the second period?",
    "cot": "\nWe need to find the driver with the best lap time in the second period (q2) for race number 19. We can achieve this by first filtering the df1 dataframe to include only the rows where raceId is 19 and period is q2. Then, we can merge this filtered df1 dataframe with df2 to get the driver's surname.\n",
    "code": "import numpy as np\nimport pandas as pd\n\n# Load the data\n\n\n\n# Filter df1 to include only raceId 19 and period q2\ndf1_filtered = df1[(df1['raceId'] == 19) & (df1['q2'] == 'q2')]\n\n# Merge df1_filtered with df2 on driverId\ndf_merged = pd.merge(df1_filtered, df2, on='driverId')\n\n# Find the driver with the best lap time\nbest_lap_driver = df_merged.loc[df_merged['q2'].idxmin()]\n\n# Print the surname of the best lap driver\nprint(best_lap_driver['surname'])",
    "observation": "ValueError: attempt to get argmin of an empty sequence",
    "true_result": "[('Räikkönen',)]",
    "table_infos": "df1:\n|    |   qualifyId |   raceId |   driverId |   constructorId |   number |   position | q1       | q2       | q3       |\n|---:|------------:|---------:|-----------:|----------------:|---------:|-----------:|:---------|:---------|:---------|\n|  0 |           1 |       18 |          1 |               1 |       22 |          1 | 1:26.572 | 1:25.187 | 1:26.714 |\n|  1 |           2 |       18 |          9 |               2 |        4 |          2 | 1:26.103 | 1:25.315 | 1:26.869 |\n|  2 |           3 |       18 |          5 |               1 |       23 |          3 | 1:25.664 | 1:25.452 | 1:27.079 |\ndf2:\n|    |   driverId | driverRef   |   number | code   | forename   | surname   | dob        | nationality   | url                                         |\n|---:|-----------:|:------------|---------:|:-------|:-----------|:----------|:-----------|:--------------|:--------------------------------------------|\n|  0 |          1 | hamilton    |       44 | HAM    | Lewis      | Hamilton  | 1985-01-07 | British       | http://en.wikipedia.org/wiki/Lewis_Hamilton |\n|  1 |          2 | heidfeld    |      nan | HEI    | Nick       | Heidfeld  | 1977-05-10 | German        | http://en.wikipedia.org/wiki/Nick_Heidfeld  |\n|  2 |          3 | rosberg     |        6 | ROS    | Nico       | Rosberg   | 1985-06-27 | German        | http://en.wikipedia.org/wiki/Nico_Rosberg   |\nForeign keys:\ndf1.driverId = df2.driverId\n"
  },
  {
    "table_paths": [
      "datasets/BIRD_dev-formula_1/qualifying.csv",
      "datasets/BIRD_dev-formula_1/drivers.csv"
    ],
    "query": "What's Bruno Senna's Q1 result in the qualifying race No. 354?",
    "cot": "\nTo find Bruno Senna's Q1 result in the qualifying race No. 354, we need to join df1 and df2 on driverId, filter for the raceId and qualifyId, and then find the result for Bruno Senna.\n",
    "code": "import numpy as np\nimport pandas as pd\n\n# Assuming df1 and df2 are the dataframes\n\n# Merge df1 and df2 on driverId\nmerged_df = pd.merge(df1, df2, on='driverId')\n\n# Filter for the raceId and qualifyId\nfiltered_df = merged_df[(merged_df['raceId'] == 354) & (merged_df['qualifyId'] == 3)]\n\n# Find the result for Bruno Senna\nresult = filtered_df[filtered_df['driverRef'] == 'SENNA']['q1'].values[0]\n\n# Print the result\nprint(f\"Bruno Senna's Q1 result in the qualifying race No. 354 is: {result}\")",
    "observation": "IndexError: index 0 is out of bounds for axis 0 with size 0",
    "true_result": "[('1:23.796',)]",
    "table_infos": "df1:\n|    |   qualifyId |   raceId |   driverId |   constructorId |   number |   position | q1       | q2       | q3       |\n|---:|------------:|---------:|-----------:|----------------:|---------:|-----------:|:---------|:---------|:---------|\n|  0 |           1 |       18 |          1 |               1 |       22 |          1 | 1:26.572 | 1:25.187 | 1:26.714 |\n|  1 |           2 |       18 |          9 |               2 |        4 |          2 | 1:26.103 | 1:25.315 | 1:26.869 |\n|  2 |           3 |       18 |          5 |               1 |       23 |          3 | 1:25.664 | 1:25.452 | 1:27.079 |\ndf2:\n|    |   driverId | driverRef   |   number | code   | forename   | surname   | dob        | nationality   | url                                         |\n|---:|-----------:|:------------|---------:|:-------|:-----------|:----------|:-----------|:--------------|:--------------------------------------------|\n|  0 |          1 | hamilton    |       44 | HAM    | Lewis      | Hamilton  | 1985-01-07 | British       | http://en.wikipedia.org/wiki/Lewis_Hamilton |\n|  1 |          2 | heidfeld    |      nan | HEI    | Nick       | Heidfeld  | 1977-05-10 | German        | http://en.wikipedia.org/wiki/Nick_Heidfeld  |\n|  2 |          3 | rosberg     |        6 | ROS    | Nico       | Rosberg   | 1985-06-27 | German        | http://en.wikipedia.org/wiki/Nico_Rosberg   |\nForeign keys:\ndf1.driverId = df2.driverId\n"
  },
  {
    "table_paths": [
      "datasets/BIRD_dev-formula_1/qualifying.csv",
      "datasets/BIRD_dev-formula_1/drivers.csv"
    ],
    "query": "For the driver who had the Q2 time as 0:01:40 in the qualifying race No. 355, what is his nationality?",
    "cot": "\nTo solve this problem, we need to join df1 and df2 on driverId, then filter the dataframe to include only the rows where the Q2 time is 0:01:40 and the raceId is 355. The nationality of the driver can then be found in the resulting dataframe.\n",
    "code": "import numpy as np\nimport pandas as pd\n\n# Assuming df1 and df2 are the dataframes given in the question\n\n# Join df1 and df2 on driverId\ndf = pd.merge(df1, df2, on='driverId')\n\n# Filter the dataframe to include only the rows where the Q2 time is 0:01:40 and the raceId is 355\ndf = df[(df['q2'] == '0:01:40') & (df['raceId'] == 355)]\n\n# Get the nationality of the driver\nnationality = df['nationality'].values[0]\n\nprint(nationality)",
    "observation": "IndexError: index 0 is out of bounds for axis 0 with size 0",
    "true_result": "[('British',), ('Spanish',), ('Australian',), ('Brazilian',), ('German',), ('Russian',), ('Polish',), ('Japanese',)]",
    "table_infos": "df1:\n|    |   qualifyId |   raceId |   driverId |   constructorId |   number |   position | q1       | q2       | q3       |\n|---:|------------:|---------:|-----------:|----------------:|---------:|-----------:|:---------|:---------|:---------|\n|  0 |           1 |       18 |          1 |               1 |       22 |          1 | 1:26.572 | 1:25.187 | 1:26.714 |\n|  1 |           2 |       18 |          9 |               2 |        4 |          2 | 1:26.103 | 1:25.315 | 1:26.869 |\n|  2 |           3 |       18 |          5 |               1 |       23 |          3 | 1:25.664 | 1:25.452 | 1:27.079 |\ndf2:\n|    |   driverId | driverRef   |   number | code   | forename   | surname   | dob        | nationality   | url                                         |\n|---:|-----------:|:------------|---------:|:-------|:-----------|:----------|:-----------|:--------------|:--------------------------------------------|\n|  0 |          1 | hamilton    |       44 | HAM    | Lewis      | Hamilton  | 1985-01-07 | British       | http://en.wikipedia.org/wiki/Lewis_Hamilton |\n|  1 |          2 | heidfeld    |      nan | HEI    | Nick       | Heidfeld  | 1977-05-10 | German        | http://en.wikipedia.org/wiki/Nick_Heidfeld  |\n|  2 |          3 | rosberg     |        6 | ROS    | Nico       | Rosberg   | 1985-06-27 | German        | http://en.wikipedia.org/wiki/Nico_Rosberg   |\nForeign keys:\ndf1.driverId = df2.driverId\n"
  },
  {
    "table_paths": [
      "datasets/BIRD_dev-formula_1/qualifying.csv",
      "datasets/BIRD_dev-formula_1/drivers.csv"
    ],
    "query": "What is his number of the driver who finished 0:01:54 in the Q3 of qualifying race No.903?",
    "cot": "\nWe need to find the driverId of the driver who finished in 0:01:54 in the Q3 of qualifying race No.903. We can do this by filtering the df1 dataframe based on the given conditions and then merging it with df2 to get the driver's details.\n",
    "code": "import numpy as np\nimport pandas as pd\n\n# Load the dataframes\n\n\n\n# Filter df1 to get the rows where the position is 1 and the time in Q3 is 0:01:54\nfiltered_df1 = df1[(df1['position'] == 1) & (df1['q3'] == '0:01:54')]\n\n# Merge filtered_df1 with df2 on driverId to get the driver's details\nfinal_df = pd.merge(filtered_df1, df2, on='driverId')\n\n# Print the final result\nprint(final_df[['driverId', 'number', 'forename', 'surname']])",
    "observation": "KeyError: \"['number'] not in index\"",
    "true_result": "[(3,), (5,)]",
    "table_infos": "df1:\n|    |   qualifyId |   raceId |   driverId |   constructorId |   number |   position | q1       | q2       | q3       |\n|---:|------------:|---------:|-----------:|----------------:|---------:|-----------:|:---------|:---------|:---------|\n|  0 |           1 |       18 |          1 |               1 |       22 |          1 | 1:26.572 | 1:25.187 | 1:26.714 |\n|  1 |           2 |       18 |          9 |               2 |        4 |          2 | 1:26.103 | 1:25.315 | 1:26.869 |\n|  2 |           3 |       18 |          5 |               1 |       23 |          3 | 1:25.664 | 1:25.452 | 1:27.079 |\ndf2:\n|    |   driverId | driverRef   |   number | code   | forename   | surname   | dob        | nationality   | url                                         |\n|---:|-----------:|:------------|---------:|:-------|:-----------|:----------|:-----------|:--------------|:--------------------------------------------|\n|  0 |          1 | hamilton    |       44 | HAM    | Lewis      | Hamilton  | 1985-01-07 | British       | http://en.wikipedia.org/wiki/Lewis_Hamilton |\n|  1 |          2 | heidfeld    |      nan | HEI    | Nick       | Heidfeld  | 1977-05-10 | German        | http://en.wikipedia.org/wiki/Nick_Heidfeld  |\n|  2 |          3 | rosberg     |        6 | ROS    | Nico       | Rosberg   | 1985-06-27 | German        | http://en.wikipedia.org/wiki/Nico_Rosberg   |\nForeign keys:\ndf1.driverId = df2.driverId\n"
  },
  {
    "table_paths": [
      "datasets/BIRD_dev-formula_1/circuits.csv",
      "datasets/BIRD_dev-formula_1/races.csv"
    ],
    "query": "Where is Malaysian Grand Prix held? Give the location coordinates.",
    "cot": "To solve this problem, we need to join df1 and df2 on the 'circuitId' column. Then, we can filter the rows where the 'name' column of df2 is 'Malaysian Grand Prix'. Finally, we can select the 'location', 'lat', and 'lng' columns from the resulting DataFrame.\n",
    "code": "import numpy as np\nimport pandas as pd\n\n# Assuming df1 and df2 are the DataFrames given in the question\n\n# Join df1 and df2 on 'circuitId'\ndf = pd.merge(df2, df1, on='circuitId')\n\n# Filter rows where 'name' is 'Malaysian Grand Prix'\ndf = df[df['name'] == 'Malaysian Grand Prix']\n\n# Select 'location', 'lat', and 'lng' columns\nfinal_df = df[['location', 'lat', 'lng']]\n\n# Print the final result\nprint(final_df)",
    "observation": "KeyError: 'name'",
    "true_result": "[(2.76083, 101.738)]",
    "table_infos": "df1:\n|    |   circuitId | circuitRef   | name                           | location     | country   |      lat |       lng | alt   | url                                                         |\n|---:|------------:|:-------------|:-------------------------------|:-------------|:----------|---------:|----------:|:------|:------------------------------------------------------------|\n|  0 |           2 | sepang       | Sepang International Circuit   | Kuala Lumpur | Malaysia  |  2.76083 | 101.738   |       | http://en.wikipedia.org/wiki/Sepang_International_Circuit   |\n|  1 |           3 | bahrain      | Bahrain International Circuit  | Sakhir       | Bahrain   | 26.0325  |  50.5106  |       | http://en.wikipedia.org/wiki/Bahrain_International_Circuit  |\n|  2 |           4 | catalunya    | Circuit de Barcelona-Catalunya | Montmeló     | Spain     | 41.57    |   2.26111 |       | http://en.wikipedia.org/wiki/Circuit_de_Barcelona-Catalunya |\ndf2:\n|    |   raceId |   year |   round |   circuitId | name                  | date       | time     | url                                                     |\n|---:|---------:|-------:|--------:|------------:|:----------------------|:-----------|:---------|:--------------------------------------------------------|\n|  0 |        1 |   2009 |       1 |           1 | Australian Grand Prix | 2009-03-29 | 06:00:00 | http://en.wikipedia.org/wiki/2009_Australian_Grand_Prix |\n|  1 |        2 |   2009 |       2 |           2 | Malaysian Grand Prix  | 2009-04-05 | 09:00:00 | http://en.wikipedia.org/wiki/2009_Malaysian_Grand_Prix  |\n|  2 |        3 |   2009 |       3 |          17 | Chinese Grand Prix    | 2009-04-19 | 07:00:00 | http://en.wikipedia.org/wiki/2009_Chinese_Grand_Prix    |\nForeign keys:\ndf2.circuitId = df1.circuitId\n"
  },
  {
    "table_paths": [
      "datasets/BIRD_dev-formula_1/qualifying.csv",
      "datasets/BIRD_dev-formula_1/drivers.csv"
    ],
    "query": "What's Lucas di Grassi's Q1 result in the race No. 345?",
    "cot": "To find the Q1 result of Lucas di Grassi in race No. 345, we need to join df1 and df2 on driverId and then filter the dataframe based on the raceId and driverRef.\n",
    "code": "import numpy as np\nimport pandas as pd\n\n# Assuming df1 and df2 are the dataframes\nfinal_df = pd.merge(df1, df2, on='driverId')\nfinal_df = final_df[(final_df['raceId'] == 345) & (final_df['driverRef'] == 'di Grassi')]\n\n# Print the Q1 result\nprint(final_df['q1'].values[0])",
    "observation": "IndexError: index 0 is out of bounds for axis 0 with size 0",
    "true_result": "[('1:42.086',)]",
    "table_infos": "df1:\n|    |   qualifyId |   raceId |   driverId |   constructorId |   number |   position | q1       | q2       | q3       |\n|---:|------------:|---------:|-----------:|----------------:|---------:|-----------:|:---------|:---------|:---------|\n|  0 |           1 |       18 |          1 |               1 |       22 |          1 | 1:26.572 | 1:25.187 | 1:26.714 |\n|  1 |           2 |       18 |          9 |               2 |        4 |          2 | 1:26.103 | 1:25.315 | 1:26.869 |\n|  2 |           3 |       18 |          5 |               1 |       23 |          3 | 1:25.664 | 1:25.452 | 1:27.079 |\ndf2:\n|    |   driverId | driverRef   |   number | code   | forename   | surname   | dob        | nationality   | url                                         |\n|---:|-----------:|:------------|---------:|:-------|:-----------|:----------|:-----------|:--------------|:--------------------------------------------|\n|  0 |          1 | hamilton    |       44 | HAM    | Lewis      | Hamilton  | 1985-01-07 | British       | http://en.wikipedia.org/wiki/Lewis_Hamilton |\n|  1 |          2 | heidfeld    |      nan | HEI    | Nick       | Heidfeld  | 1977-05-10 | German        | http://en.wikipedia.org/wiki/Nick_Heidfeld  |\n|  2 |          3 | rosberg     |        6 | ROS    | Nico       | Rosberg   | 1985-06-27 | German        | http://en.wikipedia.org/wiki/Nico_Rosberg   |\nForeign keys:\ndf1.driverId = df2.driverId\n"
  },
  {
    "table_paths": [
      "datasets/BIRD_dev-formula_1/qualifying.csv",
      "datasets/BIRD_dev-formula_1/drivers.csv"
    ],
    "query": "For the driver who had the Q2 time as 0:01:15 in race No. 347, where is he from?",
    "cot": "\nWe need to join df1 and df2 on driverId and filter the dataframe where Q2 time is 0:01:15 and raceId is 347.\n",
    "code": "import numpy as np\nimport pandas as pd\n\n# Assuming df1 and df2 are the dataframes\n\n# Merge df1 and df2 on driverId\nmerged_df = pd.merge(df1, df2, on='driverId')\n\n# Filter the dataframe where Q2 time is 0:01:15 and raceId is 347\nfiltered_df = merged_df[(merged_df['q2'] == '0:01:15') & (merged_df['raceId'] == 347)]\n\n# Get the nationality of the driver\nnationality = filtered_df['nationality'].values[0]\n\nprint(f\"The driver from {nationality} has the Q2 time as 0:01:15 in race No. 347.\")",
    "observation": "IndexError: index 0 is out of bounds for axis 0 with size 0",
    "true_result": "[('German',), ('Japanese',), ('Russian',), ('Spanish',), ('Swiss',)]",
    "table_infos": "df1:\n|    |   qualifyId |   raceId |   driverId |   constructorId |   number |   position | q1       | q2       | q3       |\n|---:|------------:|---------:|-----------:|----------------:|---------:|-----------:|:---------|:---------|:---------|\n|  0 |           1 |       18 |          1 |               1 |       22 |          1 | 1:26.572 | 1:25.187 | 1:26.714 |\n|  1 |           2 |       18 |          9 |               2 |        4 |          2 | 1:26.103 | 1:25.315 | 1:26.869 |\n|  2 |           3 |       18 |          5 |               1 |       23 |          3 | 1:25.664 | 1:25.452 | 1:27.079 |\ndf2:\n|    |   driverId | driverRef   |   number | code   | forename   | surname   | dob        | nationality   | url                                         |\n|---:|-----------:|:------------|---------:|:-------|:-----------|:----------|:-----------|:--------------|:--------------------------------------------|\n|  0 |          1 | hamilton    |       44 | HAM    | Lewis      | Hamilton  | 1985-01-07 | British       | http://en.wikipedia.org/wiki/Lewis_Hamilton |\n|  1 |          2 | heidfeld    |      nan | HEI    | Nick       | Heidfeld  | 1977-05-10 | German        | http://en.wikipedia.org/wiki/Nick_Heidfeld  |\n|  2 |          3 | rosberg     |        6 | ROS    | Nico       | Rosberg   | 1985-06-27 | German        | http://en.wikipedia.org/wiki/Nico_Rosberg   |\nForeign keys:\ndf1.driverId = df2.driverId\n"
  },
  {
    "table_paths": [
      "datasets/BIRD_dev-formula_1/qualifying.csv",
      "datasets/BIRD_dev-formula_1/drivers.csv"
    ],
    "query": "In the race No. 45, for the driver who had the Q3 time as 0:01:33, what is his abbreviated code?",
    "cot": "\nTo solve this problem, we need to join df1 and df2 on driverId and then filter the dataframe based on the condition that the Q3 time is 0:01:33 and raceId is 45.\n",
    "code": "import numpy as np\nimport pandas as pd\n\n# Assuming df1 and df2 are the dataframes given in the question\n\n# Merge df1 and df2 on driverId\nmerged_df = pd.merge(df1, df2, on='driverId')\n\n# Filter the dataframe based on the condition\nfiltered_df = merged_df[(merged_df['q3'] == '0:01:33') & (merged_df['raceId'] == 45)]\n\n# Get the abbreviated code of the driver\nabbreviated_code = filtered_df['code'].values[0]\n\nprint(f\"The abbreviated code of the driver who had the Q3 time as 0:01:33 in race No. 45 is {abbreviated_code}\")",
    "observation": "IndexError: index 0 is out of bounds for axis 0 with size 0",
    "true_result": "[('HAM',)]",
    "table_infos": "df1:\n|    |   qualifyId |   raceId |   driverId |   constructorId |   number |   position | q1       | q2       | q3       |\n|---:|------------:|---------:|-----------:|----------------:|---------:|-----------:|:---------|:---------|:---------|\n|  0 |           1 |       18 |          1 |               1 |       22 |          1 | 1:26.572 | 1:25.187 | 1:26.714 |\n|  1 |           2 |       18 |          9 |               2 |        4 |          2 | 1:26.103 | 1:25.315 | 1:26.869 |\n|  2 |           3 |       18 |          5 |               1 |       23 |          3 | 1:25.664 | 1:25.452 | 1:27.079 |\ndf2:\n|    |   driverId | driverRef   |   number | code   | forename   | surname   | dob        | nationality   | url                                         |\n|---:|-----------:|:------------|---------:|:-------|:-----------|:----------|:-----------|:--------------|:--------------------------------------------|\n|  0 |          1 | hamilton    |       44 | HAM    | Lewis      | Hamilton  | 1985-01-07 | British       | http://en.wikipedia.org/wiki/Lewis_Hamilton |\n|  1 |          2 | heidfeld    |      nan | HEI    | Nick       | Heidfeld  | 1977-05-10 | German        | http://en.wikipedia.org/wiki/Nick_Heidfeld  |\n|  2 |          3 | rosberg     |        6 | ROS    | Nico       | Rosberg   | 1985-06-27 | German        | http://en.wikipedia.org/wiki/Nico_Rosberg   |\nForeign keys:\ndf1.driverId = df2.driverId\n"
  },
  {
    "table_paths": [
      "datasets/BIRD_dev-formula_1/races.csv",
      "datasets/BIRD_dev-formula_1/results.csv",
      "datasets/BIRD_dev-formula_1/drivers.csv"
    ],
    "query": "Who finished second in the San Marino Grand Prix in 2006?",
    "cot": "\nTo answer this question, we need to join df1 (races) and df2 (results) on the raceId column. Then, we need to filter the data to include only the San Marino Grand Prix in 2006. After that, we need to sort the data by position and select the driver with the second position.\n",
    "code": "import numpy as np\nimport pandas as pd\n\n# Merge df1 and df2 on raceId\ndf = pd.merge(df1, df2, on='raceId')\n\n# Filter the data to include only the San Marino Grand Prix in 2006\ndf = df[(df['name'] == 'San Marino Grand Prix') & (df['year'] == 2006)]\n\n# Sort the data by position\ndf = df.sort_values('position')\n\n# Select the driver with the second position\ndriver = df.iloc[1]['driverRef']\n\nprint(driver)",
    "observation": "KeyError: 'driverRef'",
    "true_result": "[('Fernando', 'Alonso')]",
    "table_infos": "df1:\n|    |   raceId |   year |   round |   circuitId | name                  | date       | time     | url                                                     |\n|---:|---------:|-------:|--------:|------------:|:----------------------|:-----------|:---------|:--------------------------------------------------------|\n|  0 |        1 |   2009 |       1 |           1 | Australian Grand Prix | 2009-03-29 | 06:00:00 | http://en.wikipedia.org/wiki/2009_Australian_Grand_Prix |\n|  1 |        2 |   2009 |       2 |           2 | Malaysian Grand Prix  | 2009-04-05 | 09:00:00 | http://en.wikipedia.org/wiki/2009_Malaysian_Grand_Prix  |\n|  2 |        3 |   2009 |       3 |          17 | Chinese Grand Prix    | 2009-04-19 | 07:00:00 | http://en.wikipedia.org/wiki/2009_Chinese_Grand_Prix    |\ndf2:\n|    |   resultId |   raceId |   driverId |   constructorId |   number |   grid |   position |   positionText |   positionOrder |   points |   laps | time        |   milliseconds |   fastestLap |   rank | fastestLapTime   |   fastestLapSpeed |   statusId |\n|---:|-----------:|---------:|-----------:|----------------:|---------:|-------:|-----------:|---------------:|----------------:|---------:|-------:|:------------|---------------:|-------------:|-------:|:-----------------|------------------:|-----------:|\n|  0 |          1 |       18 |          1 |               1 |       22 |      1 |          1 |              1 |               1 |       10 |     58 | 1:34:50.616 |    5.69062e+06 |           39 |      2 | 1:27.452         |           218.3   |          1 |\n|  1 |          2 |       18 |          2 |               2 |        3 |      5 |          2 |              2 |               2 |        8 |     58 | +5.478      |    5.69609e+06 |           41 |      3 | 1:27.739         |           217.586 |          1 |\n|  2 |          3 |       18 |          3 |               3 |        7 |      7 |          3 |              3 |               3 |        6 |     58 | +8.163      |    5.69878e+06 |           41 |      5 | 1:28.090         |           216.719 |          1 |\ndf3:\n|    |   driverId | driverRef   |   number | code   | forename   | surname   | dob        | nationality   | url                                         |\n|---:|-----------:|:------------|---------:|:-------|:-----------|:----------|:-----------|:--------------|:--------------------------------------------|\n|  0 |          1 | hamilton    |       44 | HAM    | Lewis      | Hamilton  | 1985-01-07 | British       | http://en.wikipedia.org/wiki/Lewis_Hamilton |\n|  1 |          2 | heidfeld    |      nan | HEI    | Nick       | Heidfeld  | 1977-05-10 | German        | http://en.wikipedia.org/wiki/Nick_Heidfeld  |\n|  2 |          3 | rosberg     |        6 | ROS    | Nico       | Rosberg   | 1985-06-27 | German        | http://en.wikipedia.org/wiki/Nico_Rosberg   |\nForeign keys:\ndf2.driverId = df3.driverId,df2.raceId = df1.raceId\n"
  },
  {
    "table_paths": [
      "datasets/BIRD_dev-formula_1/drivers.csv",
      "datasets/BIRD_dev-formula_1/results.csv"
    ],
    "query": "Paul di Resta was in the No. 853 race, what percent faster did he finish in the 853rd race than the next race for the fastest lap speed?",
    "cot": "\nTo solve this problem, we need to find the fastest lap speed of Paul di Resta in the 853rd race and compare it to the next race. We can do this by filtering the df2 dataframe to get the fastest lap speed of Paul di Resta in the 853rd race and then comparing it to the next race.\n",
    "code": "import numpy as np\nimport pandas as pd\n\n# Load the data\n\n\n\n# Merge the dataframes on driverId\ndf = pd.merge(df1, df2, on='driverId', how='inner')\n\n# Filter the dataframe to get the fastest lap speed of Paul di Resta in the 853rd race\npaul_853 = df[(df['driverRef'] == 'di Resta') & (df['raceId'] == 853)]['fastestLapSpeed'].values[0]\n\n# Filter the dataframe to get the next race\nnext_race = df[df['raceId'] > paul_853['raceId']]\n\n# Get the fastest lap speed of the next race\nnext_fastest_lap_speed = next_race['fastestLapSpeed'].min()\n\n# Calculate the percentage faster\npercentage_faster = ((paul_853['fastestLapSpeed'] - next_fastest_lap_speed) / next_fastest_lap_speed) * 100\n\n# Print the result\nprint(f\"Paul di Resta finished {percentage_faster}% faster than the next race for the fastest lap speed.\")",
    "observation": "IndexError: index 0 is out of bounds for axis 0 with size 0",
    "true_result": "[(32.50155167390781,)]",
    "table_infos": "df1:\n|    |   driverId | driverRef   |   number | code   | forename   | surname   | dob        | nationality   | url                                         |\n|---:|-----------:|:------------|---------:|:-------|:-----------|:----------|:-----------|:--------------|:--------------------------------------------|\n|  0 |          1 | hamilton    |       44 | HAM    | Lewis      | Hamilton  | 1985-01-07 | British       | http://en.wikipedia.org/wiki/Lewis_Hamilton |\n|  1 |          2 | heidfeld    |      nan | HEI    | Nick       | Heidfeld  | 1977-05-10 | German        | http://en.wikipedia.org/wiki/Nick_Heidfeld  |\n|  2 |          3 | rosberg     |        6 | ROS    | Nico       | Rosberg   | 1985-06-27 | German        | http://en.wikipedia.org/wiki/Nico_Rosberg   |\ndf2:\n|    |   resultId |   raceId |   driverId |   constructorId |   number |   grid |   position |   positionText |   positionOrder |   points |   laps | time        |   milliseconds |   fastestLap |   rank | fastestLapTime   |   fastestLapSpeed |   statusId |\n|---:|-----------:|---------:|-----------:|----------------:|---------:|-------:|-----------:|---------------:|----------------:|---------:|-------:|:------------|---------------:|-------------:|-------:|:-----------------|------------------:|-----------:|\n|  0 |          1 |       18 |          1 |               1 |       22 |      1 |          1 |              1 |               1 |       10 |     58 | 1:34:50.616 |    5.69062e+06 |           39 |      2 | 1:27.452         |           218.3   |          1 |\n|  1 |          2 |       18 |          2 |               2 |        3 |      5 |          2 |              2 |               2 |        8 |     58 | +5.478      |    5.69609e+06 |           41 |      3 | 1:27.739         |           217.586 |          1 |\n|  2 |          3 |       18 |          3 |               3 |        7 |      7 |          3 |              3 |               3 |        6 |     58 | +8.163      |    5.69878e+06 |           41 |      5 | 1:28.090         |           216.719 |          1 |\nForeign keys:\ndf2.driverId = df1.driverId\n"
  },
  {
    "table_paths": ["datasets/BIRD_dev-formula_1/drivers.csv"],
    "query": "How old is the youngest Japanese driver? What is his name?",
    "cot": "To solve this problem, we need to filter the data to only include Japanese drivers, then find the youngest driver by sorting the data by date of birth and selecting the first row.\n",
    "code": "import numpy as np\nimport pandas as pd\n\n# Assuming df is the DataFrame\n\n# Convert dob to datetime\ndf['dob'] = pd.to_datetime(df['dob'])\n\n# Filter data to only include Japanese drivers\njapanese_drivers = df[df['nationality'] == 'Japanese']\n\n# Find the youngest driver\nyoungest_driver = japanese_drivers.sort_values('dob').iloc[0]\n\n# Print the name and age of the youngest driver\nprint(f\"The youngest Japanese driver is {youngest_driver['forename']} {youngest_driver['surname']}, who is {2022 - youngest_driver['dob'].year} years old.\")",
    "observation": "IndexError: single positional indexer is out-of-bounds",
    "true_result": "[(38, 'Kamui', 'Kobayashi')]",
    "table_infos": "df:\n|    |   driverId | driverRef   |   number | code   | forename   | surname   | dob        | nationality   | url                                         |\n|---:|-----------:|:------------|---------:|:-------|:-----------|:----------|:-----------|:--------------|:--------------------------------------------|\n|  0 |          1 | hamilton    |       44 | HAM    | Lewis      | Hamilton  | 1985-01-07 | British       | http://en.wikipedia.org/wiki/Lewis_Hamilton |\n"
  },
  {
    "table_paths": [
      "datasets/BIRD_dev-formula_1/circuits.csv",
      "datasets/BIRD_dev-formula_1/races.csv"
    ],
    "query": "List circuits which host 4 f1 races from year 1990 to 2000.",
    "cot": "\nTo solve this problem, we need to count the number of races for each circuit from 1990 to 2000 and filter out the circuits that host 4 races.\n",
    "code": "import numpy as np\nimport pandas as pd\n\n# Load the data\n\n\n\n# Filter df2 to include only races from 1990 to 2000\ndf2 = df2[(df2['year'] >= 1990) & (df2['year'] <= 2000)]\n\n# Merge df1 and df2 on 'circuitId'\ndf = pd.merge(df1, df2, on='circuitId')\n\n# Group by 'name' and count the number of races\nrace_counts = df.groupby('name').size()\n\n# Filter to include only circuits that host 4 races\ncircuits_with_4_races = race_counts[race_counts == 4].index.tolist()\n\n# Print the result\nprint(circuits_with_4_races)",
    "observation": "KeyError: 'name'",
    "true_result": "[('A1-Ring',), ('Autódromo Juan y Oscar Gálvez',)]",
    "table_infos": "df1:\n|    |   circuitId | circuitRef   | name                           | location     | country   |      lat |       lng | alt   | url                                                         |\n|---:|------------:|:-------------|:-------------------------------|:-------------|:----------|---------:|----------:|:------|:------------------------------------------------------------|\n|  0 |           2 | sepang       | Sepang International Circuit   | Kuala Lumpur | Malaysia  |  2.76083 | 101.738   |       | http://en.wikipedia.org/wiki/Sepang_International_Circuit   |\n|  1 |           3 | bahrain      | Bahrain International Circuit  | Sakhir       | Bahrain   | 26.0325  |  50.5106  |       | http://en.wikipedia.org/wiki/Bahrain_International_Circuit  |\n|  2 |           4 | catalunya    | Circuit de Barcelona-Catalunya | Montmeló     | Spain     | 41.57    |   2.26111 |       | http://en.wikipedia.org/wiki/Circuit_de_Barcelona-Catalunya |\ndf2:\n|    |   raceId |   year |   round |   circuitId | name                  | date       | time     | url                                                     |\n|---:|---------:|-------:|--------:|------------:|:----------------------|:-----------|:---------|:--------------------------------------------------------|\n|  0 |        1 |   2009 |       1 |           1 | Australian Grand Prix | 2009-03-29 | 06:00:00 | http://en.wikipedia.org/wiki/2009_Australian_Grand_Prix |\n|  1 |        2 |   2009 |       2 |           2 | Malaysian Grand Prix  | 2009-04-05 | 09:00:00 | http://en.wikipedia.org/wiki/2009_Malaysian_Grand_Prix  |\n|  2 |        3 |   2009 |       3 |          17 | Chinese Grand Prix    | 2009-04-19 | 07:00:00 | http://en.wikipedia.org/wiki/2009_Chinese_Grand_Prix    |\nForeign keys:\ndf2.circuitId = df1.circuitId\n"
  },
  {
    "table_paths": [
      "datasets/BIRD_dev-formula_1/circuits.csv",
      "datasets/BIRD_dev-formula_1/races.csv"
    ],
    "query": "Please list all the years that Silverstone Circuit was used in a Formula_1 race.",
    "cot": "\nTo solve this problem, we need to join df1 and df2 on 'circuitId' and then filter the dataframe to get the years where the circuit is 'Silverstone'.\n",
    "code": "import numpy as np\nimport pandas as pd\n\n# Assuming df1 and df2 are the dataframes\n\n# Merge df1 and df2 on 'circuitId'\ndf = pd.merge(df1, df2, on='circuitId', how='inner')\n\n# Filter the dataframe to get the years where the circuit is 'Silverstone'\ndf_silverstone = df[df['name'] == 'Silverstone']\n\n# Get the unique years\nyears = df_silverstone['year'].unique()\n\n# Print the years\nprint(years)",
    "observation": "KeyError: 'name'",
    "true_result": "[(2009,), (2008,), (2007,), (2006,), (2005,), (2004,), (2003,), (2002,), (2001,), (2000,), (1999,), (1998,), (1997,), (1996,), (1995,), (1994,), (1993,), (1992,), (1991,), (1990,), (2010,), (1989,), (1988,), (1987,), (1985,), (1983,), (1981,), (1979,), (1977,), (1975,), (1973,), (1971,), (1969,), (1967,), (1965,), (1963,), (1960,), (1958,), (1956,), (1954,), (1953,), (1952,), (1951,), (1950,), (2011,), (2012,), (2013,), (2014,), (2015,), (2016,), (2017,)]",
    "table_infos": "df1:\n|    |   circuitId | circuitRef   | name                           | location     | country   |      lat |       lng | alt   | url                                                         |\n|---:|------------:|:-------------|:-------------------------------|:-------------|:----------|---------:|----------:|:------|:------------------------------------------------------------|\n|  0 |           2 | sepang       | Sepang International Circuit   | Kuala Lumpur | Malaysia  |  2.76083 | 101.738   |       | http://en.wikipedia.org/wiki/Sepang_International_Circuit   |\n|  1 |           3 | bahrain      | Bahrain International Circuit  | Sakhir       | Bahrain   | 26.0325  |  50.5106  |       | http://en.wikipedia.org/wiki/Bahrain_International_Circuit  |\n|  2 |           4 | catalunya    | Circuit de Barcelona-Catalunya | Montmeló     | Spain     | 41.57    |   2.26111 |       | http://en.wikipedia.org/wiki/Circuit_de_Barcelona-Catalunya |\ndf2:\n|    |   raceId |   year |   round |   circuitId | name                  | date       | time     | url                                                     |\n|---:|---------:|-------:|--------:|------------:|:----------------------|:-----------|:---------|:--------------------------------------------------------|\n|  0 |        1 |   2009 |       1 |           1 | Australian Grand Prix | 2009-03-29 | 06:00:00 | http://en.wikipedia.org/wiki/2009_Australian_Grand_Prix |\n|  1 |        2 |   2009 |       2 |           2 | Malaysian Grand Prix  | 2009-04-05 | 09:00:00 | http://en.wikipedia.org/wiki/2009_Malaysian_Grand_Prix  |\n|  2 |        3 |   2009 |       3 |          17 | Chinese Grand Prix    | 2009-04-19 | 07:00:00 | http://en.wikipedia.org/wiki/2009_Chinese_Grand_Prix    |\nForeign keys:\ndf2.circuitId = df1.circuitId\n"
  },
  {
    "table_paths": [
      "datasets/BIRD_dev-formula_1/circuits.csv",
      "datasets/BIRD_dev-formula_1/races.csv"
    ],
    "query": "What time did the the 2010's Formula_1 race took place on the Abu Dhabi Circuit?",
    "cot": "To solve this problem, we need to join df1 and df2 on the 'circuitId' column. Then, we filter the dataframe to get the race details for the Abu Dhabi Circuit in the 2010's.\n",
    "code": "import numpy as np\nimport pandas as pd\n\n# Assuming df1 and df2 are the dataframes\n\n# Merge df1 and df2 on 'circuitId'\ndf = pd.merge(df1, df2, on='circuitId')\n\n# Filter the dataframe to get the race details for the Abu Dhabi Circuit in the 2010's\ndf = df[(df['name'] == 'Abu Dhabi Grand Prix') & (df['year'] == 2010)]\n\n# Assign the time to the `final_df` variable\nfinal_df = df['time']\n\n# Print the final result\nprint(final_df)",
    "observation": "KeyError: 'name'",
    "true_result": "[('2010-11-14', '13:00:00')]",
    "table_infos": "df1:\n|    |   circuitId | circuitRef   | name                           | location     | country   |      lat |       lng | alt   | url                                                         |\n|---:|------------:|:-------------|:-------------------------------|:-------------|:----------|---------:|----------:|:------|:------------------------------------------------------------|\n|  0 |           2 | sepang       | Sepang International Circuit   | Kuala Lumpur | Malaysia  |  2.76083 | 101.738   |       | http://en.wikipedia.org/wiki/Sepang_International_Circuit   |\n|  1 |           3 | bahrain      | Bahrain International Circuit  | Sakhir       | Bahrain   | 26.0325  |  50.5106  |       | http://en.wikipedia.org/wiki/Bahrain_International_Circuit  |\n|  2 |           4 | catalunya    | Circuit de Barcelona-Catalunya | Montmeló     | Spain     | 41.57    |   2.26111 |       | http://en.wikipedia.org/wiki/Circuit_de_Barcelona-Catalunya |\ndf2:\n|    |   raceId |   year |   round |   circuitId | name                  | date       | time     | url                                                     |\n|---:|---------:|-------:|--------:|------------:|:----------------------|:-----------|:---------|:--------------------------------------------------------|\n|  0 |        1 |   2009 |       1 |           1 | Australian Grand Prix | 2009-03-29 | 06:00:00 | http://en.wikipedia.org/wiki/2009_Australian_Grand_Prix |\n|  1 |        2 |   2009 |       2 |           2 | Malaysian Grand Prix  | 2009-04-05 | 09:00:00 | http://en.wikipedia.org/wiki/2009_Malaysian_Grand_Prix  |\n|  2 |        3 |   2009 |       3 |          17 | Chinese Grand Prix    | 2009-04-19 | 07:00:00 | http://en.wikipedia.org/wiki/2009_Chinese_Grand_Prix    |\nForeign keys:\ndf2.circuitId = df1.circuitId\n"
  },
  {
    "table_paths": [
      "datasets/BIRD_dev-formula_1/drivers.csv",
      "datasets/BIRD_dev-formula_1/results.csv"
    ],
    "query": "What's the fastest lap time ever in a race for Lewis Hamilton?",
    "cot": "We need to join df1 and df2 on driverId and then filter the data for Lewis Hamilton. We will then find the fastestLapTime for Lewis Hamilton.\n",
    "code": "import numpy as np\nimport pandas as pd\n\n# Assuming df1 and df2 are the dataframes\n\n# Join df1 and df2 on driverId\ndf = pd.merge(df1, df2, on='driverId')\n\n# Filter the data for Lewis Hamilton\nlewis_df = df[df['forename'] == 'Lewis']\n\n# Find the fastestLapTime for Lewis Hamilton\nfastest_lap_time = lewis_df['fastestLapTime'].min()\n\nprint(f\"The fastest lap time ever in a race for Lewis Hamilton is {fastest_lap_time}\")",
    "observation": "TypeError: '<=' not supported between instances of 'str' and 'float'",
    "true_result": "[('1:07.411',)]",
    "table_infos": "df1:\n|    |   driverId | driverRef   |   number | code   | forename   | surname   | dob        | nationality   | url                                         |\n|---:|-----------:|:------------|---------:|:-------|:-----------|:----------|:-----------|:--------------|:--------------------------------------------|\n|  0 |          1 | hamilton    |       44 | HAM    | Lewis      | Hamilton  | 1985-01-07 | British       | http://en.wikipedia.org/wiki/Lewis_Hamilton |\n|  1 |          2 | heidfeld    |      nan | HEI    | Nick       | Heidfeld  | 1977-05-10 | German        | http://en.wikipedia.org/wiki/Nick_Heidfeld  |\n|  2 |          3 | rosberg     |        6 | ROS    | Nico       | Rosberg   | 1985-06-27 | German        | http://en.wikipedia.org/wiki/Nico_Rosberg   |\ndf2:\n|    |   resultId |   raceId |   driverId |   constructorId |   number |   grid |   position |   positionText |   positionOrder |   points |   laps | time        |   milliseconds |   fastestLap |   rank | fastestLapTime   |   fastestLapSpeed |   statusId |\n|---:|-----------:|---------:|-----------:|----------------:|---------:|-------:|-----------:|---------------:|----------------:|---------:|-------:|:------------|---------------:|-------------:|-------:|:-----------------|------------------:|-----------:|\n|  0 |          1 |       18 |          1 |               1 |       22 |      1 |          1 |              1 |               1 |       10 |     58 | 1:34:50.616 |    5.69062e+06 |           39 |      2 | 1:27.452         |           218.3   |          1 |\n|  1 |          2 |       18 |          2 |               2 |        3 |      5 |          2 |              2 |               2 |        8 |     58 | +5.478      |    5.69609e+06 |           41 |      3 | 1:27.739         |           217.586 |          1 |\n|  2 |          3 |       18 |          3 |               3 |        7 |      7 |          3 |              3 |               3 |        6 |     58 | +8.163      |    5.69878e+06 |           41 |      5 | 1:28.090         |           216.719 |          1 |\nForeign keys:\ndf2.driverId = df1.driverId\n"
  },
  {
    "table_paths": [
      "datasets/BIRD_dev-formula_1/drivers.csv",
      "datasets/BIRD_dev-formula_1/results.csv"
    ],
    "query": "Which driver created the fastest lap speed in a Formula_1 race? Please give both his forename and surname.",
    "cot": "\nTo solve this problem, we need to join df1 and df2 on driverId, then find the driver with the fastest lap speed.\n",
    "code": "import numpy as np\nimport pandas as pd\n\n# Assuming df1 and df2 are the dataframes\n\n# Join df1 and df2 on driverId\ndf = pd.merge(df1, df2, on='driverId', how='inner')\n\n# Convert fastestLapTime from string to timedelta\ndf['fastestLapTime'] = pd.to_timedelta(df['fastestLapTime'])\n\n# Find the driver with the fastest lap speed\nfastest_driver = df.loc[df['fastestLapTime'].idxmin()]\n\n# Print the forename and surname of the driver\nprint(fastest_driver['forename'], fastest_driver['surname'])",
    "observation": "ValueError: expected hh:mm:ss format before .",
    "true_result": "[('Vitantonio', 'Liuzzi')]",
    "table_infos": "df1:\n|    |   driverId | driverRef   |   number | code   | forename   | surname   | dob        | nationality   | url                                         |\n|---:|-----------:|:------------|---------:|:-------|:-----------|:----------|:-----------|:--------------|:--------------------------------------------|\n|  0 |          1 | hamilton    |       44 | HAM    | Lewis      | Hamilton  | 1985-01-07 | British       | http://en.wikipedia.org/wiki/Lewis_Hamilton |\n|  1 |          2 | heidfeld    |      nan | HEI    | Nick       | Heidfeld  | 1977-05-10 | German        | http://en.wikipedia.org/wiki/Nick_Heidfeld  |\n|  2 |          3 | rosberg     |        6 | ROS    | Nico       | Rosberg   | 1985-06-27 | German        | http://en.wikipedia.org/wiki/Nico_Rosberg   |\ndf2:\n|    |   resultId |   raceId |   driverId |   constructorId |   number |   grid |   position |   positionText |   positionOrder |   points |   laps | time        |   milliseconds |   fastestLap |   rank | fastestLapTime   |   fastestLapSpeed |   statusId |\n|---:|-----------:|---------:|-----------:|----------------:|---------:|-------:|-----------:|---------------:|----------------:|---------:|-------:|:------------|---------------:|-------------:|-------:|:-----------------|------------------:|-----------:|\n|  0 |          1 |       18 |          1 |               1 |       22 |      1 |          1 |              1 |               1 |       10 |     58 | 1:34:50.616 |    5.69062e+06 |           39 |      2 | 1:27.452         |           218.3   |          1 |\n|  1 |          2 |       18 |          2 |               2 |        3 |      5 |          2 |              2 |               2 |        8 |     58 | +5.478      |    5.69609e+06 |           41 |      3 | 1:27.739         |           217.586 |          1 |\n|  2 |          3 |       18 |          3 |               3 |        7 |      7 |          3 |              3 |               3 |        6 |     58 | +8.163      |    5.69878e+06 |           41 |      5 | 1:28.090         |           216.719 |          1 |\nForeign keys:\ndf2.driverId = df1.driverId\n"
  },
  {
    "table_paths": [
      "datasets/BIRD_dev-formula_1/races.csv",
      "datasets/BIRD_dev-formula_1/results.csv"
    ],
    "query": "What was the fastest lap speed among all drivers in the 2009 Spanish Grand Prix?",
    "cot": "\nTo find the fastest lap speed among all drivers in the 2009 Spanish Grand Prix, we need to join df1 and df2 on the raceId column, filter for the 2009 Spanish Grand Prix, and then find the minimum fastestLapSpeed.\n",
    "code": "import numpy as np\nimport pandas as pd\n\n# Assuming df1 and df2 are the dataframes\ndf = pd.merge(df1, df2, on='raceId')\n\n# Filter for the 2009 Spanish Grand Prix\ndf = df[df['name'] == 'Spanish Grand Prix']\ndf = df[df['year'] == 2009]\n\n# Convert fastestLapTime to seconds for easier comparison\ndf['fastestLapTime'] = pd.to_timedelta(df['fastestLapTime']).dt.total_seconds()\n\n# Find the minimum fastestLapSpeed\nfastest_lap_speed = df['fastestLapSpeed'].min()\n\nprint(f\"The fastest lap speed among all drivers in the 2009 Spanish Grand Prix was {fastest_lap_speed} km/h.\")",
    "observation": "ValueError: expected hh:mm:ss format before .",
    "true_result": "[('202.484',)]",
    "table_infos": "df1:\n|    |   raceId |   year |   round |   circuitId | name                  | date       | time     | url                                                     |\n|---:|---------:|-------:|--------:|------------:|:----------------------|:-----------|:---------|:--------------------------------------------------------|\n|  0 |        1 |   2009 |       1 |           1 | Australian Grand Prix | 2009-03-29 | 06:00:00 | http://en.wikipedia.org/wiki/2009_Australian_Grand_Prix |\n|  1 |        2 |   2009 |       2 |           2 | Malaysian Grand Prix  | 2009-04-05 | 09:00:00 | http://en.wikipedia.org/wiki/2009_Malaysian_Grand_Prix  |\n|  2 |        3 |   2009 |       3 |          17 | Chinese Grand Prix    | 2009-04-19 | 07:00:00 | http://en.wikipedia.org/wiki/2009_Chinese_Grand_Prix    |\ndf2:\n|    |   resultId |   raceId |   driverId |   constructorId |   number |   grid |   position |   positionText |   positionOrder |   points |   laps | time        |   milliseconds |   fastestLap |   rank | fastestLapTime   |   fastestLapSpeed |   statusId |\n|---:|-----------:|---------:|-----------:|----------------:|---------:|-------:|-----------:|---------------:|----------------:|---------:|-------:|:------------|---------------:|-------------:|-------:|:-----------------|------------------:|-----------:|\n|  0 |          1 |       18 |          1 |               1 |       22 |      1 |          1 |              1 |               1 |       10 |     58 | 1:34:50.616 |    5.69062e+06 |           39 |      2 | 1:27.452         |           218.3   |          1 |\n|  1 |          2 |       18 |          2 |               2 |        3 |      5 |          2 |              2 |               2 |        8 |     58 | +5.478      |    5.69609e+06 |           41 |      3 | 1:27.739         |           217.586 |          1 |\n|  2 |          3 |       18 |          3 |               3 |        7 |      7 |          3 |              3 |               3 |        6 |     58 | +8.163      |    5.69878e+06 |           41 |      5 | 1:28.090         |           216.719 |          1 |\nForeign keys:\ndf2.raceId = df1.raceId\n"
  },
  {
    "table_paths": [
      "datasets/BIRD_dev-formula_1/races.csv",
      "datasets/BIRD_dev-formula_1/results.csv",
      "datasets/BIRD_dev-formula_1/drivers.csv"
    ],
    "query": "What was Lewis Hamilton's final rank in the 2008 Australian Grand Prix?",
    "cot": "To answer this question, we need to join df1 (races), df2 (results), and df3 (drivers) on the appropriate columns. Then, we can filter for the 2008 Australian Grand Prix and Lewis Hamilton's results.\n",
    "code": "# Data Preparation\ndf1['date'] = pd.to_datetime(df1['date'])\ndf2['time'] = pd.to_timedelta(df2['time'])\n\n# Data Processing\nmerged_df = pd.merge(df1, df2, on='raceId', how='inner')\nmerged_df = pd.merge(merged_df, df3, on='driverId', how='inner')\n\n# Filter for 2008 Australian Grand Prix\nmerged_df = merged_df[merged_df['year'] == 2008]\nmerged_df = merged_df[merged_df['name'] == 'Australian Grand Prix']\n\n# Filter for Lewis Hamilton\nmerged_df = merged_df[merged_df['forename'] == 'Lewis']\nmerged_df = merged_df[merged_df['surname'] == 'Hamilton']\n\n# Declare `final_df` Variable\nfinal_df = merged_df\n\n# Print the final result\nprint(final_df['rank'].values[0])",
    "observation": "ValueError: no units specified",
    "true_result": "[(1,)]",
    "table_infos": "df1:\n|    |   raceId |   year |   round |   circuitId | name                  | date       | time     | url                                                     |\n|---:|---------:|-------:|--------:|------------:|:----------------------|:-----------|:---------|:--------------------------------------------------------|\n|  0 |        1 |   2009 |       1 |           1 | Australian Grand Prix | 2009-03-29 | 06:00:00 | http://en.wikipedia.org/wiki/2009_Australian_Grand_Prix |\n|  1 |        2 |   2009 |       2 |           2 | Malaysian Grand Prix  | 2009-04-05 | 09:00:00 | http://en.wikipedia.org/wiki/2009_Malaysian_Grand_Prix  |\n|  2 |        3 |   2009 |       3 |          17 | Chinese Grand Prix    | 2009-04-19 | 07:00:00 | http://en.wikipedia.org/wiki/2009_Chinese_Grand_Prix    |\ndf2:\n|    |   resultId |   raceId |   driverId |   constructorId |   number |   grid |   position |   positionText |   positionOrder |   points |   laps | time        |   milliseconds |   fastestLap |   rank | fastestLapTime   |   fastestLapSpeed |   statusId |\n|---:|-----------:|---------:|-----------:|----------------:|---------:|-------:|-----------:|---------------:|----------------:|---------:|-------:|:------------|---------------:|-------------:|-------:|:-----------------|------------------:|-----------:|\n|  0 |          1 |       18 |          1 |               1 |       22 |      1 |          1 |              1 |               1 |       10 |     58 | 1:34:50.616 |    5.69062e+06 |           39 |      2 | 1:27.452         |           218.3   |          1 |\n|  1 |          2 |       18 |          2 |               2 |        3 |      5 |          2 |              2 |               2 |        8 |     58 | +5.478      |    5.69609e+06 |           41 |      3 | 1:27.739         |           217.586 |          1 |\n|  2 |          3 |       18 |          3 |               3 |        7 |      7 |          3 |              3 |               3 |        6 |     58 | +8.163      |    5.69878e+06 |           41 |      5 | 1:28.090         |           216.719 |          1 |\ndf3:\n|    |   driverId | driverRef   |   number | code   | forename   | surname   | dob        | nationality   | url                                         |\n|---:|-----------:|:------------|---------:|:-------|:-----------|:----------|:-----------|:--------------|:--------------------------------------------|\n|  0 |          1 | hamilton    |       44 | HAM    | Lewis      | Hamilton  | 1985-01-07 | British       | http://en.wikipedia.org/wiki/Lewis_Hamilton |\n|  1 |          2 | heidfeld    |      nan | HEI    | Nick       | Heidfeld  | 1977-05-10 | German        | http://en.wikipedia.org/wiki/Nick_Heidfeld  |\n|  2 |          3 | rosberg     |        6 | ROS    | Nico       | Rosberg   | 1985-06-27 | German        | http://en.wikipedia.org/wiki/Nico_Rosberg   |\nForeign keys:\ndf2.driverId = df3.driverId,df2.raceId = df1.raceId\n"
  },
  {
    "table_paths": [
      "datasets/BIRD_dev-formula_1/results.csv",
      "datasets/BIRD_dev-formula_1/races.csv"
    ],
    "query": "What's the finish time for the driver who ranked second in 2008's Australian Grand Prix?",
    "cot": "\nTo solve this problem, we need to join df1 and df2 on the raceId column. Then, we need to filter the data for the Australian Grand Prix in 2008. After that, we need to sort the data by rank and select the driver with rank 2.\n",
    "code": "import numpy as np\nimport pandas as pd\n\n# Load the data\n\n\n\n# Join the dataframes on the raceId column\ndf = pd.merge(df1, df2, on='raceId')\n\n# Filter the data for the Australian Grand Prix in 2008\ndf = df[(df['name'] == 'Australian Grand Prix') & (df['year'] == 2008)]\n\n# Sort the data by rank and select the driver with rank 2\ndf = df[df['rank'] == 2]\n\n# Print the finish time for the driver\nprint(df['time'])",
    "observation": "KeyError: 'time'",
    "true_result": "[('1:34:50.616',)]",
    "table_infos": "df1:\n|    |   resultId |   raceId |   driverId |   constructorId |   number |   grid |   position |   positionText |   positionOrder |   points |   laps | time        |   milliseconds |   fastestLap |   rank | fastestLapTime   |   fastestLapSpeed |   statusId |\n|---:|-----------:|---------:|-----------:|----------------:|---------:|-------:|-----------:|---------------:|----------------:|---------:|-------:|:------------|---------------:|-------------:|-------:|:-----------------|------------------:|-----------:|\n|  0 |          1 |       18 |          1 |               1 |       22 |      1 |          1 |              1 |               1 |       10 |     58 | 1:34:50.616 |    5.69062e+06 |           39 |      2 | 1:27.452         |           218.3   |          1 |\n|  1 |          2 |       18 |          2 |               2 |        3 |      5 |          2 |              2 |               2 |        8 |     58 | +5.478      |    5.69609e+06 |           41 |      3 | 1:27.739         |           217.586 |          1 |\n|  2 |          3 |       18 |          3 |               3 |        7 |      7 |          3 |              3 |               3 |        6 |     58 | +8.163      |    5.69878e+06 |           41 |      5 | 1:28.090         |           216.719 |          1 |\ndf2:\n|    |   raceId |   year |   round |   circuitId | name                  | date       | time     | url                                                     |\n|---:|---------:|-------:|--------:|------------:|:----------------------|:-----------|:---------|:--------------------------------------------------------|\n|  0 |        1 |   2009 |       1 |           1 | Australian Grand Prix | 2009-03-29 | 06:00:00 | http://en.wikipedia.org/wiki/2009_Australian_Grand_Prix |\n|  1 |        2 |   2009 |       2 |           2 | Malaysian Grand Prix  | 2009-04-05 | 09:00:00 | http://en.wikipedia.org/wiki/2009_Malaysian_Grand_Prix  |\n|  2 |        3 |   2009 |       3 |          17 | Chinese Grand Prix    | 2009-04-19 | 07:00:00 | http://en.wikipedia.org/wiki/2009_Chinese_Grand_Prix    |\nForeign keys:\ndf1.raceId = df2.raceId\n"
  },
  {
    "table_paths": [
      "datasets/BIRD_dev-formula_1/drivers.csv",
      "datasets/BIRD_dev-formula_1/results.csv"
    ],
    "query": "What is the average fastest lap time in seconds for Lewis Hamilton in all the Formula_1 races?",
    "cot": "We need to join df1 and df2 on driverId, then filter for Lewis Hamilton, convert the fastestLapTime column to seconds, and calculate the average.\n",
    "code": "import numpy as np\nimport pandas as pd\n\n# Merge df1 and df2 on driverId\ndf = pd.merge(df1, df2, on='driverId')\n\n# Filter for Lewis Hamilton\ndf = df[df['forename'] == 'Lewis']\n\n# Convert fastestLapTime to seconds\ndf['fastestLapTime_seconds'] = pd.to_timedelta(df['fastestLapTime']).dt.total_seconds()\n\n# Calculate the average fastest lap time\naverage_fastest_lap_time = df['fastestLapTime_seconds'].mean()\n\n# Print the result\nprint(average_fastest_lap_time)",
    "observation": "ValueError: expected hh:mm:ss format before .",
    "true_result": "[(92.01671065989848,)]",
    "table_infos": "df1:\n|    |   driverId | driverRef   |   number | code   | forename   | surname   | dob        | nationality   | url                                         |\n|---:|-----------:|:------------|---------:|:-------|:-----------|:----------|:-----------|:--------------|:--------------------------------------------|\n|  0 |          1 | hamilton    |       44 | HAM    | Lewis      | Hamilton  | 1985-01-07 | British       | http://en.wikipedia.org/wiki/Lewis_Hamilton |\n|  1 |          2 | heidfeld    |      nan | HEI    | Nick       | Heidfeld  | 1977-05-10 | German        | http://en.wikipedia.org/wiki/Nick_Heidfeld  |\n|  2 |          3 | rosberg     |        6 | ROS    | Nico       | Rosberg   | 1985-06-27 | German        | http://en.wikipedia.org/wiki/Nico_Rosberg   |\ndf2:\n|    |   resultId |   raceId |   driverId |   constructorId |   number |   grid |   position |   positionText |   positionOrder |   points |   laps | time        |   milliseconds |   fastestLap |   rank | fastestLapTime   |   fastestLapSpeed |   statusId |\n|---:|-----------:|---------:|-----------:|----------------:|---------:|-------:|-----------:|---------------:|----------------:|---------:|-------:|:------------|---------------:|-------------:|-------:|:-----------------|------------------:|-----------:|\n|  0 |          1 |       18 |          1 |               1 |       22 |      1 |          1 |              1 |               1 |       10 |     58 | 1:34:50.616 |    5.69062e+06 |           39 |      2 | 1:27.452         |           218.3   |          1 |\n|  1 |          2 |       18 |          2 |               2 |        3 |      5 |          2 |              2 |               2 |        8 |     58 | +5.478      |    5.69609e+06 |           41 |      3 | 1:27.739         |           217.586 |          1 |\n|  2 |          3 |       18 |          3 |               3 |        7 |      7 |          3 |              3 |               3 |        6 |     58 | +8.163      |    5.69878e+06 |           41 |      5 | 1:28.090         |           216.719 |          1 |\nForeign keys:\ndf2.driverId = df1.driverId\n"
  },
  {
    "table_paths": [
      "datasets/BIRD_dev-formula_1/results.csv",
      "datasets/BIRD_dev-formula_1/drivers.csv"
    ],
    "query": "Which drivers born after 1975 have been ranked 2? Please give their forenames and surnames.",
    "cot": "\nWe need to filter the data in df1 where the driver's birth date (dob) is after 1975 and the position is 2. Then, we need to merge this filtered data with df2 on driverId to get the forenames and surnames.\n",
    "code": "import numpy as np\nimport pandas as pd\n\n# Convert df1.dob to datetime\ndf1['dob'] = pd.to_datetime(df1['dob'])\n\n# Filter df1 where dob is after 1975 and position is 2\ndf1_filtered = df1[(df1['dob'] > '1975-12-31') & (df1['position'] == 2)]\n\n# Merge df1_filtered with df2 on driverId\nfinal_df = pd.merge(df1_filtered, df2, on='driverId')\n\n# Print the forenames and surnames\nprint(final_df[['forename', 'surname']])",
    "observation": "KeyError: 'dob'",
    "true_result": "[('Lewis', 'Hamilton'), ('Kimi', 'Räikkönen'), ('Nick', 'Heidfeld'), ('Felipe', 'Massa'), ('Lewis', 'Hamilton'), ('Heikki', 'Kovalainen'), ('Nick', 'Heidfeld'), ('Felipe', 'Massa'), ('Nick', 'Heidfeld'), ('Lewis', 'Hamilton'), ('Felipe', 'Massa'), ('Lewis', 'Hamilton'), ('Lewis', 'Hamilton'), ('Sébastien', 'Bourdais'), ('Felipe', 'Massa'), ('Kimi', 'Räikkönen'), ('Kimi', 'Räikkönen'), ('Timo', 'Glock'), ('Fernando', 'Alonso'), ('Fernando', 'Alonso'), ('Lewis', 'Hamilton'), ('Lewis', 'Hamilton'), ('Lewis', 'Hamilton'), ('Lewis', 'Hamilton'), ('Lewis', 'Hamilton'), ('Kimi', 'Räikkönen'), ('Felipe', 'Massa'), ('Fernando', 'Alonso'), ('Lewis', 'Hamilton'), ('Felipe', 'Massa'), ('Lewis', 'Hamilton'), ('Kimi', 'Räikkönen'), ('Fernando', 'Alonso'), ('Fernando', 'Alonso'), ('Lewis', 'Hamilton'), ('Fernando', 'Alonso'), ('Kimi', 'Räikkönen'), ('Fernando', 'Alonso'), ('Kimi', 'Räikkönen'), ('Fernando', 'Alonso'), ('Felipe', 'Massa'), ('Felipe', 'Massa'), ('Felipe', 'Massa'), ('Felipe', 'Massa'), ('Felipe', 'Massa'), ('Nick', 'Heidfeld'), ('Fernando', 'Alonso'), ('Jenson', 'Button'), ('Kimi', 'Räikkönen'), ('Kimi', 'Räikkönen'), ('Fernando', 'Alonso'), ('Fernando', 'Alonso'), ('Kimi', 'Räikkönen'), ('Mark', 'Webber'), ('Fernando', 'Alonso'), ('Fernando', 'Alonso'), ('Fernando', 'Alonso'), ('Jenson', 'Button'), ('Jenson', 'Button'), ('Takuma', 'Sato'), ('Fernando', 'Alonso'), ('Kimi', 'Räikkönen'), ('Robert', 'Kubica'), ('Sebastian', 'Vettel'), ('Timo', 'Glock'), ('Jenson', 'Button'), ('Jenson', 'Button'), ('Sebastian', 'Vettel'), ('Mark', 'Webber'), ('Kimi', 'Räikkönen'), ('Jenson', 'Button'), ('Nick', 'Heidfeld'), ('Kimi', 'Räikkönen'), ('Lewis', 'Hamilton'), ('Sebastian', 'Vettel'), ('Sebastian', 'Vettel'), ('Sébastien', 'Buemi'), ('Adrian', 'Sutil'), ('Nico', 'Rosberg'), ('Fernando', 'Alonso'), ('Sebastian', 'Vettel'), ('Mark', 'Webber'), ('Mark', 'Webber'), ('Mark', 'Webber'), ('Lewis', 'Hamilton'), ('Felipe', 'Massa'), ('Fernando', 'Alonso'), ('Mark', 'Webber'), ('Mark', 'Webber'), ('Mark', 'Webber'), ('Sebastian', 'Vettel'), ('Jenson', 'Button'), ('Sebastian', 'Vettel'), ('Fernando', 'Alonso'), ('Jenson', 'Button'), ('Fernando', 'Alonso'), ('Fernando', 'Alonso'), ('Jaime', 'Alguersuari'), ('Sebastian', 'Vettel'), ('Sebastian', 'Vettel'), ('Fernando', 'Alonso'), ('Felipe', 'Massa'), ('Mark', 'Webber'), ('Lewis', 'Hamilton'), ('Jenson', 'Button'), ('Jenson', 'Button'), ('Sebastian', 'Vettel'), ('Sergio', 'Pérez'), ('Mark', 'Webber'), ('Mark', 'Webber'), ('Jenson', 'Button'), ('Jenson', 'Button'), ('Sebastian', 'Vettel'), ('Mark', 'Webber'), ('Jean-Éric', 'Vergne'), ('Kamui', 'Kobayashi'), ('Kimi', 'Räikkönen'), ('Nico', 'Hülkenberg'), ('Felipe', 'Massa'), ('Mark', 'Webber'), ('Romain', 'Grosjean'), ('Fernando', 'Alonso'), ('Sergio', 'Pérez'), ('Nico', 'Rosberg'), ('Sergio', 'Pérez'), ('Kamui', 'Kobayashi'), ('Jenson', 'Button'), ('Felipe', 'Massa'), ('Bruno', 'Senna'), ('Fernando', 'Alonso'), ('Felipe', 'Massa'), ('Jenson', 'Button'), ('Jean-Éric', 'Vergne'), ('Felipe', 'Massa'), ('Jenson', 'Button'), ('Adrian', 'Sutil'), ('Felipe', 'Massa'), ('Kimi', 'Räikkönen'), ('Fernando', 'Alonso'), ('Nico', 'Rosberg'), ('Kimi', 'Räikkönen'), ('Sebastian', 'Vettel'), ('Jenson', 'Button'), ('Nico', 'Rosberg'), ('Adrian', 'Sutil'), ('Romain', 'Grosjean'), ('Nico', 'Rosberg'), ('Sebastian', 'Vettel'), ('Sebastian', 'Vettel'), ('Romain', 'Grosjean'), ('Fernando', 'Alonso'), ('Nico', 'Hülkenberg'), ('Nico', 'Rosberg'), ('Lewis', 'Hamilton'), ('Lewis', 'Hamilton'), ('Nico', 'Rosberg'), ('Daniel', 'Ricciardo'), ('Kimi', 'Räikkönen'), ('Lewis', 'Hamilton'), ('Sebastian', 'Vettel'), ('Kevin', 'Magnussen'), ('Daniel', 'Ricciardo'), ('Adrian', 'Sutil'), ('Nico', 'Rosberg'), ('Kevin', 'Magnussen'), ('Jenson', 'Button'), ('Nico', 'Rosberg'), ('Fernando', 'Alonso'), ('Nico', 'Rosberg'), ('Felipe', 'Massa'), ('Nico', 'Rosberg'), ('Lewis', 'Hamilton'), ('Nico', 'Rosberg'), ('Sebastian', 'Vettel'), ('Nico', 'Rosberg'), ('Nico', 'Rosberg'), ('Sebastian', 'Vettel'), ('Lewis', 'Hamilton'), ('Nico', 'Rosberg'), ('Nico', 'Rosberg'), ('Lewis', 'Hamilton'), ('Nico', 'Rosberg'), ('Sebastian', 'Vettel'), ('Nico', 'Rosberg'), ('Kimi', 'Räikkönen'), ('Lewis', 'Hamilton'), ('Lewis', 'Hamilton'), ('Nico', 'Rosberg'), ('Sebastian', 'Vettel'), ('Sebastian', 'Vettel'), ('Lewis', 'Hamilton'), ('Romain', 'Grosjean'), ('Felipe', 'Massa'), ('Sebastian', 'Vettel'), ('Sebastian', 'Vettel'), ('Lewis', 'Hamilton'), ('Lewis', 'Hamilton'), ('Nico', 'Rosberg'), ('Fernando', 'Alonso'), ('Nico', 'Rosberg'), ('Sebastian', 'Vettel'), ('Nico', 'Rosberg'), ('Daniel', 'Ricciardo'), ('Sebastian', 'Vettel'), ('Max', 'Verstappen'), ('Lewis', 'Hamilton'), ('Kimi', 'Räikkönen'), ('Sebastian', 'Vettel'), ('Daniel', 'Ricciardo'), ('Fernando', 'Alonso'), ('Valtteri', 'Bottas'), ('Sebastian', 'Vettel'), ('Daniel', 'Ricciardo'), ('Sebastian', 'Vettel'), ('Sebastian', 'Vettel'), ('Sebastian', 'Vettel'), ('Sebastian', 'Vettel'), ('Lewis', 'Hamilton'), ('Daniel', 'Ricciardo'), ('Max', 'Verstappen'), ('Kimi', 'Räikkönen'), ('Lewis', 'Hamilton'), ('Lewis', 'Hamilton'), ('Daniel', 'Ricciardo')]",
    "table_infos": "df1:\n|    |   resultId |   raceId |   driverId |   constructorId |   number |   grid |   position |   positionText |   positionOrder |   points |   laps | time        |   milliseconds |   fastestLap |   rank | fastestLapTime   |   fastestLapSpeed |   statusId |\n|---:|-----------:|---------:|-----------:|----------------:|---------:|-------:|-----------:|---------------:|----------------:|---------:|-------:|:------------|---------------:|-------------:|-------:|:-----------------|------------------:|-----------:|\n|  0 |          1 |       18 |          1 |               1 |       22 |      1 |          1 |              1 |               1 |       10 |     58 | 1:34:50.616 |    5.69062e+06 |           39 |      2 | 1:27.452         |           218.3   |          1 |\n|  1 |          2 |       18 |          2 |               2 |        3 |      5 |          2 |              2 |               2 |        8 |     58 | +5.478      |    5.69609e+06 |           41 |      3 | 1:27.739         |           217.586 |          1 |\n|  2 |          3 |       18 |          3 |               3 |        7 |      7 |          3 |              3 |               3 |        6 |     58 | +8.163      |    5.69878e+06 |           41 |      5 | 1:28.090         |           216.719 |          1 |\ndf2:\n|    |   driverId | driverRef   |   number | code   | forename   | surname   | dob        | nationality   | url                                         |\n|---:|-----------:|:------------|---------:|:-------|:-----------|:----------|:-----------|:--------------|:--------------------------------------------|\n|  0 |          1 | hamilton    |       44 | HAM    | Lewis      | Hamilton  | 1985-01-07 | British       | http://en.wikipedia.org/wiki/Lewis_Hamilton |\n|  1 |          2 | heidfeld    |      nan | HEI    | Nick       | Heidfeld  | 1977-05-10 | German        | http://en.wikipedia.org/wiki/Nick_Heidfeld  |\n|  2 |          3 | rosberg     |        6 | ROS    | Nico       | Rosberg   | 1985-06-27 | German        | http://en.wikipedia.org/wiki/Nico_Rosberg   |\nForeign keys:\ndf1.driverId = df2.driverId\n"
  },
  {
    "table_paths": [
      "datasets/BIRD_dev-formula_1/results.csv",
      "datasets/BIRD_dev-formula_1/drivers.csv"
    ],
    "query": "Which driver has the fastest lap time? Please give their forenames and surnames.",
    "cot": "We need to find the driver with the fastest lap time in df1. We can do this by converting the 'time' column to seconds and then finding the minimum value. We can then merge this with df2 to get the forenames and surnames of the driver.\n",
    "code": "import numpy as np\nimport pandas as pd\n\n# Convert 'time' column to seconds\ndf1['time_seconds'] = pd.to_timedelta(df1['time']).dt.total_seconds()\n\n# Find the driver with the fastest lap time\nfastest_driver = df1.loc[df1['time_seconds'].idxmin(), 'driverId']\n\n# Merge with df2 to get forenames and surnames\nfastest_driver_info = df2[df2['driverId'] == fastest_driver][['forename', 'surname']].values[0]\n\n# Print the result\nprint(f\"The driver with the fastest lap time is {fastest_driver_info[0]} {fastest_driver_info[1]}\")",
    "observation": "ValueError: no units specified",
    "true_result": "[('Lewis', 'Hamilton', '1:07.411')]",
    "table_infos": "df1:\n|    |   resultId |   raceId |   driverId |   constructorId |   number |   grid |   position |   positionText |   positionOrder |   points |   laps | time        |   milliseconds |   fastestLap |   rank | fastestLapTime   |   fastestLapSpeed |   statusId |\n|---:|-----------:|---------:|-----------:|----------------:|---------:|-------:|-----------:|---------------:|----------------:|---------:|-------:|:------------|---------------:|-------------:|-------:|:-----------------|------------------:|-----------:|\n|  0 |          1 |       18 |          1 |               1 |       22 |      1 |          1 |              1 |               1 |       10 |     58 | 1:34:50.616 |    5.69062e+06 |           39 |      2 | 1:27.452         |           218.3   |          1 |\n|  1 |          2 |       18 |          2 |               2 |        3 |      5 |          2 |              2 |               2 |        8 |     58 | +5.478      |    5.69609e+06 |           41 |      3 | 1:27.739         |           217.586 |          1 |\n|  2 |          3 |       18 |          3 |               3 |        7 |      7 |          3 |              3 |               3 |        6 |     58 | +8.163      |    5.69878e+06 |           41 |      5 | 1:28.090         |           216.719 |          1 |\ndf2:\n|    |   driverId | driverRef   |   number | code   | forename   | surname   | dob        | nationality   | url                                         |\n|---:|-----------:|:------------|---------:|:-------|:-----------|:----------|:-----------|:--------------|:--------------------------------------------|\n|  0 |          1 | hamilton    |       44 | HAM    | Lewis      | Hamilton  | 1985-01-07 | British       | http://en.wikipedia.org/wiki/Lewis_Hamilton |\n|  1 |          2 | heidfeld    |      nan | HEI    | Nick       | Heidfeld  | 1977-05-10 | German        | http://en.wikipedia.org/wiki/Nick_Heidfeld  |\n|  2 |          3 | rosberg     |        6 | ROS    | Nico       | Rosberg   | 1985-06-27 | German        | http://en.wikipedia.org/wiki/Nico_Rosberg   |\nForeign keys:\ndf1.driverId = df2.driverId\n"
  },
  {
    "table_paths": [
      "datasets/BIRD_dev-formula_1/results.csv",
      "datasets/BIRD_dev-formula_1/races.csv"
    ],
    "query": "What is the fastest lap number of the champion in 2009?",
    "cot": "\nWe need to find the fastest lap number of the champion in 2009. To do this, we need to join df1 and df2 on 'raceId' and then filter the data for 2009. We then need to find the minimum 'fastestLap' for the year 2009.\n",
    "code": "import numpy as np\nimport pandas as pd\n\n# Load the data\n\n\n\n# Join the dataframes on 'raceId'\ndf = pd.merge(df1, df2, on='raceId')\n\n# Convert 'time' column to datetime\ndf['time'] = pd.to_datetime(df['time'])\n\n# Filter the data for 2009\ndf = df[df['year'] == 2009]\n\n# Find the minimum 'fastestLap'\nfastest_lap = df['fastestLap'].min()\n\nprint(fastest_lap)",
    "observation": "KeyError: 'time'",
    "true_result": "[(17,), (18,), (42,), (11,), (17,), (49,), (40,), (16,), (37,), (16,), (39,), (42,), (48,), (36,), (43,), (25,), (54,)]",
    "table_infos": "df1:\n|    |   resultId |   raceId |   driverId |   constructorId |   number |   grid |   position |   positionText |   positionOrder |   points |   laps | time        |   milliseconds |   fastestLap |   rank | fastestLapTime   |   fastestLapSpeed |   statusId |\n|---:|-----------:|---------:|-----------:|----------------:|---------:|-------:|-----------:|---------------:|----------------:|---------:|-------:|:------------|---------------:|-------------:|-------:|:-----------------|------------------:|-----------:|\n|  0 |          1 |       18 |          1 |               1 |       22 |      1 |          1 |              1 |               1 |       10 |     58 | 1:34:50.616 |    5.69062e+06 |           39 |      2 | 1:27.452         |           218.3   |          1 |\n|  1 |          2 |       18 |          2 |               2 |        3 |      5 |          2 |              2 |               2 |        8 |     58 | +5.478      |    5.69609e+06 |           41 |      3 | 1:27.739         |           217.586 |          1 |\n|  2 |          3 |       18 |          3 |               3 |        7 |      7 |          3 |              3 |               3 |        6 |     58 | +8.163      |    5.69878e+06 |           41 |      5 | 1:28.090         |           216.719 |          1 |\ndf2:\n|    |   raceId |   year |   round |   circuitId | name                  | date       | time     | url                                                     |\n|---:|---------:|-------:|--------:|------------:|:----------------------|:-----------|:---------|:--------------------------------------------------------|\n|  0 |        1 |   2009 |       1 |           1 | Australian Grand Prix | 2009-03-29 | 06:00:00 | http://en.wikipedia.org/wiki/2009_Australian_Grand_Prix |\n|  1 |        2 |   2009 |       2 |           2 | Malaysian Grand Prix  | 2009-04-05 | 09:00:00 | http://en.wikipedia.org/wiki/2009_Malaysian_Grand_Prix  |\n|  2 |        3 |   2009 |       3 |          17 | Chinese Grand Prix    | 2009-04-19 | 07:00:00 | http://en.wikipedia.org/wiki/2009_Chinese_Grand_Prix    |\nForeign keys:\ndf1.raceId = df2.raceId\n"
  },
  {
    "table_paths": [
      "datasets/BIRD_dev-formula_1/results.csv",
      "datasets/BIRD_dev-formula_1/races.csv"
    ],
    "query": "What is the average of fastest lap speed in the 2009 Spanish Grand Prix race?",
    "cot": "\nTo solve this problem, we need to merge df1 and df2 on raceId, then filter the data for the 2009 Spanish Grand Prix race. After that, we can calculate the average of fastestLapSpeed.\n",
    "code": "import numpy as np\nimport pandas as pd\n\n# Merge df1 and df2 on raceId\ndf = pd.merge(df1, df2, on='raceId')\n\n# Filter the data for the 2009 Spanish Grand Prix race\ndf = df[df['year'] == 2009]\ndf = df[df['name'] == 'Spanish Grand Prix']\n\n# Calculate the average of fastestLapSpeed\naverage_fastest_lap_speed = df['fastestLapSpeed'].mean()\n\nprint(average_fastest_lap_speed)",
    "observation": "TypeError: can only concatenate str (not \"int\") to str",
    "true_result": "[(199.6415625,)]",
    "table_infos": "df1:\n|    |   resultId |   raceId |   driverId |   constructorId |   number |   grid |   position |   positionText |   positionOrder |   points |   laps | time        |   milliseconds |   fastestLap |   rank | fastestLapTime   |   fastestLapSpeed |   statusId |\n|---:|-----------:|---------:|-----------:|----------------:|---------:|-------:|-----------:|---------------:|----------------:|---------:|-------:|:------------|---------------:|-------------:|-------:|:-----------------|------------------:|-----------:|\n|  0 |          1 |       18 |          1 |               1 |       22 |      1 |          1 |              1 |               1 |       10 |     58 | 1:34:50.616 |    5.69062e+06 |           39 |      2 | 1:27.452         |           218.3   |          1 |\n|  1 |          2 |       18 |          2 |               2 |        3 |      5 |          2 |              2 |               2 |        8 |     58 | +5.478      |    5.69609e+06 |           41 |      3 | 1:27.739         |           217.586 |          1 |\n|  2 |          3 |       18 |          3 |               3 |        7 |      7 |          3 |              3 |               3 |        6 |     58 | +8.163      |    5.69878e+06 |           41 |      5 | 1:28.090         |           216.719 |          1 |\ndf2:\n|    |   raceId |   year |   round |   circuitId | name                  | date       | time     | url                                                     |\n|---:|---------:|-------:|--------:|------------:|:----------------------|:-----------|:---------|:--------------------------------------------------------|\n|  0 |        1 |   2009 |       1 |           1 | Australian Grand Prix | 2009-03-29 | 06:00:00 | http://en.wikipedia.org/wiki/2009_Australian_Grand_Prix |\n|  1 |        2 |   2009 |       2 |           2 | Malaysian Grand Prix  | 2009-04-05 | 09:00:00 | http://en.wikipedia.org/wiki/2009_Malaysian_Grand_Prix  |\n|  2 |        3 |   2009 |       3 |          17 | Chinese Grand Prix    | 2009-04-19 | 07:00:00 | http://en.wikipedia.org/wiki/2009_Chinese_Grand_Prix    |\nForeign keys:\ndf1.raceId = df2.raceId\n"
  },
  {
    "table_paths": [
      "datasets/BIRD_dev-formula_1/races.csv",
      "datasets/BIRD_dev-formula_1/results.csv"
    ],
    "query": "Which race has the shortest actual finishing time? Please give the name and year.",
    "cot": "\nWe need to convert the time column in df2 from string to datetime and then calculate the total seconds for each race. The race with the shortest total seconds will have the shortest actual finishing time.\n",
    "code": "import numpy as np\nimport pandas as pd\n\n# Convert time column to datetime\ndf2['time'] = pd.to_datetime(df2['time'])\n\n# Calculate total seconds for each race\ndf2['total_seconds'] = df2['time'].dt.hour*3600 + df2['time'].dt.minute*60 + df2['time'].dt.second\n\n# Group by raceId and get the minimum total_seconds\nmin_seconds = df2.groupby('raceId')['total_seconds'].min()\n\n# Merge df1 and min_seconds to get the race with the shortest actual finishing time\nshortest_race = df1.merge(min_seconds, on='raceId')\n\n# Get the race with the shortest actual finishing time\nshortest_race = shortest_race.loc[shortest_race['total_seconds'] == shortest_race['total_seconds'].min()]\n\n# Print the race name and year\nprint(f\"The race with the shortest actual finishing time is {shortest_race['name'].values[0]} in {shortest_race['year'].values[0]}.\")",
    "observation": "ValueError: Given date string \"+5.478\" not likely a datetime, at position 1",
    "true_result": "[('Australian Grand Prix', 1991)]",
    "table_infos": "df1:\n|    |   raceId |   year |   round |   circuitId | name                  | date       | time     | url                                                     |\n|---:|---------:|-------:|--------:|------------:|:----------------------|:-----------|:---------|:--------------------------------------------------------|\n|  0 |        1 |   2009 |       1 |           1 | Australian Grand Prix | 2009-03-29 | 06:00:00 | http://en.wikipedia.org/wiki/2009_Australian_Grand_Prix |\n|  1 |        2 |   2009 |       2 |           2 | Malaysian Grand Prix  | 2009-04-05 | 09:00:00 | http://en.wikipedia.org/wiki/2009_Malaysian_Grand_Prix  |\n|  2 |        3 |   2009 |       3 |          17 | Chinese Grand Prix    | 2009-04-19 | 07:00:00 | http://en.wikipedia.org/wiki/2009_Chinese_Grand_Prix    |\ndf2:\n|    |   resultId |   raceId |   driverId |   constructorId |   number |   grid |   position |   positionText |   positionOrder |   points |   laps | time        |   milliseconds |   fastestLap |   rank | fastestLapTime   |   fastestLapSpeed |   statusId |\n|---:|-----------:|---------:|-----------:|----------------:|---------:|-------:|-----------:|---------------:|----------------:|---------:|-------:|:------------|---------------:|-------------:|-------:|:-----------------|------------------:|-----------:|\n|  0 |          1 |       18 |          1 |               1 |       22 |      1 |          1 |              1 |               1 |       10 |     58 | 1:34:50.616 |    5.69062e+06 |           39 |      2 | 1:27.452         |           218.3   |          1 |\n|  1 |          2 |       18 |          2 |               2 |        3 |      5 |          2 |              2 |               2 |        8 |     58 | +5.478      |    5.69609e+06 |           41 |      3 | 1:27.739         |           217.586 |          1 |\n|  2 |          3 |       18 |          3 |               3 |        7 |      7 |          3 |              3 |               3 |        6 |     58 | +8.163      |    5.69878e+06 |           41 |      5 | 1:28.090         |           216.719 |          1 |\nForeign keys:\ndf2.raceId = df1.raceId\n"
  },
  {
    "table_paths": [
      "datasets/BIRD_dev-formula_1/results.csv",
      "datasets/BIRD_dev-formula_1/races.csv",
      "datasets/BIRD_dev-formula_1/drivers.csv"
    ],
    "query": "From 2000 to 2005, what percentage of drivers who were born before 1985 and the lap numbers were over 50?",
    "cot": "\nTo solve this problem, we need to join df1 and df3 on driverId, then filter the dataframe to include only the rows where the driver was born before 1985 and the lap numbers were over 50. Then, we can calculate the percentage of drivers in this filtered dataframe.\n",
    "code": "# Data Preparation\ndf1['dob'] = pd.to_datetime(df1['dob'])\ndf1['time'] = pd.to_datetime(df2['time'])\n\n# Data Processing\nmerged_df = pd.merge(df1, df3, on='driverId')\nfiltered_df = merged_df[(merged_df['dob'] < '1985-01-01') & (merged_df['laps'] > 50)]\n\n# Declare `final_df` Variable\nfinal_df = filtered_df\n\n# Print the final result\npercentage = len(final_df) / len(merged_df) * 100\nprint(f\"The percentage of drivers who were born before 1985 and the lap numbers were over 50 is {percentage}%\")",
    "observation": "KeyError: 'dob'",
    "true_result": "[(64.6189376443418,)]",
    "table_infos": "df1:\n|    |   resultId |   raceId |   driverId |   constructorId |   number |   grid |   position |   positionText |   positionOrder |   points |   laps | time        |   milliseconds |   fastestLap |   rank | fastestLapTime   |   fastestLapSpeed |   statusId |\n|---:|-----------:|---------:|-----------:|----------------:|---------:|-------:|-----------:|---------------:|----------------:|---------:|-------:|:------------|---------------:|-------------:|-------:|:-----------------|------------------:|-----------:|\n|  0 |          1 |       18 |          1 |               1 |       22 |      1 |          1 |              1 |               1 |       10 |     58 | 1:34:50.616 |    5.69062e+06 |           39 |      2 | 1:27.452         |           218.3   |          1 |\n|  1 |          2 |       18 |          2 |               2 |        3 |      5 |          2 |              2 |               2 |        8 |     58 | +5.478      |    5.69609e+06 |           41 |      3 | 1:27.739         |           217.586 |          1 |\n|  2 |          3 |       18 |          3 |               3 |        7 |      7 |          3 |              3 |               3 |        6 |     58 | +8.163      |    5.69878e+06 |           41 |      5 | 1:28.090         |           216.719 |          1 |\ndf2:\n|    |   raceId |   year |   round |   circuitId | name                  | date       | time     | url                                                     |\n|---:|---------:|-------:|--------:|------------:|:----------------------|:-----------|:---------|:--------------------------------------------------------|\n|  0 |        1 |   2009 |       1 |           1 | Australian Grand Prix | 2009-03-29 | 06:00:00 | http://en.wikipedia.org/wiki/2009_Australian_Grand_Prix |\n|  1 |        2 |   2009 |       2 |           2 | Malaysian Grand Prix  | 2009-04-05 | 09:00:00 | http://en.wikipedia.org/wiki/2009_Malaysian_Grand_Prix  |\n|  2 |        3 |   2009 |       3 |          17 | Chinese Grand Prix    | 2009-04-19 | 07:00:00 | http://en.wikipedia.org/wiki/2009_Chinese_Grand_Prix    |\ndf3:\n|    |   driverId | driverRef   |   number | code   | forename   | surname   | dob        | nationality   | url                                         |\n|---:|-----------:|:------------|---------:|:-------|:-----------|:----------|:-----------|:--------------|:--------------------------------------------|\n|  0 |          1 | hamilton    |       44 | HAM    | Lewis      | Hamilton  | 1985-01-07 | British       | http://en.wikipedia.org/wiki/Lewis_Hamilton |\n|  1 |          2 | heidfeld    |      nan | HEI    | Nick       | Heidfeld  | 1977-05-10 | German        | http://en.wikipedia.org/wiki/Nick_Heidfeld  |\n|  2 |          3 | rosberg     |        6 | ROS    | Nico       | Rosberg   | 1985-06-27 | German        | http://en.wikipedia.org/wiki/Nico_Rosberg   |\nForeign keys:\ndf1.driverId = df3.driverId,df1.raceId = df2.raceId\n"
  },
  {
    "table_paths": ["datasets/BIRD_dev-formula_1/drivers.csv"],
    "query": "Please state the reference name of the oldest German driver.",
    "cot": "",
    "code": "import numpy as np\nimport pandas as pd\n\n# Assuming df is the given dataframe\n\n# Convert dob to datetime\ndf['dob'] = pd.to_datetime(df['dob'])\n\n# Filter data for German drivers\ngerman_drivers = df[df['nationality'] == 'German']\n\n# Find the oldest driver\noldest_driver = german_drivers[german_drivers['dob'].idxmin()]\n\n# Print the reference name of the oldest German driver\nprint(oldest_driver['driverRef'])",
    "observation": "ValueError: attempt to get argmin of an empty sequence",
    "true_result": "[('brudes',)]",
    "table_infos": "df:\n|    |   driverId | driverRef   |   number | code   | forename   | surname   | dob        | nationality   | url                                         |\n|---:|-----------:|:------------|---------:|:-------|:-----------|:----------|:-----------|:--------------|:--------------------------------------------|\n|  0 |          1 | hamilton    |       44 | HAM    | Lewis      | Hamilton  | 1985-01-07 | British       | http://en.wikipedia.org/wiki/Lewis_Hamilton |\n"
  },
  {
    "table_paths": [
      "datasets/BIRD_dev-formula_1/results.csv",
      "datasets/BIRD_dev-formula_1/drivers.csv"
    ],
    "query": "Which drivers who were born in 1971 and has the fastest lap time on the race? Give id and code of these drivers.",
    "cot": "\nWe need to filter the dataframe df2 based on the birth year (1971) and then merge it with df1 to get the fastest lap time.\n",
    "code": "import numpy as np\nimport pandas as pd\n\n# Filter df2 based on birth year\ndf2_filtered = df2[df2['dob'].dt.year == 1971]\n\n# Merge df2_filtered with df1 on driverId\nmerged_df = pd.merge(df2_filtered, df1, on='driverId')\n\n# Find the driver with the fastest lap time\nfastest_driver = merged_df[merged_df['fastestLapTime'] == merged_df['fastestLapTime'].min()]\n\n# Print the id and code of the fastest driver\nfinal_df = fastest_driver[['driverId', 'code']]\nprint(final_df)",
    "observation": "AttributeError: Can only use .dt accessor with datetimelike values",
    "true_result": "[(14, 'COU'), (14, 'COU'), (14, 'COU'), (14, 'COU'), (14, 'COU'), (14, 'COU'), (14, 'COU'), (14, 'COU'), (14, 'COU'), (14, 'COU'), (14, 'COU'), (14, 'COU'), (14, 'COU'), (14, 'COU'), (14, 'COU'), (14, 'COU'), (14, 'COU'), (14, 'COU'), (14, 'COU'), (14, 'COU'), (14, 'COU'), (14, 'COU'), (14, 'COU'), (14, 'COU'), (14, 'COU'), (14, 'COU'), (14, 'COU'), (14, 'COU'), (14, 'COU'), (14, 'COU'), (14, 'COU'), (35, 'VIL'), (35, 'VIL'), (14, 'COU'), (35, 'VIL'), (14, 'COU'), (35, 'VIL'), (14, 'COU'), (35, 'VIL'), (14, 'COU'), (35, 'VIL'), (14, 'COU'), (14, 'COU'), (35, 'VIL'), (35, 'VIL'), (14, 'COU'), (14, 'COU'), (35, 'VIL'), (14, 'COU'), (35, 'VIL'), (37, 'DLR'), (14, 'COU'), (35, 'VIL'), (14, 'COU'), (35, 'VIL'), (37, 'DLR'), (37, 'DLR'), (14, 'COU'), (37, 'DLR'), (14, 'COU'), (14, 'COU'), (37, 'DLR'), (37, 'DLR'), (14, 'COU'), (37, 'DLR'), (14, 'COU'), (37, 'DLR'), (14, 'COU'), (14, 'COU'), (35, 'VIL'), (14, 'COU'), (35, 'VIL'), (37, 'DLR'), (14, 'COU'), (35, 'VIL'), (35, 'VIL'), (14, 'COU'), (14, 'COU'), (35, 'VIL'), (35, 'VIL'), (14, 'COU'), (14, 'COU'), (35, 'VIL'), (14, 'COU'), (35, 'VIL'), (35, 'VIL'), (14, 'COU'), (14, 'COU'), (35, 'VIL'), (14, 'COU'), (35, 'VIL'), (35, 'VIL'), (14, 'COU'), (35, 'VIL'), (35, 'VIL'), (14, 'COU'), (35, 'VIL'), (14, 'COU'), (35, 'VIL'), (14, 'COU'), (35, 'VIL'), (14, 'COU'), (35, 'VIL'), (14, 'COU'), (14, 'COU'), (14, 'COU'), (14, 'COU'), (14, 'COU'), (14, 'COU'), (14, 'COU'), (14, 'COU'), (14, 'COU'), (14, 'COU'), (14, 'COU'), (14, 'COU'), (14, 'COU'), (14, 'COU'), (14, 'COU'), (14, 'COU'), (35, 'VIL'), (35, 'VIL'), (14, 'COU'), (35, 'VIL'), (14, 'COU'), (69, 'BAD'), (69, 'BAD'), (37, 'DLR'), (37, 'DLR'), (37, 'DLR'), (37, 'DLR'), (37, 'DLR'), (37, 'DLR'), (37, 'DLR'), (37, 'DLR'), (37, 'DLR'), (37, 'DLR'), (37, 'DLR'), (37, 'DLR'), (37, 'DLR'), (37, 'DLR'), (37, 'DLR'), (37, 'DLR'), (37, 'DLR'), (37, 'DLR'), (37, 'DLR'), (37, 'DLR'), (37, 'DLR'), (37, 'DLR'), (37, 'DLR'), (37, 'DLR'), (37, 'DLR'), (37, 'DLR'), (37, 'DLR'), (37, 'DLR'), (37, 'DLR'), (37, 'DLR'), (37, 'DLR'), (37, 'DLR')]",
    "table_infos": "df1:\n|    |   resultId |   raceId |   driverId |   constructorId |   number |   grid |   position |   positionText |   positionOrder |   points |   laps | time        |   milliseconds |   fastestLap |   rank | fastestLapTime   |   fastestLapSpeed |   statusId |\n|---:|-----------:|---------:|-----------:|----------------:|---------:|-------:|-----------:|---------------:|----------------:|---------:|-------:|:------------|---------------:|-------------:|-------:|:-----------------|------------------:|-----------:|\n|  0 |          1 |       18 |          1 |               1 |       22 |      1 |          1 |              1 |               1 |       10 |     58 | 1:34:50.616 |    5.69062e+06 |           39 |      2 | 1:27.452         |           218.3   |          1 |\n|  1 |          2 |       18 |          2 |               2 |        3 |      5 |          2 |              2 |               2 |        8 |     58 | +5.478      |    5.69609e+06 |           41 |      3 | 1:27.739         |           217.586 |          1 |\n|  2 |          3 |       18 |          3 |               3 |        7 |      7 |          3 |              3 |               3 |        6 |     58 | +8.163      |    5.69878e+06 |           41 |      5 | 1:28.090         |           216.719 |          1 |\ndf2:\n|    |   driverId | driverRef   |   number | code   | forename   | surname   | dob        | nationality   | url                                         |\n|---:|-----------:|:------------|---------:|:-------|:-----------|:----------|:-----------|:--------------|:--------------------------------------------|\n|  0 |          1 | hamilton    |       44 | HAM    | Lewis      | Hamilton  | 1985-01-07 | British       | http://en.wikipedia.org/wiki/Lewis_Hamilton |\n|  1 |          2 | heidfeld    |      nan | HEI    | Nick       | Heidfeld  | 1977-05-10 | German        | http://en.wikipedia.org/wiki/Nick_Heidfeld  |\n|  2 |          3 | rosberg     |        6 | ROS    | Nico       | Rosberg   | 1985-06-27 | German        | http://en.wikipedia.org/wiki/Nico_Rosberg   |\nForeign keys:\ndf1.driverId = df2.driverId\n"
  },
  {
    "table_paths": [
      "datasets/BIRD_dev-formula_1/results.csv",
      "datasets/BIRD_dev-formula_1/races.csv"
    ],
    "query": "State the racing year which has the fastest lap time?",
    "cot": "\nWe need to convert the 'time' column in df1 from string to datetime format and then find the minimum value.\n",
    "code": "import numpy as np\nimport pandas as pd\n\n# Convert 'time' column in df1 from string to datetime format\ndf1['time'] = pd.to_datetime(df1['time'])\n\n# Find the minimum value in 'time' column\nfastest_lap_time = df1['time'].min()\n\n# Merge df1 and df2 on 'raceId' to get the year of the fastest lap\nfinal_df = pd.merge(df1, df2, on='raceId')\nfastest_lap_year = final_df.loc[df1['time'] == fastest_lap_time, 'year'].values[0]\n\n# Print the result\nprint(f\"The racing year which has the fastest lap time is {fastest_lap_year}\")",
    "observation": "ValueError: Given date string \"+5.478\" not likely a datetime, at position 1",
    "true_result
    "table_infos": "df1:\n|    |   resultId |   raceId |   driverId |   constructorId |   number |   grid |   position |   positionText |   positionOrder |   points |   laps | time        |   milliseconds |   fastestLap |   rank | fastestLapTime   |   fastestLapSpeed |   statusId |\n|---:|-----------:|---------:|-----------:|----------------:|---------:|-------:|-----------:|---------------:|----------------:|---------:|-------:|:------------|---------------:|-------------:|-------:|:-----------------|------------------:|-----------:|\n|  0 |          1 |       18 |          1 |               1 |       22 |      1 |          1 |              1 |               1 |       10 |     58 | 1:34:50.616 |    5.69062e+06 |           39 |      2 | 1:27.452         |           218.3   |          1 |\n|  1 |          2 |       18 |          2 |               2 |        3 |      5 |          2 |              2 |               2 |        8 |     58 | +5.478      |    5.69609e+06 |           41 |      3 | 1:27.739         |           217.586 |          1 |\n|  2 |          3 |       18 |          3 |               3 |        7 |      7 |          3 |              3 |               3 |        6 |     58 | +8.163      |    5.69878e+06 |           41 |      5 | 1:28.090         |           216.719 |          1 |\ndf2:\n|    |   raceId |   year |   round |   circuitId | name                  | date       | time     | url                                                     |\n|---:|---------:|-------:|--------:|------------:|:----------------------|:-----------|:---------|:--------------------------------------------------------|\n|  0 |        1 |   2009 |       1 |           1 | Australian Grand Prix | 2009-03-29 | 06:00:00 | http://en.wikipedia.org/wiki/2009_Australian_Grand_Prix |\n|  1 |        2 |   2009 |       2 |           2 | Malaysian Grand Prix  | 2009-04-05 | 09:00:00 | http://en.wikipedia.org/wiki/2009_Malaysian_Grand_Prix  |\n|  2 |        3 |   2009 |       3 |          17 | Chinese Grand Prix    | 2009-04-19 | 07:00:00 | http://en.wikipedia.org/wiki/2009_Chinese_Grand_Prix    |\nForeign keys:\ndf1.raceId = df2.raceId\n"
  },
  {
    "table_paths": [
      "datasets/BIRD_dev-formula_1/qualifying.csv",
      "datasets/BIRD_dev-formula_1/drivers.csv"
    ],
    "query": "List the reference name of the drivers who passed the second qualifying lap during race no. 23. Indicate their nationality and birthday.",
    "cot": "We need to join df1 and df2 on driverId and filter the data where raceId is 18 and number is 23. Then, we need to list the driverRef, nationality and dob of the drivers who passed the second qualifying lap.\n",
    "code": "import numpy as np\nimport pandas as pd\n\n# Assuming df1 and df2 are the dataframes\ndf = pd.merge(df1, df2, on='driverId')\n\n# Filter the data\ndf = df[(df['raceId'] == 18) & (df['number'] == 23)]\n\n# Filter the data where position is 2\ndf = df[df['position'] == 2]\n\n# Select the required columns\nfinal_df = df[['driverRef', 'nationality', 'dob']]\n\n# Print the final result\nprint(final_df)",
    "observation": "KeyError: 'number'",
    "true_result": "[('massa', 'Brazilian', '1981-04-25'), ('raikkonen', 'Finnish', '1979-10-17'), ('hamilton', 'British', '1985-01-07'), ('kovalainen', 'Finnish', '1981-10-19'), ('kubica', 'Polish', '1984-12-07'), ('rosberg', 'German', '1985-06-27'), ('alonso', 'Spanish', '1981-07-29'), ('trulli', 'Italian', '1974-07-13'), ('webber', 'Australian', '1976-08-27'), ('coulthard', 'British', '1971-03-27'), ('glock', 'German', '1982-03-18'), ('button', 'British', '1980-01-19'), ('heidfeld', 'German', '1977-05-10'), ('nakajima', 'Japanese', '1985-01-11'), ('barrichello', 'Brazilian', '1972-05-23')]",
    "table_infos": "df1:\n|    |   qualifyId |   raceId |   driverId |   constructorId |   number |   position | q1       | q2       | q3       |\n|---:|------------:|---------:|-----------:|----------------:|---------:|-----------:|:---------|:---------|:---------|\n|  0 |           1 |       18 |          1 |               1 |       22 |          1 | 1:26.572 | 1:25.187 | 1:26.714 |\n|  1 |           2 |       18 |          9 |               2 |        4 |          2 | 1:26.103 | 1:25.315 | 1:26.869 |\n|  2 |           3 |       18 |          5 |               1 |       23 |          3 | 1:25.664 | 1:25.452 | 1:27.079 |\ndf2:\n|    |   driverId | driverRef   |   number | code   | forename   | surname   | dob        | nationality   | url                                         |\n|---:|-----------:|:------------|---------:|:-------|:-----------|:----------|:-----------|:--------------|:--------------------------------------------|\n|  0 |          1 | hamilton    |       44 | HAM    | Lewis      | Hamilton  | 1985-01-07 | British       | http://en.wikipedia.org/wiki/Lewis_Hamilton |\n|  1 |          2 | heidfeld    |      nan | HEI    | Nick       | Heidfeld  | 1977-05-10 | German        | http://en.wikipedia.org/wiki/Nick_Heidfeld  |\n|  2 |          3 | rosberg     |        6 | ROS    | Nico       | Rosberg   | 1985-06-27 | German        | http://en.wikipedia.org/wiki/Nico_Rosberg   |\nForeign keys:\ndf1.driverId = df2.driverId\n"
  },
  {
    "table_paths": [
      "datasets/BIRD_dev-formula_1/results.csv",
      "datasets/BIRD_dev-formula_1/races.csv"
    ],
    "query": "What is the average fastest lap time of the top 10 drivers in the 2006 United States Grand Prix?",
    "cot": "\nTo solve this problem, we need to join df1 and df2 on the raceId column. Then, we need to filter the data to only include the top 10 drivers. We also need to convert the fastestLapTime column to a time object so we can calculate the average. Finally, we need to calculate the average fastest lap time.\n",
    "code": "import numpy as np\nimport pandas as pd\n\n# Load the data\n\n\n\n# Join the dataframes on the raceId column\ndf = pd.merge(df1, df2, on='raceId')\n\n# Filter the data to only include the top 10 drivers\ndf = df[df['position'] <= 10]\n\n# Convert the fastestLapTime column to a time object\ndf['fastestLapTime'] = pd.to_timedelta(df['fastestLapTime'])\n\n# Calculate the average fastest lap time\naverage_fastest_lap_time = df['fastestLapTime'].mean()\n\n# Print the average fastest lap time\nprint(average_fastest_lap_time)",
    "observation": "ValueError: expected hh:mm:ss format before .",
    "true_result": "[(None,)]",
    "table_infos": "df1:\n|    |   resultId |   raceId |   driverId |   constructorId |   number |   grid |   position |   positionText |   positionOrder |   points |   laps | time        |   milliseconds |   fastestLap |   rank | fastestLapTime   |   fastestLapSpeed |   statusId |\n|---:|-----------:|---------:|-----------:|----------------:|---------:|-------:|-----------:|---------------:|----------------:|---------:|-------:|:------------|---------------:|-------------:|-------:|:-----------------|------------------:|-----------:|\n|  0 |          1 |       18 |          1 |               1 |       22 |      1 |          1 |              1 |               1 |       10 |     58 | 1:34:50.616 |    5.69062e+06 |           39 |      2 | 1:27.452         |           218.3   |          1 |\n|  1 |          2 |       18 |          2 |               2 |        3 |      5 |          2 |              2 |               2 |        8 |     58 | +5.478      |    5.69609e+06 |           41 |      3 | 1:27.739         |           217.586 |          1 |\n|  2 |          3 |       18 |          3 |               3 |        7 |      7 |          3 |              3 |               3 |        6 |     58 | +8.163      |    5.69878e+06 |           41 |      5 | 1:28.090         |           216.719 |          1 |\ndf2:\n|    |   raceId |   year |   round |   circuitId | name                  | date       | time     | url                                                     |\n|---:|---------:|-------:|--------:|------------:|:----------------------|:-----------|:---------|:--------------------------------------------------------|\n|  0 |        1 |   2009 |       1 |           1 | Australian Grand Prix | 2009-03-29 | 06:00:00 | http://en.wikipedia.org/wiki/2009_Australian_Grand_Prix |\n|  1 |        2 |   2009 |       2 |           2 | Malaysian Grand Prix  | 2009-04-05 | 09:00:00 | http://en.wikipedia.org/wiki/2009_Malaysian_Grand_Prix  |\n|  2 |        3 |   2009 |       3 |          17 | Chinese Grand Prix    | 2009-04-19 | 07:00:00 | http://en.wikipedia.org/wiki/2009_Chinese_Grand_Prix    |\nForeign keys:\ndf1.raceId = df2.raceId\n"
  },
  {
    "table_paths": [
      "datasets/BIRD_dev-formula_1/results.csv",
      "datasets/BIRD_dev-formula_1/races.csv"
    ],
    "query": "Who is the champion of the Canadian Grand Prix in 2008? Indicate his finish time.",
    "cot": "To solve this problem, we need to join df1 and df2 on the raceId column. Then, we need to filter the data for the Canadian Grand Prix in 2008. The driver with the lowest position is the champion.\n",
    "code": "import numpy as np\nimport pandas as pd\n\n# Assuming df1 and df2 are the dataframes\ndf = pd.merge(df1, df2, on='raceId')\n\n# Filter the data for the Canadian Grand Prix in 2008\ndf = df[(df['name'] == 'Canadian Grand Prix') & (df['year'] == 2008)]\n\n# Get the driver with the lowest position\nchampion = df[df['position'] == df['position'].min()]\n\n# Print the champion's finish time\nprint(f\"The champion of the Canadian Grand Prix in 2008 is driver {champion['driverId'].values[0]} with a finish time of {champion['time'].values[0]}\")",
    "observation": "KeyError: 'time'",
    "true_result": "[('1:36:24.227',)]",
    "table_infos": "df1:\n|    |   resultId |   raceId |   driverId |   constructorId |   number |   grid |   position |   positionText |   positionOrder |   points |   laps | time        |   milliseconds |   fastestLap |   rank | fastestLapTime   |   fastestLapSpeed |   statusId |\n|---:|-----------:|---------:|-----------:|----------------:|---------:|-------:|-----------:|---------------:|----------------:|---------:|-------:|:------------|---------------:|-------------:|-------:|:-----------------|------------------:|-----------:|\n|  0 |          1 |       18 |          1 |               1 |       22 |      1 |          1 |              1 |               1 |       10 |     58 | 1:34:50.616 |    5.69062e+06 |           39 |      2 | 1:27.452         |           218.3   |          1 |\n|  1 |          2 |       18 |          2 |               2 |        3 |      5 |          2 |              2 |               2 |        8 |     58 | +5.478      |    5.69609e+06 |           41 |      3 | 1:27.739         |           217.586 |          1 |\n|  2 |          3 |       18 |          3 |               3 |        7 |      7 |          3 |              3 |               3 |        6 |     58 | +8.163      |    5.69878e+06 |           41 |      5 | 1:28.090         |           216.719 |          1 |\ndf2:\n|    |   raceId |   year |   round |   circuitId | name                  | date       | time     | url                                                     |\n|---:|---------:|-------:|--------:|------------:|:----------------------|:-----------|:---------|:--------------------------------------------------------|\n|  0 |        1 |   2009 |       1 |           1 | Australian Grand Prix | 2009-03-29 | 06:00:00 | http://en.wikipedia.org/wiki/2009_Australian_Grand_Prix |\n|  1 |        2 |   2009 |       2 |           2 | Malaysian Grand Prix  | 2009-04-05 | 09:00:00 | http://en.wikipedia.org/wiki/2009_Malaysian_Grand_Prix  |\n|  2 |        3 |   2009 |       3 |          17 | Chinese Grand Prix    | 2009-04-19 | 07:00:00 | http://en.wikipedia.org/wiki/2009_Chinese_Grand_Prix    |\nForeign keys:\ndf1.raceId = df2.raceId\n"
  },
  {
    "table_paths": [
      "datasets/BIRD_dev-formula_1/results.csv",
      "datasets/BIRD_dev-formula_1/races.csv",
      "datasets/BIRD_dev-formula_1/constructors.csv"
    ],
    "query": "What is the constructor reference name of the champion in the 2009 Singapore Grand Prix? Please give its website.",
    "cot": "\nTo solve this problem, we need to join the three dataframes on the appropriate keys and then filter the data to get the required information.\n",
    "code": "import numpy as np\nimport pandas as pd\n\n# Load the dataframes\n\n\n\n\n# Join the dataframes on the appropriate keys\ndf = pd.merge(df1, df2, on='raceId', how='left')\ndf = pd.merge(df, df3, on='constructorId', how='left')\n\n# Filter the data to get the required information\ndf_singapore = df[(df['year'] == 2009) & (df['name'] == 'Singapore Grand Prix')]\nchampion_constructor_ref = df_singapore['constructorRef'].values[0]\nchampion_constructor_url = df_singapore['url_x'].values[0]\n\nprint(f\"The constructor reference name of the champion in the 2009 Singapore Grand Prix is {champion_constructor_ref}. The website is {champion_constructor_url}.\")",
    "observation": "KeyError: 'name'",
    "true_result": "[('mclaren', 'http://en.wikipedia.org/wiki/McLaren')]",
    "table_infos": "df1:\n|    |   resultId |   raceId |   driverId |   constructorId |   number |   grid |   position |   positionText |   positionOrder |   points |   laps | time        |   milliseconds |   fastestLap |   rank | fastestLapTime   |   fastestLapSpeed |   statusId |\n|---:|-----------:|---------:|-----------:|----------------:|---------:|-------:|-----------:|---------------:|----------------:|---------:|-------:|:------------|---------------:|-------------:|-------:|:-----------------|------------------:|-----------:|\n|  0 |          1 |       18 |          1 |               1 |       22 |      1 |          1 |              1 |               1 |       10 |     58 | 1:34:50.616 |    5.69062e+06 |           39 |      2 | 1:27.452         |           218.3   |          1 |\n|  1 |          2 |       18 |          2 |               2 |        3 |      5 |          2 |              2 |               2 |        8 |     58 | +5.478      |    5.69609e+06 |           41 |      3 | 1:27.739         |           217.586 |          1 |\n|  2 |          3 |       18 |          3 |               3 |        7 |      7 |          3 |              3 |               3 |        6 |     58 | +8.163      |    5.69878e+06 |           41 |      5 | 1:28.090         |           216.719 |          1 |\ndf2:\n|    |   raceId |   year |   round |   circuitId | name                  | date       | time     | url                                                     |\n|---:|---------:|-------:|--------:|------------:|:----------------------|:-----------|:---------|:--------------------------------------------------------|\n|  0 |        1 |   2009 |       1 |           1 | Australian Grand Prix | 2009-03-29 | 06:00:00 | http://en.wikipedia.org/wiki/2009_Australian_Grand_Prix |\n|  1 |        2 |   2009 |       2 |           2 | Malaysian Grand Prix  | 2009-04-05 | 09:00:00 | http://en.wikipedia.org/wiki/2009_Malaysian_Grand_Prix  |\n|  2 |        3 |   2009 |       3 |          17 | Chinese Grand Prix    | 2009-04-19 | 07:00:00 | http://en.wikipedia.org/wiki/2009_Chinese_Grand_Prix    |\ndf3:\n|    |   constructorId | constructorRef   | name       | nationality   | url                                                          |\n|---:|----------------:|:-----------------|:-----------|:--------------|:-------------------------------------------------------------|\n|  0 |               1 | mclaren          | McLaren    | British       | http://en.wikipedia.org/wiki/McLaren                         |\n|  1 |               2 | bmw_sauber       | BMW Sauber | German        | http://en.wikipedia.org/wiki/BMW_Sauber                      |\n|  2 |               3 | williams         | Williams   | British       | http://en.wikipedia.org/wiki/Williams_Grand_Prix_Engineering |\nForeign keys:\ndf1.constructorId = df3.constructorId,df1.raceId = df2.raceId\n"
  },
  {
    "table_paths": [
      "datasets/BIRD_dev-formula_1/races.csv",
      "datasets/BIRD_dev-formula_1/results.csv"
    ],
    "query": "In terms of the fastest lap time, what is the name of the race which recorded the fastest lap speed by a racer?",
    "cot": "",
    "code": "import numpy as np\nimport pandas as pd\n\n# Assuming df1 and df2 are your dataframes\n\n# Convert time column to seconds for easier comparison\ndf2['time'] = pd.to_timedelta(df2['time']).dt.total_seconds()\n\n# Merge df1 and df2 on raceId\ndf = pd.merge(df1, df2, on='raceId')\n\n# Find the race with the fastest lap speed\nfastest_race = df.loc[df['time'].idxmin()]\n\n# Print the name of the race\nprint(fastest_race['name'])",
    "observation": "ValueError: no units specified",
    "true_result": "[('Austrian Grand Prix',)]",
    "table_infos": "df1:\n|    |   raceId |   year |   round |   circuitId | name                  | date       | time     | url                                                     |\n|---:|---------:|-------:|--------:|------------:|:----------------------|:-----------|:---------|:--------------------------------------------------------|\n|  0 |        1 |   2009 |       1 |           1 | Australian Grand Prix | 2009-03-29 | 06:00:00 | http://en.wikipedia.org/wiki/2009_Australian_Grand_Prix |\n|  1 |        2 |   2009 |       2 |           2 | Malaysian Grand Prix  | 2009-04-05 | 09:00:00 | http://en.wikipedia.org/wiki/2009_Malaysian_Grand_Prix  |\n|  2 |        3 |   2009 |       3 |          17 | Chinese Grand Prix    | 2009-04-19 | 07:00:00 | http://en.wikipedia.org/wiki/2009_Chinese_Grand_Prix    |\ndf2:\n|    |   resultId |   raceId |   driverId |   constructorId |   number |   grid |   position |   positionText |   positionOrder |   points |   laps | time        |   milliseconds |   fastestLap |   rank | fastestLapTime   |   fastestLapSpeed |   statusId |\n|---:|-----------:|---------:|-----------:|----------------:|---------:|-------:|-----------:|---------------:|----------------:|---------:|-------:|:------------|---------------:|-------------:|-------:|:-----------------|------------------:|-----------:|\n|  0 |          1 |       18 |          1 |               1 |       22 |      1 |          1 |              1 |               1 |       10 |     58 | 1:34:50.616 |    5.69062e+06 |           39 |      2 | 1:27.452         |           218.3   |          1 |\n|  1 |          2 |       18 |          2 |               2 |        3 |      5 |          2 |              2 |               2 |        8 |     58 | +5.478      |    5.69609e+06 |           41 |      3 | 1:27.739         |           217.586 |          1 |\n|  2 |          3 |       18 |          3 |               3 |        7 |      7 |          3 |              3 |               3 |        6 |     58 | +8.163      |    5.69878e+06 |           41 |      5 | 1:28.090         |           216.719 |          1 |\nForeign keys:\ndf2.raceId = df1.raceId\n"
  },
  {
    "table_paths": [
      "datasets/BIRD_dev-formula_1/circuits.csv",
      "datasets/BIRD_dev-formula_1/races.csv"
    ],
    "query": "Which racetrack hosted the most recent race? Indicate the full location.",
    "cot": "To solve this problem, we need to find the circuitId of the most recent race (i.e., the race with the maximum year). Then, we can use this circuitId to find the full location in df1.\n",
    "code": "import numpy as np\nimport pandas as pd\n\n# Load the data\n\n\n\n# Find the circuitId of the most recent race\nmost_recent_race = df2[df2['year'] == df2['year'].max()]['circuitId'].values[0]\n\n# Find the full location of the racetrack hosting the most recent race\nlocation = df1[df1['circuitId'] == most_recent_race]['location'].values[0]\n\nprint(f\"The racetrack hosting the most recent race is located in {location}.\")",
    "observation": "IndexError: index 0 is out of bounds for axis 0 with size 0",
    "true_result": "[('Abu Dhabi',)]",
    "table_infos": "df1:\n|    |   circuitId | circuitRef   | name                           | location     | country   |      lat |       lng | alt   | url                                                         |\n|---:|------------:|:-------------|:-------------------------------|:-------------|:----------|---------:|----------:|:------|:------------------------------------------------------------|\n|  0 |           2 | sepang       | Sepang International Circuit   | Kuala Lumpur | Malaysia  |  2.76083 | 101.738   |       | http://en.wikipedia.org/wiki/Sepang_International_Circuit   |\n|  1 |           3 | bahrain      | Bahrain International Circuit  | Sakhir       | Bahrain   | 26.0325  |  50.5106  |       | http://en.wikipedia.org/wiki/Bahrain_International_Circuit  |\n|  2 |           4 | catalunya    | Circuit de Barcelona-Catalunya | Montmeló     | Spain     | 41.57    |   2.26111 |       | http://en.wikipedia.org/wiki/Circuit_de_Barcelona-Catalunya |\ndf2:\n|    |   raceId |   year |   round |   circuitId | name                  | date       | time     | url                                                     |\n|---:|---------:|-------:|--------:|------------:|:----------------------|:-----------|:---------|:--------------------------------------------------------|\n|  0 |        1 |   2009 |       1 |           1 | Australian Grand Prix | 2009-03-29 | 06:00:00 | http://en.wikipedia.org/wiki/2009_Australian_Grand_Prix |\n|  1 |        2 |   2009 |       2 |           2 | Malaysian Grand Prix  | 2009-04-05 | 09:00:00 | http://en.wikipedia.org/wiki/2009_Malaysian_Grand_Prix  |\n|  2 |        3 |   2009 |       3 |          17 | Chinese Grand Prix    | 2009-04-19 | 07:00:00 | http://en.wikipedia.org/wiki/2009_Chinese_Grand_Prix    |\nForeign keys:\ndf2.circuitId = df1.circuitId\n"
  },
  {
    "table_paths": [
      "datasets/BIRD_dev-formula_1/results.csv",
      "datasets/BIRD_dev-formula_1/races.csv",
      "datasets/BIRD_dev-formula_1/circuits.csv"
    ],
    "query": "What is the lap record for the Austrian Grand Prix Circuit?",
    "cot": "\nTo find the lap record for the Austrian Grand Prix Circuit, we need to join df1, df2 and df3 on the raceId and circuitId. Then, we need to filter the data for the Austrian Grand Prix Circuit and find the minimum value in the 'laps' column.\n",
    "code": "import numpy as np\nimport pandas as pd\n\n# Merge df1, df2 and df3 on the raceId and circuitId\ndf = pd.merge(pd.merge(df1, df2, on='raceId'), df3, on='circuitId')\n\n# Filter the data for the Austrian Grand Prix Circuit\naustrian_gp = df[df['name'] == 'Australian Grand Prix']\n\n# Find the minimum value in the 'laps' column\nlap_record = austrian_gp['laps'].min()\n\n# Print the result\nprint(f\"The lap record for the Austrian Grand Prix Circuit is {lap_record} laps.\")",
    "observation": "KeyError: 'name'",
    "true_result": "[('1:07.411',)]",
    "table_infos": "df1:\n|    |   resultId |   raceId |   driverId |   constructorId |   number |   grid |   position |   positionText |   positionOrder |   points |   laps | time        |   milliseconds |   fastestLap |   rank | fastestLapTime   |   fastestLapSpeed |   statusId |\n|---:|-----------:|---------:|-----------:|----------------:|---------:|-------:|-----------:|---------------:|----------------:|---------:|-------:|:------------|---------------:|-------------:|-------:|:-----------------|------------------:|-----------:|\n|  0 |          1 |       18 |          1 |               1 |       22 |      1 |          1 |              1 |               1 |       10 |     58 | 1:34:50.616 |    5.69062e+06 |           39 |      2 | 1:27.452         |           218.3   |          1 |\n|  1 |          2 |       18 |          2 |               2 |        3 |      5 |          2 |              2 |               2 |        8 |     58 | +5.478      |    5.69609e+06 |           41 |      3 | 1:27.739         |           217.586 |          1 |\n|  2 |          3 |       18 |          3 |               3 |        7 |      7 |          3 |              3 |               3 |        6 |     58 | +8.163      |    5.69878e+06 |           41 |      5 | 1:28.090         |           216.719 |          1 |\ndf2:\n|    |   raceId |   year |   round |   circuitId | name                  | date       | time     | url                                                     |\n|---:|---------:|-------:|--------:|------------:|:----------------------|:-----------|:---------|:--------------------------------------------------------|\n|  0 |        1 |   2009 |       1 |           1 | Australian Grand Prix | 2009-03-29 | 06:00:00 | http://en.wikipedia.org/wiki/2009_Australian_Grand_Prix |\n|  1 |        2 |   2009 |       2 |           2 | Malaysian Grand Prix  | 2009-04-05 | 09:00:00 | http://en.wikipedia.org/wiki/2009_Malaysian_Grand_Prix  |\n|  2 |        3 |   2009 |       3 |          17 | Chinese Grand Prix    | 2009-04-19 | 07:00:00 | http://en.wikipedia.org/wiki/2009_Chinese_Grand_Prix    |\ndf3:\n|    |   circuitId | circuitRef   | name                           | location     | country   |      lat |       lng | alt   | url                                                         |\n|---:|------------:|:-------------|:-------------------------------|:-------------|:----------|---------:|----------:|:------|:------------------------------------------------------------|\n|  0 |           2 | sepang       | Sepang International Circuit   | Kuala Lumpur | Malaysia  |  2.76083 | 101.738   |       | http://en.wikipedia.org/wiki/Sepang_International_Circuit   |\n|  1 |           3 | bahrain      | Bahrain International Circuit  | Sakhir       | Bahrain   | 26.0325  |  50.5106  |       | http://en.wikipedia.org/wiki/Bahrain_International_Circuit  |\n|  2 |           4 | catalunya    | Circuit de Barcelona-Catalunya | Montmeló     | Spain     | 41.57    |   2.26111 |       | http://en.wikipedia.org/wiki/Circuit_de_Barcelona-Catalunya |\nForeign keys:\ndf1.raceId = df2.raceId,df2.circuitId = df3.circuitId\n"
  },
  {
    "table_paths": [
      "datasets/BIRD_dev-student_club/event.csv",
      "datasets/BIRD_dev-student_club/attendance.csv",
      "datasets/BIRD_dev-student_club/member.csv"
    ],
    "query": "How many events of the Student_Club did Sacha Harrison attend in 2019?",
    "cot": "\nTo solve this problem, we need to join df1 (events), df2 (links between events and members), and df3 (members) on the appropriate columns. Then, we can filter the data to include only events in 2019 and members named Sacha Harrison. Finally, we can count the number of unique event_ids.\n",
    "code": "import numpy as np\nimport pandas as pd\n\n# Merge df1 and df2 on event_id\ndf = pd.merge(df1, df2, on='event_id', how='inner')\n\n# Merge df with df3 on member_id\ndf = pd.merge(df, df3, on='link_to_member', how='inner')\n\n# Filter to include only events in 2019 and members named Sacha Harrison\ndf = df[(df['event_date'].dt.year == 2019) & (df['first_name'] == 'Sacha') & (df['last_name'] == 'Harrison')]\n\n# Count the number of unique event_ids\nnum_events = df['event_id'].nunique()\n\nprint(f'Sacha Harrison attended {num_events} events in 2019.')",
    "observation": "KeyError: 'event_id'",
    "true_result": "[(13,)]",
    "table_infos": "df1:\n|    | event_id          | event_name                 | event_date          | type     | notes                                                         | location   | status   |\n|---:|:------------------|:---------------------------|:--------------------|:---------|:--------------------------------------------------------------|:-----------|:---------|\n|  0 | rec0Si5cQ4rJRVzd6 | March Meeting              | 2020-03-10T12:00:00 | Meeting  |                                                               | MU 215     | Open     |\n|  1 | rec0akZnLLpGUloLH | Officers meeting - January | 2020-01-14T09:30:00 | Meeting  |                                                               |            | Open     |\n|  2 | rec0dZPcWXF0QjNnE | Spring Elections           | 2019-11-24T09:00:00 | Election | All active members can vote for new officers between 4pm-8pm. | MU 215     | Open     |\ndf2:\n|    | link_to_event     | link_to_member    |\n|---:|:------------------|:------------------|\n|  0 | rec2N69DMcrqN9PJC | recD078PnS3x2doBe |\n|  1 | rec2N69DMcrqN9PJC | recP6DJPyi5donvXL |\n|  2 | rec2N69DMcrqN9PJC | rec28ORZgcm1dtqBZ |\ndf3:\n|    | member_id         | first_name   | last_name   | email                  | position   | t_shirt_size   | phone          |   zip | link_to_major     |\n|---:|:------------------|:-------------|:------------|:-----------------------|:-----------|:---------------|:---------------|------:|:------------------|\n|  0 | rec1x5zBFIqoOuPW8 | Angela       | Sanders     | angela.sanders@lpu.edu | Member     | Medium         | (651) 928-4507 | 55108 | recxK3MHQFbR9J5uO |\n|  1 | rec280Sk7o31iG0Tx | Grant        | Gilmour     | grant.gilmour@lpu.edu  | Member     | X-Large        | 403-555-1310   | 29440 | rec7BxKpjJ7bNph3O |\n|  2 | rec28ORZgcm1dtqBZ | Luisa        | Guidi       | luisa.guidi@lpu.edu    | Member     | Medium         | 442-555-5882   | 10002 | recdIBgeU38UbV2sy |\nForeign keys:\ndf2.link_to_member = df3.member_id,df2.link_to_event = df1.event_id\n"
  },
  {
    "table_paths": [
      "datasets/BIRD_dev-student_club/event.csv",
      "datasets/BIRD_dev-student_club/attendance.csv"
    ],
    "query": "Please list the names of all the events of the Student_Club that had an attendance of over 20 students.",
    "cot": "\nTo solve this problem, we need to join df1 and df2 on the 'event_id' column. Then, we can group by 'event_name' and count the number of unique 'link_to_member' in each group. If the count is greater than 20, we can add the 'event_name' to our result.\n",
    "code": "import numpy as np\nimport pandas as pd\n\n# Assuming df1 and df2 are the dataframes given\n\n# Join df1 and df2 on 'event_id'\ndf = pd.merge(df1, df2, on='event_id')\n\n# Group by 'event_name' and count unique 'link_to_member'\ndf_grouped = df.groupby('event_name').link_to_member.nunique()\n\n# Filter the groups where the count is greater than 20\nresult = df_grouped[df_grouped > 20].index.tolist()\n\n# Print the result\nprint(result)",
    "observation": "KeyError: 'event_id'",
    "true_result": "[('October Speaker',), ('September Speaker',), ('Registration',), ('October Meeting',), ('November Speaker',), ('November Meeting',), ('Yearly Kickoff',), ('September Meeting',)]",
    "table_infos": "df1:\n|    | event_id          | event_name                 | event_date          | type     | notes                                                         | location   | status   |\n|---:|:------------------|:---------------------------|:--------------------|:---------|:--------------------------------------------------------------|:-----------|:---------|\n|  0 | rec0Si5cQ4rJRVzd6 | March Meeting              | 2020-03-10T12:00:00 | Meeting  |                                                               | MU 215     | Open     |\n|  1 | rec0akZnLLpGUloLH | Officers meeting - January | 2020-01-14T09:30:00 | Meeting  |                                                               |            | Open     |\n|  2 | rec0dZPcWXF0QjNnE | Spring Elections           | 2019-11-24T09:00:00 | Election | All active members can vote for new officers between 4pm-8pm. | MU 215     | Open     |\ndf2:\n|    | link_to_event     | link_to_member    |\n|---:|:------------------|:------------------|\n|  0 | rec2N69DMcrqN9PJC | recD078PnS3x2doBe |\n|  1 | rec2N69DMcrqN9PJC | recP6DJPyi5donvXL |\n|  2 | rec2N69DMcrqN9PJC | rec28ORZgcm1dtqBZ |\nForeign keys:\ndf2.link_to_event = df1.event_id\n"
  },
  {
    "table_paths": [
      "datasets/BIRD_dev-student_club/member.csv",
      "datasets/BIRD_dev-student_club/major.csv"
    ],
    "query": "What department offers the major that Pierce and Guidi took?",
    "cot": "\nWe need to join df1 and df2 on the 'link_to_major' and 'major_id' columns respectively. Then, we can select the 'department' column from the resulting dataframe.\n",
    "code": "import numpy as np\nimport pandas as pd\n\n# Assuming df1 and df2 are the dataframes\ndf = pd.merge(df1, df2, left_on='link_to_major', right_on='major_id')\nfinal_df = df[['first_name', 'last_name', 'department']]\n\n# Filter the dataframe to get the department of the person with the name 'Grant' and 'Guidi'\nfinal_df = final_df[(final_df['first_name'] == 'Grant') & (final_df['last_name'] == 'Guidi')]['department'].values[0]\n\n# Print the department\nprint(final_df)",
    "observation": "IndexError: index 0 is out of bounds for axis 0 with size 0",
    "true_result": "[('Civil and Environmental Engineering Department',), ('Civil and Environmental Engineering Department',)]",
    "table_infos": "df1:\n|    | member_id         | first_name   | last_name   | email                  | position   | t_shirt_size   | phone          |   zip | link_to_major     |\n|---:|:------------------|:-------------|:------------|:-----------------------|:-----------|:---------------|:---------------|------:|:------------------|\n|  0 | rec1x5zBFIqoOuPW8 | Angela       | Sanders     | angela.sanders@lpu.edu | Member     | Medium         | (651) 928-4507 | 55108 | recxK3MHQFbR9J5uO |\n|  1 | rec280Sk7o31iG0Tx | Grant        | Gilmour     | grant.gilmour@lpu.edu  | Member     | X-Large        | 403-555-1310   | 29440 | rec7BxKpjJ7bNph3O |\n|  2 | rec28ORZgcm1dtqBZ | Luisa        | Guidi       | luisa.guidi@lpu.edu    | Member     | Medium         | 442-555-5882   | 10002 | recdIBgeU38UbV2sy |\ndf2:\n|    | major_id          | major_name                             | department                                           | college                                     |\n|---:|:------------------|:---------------------------------------|:-----------------------------------------------------|:--------------------------------------------|\n|  0 | rec06DF6vZ1CyPKpc | Outdoor Product Design and Development | School of Applied Sciences, Technology and Education | College of Agriculture and Applied Sciences |\n|  1 | rec09LedkREyskCNv | Agricultural Communication             | School of Applied Sciences, Technology and Education | College of Agriculture and Applied Sciences |\n|  2 | rec0Eanv576RhQllI | Fisheries and Aquatic Sciences         | Watershed Sciences Department                        | College of Natural Resources                |\nForeign keys:\ndf1.link_to_major = df2.major_id\n"
  },
  {
    "table_paths": [
      "datasets/BIRD_dev-student_club/event.csv",
      "datasets/BIRD_dev-student_club/budget.csv"
    ],
    "query": "What is the total budgeted amount for all category in \"October Speaker\" event?",
    "cot": "\nWe need to join df1 and df2 on the event_id column. Then, we need to filter the data for the \"October Speaker\" event. Finally, we need to sum the amount column.\n",
    "code": "import numpy as np\nimport pandas as pd\n\n# Assuming df1 and df2 are the dataframes\n\n# Join df1 and df2 on event_id\ndf = pd.merge(df1, df2, on='event_id', how='inner')\n\n# Filter the data for the \"October Speaker\" event\ndf = df[df['event_name'] == 'October Speaker']\n\n# Sum the amount column\ntotal_budgeted_amount = df['amount'].sum()\n\nprint(total_budgeted_amount)",
    "observation": "KeyError: 'event_id'",
    "true_result": "[(265,)]",
    "table_infos": "df1:\n|    | event_id          | event_name                 | event_date          | type     | notes                                                         | location   | status   |\n|---:|:------------------|:---------------------------|:--------------------|:---------|:--------------------------------------------------------------|:-----------|:---------|\n|  0 | rec0Si5cQ4rJRVzd6 | March Meeting              | 2020-03-10T12:00:00 | Meeting  |                                                               | MU 215     | Open     |\n|  1 | rec0akZnLLpGUloLH | Officers meeting - January | 2020-01-14T09:30:00 | Meeting  |                                                               |            | Open     |\n|  2 | rec0dZPcWXF0QjNnE | Spring Elections           | 2019-11-24T09:00:00 | Election | All active members can vote for new officers between 4pm-8pm. | MU 215     | Open     |\ndf2:\n|    | budget_id         | category      |   spent |   remaining |   amount | event_status   | link_to_event     |\n|---:|:------------------|:--------------|--------:|------------:|---------:|:---------------|:------------------|\n|  0 | rec0QmEc3cSQFQ6V2 | Advertisement |   67.81 |        7.19 |       75 | Closed         | recI43CzsZ0Q625ma |\n|  1 | rec1bG6HSft7XIvTP | Food          |  121.14 |       28.86 |      150 | Closed         | recggMW2eyCYceNcy |\n|  2 | rec1z6ISJU2HdIsVm | Food          |   20.2  |       -0.2  |       20 | Closed         | recJ4Witp9tpjaugn |\nForeign keys:\ndf2.link_to_event = df1.event_id\n"
  },
  {
    "table_paths": [
      "datasets/BIRD_dev-student_club/event.csv",
      "datasets/BIRD_dev-student_club/budget.csv",
      "datasets/BIRD_dev-student_club/expense.csv"
    ],
    "query": "Was each expense in October Meeting on October 8, 2019 approved?",
    "cot": "\nTo answer this question, we need to join df1, df3 and df2 based on the foreign keys. Then, we can filter the data for the October Meeting and check if the expense was approved.\n",
    "code": "# Data Preparation\ndf1['event_date'] = pd.to_datetime(df1['event_date'])\ndf3['expense_date'] = pd.to_datetime(df3['expense_date'])\n\n# Data Processing\nmerged_df = pd.merge(df1, df3, left_on='event_id', right_on='link_to_event')\nmerged_df = pd.merge(merged_df, df2, left_on='budget_id', right_on='link_to_budget')\n\n# Filter data for October Meeting\nfiltered_df = merged_df[(merged_df['event_date'].dt.month == 10) & (merged_df['event_date'].dt.year == 2019) & (merged_df['event_name'] == 'October Meeting')]\n\n# Check if the expense was approved\nfinal_df = filtered_df[filtered_df['approved'] == True]\n\n# Print the final result\nif final_df.empty:\n    print(\"No expenses were approved for the October Meeting on October 8, 2019.\")\nelse:\n    print(\"Some expenses were approved for the October Meeting on October 8, 2019.\")",
    "observation": "KeyError: 'link_to_event'",
    "true_result": "[('true',), ('true',), ('true',)]",
    "table_infos": "df1:\n|    | event_id          | event_name                 | event_date          | type     | notes                                                         | location   | status   |\n|---:|:------------------|:---------------------------|:--------------------|:---------|:--------------------------------------------------------------|:-----------|:---------|\n|  0 | rec0Si5cQ4rJRVzd6 | March Meeting              | 2020-03-10T12:00:00 | Meeting  |                                                               | MU 215     | Open     |\n|  1 | rec0akZnLLpGUloLH | Officers meeting - January | 2020-01-14T09:30:00 | Meeting  |                                                               |            | Open     |\n|  2 | rec0dZPcWXF0QjNnE | Spring Elections           | 2019-11-24T09:00:00 | Election | All active members can vote for new officers between 4pm-8pm. | MU 215     | Open     |\ndf2:\n|    | budget_id         | category      |   spent |   remaining |   amount | event_status   | link_to_event     |\n|---:|:------------------|:--------------|--------:|------------:|---------:|:---------------|:------------------|\n|  0 | rec0QmEc3cSQFQ6V2 | Advertisement |   67.81 |        7.19 |       75 | Closed         | recI43CzsZ0Q625ma |\n|  1 | rec1bG6HSft7XIvTP | Food          |  121.14 |       28.86 |      150 | Closed         | recggMW2eyCYceNcy |\n|  2 | rec1z6ISJU2HdIsVm | Food          |   20.2  |       -0.2  |       20 | Closed         | recJ4Witp9tpjaugn |\ndf3:\n|    | expense_id        | expense_description   | expense_date   |   cost | approved   | link_to_member    | link_to_budget    |\n|---:|:------------------|:----------------------|:---------------|-------:|:-----------|:------------------|:------------------|\n|  0 | rec017x6R3hQqkLAo | Post Cards, Posters   | 2019-08-20     | 122.06 | true       | rec4BLdZHS2Blfp4v | recvKTAWAFKkVNnXQ |\n|  1 | rec1nIjoZKTYayqZ6 | Water, Cookies        | 2019-10-08     |  20.2  | true       | recro8T1MPMwRadVH | recy8KY5bUdzF81vv |\n|  2 | rec1oMgNFt7Y0G40x | Pizza                 | 2019-09-10     |  51.81 | true       | recD078PnS3x2doBe | recwXIiKoBMjXJsGZ |\nForeign keys:\ndf2.link_to_event = df1.event_id,df3.link_to_budget = df2.budget_id\n"
  },
  {
    "table_paths": [
      "datasets/BIRD_dev-student_club/event.csv",
      "datasets/BIRD_dev-student_club/budget.csv"
    ],
    "query": "Calculate the difference of the total amount spent in all events by the Student_Club in year 2019 and 2020.",
    "cot": "To solve this problem, we need to first filter the data for the year 2019 and 2020 separately. Then, we need to calculate the total amount spent in these two years. Finally, we can calculate the difference between these two amounts.\n",
    "code": "import numpy as np\nimport pandas as pd\n\n# Assuming df1 and df2 are the dataframes\ndf1['event_date'] = pd.to_datetime(df1['event_date'])\ndf1['year'] = df1['event_date'].dt.year\n\n# Filter data for year 2019 and 2020\ndf1_2019 = df1[df1['year'] == 2019]\ndf1_2020 = df1[df1['year'] == 2020]\n\n# Merge df1_2019 and df1_2020 with df2 on event_id\ndf_2019 = pd.merge(df1_2019, df2, on='event_id')\ndf_2020 = pd.merge(df1_2020, df2, on='event_id')\n\n# Calculate total amount spent in 2019 and 2020\ntotal_spent_2019 = df_2019['amount'].sum()\ntotal_spent_2020 = df_2020['amount'].sum()\n\n# Calculate the difference\ndifference = total_spent_2020 - total_spent_2019\n\n# Print the result\nprint(f\"The difference of the total amount spent in all events by the Student_Club in year 2019 and 2020 is {difference}\")",
    "observation": "KeyError: 'event_id'",
    "true_result": "[(2086.05,)]",
    "table_infos": "df1:\n|    | event_id          | event_name                 | event_date          | type     | notes                                                         | location   | status   |\n|---:|:------------------|:---------------------------|:--------------------|:---------|:--------------------------------------------------------------|:-----------|:---------|\n|  0 | rec0Si5cQ4rJRVzd6 | March Meeting              | 2020-03-10T12:00:00 | Meeting  |                                                               | MU 215     | Open     |\n|  1 | rec0akZnLLpGUloLH | Officers meeting - January | 2020-01-14T09:30:00 | Meeting  |                                                               |            | Open     |\n|  2 | rec0dZPcWXF0QjNnE | Spring Elections           | 2019-11-24T09:00:00 | Election | All active members can vote for new officers between 4pm-8pm. | MU 215     | Open     |\ndf2:\n|    | budget_id         | category      |   spent |   remaining |   amount | event_status   | link_to_event     |\n|---:|:------------------|:--------------|--------:|------------:|---------:|:---------------|:------------------|\n|  0 | rec0QmEc3cSQFQ6V2 | Advertisement |   67.81 |        7.19 |       75 | Closed         | recI43CzsZ0Q625ma |\n|  1 | rec1bG6HSft7XIvTP | Food          |  121.14 |       28.86 |      150 | Closed         | recggMW2eyCYceNcy |\n|  2 | rec1z6ISJU2HdIsVm | Food          |   20.2  |       -0.2  |       20 | Closed         | recJ4Witp9tpjaugn |\nForeign keys:\ndf2.link_to_event = df1.event_id\n"
  },
  {
    "table_paths": ["datasets/BIRD_dev-student_club/expense.csv"],
    "query": "What was the cost for the \"Posters\" on 2019/9/4?",
    "cot": "",
    "code": "import numpy as np\nimport pandas as pd\n\n# Assuming df is your DataFrame\n\n# Convert 'expense_date' to datetime\ndf['expense_date'] = pd.to_datetime(df['expense_date'])\n\n# Filter rows where 'expense_description' is 'Posters' and 'expense_date' is '2019-09-04'\nfiltered_df = df[(df['expense_description'] == 'Posters') & (df['expense_date'].dt.date == pd.to_datetime('2019-09-04').date())]\n\n# Get the 'cost' of the filtered rows\ncost = filtered_df['cost'].values[0]\n\nprint(f\"The cost for the 'Posters' on 2019/9/4 was ${cost}\")",
    "observation": "IndexError: index 0 is out of bounds for axis 0 with size 0",
    "true_result": "[(67.81,)]",
    "table_infos": "df:\n|    | expense_id        | expense_description   | expense_date   |   cost | approved   | link_to_member    | link_to_budget    |\n|---:|:------------------|:----------------------|:---------------|-------:|:-----------|:------------------|:------------------|\n|  0 | rec017x6R3hQqkLAo | Post Cards, Posters   | 2019-08-20     | 122.06 | true       | rec4BLdZHS2Blfp4v | recvKTAWAFKkVNnXQ |\n"
  },
  {
    "table_paths": ["datasets/BIRD_dev-student_club/income.csv"],
    "query": "What was the notes of the fundraising on 2019/9/14?",
    "cot": "",
    "code": "import numpy as np\nimport pandas as pd\n\n# Assuming df is the dataframe\n\n# Convert date_received to datetime\ndf['date_received'] = pd.to_datetime(df['date_received'])\n\n# Filter dataframe to include only rows where date_received is 2019-09-14\nfiltered_df = df[df['date_received'].dt.date == pd.to_datetime('2019-09-14').date()]\n\n# Select 'notes' column from filtered dataframe\nnotes = filtered_df['notes'].values[0]\n\nprint(f\"The notes of the fundraising on 2019/9/14 were: {notes}\")",
    "observation": "IndexError: index 0 is out of bounds for axis 0 with size 0",
    "true_result": "[('Secured donations to help pay for speaker gifts.',)]",
    "table_infos": "df:\n|    | income_id         | date_received   |   amount | source   | notes   | link_to_member    |\n|---:|:------------------|:----------------|---------:|:---------|:--------|:------------------|\n|  0 | rec0s9ZrO15zhzUeE | 2019-10-17      |       50 | Dues     |         | reccW7q1KkhSKZsea |\n"
  },
  {
    "table_paths": ["datasets/BIRD_dev-student_club/member.csv"],
    "query": "Tell the phone number of \"Carlo Jacobs\".",
    "cot": "",
    "code": "import numpy as np\nimport pandas as pd\n\n# Assuming df is the dataframe 928-4507'],\n    'zip': [55108],\n    'link_to_major': ['recxK3MHQFbR9J5uO']\n}, index=[0])\n\n# Data Processing\ncarlo_jacobs = df[(df['first_name'] == 'Carlo') & (df['last_name'] == 'Jacobs')]\n\n# Declare `final_df` Variable\nfinal_df = carlo_jacobs\n\n# Print the final result\nprint(final_df['phone'].values[0])",
    "observation": "IndexError: index 0 is out of bounds for axis 0 with size 0",
    "true_result": "[('928-555-2577',)]",
    "table_infos": "df:\n|    | member_id         | first_name   | last_name   | email                  | position   | t_shirt_size   | phone          |   zip | link_to_major     |\n|---:|:------------------|:-------------|:------------|:-----------------------|:-----------|:---------------|:---------------|------:|:------------------|\n|  0 | rec1x5zBFIqoOuPW8 | Angela       | Sanders     | angela.sanders@lpu.edu | Member     | Medium         | (651) 928-4507 | 55108 | recxK3MHQFbR9J5uO |\n"
  },
  {
    "table_paths": [
      "datasets/BIRD_dev-student_club/member.csv",
      "datasets/BIRD_dev-student_club/zip_code.csv"
    ],
    "query": "State the name of students from Georgetown, South Carolina.",
    "cot": "",
    "code": "import pandas as pd\n\n# Assuming df1 and df2 are the dataframes 928-4507', '403-555-1310', '442-555-5882'],\n    'zip': [55108, 29440, 10002],\n    'link_to_major': ['recxK3MHQFbR9J5uO', 'rec7BxKpjJ7bNph3O', 'recdIBgeU38UbV2sy']\n})\n\n# Merge df1 and df2 on 'zip'\ndf = pd.merge(df1, df2, on='zip')\n\n# Filter the dataframe to get the names of students from Georgetown, South Carolina\ngeorgetown_students = df[(df['city'] == 'Georgetown') & (df['state'] == 'South Carolina')]['first_name']\n\nprint(georgetown_students)",
    "observation": "KeyError: 'zip'",
    "true_result": "[('Grant', 'Gilmour')]",
    "table_infos": "df1:\n|    | member_id         | first_name   | last_name   | email                  | position   | t_shirt_size   | phone          |   zip | link_to_major     |\n|---:|:------------------|:-------------|:------------|:-----------------------|:-----------|:---------------|:---------------|------:|:------------------|\n|  0 | rec1x5zBFIqoOuPW8 | Angela       | Sanders     | angela.sanders@lpu.edu | Member     | Medium         | (651) 928-4507 | 55108 | recxK3MHQFbR9J5uO |\n|  1 | rec280Sk7o31iG0Tx | Grant        | Gilmour     | grant.gilmour@lpu.edu  | Member     | X-Large        | 403-555-1310   | 29440 | rec7BxKpjJ7bNph3O |\n|  2 | rec28ORZgcm1dtqBZ | Luisa        | Guidi       | luisa.guidi@lpu.edu    | Member     | Medium         | 442-555-5882   | 10002 | recdIBgeU38UbV2sy |\ndf2:\n|    |   zip_code | type     | city       | county             | state       | short_state   |\n|---:|-----------:|:---------|:-----------|:-------------------|:------------|:--------------|\n|  0 |        501 | Unique   | Holtsville | Suffolk County     | New York    | NY            |\n|  1 |        544 | Unique   | Holtsville | Suffolk County     | New York    | NY            |\n|  2 |        601 | Standard | Adjuntas   | Adjuntas Municipio | Puerto Rico | PR            |\nForeign keys:\ndf1.zip = df2.zip_code\n"
  },
  {
    "table_paths": [
      "datasets/BIRD_dev-student_club/event.csv",
      "datasets/BIRD_dev-student_club/budget.csv",
      "datasets/BIRD_dev-student_club/expense.csv"
    ],
    "query": "What is the total expense for the Yearly Kickoff?",
    "cot": "\nTo solve this problem, we need to join df3 and df2 on link_to_budget. Then, we need to filter the dataframe to include only the rows where the event_name is 'Yearly Kickoff'. After that, we can sum the 'cost' column to get the total expense for the 'Yearly Kickoff'.\n",
    "code": "import numpy as np\nimport pandas as pd\n\n# Join df3 and df2 on link_to_budget\ndf = pd.merge(df3, df2, left_on='link_to_budget', right_on='budget_id', how='inner')\n\n# Filter the dataframe to include only the rows where the event_name is 'Yearly Kickoff'\ndf = df[df['event_name'] == 'Yearly Kickoff']\n\n# Sum the 'cost' column to get the total expense for the 'Yearly Kickoff'\ntotal_expense = df['cost'].sum()\n\nprint(f\"The total expense for the Yearly Kickoff is ${total_expense}\")",
    "observation": "KeyError: 'event_name'",
    "true_result": "[(449.13,)]",
    "table_infos": "df1:\n|    | event_id          | event_name                 | event_date          | type     | notes                                                         | location   | status   |\n|---:|:------------------|:---------------------------|:--------------------|:---------|:--------------------------------------------------------------|:-----------|:---------|\n|  0 | rec0Si5cQ4rJRVzd6 | March Meeting              | 2020-03-10T12:00:00 | Meeting  |                                                               | MU 215     | Open     |\n|  1 | rec0akZnLLpGUloLH | Officers meeting - January | 2020-01-14T09:30:00 | Meeting  |                                                               |            | Open     |\n|  2 | rec0dZPcWXF0QjNnE | Spring Elections           | 2019-11-24T09:00:00 | Election | All active members can vote for new officers between 4pm-8pm. | MU 215     | Open     |\ndf2:\n|    | budget_id         | category      |   spent |   remaining |   amount | event_status   | link_to_event     |\n|---:|:------------------|:--------------|--------:|------------:|---------:|:---------------|:------------------|\n|  0 | rec0QmEc3cSQFQ6V2 | Advertisement |   67.81 |        7.19 |       75 | Closed         | recI43CzsZ0Q625ma |\n|  1 | rec1bG6HSft7XIvTP | Food          |  121.14 |       28.86 |      150 | Closed         | recggMW2eyCYceNcy |\n|  2 | rec1z6ISJU2HdIsVm | Food          |   20.2  |       -0.2  |       20 | Closed         | recJ4Witp9tpjaugn |\ndf3:\n|    | expense_id        | expense_description   | expense_date   |   cost | approved   | link_to_member    | link_to_budget    |\n|---:|:------------------|:----------------------|:---------------|-------:|:-----------|:------------------|:------------------|\n|  0 | rec017x6R3hQqkLAo | Post Cards, Posters   | 2019-08-20     | 122.06 | true       | rec4BLdZHS2Blfp4v | recvKTAWAFKkVNnXQ |\n|  1 | rec1nIjoZKTYayqZ6 | Water, Cookies        | 2019-10-08     |  20.2  | true       | recro8T1MPMwRadVH | recy8KY5bUdzF81vv |\n|  2 | rec1oMgNFt7Y0G40x | Pizza                 | 2019-09-10     |  51.81 | true       | recD078PnS3x2doBe | recwXIiKoBMjXJsGZ |\nForeign keys:\ndf2.link_to_event = df1.event_id,df3.link_to_budget = df2.budget_id\n"
  },
  {
    "table_paths": [
      "datasets/BIRD_dev-student_club/event.csv",
      "datasets/BIRD_dev-student_club/budget.csv",
      "datasets/BIRD_dev-student_club/expense.csv",
      "datasets/BIRD_dev-student_club/member.csv"
    ],
    "query": "Which student has been entrusted to manage the budget for the Yearly Kickoff?",
    "cot": "\nTo find out which student has been entrusted to manage the budget for the Yearly Kickoff, we need to find the event with the name \"Yearly Kickoff\" and then find the member associated with that event.\n",
    "code": "import numpy as np\nimport pandas as pd\n\n# Load the dataframes\n\n\n\n\n\n# Merge the dataframes based on the foreign keys\ndf = pd.merge(df1, df2, how='left', left_on='event_id', right_on='link_to_event')\ndf = pd.merge(df, df3, how='left', left_on='event_id', right_on='link_to_event')\ndf = pd.merge(df, df4, how='left', left_on='member_id', right_on='link_to_member')\n\n# Filter the dataframe to find the event with the name \"Yearly Kickoff\"\nyearly_kickoff = df[df['event_name'] == 'Yearly Kickoff']\n\n# Get the first_name and last_name of the member associated with the \"Yearly Kickoff\" event\nmember_name = yearly_kickoff[['first_name', 'last_name']].iloc[0]\n\n# Print the result\nprint(f\"The student entrusted to manage the budget for the Yearly Kickoff is {member_name['first_name']} {member_name['last_name']}\")",
    "observation": "KeyError: 'link_to_event'",
    "true_result": "[('Sacha', 'Harrison'), ('Elijah', 'Allen'), ('Elijah', 'Allen'), ('Sacha', 'Harrison')]",
    "table_infos": "df1:\n|    | event_id          | event_name                 | event_date          | type     | notes                                                         | location   | status   |\n|---:|:------------------|:---------------------------|:--------------------|:---------|:--------------------------------------------------------------|:-----------|:---------|\n|  0 | rec0Si5cQ4rJRVzd6 | March Meeting              | 2020-03-10T12:00:00 | Meeting  |                                                               | MU 215     | Open     |\n|  1 | rec0akZnLLpGUloLH | Officers meeting - January | 2020-01-14T09:30:00 | Meeting  |                                                               |            | Open     |\n|  2 | rec0dZPcWXF0QjNnE | Spring Elections           | 2019-11-24T09:00:00 | Election | All active members can vote for new officers between 4pm-8pm. | MU 215     | Open     |\ndf2:\n|    | budget_id         | category      |   spent |   remaining |   amount | event_status   | link_to_event     |\n|---:|:------------------|:--------------|--------:|------------:|---------:|:---------------|:------------------|\n|  0 | rec0QmEc3cSQFQ6V2 | Advertisement |   67.81 |        7.19 |       75 | Closed         | recI43CzsZ0Q625ma |\n|  1 | rec1bG6HSft7XIvTP | Food          |  121.14 |       28.86 |      150 | Closed         | recggMW2eyCYceNcy |\n|  2 | rec1z6ISJU2HdIsVm | Food          |   20.2  |       -0.2  |       20 | Closed         | recJ4Witp9tpjaugn |\ndf3:\n|    | expense_id        | expense_description   | expense_date   |   cost | approved   | link_to_member    | link_to_budget    |\n|---:|:------------------|:----------------------|:---------------|-------:|:-----------|:------------------|:------------------|\n|  0 | rec017x6R3hQqkLAo | Post Cards, Posters   | 2019-08-20     | 122.06 | true       | rec4BLdZHS2Blfp4v | recvKTAWAFKkVNnXQ |\n|  1 | rec1nIjoZKTYayqZ6 | Water, Cookies        | 2019-10-08     |  20.2  | true       | recro8T1MPMwRadVH | recy8KY5bUdzF81vv |\n|  2 | rec1oMgNFt7Y0G40x | Pizza                 | 2019-09-10     |  51.81 | true       | recD078PnS3x2doBe | recwXIiKoBMjXJsGZ |\ndf4:\n|    | member_id         | first_name   | last_name   | email                  | position   | t_shirt_size   | phone          |   zip | link_to_major     |\n|---:|:------------------|:-------------|:------------|:-----------------------|:-----------|:---------------|:---------------|------:|:------------------|\n|  0 | rec1x5zBFIqoOuPW8 | Angela       | Sanders     | angela.sanders@lpu.edu | Member     | Medium         | (651) 928-4507 | 55108 | recxK3MHQFbR9J5uO |\n|  1 | rec280Sk7o31iG0Tx | Grant        | Gilmour     | grant.gilmour@lpu.edu  | Member     | X-Large        | 403-555-1310   | 29440 | rec7BxKpjJ7bNph3O |\n|  2 | rec28ORZgcm1dtqBZ | Luisa        | Guidi       | luisa.guidi@lpu.edu    | Member     | Medium         | 442-555-5882   | 10002 | recdIBgeU38UbV2sy |\nForeign keys:\ndf2.link_to_event = df1.event_id,df3.link_to_member = df4.member_id,df3.link_to_budget = df2.budget_id\n"
  },
  {
    "table_paths": [
      "datasets/BIRD_dev-student_club/member.csv",
      "datasets/BIRD_dev-student_club/income.csv"
    ],
    "query": "Which students manage to generate the highest income. State his/her full name along with the income source.",
    "cot": "\nWe need to join df1 and df2 on the link_to_member column. Then, we can group by the full name and income source, and sum the amount to get the total income for each student. The student with the highest total income will be the one who generates the highest income.\n",
    "code": "import numpy as np\nimport pandas as pd\n\n# Merge df1 and df2 on link_to_member\nmerged_df = pd.merge(df1, df2, left_on='link_to_member', right_on='income_id')\n\n# Group by full name and income source, and sum the amount\ngrouped_df = merged_df.groupby(['first_name', 'last_name', 'source'])['amount'].sum().reset_index()\n\n# Get the row with the highest total income\nhighest_income_row = grouped_df.loc[grouped_df['amount'].idxmax()]\n\n# Print the full name and income source of the student with the highest income\nprint(f\"The student who generates the highest income is {highest_income_row['first_name']} {highest_income_row['last_name']} from the {highest_income_row['source']} source.\")",
    "observation": "KeyError: 'link_to_member'",
    "true_result": "[('Connor', 'Hilton', 'Dues')]",
    "table_infos": "df1:\n|    | member_id         | first_name   | last_name   | email                  | position   | t_shirt_size   | phone          |   zip | link_to_major     |\n|---:|:------------------|:-------------|:------------|:-----------------------|:-----------|:---------------|:---------------|------:|:------------------|\n|  0 | rec1x5zBFIqoOuPW8 | Angela       | Sanders     | angela.sanders@lpu.edu | Member     | Medium         | (651) 928-4507 | 55108 | recxK3MHQFbR9J5uO |\n|  1 | rec280Sk7o31iG0Tx | Grant        | Gilmour     | grant.gilmour@lpu.edu  | Member     | X-Large        | 403-555-1310   | 29440 | rec7BxKpjJ7bNph3O |\n|  2 | rec28ORZgcm1dtqBZ | Luisa        | Guidi       | luisa.guidi@lpu.edu    | Member     | Medium         | 442-555-5882   | 10002 | recdIBgeU38UbV2sy |\ndf2:\n|    | income_id         | date_received   |   amount | source   | notes   | link_to_member    |\n|---:|:------------------|:----------------|---------:|:---------|:--------|:------------------|\n|  0 | rec0s9ZrO15zhzUeE | 2019-10-17      |       50 | Dues     |         | reccW7q1KkhSKZsea |\n|  1 | rec7f5XMQZexgtQJo | 2019-09-04      |       50 | Dues     |         | recTjHY5xXhvkCdVT |\n|  2 | rec8BUJa8GXUjiglg | 2019-10-08      |       50 | Dues     |         | recUdRhbhcEO1Hk5r |\nForeign keys:\ndf2.link_to_member = df1.member_id\n"
  },
  {
    "table_paths": [
      "datasets/BIRD_dev-student_club/event.csv",
      "datasets/BIRD_dev-student_club/attendance.csv"
    ],
    "query": "How many members did attend the event 'Community Theater' in 2019?",
    "cot": "To solve this problem, we need to filter the data in df1 to get the events in 2019 and then join this filtered data with df2 to get the number of members who attended the event.\n",
    "code": "import numpy as np\nimport pandas as pd\n\n# Convert event_date to datetime\ndf1['event_date'] = pd.to_datetime(df1['event_date'])\n\n# Filter df1 to get events in 2019\ndf1_2019 = df1[df1['event_date'].dt.year == 2019]\n\n# Merge df1_2019 and df2 on link_to_event\ndf_merged = pd.merge(df1_2019, df2, on='link_to_event')\n\n# Count the number of unique members who attended the event\nnum_members = df_merged['link_to_member'].nunique()\n\nprint(f\"The number of members who attended the event in 2019 is {num_members}\")",
    "observation": "KeyError: 'link_to_event'",
    "true_result": "[(17,)]",
    "table_infos": "df1:\n|    | event_id          | event_name                 | event_date          | type     | notes                                                         | location   | status   |\n|---:|:------------------|:---------------------------|:--------------------|:---------|:--------------------------------------------------------------|:-----------|:---------|\n|  0 | rec0Si5cQ4rJRVzd6 | March Meeting              | 2020-03-10T12:00:00 | Meeting  |                                                               | MU 215     | Open     |\n|  1 | rec0akZnLLpGUloLH | Officers meeting - January | 2020-01-14T09:30:00 | Meeting  |                                                               |            | Open     |\n|  2 | rec0dZPcWXF0QjNnE | Spring Elections           | 2019-11-24T09:00:00 | Election | All active members can vote for new officers between 4pm-8pm. | MU 215     | Open     |\ndf2:\n|    | link_to_event     | link_to_member    |\n|---:|:------------------|:------------------|\n|  0 | rec2N69DMcrqN9PJC | recD078PnS3x2doBe |\n|  1 | rec2N69DMcrqN9PJC | recP6DJPyi5donvXL |\n|  2 | rec2N69DMcrqN9PJC | rec28ORZgcm1dtqBZ |\nForeign keys:\ndf2.link_to_event = df1.event_id\n"
  },
  {
    "table_paths": [
      "datasets/BIRD_dev-student_club/event.csv",
      "datasets/BIRD_dev-student_club/budget.csv",
      "datasets/BIRD_dev-student_club/expense.csv"
    ],
    "query": "Identify the type of expenses and their total value approved for 'October Meeting' event.",
    "cot": "\nTo solve this problem, we need to join df1, df3 and df2 on the appropriate columns. Then, we need to filter the data for the 'October Meeting' event. After that, we can group by 'expense_description' and sum the 'cost' column to get the total value of each type of expense.\n",
    "code": "import numpy as np\nimport pandas as pd\n\n# Merge df1, df3 and df2 on the appropriate columns\ndf = pd.merge(df1, df3, left_on='event_id', right_on='link_to_event')\ndf = pd.merge(df, df2, left_on='budget_id', right_on='link_to_budget')\n\n# Filter the data for the 'October Meeting' event\ndf = df[df['event_name'] == 'October Meeting']\n\n# Group by 'expense_description' and sum the 'cost' column\nresult = df.groupby('expense_description')['cost'].sum().reset_index()\n\n# Print the result\nprint(result)",
    "observation": "KeyError: 'link_to_event'",
    "true_result": "[('Meeting', 175.39)]",
    "table_infos": "df1:\n|    | event_id          | event_name                 | event_date          | type     | notes                                                         | location   | status   |\n|---:|:------------------|:---------------------------|:--------------------|:---------|:--------------------------------------------------------------|:-----------|:---------|\n|  0 | rec0Si5cQ4rJRVzd6 | March Meeting              | 2020-03-10T12:00:00 | Meeting  |                                                               | MU 215     | Open     |\n|  1 | rec0akZnLLpGUloLH | Officers meeting - January | 2020-01-14T09:30:00 | Meeting  |                                                               |            | Open     |\n|  2 | rec0dZPcWXF0QjNnE | Spring Elections           | 2019-11-24T09:00:00 | Election | All active members can vote for new officers between 4pm-8pm. | MU 215     | Open     |\ndf2:\n|    | budget_id         | category      |   spent |   remaining |   amount | event_status   | link_to_event     |\n|---:|:------------------|:--------------|--------:|------------:|---------:|:---------------|:------------------|\n|  0 | rec0QmEc3cSQFQ6V2 | Advertisement |   67.81 |        7.19 |       75 | Closed         | recI43CzsZ0Q625ma |\n|  1 | rec1bG6HSft7XIvTP | Food          |  121.14 |       28.86 |      150 | Closed         | recggMW2eyCYceNcy |\n|  2 | rec1z6ISJU2HdIsVm | Food          |   20.2  |       -0.2  |       20 | Closed         | recJ4Witp9tpjaugn |\ndf3:\n|    | expense_id        | expense_description   | expense_date   |   cost | approved   | link_to_member    | link_to_budget    |\n|---:|:------------------|:----------------------|:---------------|-------:|:-----------|:------------------|:------------------|\n|  0 | rec017x6R3hQqkLAo | Post Cards, Posters   | 2019-08-20     | 122.06 | true       | rec4BLdZHS2Blfp4v | recvKTAWAFKkVNnXQ |\n|  1 | rec1nIjoZKTYayqZ6 | Water, Cookies        | 2019-10-08     |  20.2  | true       | recro8T1MPMwRadVH | recy8KY5bUdzF81vv |\n|  2 | rec1oMgNFt7Y0G40x | Pizza                 | 2019-09-10     |  51.81 | true       | recD078PnS3x2doBe | recwXIiKoBMjXJsGZ |\nForeign keys:\ndf2.link_to_event = df1.event_id,df3.link_to_budget = df2.budget_id\n"
  },
  {
    "table_paths": [
      "datasets/BIRD_dev-student_club/event.csv",
      "datasets/BIRD_dev-student_club/budget.csv"
    ],
    "query": "Calculate the amount budgeted for 'April Speaker' event. List all the budgeted categories for said event in an ascending order based on their amount.",
    "cot": "\nTo solve this problem, we need to join df1 and df2 on the event_id column. Then, we filter the dataframe to only include rows where the event_name is 'April Speaker'. After that, we group the dataframe by the category column and sum the amount column. Finally, we sort the dataframe by the amount column in ascending order.\n",
    "code": "import numpy as np\nimport pandas as pd\n\n# Assuming df1 and df2 are the dataframes\ndf = pd.merge(df1, df2, on='event_id')\ndf = df[df['event_name'] == 'April Speaker']\namount_budgeted = df['amount'].sum()\ndf = df.groupby('category')['amount'].sum().reset_index()\ndf = df.sort_values('amount')\n\nfinal_df = df\n\n# Print the final result\nprint(final_df)",
    "observation": "KeyError: 'event_id'",
    "true_result": "[(260, 'Speaker Gifts')]",
    "table_infos": "df1:\n|    | event_id          | event_name                 | event_date          | type     | notes                                                         | location   | status   |\n|---:|:------------------|:---------------------------|:--------------------|:---------|:--------------------------------------------------------------|:-----------|:---------|\n|  0 | rec0Si5cQ4rJRVzd6 | March Meeting              | 2020-03-10T12:00:00 | Meeting  |                                                               | MU 215     | Open     |\n|  1 | rec0akZnLLpGUloLH | Officers meeting - January | 2020-01-14T09:30:00 | Meeting  |                                                               |            | Open     |\n|  2 | rec0dZPcWXF0QjNnE | Spring Elections           | 2019-11-24T09:00:00 | Election | All active members can vote for new officers between 4pm-8pm. | MU 215     | Open     |\ndf2:\n|    | budget_id         | category      |   spent |   remaining |   amount | event_status   | link_to_event     |\n|---:|:------------------|:--------------|--------:|------------:|---------:|:---------------|:------------------|\n|  0 | rec0QmEc3cSQFQ6V2 | Advertisement |   67.81 |        7.19 |       75 | Closed         | recI43CzsZ0Q625ma |\n|  1 | rec1bG6HSft7XIvTP | Food          |  121.14 |       28.86 |      150 | Closed         | recggMW2eyCYceNcy |\n|  2 | rec1z6ISJU2HdIsVm | Food          |   20.2  |       -0.2  |       20 | Closed         | recJ4Witp9tpjaugn |\nForeign keys:\ndf2.link_to_event = df1.event_id\n"
  },
  {
    "table_paths": [
      "datasets/BIRD_dev-student_club/event.csv",
      "datasets/BIRD_dev-student_club/budget.csv"
    ],
    "query": "What is the category of event which was taken place in 2020-03-24T12:00:00?",
    "cot": "\nWe need to join df1 and df2 on the event_id column. Then, we filter the dataframe to include only the rows where the event_date is 2020-03-24T12:00:00. Finally, we select the category column from the resulting dataframe.\n",
    "code": "import numpy as np\nimport pandas as pd\n\n# Assuming df1 and df2 are the dataframes\n\n# Join df1 and df2 on event_id\ndf = pd.merge(df1, df2, on='event_id')\n\n# Filter the dataframe to include only the rows where the event_date is 2020-03-24T12:00:00\ndf = df[df['event_date'] == '2020-03-24T12:00:00']\n\n# Select the category column from the resulting dataframe\ncategory = df['category'].values[0]\n\n# Print the category\nprint(category)",
    "observation": "KeyError: 'event_id'",
    "true_result": "[('Food',), ('Speaker Gifts',), ('Advertisement',), ('Parking',)]",
    "table_infos": "df1:\n|    | event_id          | event_name                 | event_date          | type     | notes                                                         | location   | status   |\n|---:|:------------------|:---------------------------|:--------------------|:---------|:--------------------------------------------------------------|:-----------|:---------|\n|  0 | rec0Si5cQ4rJRVzd6 | March Meeting              | 2020-03-10T12:00:00 | Meeting  |                                                               | MU 215     | Open     |\n|  1 | rec0akZnLLpGUloLH | Officers meeting - January | 2020-01-14T09:30:00 | Meeting  |                                                               |            | Open     |\n|  2 | rec0dZPcWXF0QjNnE | Spring Elections           | 2019-11-24T09:00:00 | Election | All active members can vote for new officers between 4pm-8pm. | MU 215     | Open     |\ndf2:\n|    | budget_id         | category      |   spent |   remaining |   amount | event_status   | link_to_event     |\n|---:|:------------------|:--------------|--------:|------------:|---------:|:---------------|:------------------|\n|  0 | rec0QmEc3cSQFQ6V2 | Advertisement |   67.81 |        7.19 |       75 | Closed         | recI43CzsZ0Q625ma |\n|  1 | rec1bG6HSft7XIvTP | Food          |  121.14 |       28.86 |      150 | Closed         | recggMW2eyCYceNcy |\n|  2 | rec1z6ISJU2HdIsVm | Food          |   20.2  |       -0.2  |       20 | Closed         | recJ4Witp9tpjaugn |\nForeign keys:\ndf2.link_to_event = df1.event_id\n"
  },
  {
    "table_paths": [
      "datasets/BIRD_dev-student_club/event.csv",
      "datasets/BIRD_dev-student_club/budget.csv"
    ],
    "query": "What are the budget category of the events located at MU 215 and a guest speaker type with a 0 budget spent?",
    "cot": "\nWe need to join df1 and df2 on the event_id column. Then, we need to filter the dataframe to only include events located at MU 215 and with a type of Meeting. We also need to filter df2 to only include budget categories where the spent amount is 0.\n",
    "code": "import numpy as np\nimport pandas as pd\n\n# Assuming df1 and df2 are the dataframes\n\n# Merge df1 and df2 on event_id\nmerged_df = pd.merge(df1, df2, left_on='event_id', right_on='link_to_event')\n\n# Filter the merged dataframe to only include events located at MU 215 and with a type of Meeting\nfiltered_df = merged_df[(merged_df['location'] == 'MU 215') & (merged_df['type'] == 'Meeting')]\n\n# Filter df2 to only include budget categories where the spent amount is 0\nbudget_df = df2[df2['spent'] == 0]\n\n# Merge budget_df and filtered_df on event_id\nfinal_df = pd.merge(budget_df, filtered_df, left_on='link_to_event', right_on='event_id')\n\n# Print the final result\nprint(final_df['category'])",
    "observation": "KeyError: 'category'",
    "true_result": "[('Speaker Gifts', 'Guest Speaker'), ('Food', 'Guest Speaker'), ('Parking', 'Guest Speaker'), ('Advertisement', 'Guest Speaker')]",
    "table_infos": "df1:\n|    | event_id          | event_name                 | event_date          | type     | notes                                                         | location   | status   |\n|---:|:------------------|:---------------------------|:--------------------|:---------|:--------------------------------------------------------------|:-----------|:---------|\n|  0 | rec0Si5cQ4rJRVzd6 | March Meeting              | 2020-03-10T12:00:00 | Meeting  |                                                               | MU 215     | Open     |\n|  1 | rec0akZnLLpGUloLH | Officers meeting - January | 2020-01-14T09:30:00 | Meeting  |                                                               |            | Open     |\n|  2 | rec0dZPcWXF0QjNnE | Spring Elections           | 2019-11-24T09:00:00 | Election | All active members can vote for new officers between 4pm-8pm. | MU 215     | Open     |\ndf2:\n|    | budget_id         | category      |   spent |   remaining |   amount | event_status   | link_to_event     |\n|---:|:------------------|:--------------|--------:|------------:|---------:|:---------------|:------------------|\n|  0 | rec0QmEc3cSQFQ6V2 | Advertisement |   67.81 |        7.19 |       75 | Closed         | recI43CzsZ0Q625ma |\n|  1 | rec1bG6HSft7XIvTP | Food          |  121.14 |       28.86 |      150 | Closed         | recggMW2eyCYceNcy |\n|  2 | rec1z6ISJU2HdIsVm | Food          |   20.2  |       -0.2  |       20 | Closed         | recJ4Witp9tpjaugn |\nForeign keys:\ndf2.link_to_event = df1.event_id\n"
  },
  {
    "table_paths": [
      "datasets/BIRD_dev-student_club/member.csv",
      "datasets/BIRD_dev-student_club/income.csv"
    ],
    "query": "Among the members with t-shirt size of medium, what is the percentage of the amount 50 received by the Student_Club?",
    "cot": "\nTo solve this problem, we need to join df1 and df2 on the link_to_member column. Then, we need to filter the dataframe to only include members with a t-shirt size of medium. After that, we can calculate the percentage of the amount 50 received by the Student_Club.\n",
    "code": "import numpy as np\nimport pandas as pd\n\n# Merge df1 and df2 on link_to_member\nmerged_df = pd.merge(df1, df2, left_on='link_to_member', right_on='member_id')\n\n# Filter the dataframe to only include members with a t-shirt size of medium\nfiltered_df = merged_df[merged_df['t_shirt_size'] == 'Medium']\n\n# Calculate the total amount received by the Student_Club\ntotal_amount = filtered_df['amount'].sum()\n\n# Calculate the percentage of the amount 50 received by the Student_Club\npercentage = (50 / total_amount) * 100\n\n# Print the result\nprint(f\"The percentage of the amount 50 received by the Student_Club among the members with t-shirt size of medium is {percentage}%\")",
    "observation": "KeyError: 'member_id'",
    "true_result": "[(100.0,)]",
    "table_infos": "df1:\n|    | member_id         | first_name   | last_name   | email                  | position   | t_shirt_size   | phone          |   zip | link_to_major     |\n|---:|:------------------|:-------------|:------------|:-----------------------|:-----------|:---------------|:---------------|------:|:------------------|\n|  0 | rec1x5zBFIqoOuPW8 | Angela       | Sanders     | angela.sanders@lpu.edu | Member     | Medium         | (651) 928-4507 | 55108 | recxK3MHQFbR9J5uO |\n|  1 | rec280Sk7o31iG0Tx | Grant        | Gilmour     | grant.gilmour@lpu.edu  | Member     | X-Large        | 403-555-1310   | 29440 | rec7BxKpjJ7bNph3O |\n|  2 | rec28ORZgcm1dtqBZ | Luisa        | Guidi       | luisa.guidi@lpu.edu    | Member     | Medium         | 442-555-5882   | 10002 | recdIBgeU38UbV2sy |\ndf2:\n|    | income_id         | date_received   |   amount | source   | notes   | link_to_member    |\n|---:|:------------------|:----------------|---------:|:---------|:--------|:------------------|\n|  0 | rec0s9ZrO15zhzUeE | 2019-10-17      |       50 | Dues     |         | reccW7q1KkhSKZsea |\n|  1 | rec7f5XMQZexgtQJo | 2019-09-04      |       50 | Dues     |         | recTjHY5xXhvkCdVT |\n|  2 | rec8BUJa8GXUjiglg | 2019-10-08      |       50 | Dues     |         | recUdRhbhcEO1Hk5r |\nForeign keys:\ndf2.link_to_member = df1.member_id\n"
  },
  {
    "table_paths": ["datasets/BIRD_dev-student_club/zip_code.csv"],
    "query": "Which countries have zip codes with post office boxes?",
    "cot": "",
    "code": "import numpy as np\nimport pandas as pd\n\n# Assuming df is your original dataframe and post_office_df is another dataframe that includes post office box zip codes\n\ndf = pd.merge(df, post_office_df, on='zip_code', how='left')\n\n# Now df includes a new column 'is_post_office_box' that is True for post office box zip codes and False otherwise\n\npost_office_countries = df[df['is_post_office_box'] == True]['country'].unique()\n\nprint(post_office_countries)",
    "observation": "KeyError: 'country'",
    "true_result": "[('Lares Municipio',), ('Vega Baja Municipio',), ('Culebra Municipio',), ('Aibonito Municipio',), ('San Juan Municipio',), ('San Juan',), ('Dorado Municipio',), ('Toa Baja Municipio',), ('Toa Alta',), ('Bayamon',), ('Bayamon Municipio',), ('Catano',), ('Carolina',), ('Hampshire County',), ('Hampden County',), ('Berkshire County',), ('Worcester County',), ('Franklin County',), ('Middlesex County',), ('Essex County',), ('Plymouth County',), ('Norfolk County',), ('Suffolk County',), ('Bristol County',), ('Barnstable County',), ('Dukes County',), ('Nantucket County',), ('Newport County',), ('Providence County',), ('Washington County',), ('Kent County',), ('Rockingham County',), ('Hillsborough County',), ('Grafton County',), ('Merrimack County',), ('Belknap County',), ('Cheshire County',), ('Coos County',), ('Coös County',), ('Sullivan County',), ('Strafford County',), ('Carroll County',), ('York County',), ('Oxford County',), ('Cumberland County',), ('Androscoggin County',), ('Kennebec County',), ('Lincoln County',), ('Penobscot County',), ('Piscataquis County',), ('Hancock County',), ('Sagadahoc County',), ('Knox County',), ('Aroostook County',), ('Waldo County',), ('Somerset County',), ('Windsor County',), ('Caledonia County',), ('Orange County',), ('Windham County',), ('Bennington County',), ('Chittenden County',), ('Addison County',), ('Lamoille County',), ('Rutland County',), ('Orleans County',), ('Hartford County',), ('Litchfield County',), ('Tolland County',), ('New London County',), ('Fairfield County',), ('New Haven County',), ('Passaic County',), ('Union County',), ('Hudson County',), ('Sussex County',), ('Bergen County',), ('Monmouth County',), ('Morris County',), ('Warren County',), ('Hunterdon County',), ('Salem County',), ('Ocean County',), ('Burlington County',), ('Camden County',), ('Gloucester County',), ('Cape May County',), ('Atlantic County',), ('Mercer County',), ('New York County',), ('Richmond County',), ('Westchester County',), ('Putnam County',), ('Rockland County',), ('Queens County',), ('Nassau County',), ('Kings County',), ('Montgomery County',), ('Rensselaer County',), ('Albany County',), ('Columbia County',), ('Schoharie County',), ('Greene County',), ('Schenectady County',), ('Ulster County',), ('Delaware County',), ('Dutchess County',), ('Hamilton County',), ('Saratoga County',), ('St. Lawrence County',), ('Clinton County',), ('Onondaga County',), ('Cayuga County',), ('Madison County',), ('Cortland County',), ('Tompkins County',), ('Seneca County',), ('Oswego County',), ('Oneida County',), ('Wayne County',), ('Lewis County',), ('Otsego County',), ('Herkimer County',), ('Jefferson County',), ('St Lawrence County',), ('Broome County',), ('Chenango County',), ('Tioga County',), ('Erie County',), ('Genesee County',), ('Allegany County',), ('Niagara County',), ('Wyoming County',), ('Cattaraugus County',), ('Chautauqua County',), ('Monroe County',), ('Ontario County',), ('Livingston County',), ('Steuben County',), ('Yates County',), ('Schuyler County',), ('Chemung County',), ('Allegheny County',), ('Westmoreland County',), ('Beaver County',), ('Fayette County',), ('Monongalia County',), ('Armstrong County',), ('Indiana County',), ('Clearfield County',), ('Cambria County',), ('Elk County',), ('Butler County',), ('Clarion County',), ('Lawrence County',), ('Forest County',), ('Crawford County',), ('McKean County',), ('Venango County',), ('Blair County',), ('Bedford County',), ('Huntingdon County',), ('Centre County',), ('Bradford County',), ('Dauphin County',), ('Lebanon County',), ('Mifflin County',), ('Juniata County',), ('Perry County',), ('Adams County',), ('Lancaster County',), ('Lycoming County',), ('Northumberland County',), ('Snyder County',), ('Montour County',), ('Schuylkill County',), ('Lehigh County',), ('Northampton County',), ('Carbon County',), ('Bucks County',), ('Luzerne County',), ('Pike County',), ('Lackawanna County',), ('Susquehanna County',), ('Philadelphia County',), ('Chester County',), ('Berks County',), ('New Castle County',), ('District of Columbia',), ('Manassas City',), ('Fauquier County',), ('Loudoun County',), ('Fairfax County',), ('Prince William County',), ('Charles County',), ('Calvert County',), (\"St. Mary's County\",), (\"St Mary's County\",), (\"Prince George's County\",), ('Anne Arundel County',), ('Harford County',), ('Baltimore County',), ('Howard County',), ('Baltimore City',), ('Mineral County',), ('Caroline County',), ('Talbot County',), (\"Queen Anne's County\",), ('Dorchester County',), ('Frederick County',), ('Wicomico County',), ('Cecil County',), ('Fairfax City',), ('Falls Church City',), ('Arlington County',), ('Alexandria City',), ('Fredericksburg City',), ('Stafford County',), ('King George County',), ('Spotsylvania County',), ('Winchester City',), ('Rappahannock County',), ('Shenandoah County',), ('Clarke County',), ('Charlottesville City',), ('Albemarle County',), ('Henrico County',), ('Mathews County',), ('Goochland County',), ('James City County',), ('James City',), ('Powhatan County',), ('Amelia County',), ('Charles City',), ('Hanover County',), ('Louisa County',), ('Williamsburg city',), ('Richmond City',), ('Isle of Wight County',), ('Chesapeake City',), ('Accomack County',), ('Suffolk City',), ('Virginia Beach City',), ('Norfolk City',), ('Newport News City',), ('Hampton City',), ('Portsmouth City',), ('Petersburg City',), ('Nottoway County',), ('Brunswick County',), ('Surry County',), ('Appomattox County',), ('Lunenburg County',), ('Prince Edward County',), ('Roanoke City',), ('Roanoke County',), ('Pulaski County',), ('Martinsville City',), ('Radford city',), ('Radford City',), ('Patrick County',), ('Bristol City',), ('Wise County',), ('Lee County',), ('Staunton City',), ('Augusta County',), ('Bath County',), ('Rockbridge County',), ('Botetourt County',), ('Alleghany County',), ('Lynchburg City',), ('Amherst County',), ('Halifax County',), ('Danville City',), ('Campbell County',), ('Tazewell County',), ('Buchanan County',), ('McDowell County',), ('Mingo County',), ('Greenbrier County',), ('Logan County',), ('Kanawha County',), ('Boone County',), ('Clay County',), ('Mason County',), ('Berkeley County',), ('Martin County',), ('Cabell County',), ('Raleigh County',), ('Summers County',), ('Brooke County',), ('Ohio County',), ('Wood County',), ('Pocahontas County',), ('Upshur County',), ('Randolph County',), ('Barbour County',), ('Webster County',), ('Harrison County',), ('Taylor County',), ('Tyler County',), ('Doddridge County',), ('Preston County',), ('Marion County',), ('Nicholas County',), ('Grant County',), ('Pendleton County',), ('Forsyth County',), ('Davie County',), ('Alamance County',), ('Chatham County',), ('Guilford County',), ('Davidson County',), ('Harnett County',), ('Wake County',), ('Johnston County',), ('Granville County',), ('Vance County',), ('Durham County',), ('Nash County',), ('Pitt County',), ('Wilson County',), ('Edgecombe County',), ('Pasquotank County',), ('Dare County',), ('Perquimans County',), ('Hyde County',), ('Bertie County',), ('Gates County',), ('Stanly County',), ('Anson County',), ('Iredell County',), ('Cleveland County',), ('Rutherford County',), ('Cabarrus County',), ('Rowan County',), ('Gaston County',), ('Mecklenburg County',), ('Robeson County',), ('Duplin County',), ('Sampson County',), ('Bladen County',), ('Moore County',), ('Scotland County',), ('New Hanover County',), ('Columbus County',), ('Lenoir County',), ('Pamlico County',), ('Craven County',), ('Jones County',), ('Carteret County',), ('Onslow County',), ('Catawba County',), ('Avery County',), ('Burke County',), ('Caldwell County',), ('Watauga County',), ('Alexander County',), ('Jackson County',), ('Henderson County',), ('Buncombe County',), ('Haywood County',), ('Macon County',), ('Polk County',), ('Yancey County',), ('Mitchell County',), ('Cherokee County',), ('Richland County',), ('Kershaw County',), ('Clarendon County',), ('Sumter County',), ('Lexington County',), ('Darlington County',), ('Orangeburg County',), ('Newberry County',), ('Spartanburg County',), ('Charleston County',), ('Colleton County',), ('Georgetown County',), ('Florence County',), ('Horry County',), ('Dillon County',), ('Marlboro County',), ('Greenville County',), ('Anderson County',), ('Pickens County',), ('Greenwood County',), ('Abbeville County',), ('Oconee County',), ('Aiken County',), ('Barnwell County',), ('McCormick County',), ('Allendale County',), ('Beaufort County',), ('Hampton County',), ('Gwinnett County',), ('Cobb County',), ('Newton County',), ('Walton County',), ('Fulton County',), ('Dekalb County',), ('DeKalb County',), ('Bartow County',), ('Floyd County',), ('Douglas County',), ('Cleburne County',), ('Haralson County',), ('Spalding County',), ('Heard County',), ('Coweta County',), ('Clayton County',), ('Troup County',), ('Evans County',), ('Screven County',), ('Tattnall County',), ('Emanuel County',), ('Candler County',), ('Bulloch County',), ('Toombs County',), ('Hall County',), ('Habersham County',), ('Rabun County',), ('Stephens County',), ('Morgan County',), ('Taliaferro County',), ('Oglethorpe County',), ('Gordon County',), ('Whitfield County',), ('Murray County',), ('Catoosa County',), ('McDuffie County',), ('Wilkinson County',), ('Crisp County',), ('Houston County',), ('Baldwin County',), ('Laurens County',), ('Dooly County',), ('Telfair County',), ('Wilcox County',), ('Bibb County',), ('McIntosh County',), ('Effingham County',), ('Liberty County',), ('Ware County',), ('Appling County',), ('Glynn County',), ('Coffee County',), ('Pierce County',), ('Lowndes County',), ('Clinch County',), ('Cook County',), ('Dougherty County',), ('Thomas County',), ('Colquitt County',), ('Tift County',), ('Irwin County',), ('Stewart County',), ('Muscogee County',), ('Chattahoochee County',), ('St. Johns County',), ('Lafayette County',), ('Baker County',), ('Volusia County',), ('Flagler County',), ('Lake County',), ('Duval County',), ('Leon County',), ('Wakulla County',), ('Gadsden County',), ('Bay County',), ('Holmes County',), ('Gulf County',), ('Escambia County',), ('Santa Rosa County',), ('Okaloosa County',), ('Alachua County',), ('Levy County',), ('Dixie County',), ('Seminole County',), ('Brevard County',), ('Indian River County',), ('Miami-Dade County',), ('Broward County',), ('Palm Beach County',), ('Pasco County',), ('Pinellas County',), ('Highlands County',), ('Osceola County',), ('Charlotte County',), ('Hendry County',), ('Glades County',), ('Collier County',), ('Manatee County',), ('Sarasota County',), ('Desoto County',), ('DeSoto County',), ('Citrus County',), ('Hernando County',), ('St. Lucie County',), ('Okeechobee County',), ('Tallapoosa County',), ('Blount County',), ('Talladega County',), ('Walker County',), ('St. Clair County',), ('Cullman County',), ('Shelby County',), ('St Clair County',), ('Tuscaloosa County',), ('Winston County',), ('Limestone County',), ('Lauderdale County',), ('Colbert County',), ('Etowah County',), ('Marshall County',), ('Autauga County',), ('Covington County',), ('Elmore County',), ('Bullock County',), ('Crenshaw County',), ('Calhoun County',), ('Geneva County',), ('Dale County',), ('Conecuh County',), ('Mobile County',), ('Dallas County',), ('Marengo County',), ('Russell County',), ('Chambers County',), ('Williamson County',), ('Dickson County',), ('Sumner County',), ('Robertson County',), ('Bradley County',), ('Mcminn County',), ('Carter County',), ('Claiborne County',), ('Scott County',), ('Hamblen County',), ('Cocke County',), ('Sevier County',), ('Dyer County',), ('Crockett County',), ('Tipton County',), ('Henry County',), ('Obion County',), ('Gibson County',), ('Hardin County',), ('Hardeman County',), ('McNairy County',), ('Maury County',), ('Giles County',), ('Tate County',), ('Quitman County',), ('Coahoma County',), ('Bolivar County',), ('Issaquena County',), ('Sunflower County',), ('Sharkey County',), ('Pontotoc County',), ('Alcorn County',), ('Chickasaw County',), ('Prentiss County',), ('Grenada County',), ('Leflore County',), ('Tallahatchie County',), ('Rankin County',), ('Hinds County',), ('Simpson County',), ('Copiah County',), ('Attala County',), ('Leake County',), ('Humphreys County',), ('Forrest County',), ('Pearl River County',), ('Jasper County',), ('Oktibbeha County',), ('Decatur County',), ('Grady County',), ('Early County',), ('Terrell County',), ('Nelson County',), ('Bullitt County',), ('Breckinridge County',), ('Jessamine County',), ('Bourbon County',), ('Owen County',), ('Clark County',), ('Garrard County',), ('Boyle County',), ('Rockcastle County',), ('Estill County',), ('Whitley County',), ('Laurel County',), ('Harlan County',), ('Leslie County',), ('Bell County',), ('Kenton County',), ('Fleming County',), ('Bracken County',), ('Boyd County',), ('Johnson County',), ('Wolfe County',), ('Magoffin County',), ('Knott County',), ('Letcher County',), ('Mccracken County',), ('Ballard County',), ('Crittenden County',), ('Graves County',), ('Carlisle County',), ('Barren County',), ('Todd County',), ('Christian County',), ('Daviess County',), ('McLean County',), ('Muhlenberg County',), ('Hopkins County',), ('McCreary County',), ('Adair County',), ('Grayson County',), ('Licking County',), ('Champaign County',), ('Ross County',), ('Hocking County',), ('Pickaway County',), ('Morrow County',), ('Wyandot County',), ('Ottawa County',), ('Lucas County',), ('Williams County',), ('Defiance County',), ('Muskingum County',), ('Noble County',), ('Guernsey County',), ('Belmont County',), ('Coshocton County',), ('Columbiana County',), ('Ashtabula County',), ('Geauga County',), ('Lorain County',), ('Cuyahoga County',), ('Summit County',), ('Portage County',), ('Medina County',), ('Mahoning County',), ('Trumbull County',), ('Stark County',), ('Tuscarawas County',), ('Ashland County',), ('Huron County',), ('Preble County',), ('Highland County',), ('Clermont County',), ('Brown County',), ('Darke County',), ('Miami County',), ('Scioto County',), ('Gallia County',), ('Vinton County',), ('Athens County',), ('Meigs County',), ('Allen County',), ('Van Wert County',), ('Paulding County',), ('Auglaize County',), ('Hendricks County',), ('Rush County',), ('Porter County',), ('LaPorte County',), ('La Porte County',), ('Kosciusko County',), ('Starke County',), ('Elkhart County',), ('St. Joseph County',), ('Huntington County',), ('LaGrange County',), ('Wells County',), ('Lagrange County',), ('Cass County',), ('Wabash County',), ('Switzerland County',), ('Ripley County',), ('Bartholomew County',), ('Jennings County',), ('Spencer County',), ('Dubois County',), ('Warrick County',), ('Vanderburgh County',), ('Vigo County',), ('Parke County',), ('Vermillion County',), ('Tippecanoe County',), ('White County',), ('Fountain County',), ('Benton County',), ('Oakland County',), ('Macomb County',), ('Washtenaw County',), ('Sanilac County',), ('Lapeer County',), ('Shiawassee County',), ('Saginaw County',), ('Midland County',), ('Roscommon County',), ('Clare County',), ('Tuscola County',), ('Iosco County',), ('Isabella County',), ('Ingham County',), ('Montcalm County',), ('Gratiot County',), ('Ionia County',), ('Kalamazoo County',), ('Berrien County',), ('Van Buren County',), ('Barry County',), ('Hillsdale County',), ('Lenawee County',), ('Allegan County',), ('Newaygo County',), ('Mecosta County',), ('Muskegon County',), ('Grand Traverse County',), ('Antrim County',), ('Manistee County',), ('Benzie County',), ('Leelanau County',), ('Charlevoix County',), ('Cheboygan County',), ('Emmet County',), ('Chippewa County',), ('Mackinac County',), ('Marquette County',), ('Alger County',), ('Menominee County',), ('Delta County',), ('Dickinson County',), ('Keweenaw County',), ('Iron County',), ('Houghton County',), ('Ontonagon County',), ('Gogebic County',), ('Audubon County',), ('Story County',), ('Keokuk County',), ('Cerro Gordo County',), ('Winnebago County',), ('Buena Vista County',), ('Black Hawk County',), ('Bremer County',), ('Tama County',), ('Grundy County',), (\"O'Brien County\",), ('Woodbury County',), ('Lyon County',), ('Sioux County',), ('Pottawattamie County',), ('Mills County',), ('Page County',), ('Dubuque County',), ('Winneshiek County',), ('Iowa County',), ('Linn County',), ('Mahaska County',), ('Dodge County',), ('Waukesha County',), ('Sheboygan County',), ('Calumet County',), ('Kenosha County',), ('Walworth County',), ('Racine County',), ('Milwaukee County',), ('Rock County',), ('Dane County',), ('Fond du Lac County',), ('Green Lake County',), ('Sauk County',), ('Juneau County',), ('Outagamie County',), ('Shawano County',), ('Manitowoc County',), ('Door County',), ('Marathon County',), ('Langlade County',), ('La Crosse County',), ('Eau Claire County',), ('Dunn County',), ('Buffalo County',), ('Trempealeau County',), ('Bayfield County',), ('Barron County',), ('Sawyer County',), ('Waupaca County',), ('Waushara County',), ('Chisago County',), ('Dakota County',), ('Isanti County',), ('Pine County',), ('Ramsey County',), ('Hennepin County',), ('Wright County',), ('Sibley County',), ('Sherburne County',), ('Carver County',), ('St. Louis County',), ('Itasca County',), ('Koochiching County',), ('St Louis County',), ('Olmsted County',), ('Winona County',), ('Mower County',), ('Blue Earth County',), ('Freeborn County',), ('Watonwan County',), ('Steele County',), ('Faribault County',), ('Pipestone County',), ('Nobles County',), ('Big Stone County',), ('Redwood County',), ('Stearns County',), ('Mille Lacs County',), ('Morrison County',), ('Hubbard County',), ('Crow Wing County',), ('Becker County',), ('Otter Tail County',), ('Norman County',), ('Beltrami County',), ('Lake of the Woods County',), ('Kittson County',), ('Minnehaha County',), ('Brookings County',), ('Kingsbury County',), ('Codington County',), ('Hutchinson County',), ('Jerauld County',), ('Charles Mix County',), ('Spink County',), ('Corson County',), ('Ziebach County',), ('Dewey County',), ('Pennington County',), ('Meade County',), ('Shannon County',), ('Custer County',), ('Harding County',), ('Fall River County',), ('Grand Forks County',), ('Benson County',), ('Cavalier County',), ('Stutsman County',), ('Burleigh County',), ('Ward County',), ('Park County',), ('Big Horn County',), ('Wheatland County',), ('Rosebud County',), ('Musselshell County',), ('Yellowstone County',), ('Valley County',), ('Sheridan County',), ('Fallon County',), ('Cascade County',), ('Lewis and Clark County',), ('Glacier County',), ('Pondera County',), ('Toole County',), ('Blaine County',), ('Meagher County',), ('Broadwater County',), ('Silver Bow County',), ('Powell County',), ('Gallatin County',), ('Beaverhead County',), ('Deer Lodge County',), ('Missoula County',), ('Ravalli County',), ('Sanders County',), ('Flathead County',), ('McHenry County',), ('Mchenry County',), ('Kane County',), ('Ogle County',), ('Dupage County',), ('Will County',), ('DuPage County',), ('Kendall County',), ('LaSalle County',), ('Kankakee County',), ('Iroquois County',), ('Vermilion County',), ('Ford County',), ('Stephenson County',), ('Whiteside County',), ('Jo Daviess County',), ('Rock Island County',), ('Bureau County',), ('La Salle County',), ('McDonough County',), ('Peoria County',), ('Mclean County',), ('De Witt County',), ('Piatt County',), ('Edgar County',), ('Macoupin County',), ('Jersey County',), ('Bond County',), ('Coles County',), ('Sangamon County',), ('Massac County',), ('Saline County',), ('St. Louis City',), ('St. Charles County',), ('Ralls County',), ('St Francois County',), ('Reynolds County',), ('Cape Girardeau County',), ('Stoddard County',), ('Mississippi County',), ('Pemiscot County',), ('New Madrid County',), ('Dunklin County',), ('Platte County',), ('Worth County',), ('Vernon County',), ('Barton County',), ('McDonald County',), ('Gasconade County',), ('Moniteau County',), ('Cole County',), ('Pettis County',), ('Phelps County',), ('Dent County',), ('Cedar County',), ('Taney County',), ('Stone County',), ('Howell County',), ('Ozark County',), ('Doniphan County',), ('Atchison County',), ('Wyandotte County',), ('Shawnee County',), ('Pottawatomie County',), ('Wabaunsee County',), ('Riley County',), ('Republic County',), ('Sedgwick County',), ('McPherson County',), ('Reno County',), ('Ellis County',), ('Seward County',), ('Thayer County',), ('Scotts Bluff County',), ('Jefferson Parish',), ('Plaquemines Parish',), ('St Bernard Parish',), ('St. John the Baptist Parish',), ('St. Charles Parish',), ('Orleans Parish',), ('Lafourche Parish',), ('St Mary Parish',), ('Terrebonne Parish',), ('St. Mary Parish',), ('Assumption Parish',), ('Tangipahoa Parish',), ('Washington Parish',), ('St. Tammany Parish',), ('St Tammany Parish',), ('Lafayette Parish',), ('Vermilion Parish',), ('Iberia Parish',), ('St. Martin Parish',), ('St Martin Parish',), ('Evangeline Parish',), ('Acadia Parish',), ('St. Landry Parish',), ('St Landry Parish',), ('Calcasieu Parish',), ('Allen Parish',), ('Jefferson Davis Parish',), ('Vernon Parish',), ('East Baton Rouge Parish',), ('Ascension Parish',), ('West Feliciana Parish',), ('Livingston Parish',), ('St. James Parish',), ('Pointe Coupee Parish',), ('Iberville Parish',), ('St James Parish',), ('Caddo Parish',), ('Webster Parish',), ('De Soto Parish',), ('Natchitoches Parish',), ('Bienville Parish',), ('Bossier Parish',), ('Ouachita Parish',), ('Richland Parish',), ('Morehouse Parish',), ('Franklin Parish',), ('Madison Parish',), ('West Carroll Parish',), ('Jackson Parish',), ('Lincoln Parish',), ('Rapides Parish',), ('Avoyelles Parish',), ('Catahoula Parish',), ('Concordia Parish',), ('Winn Parish',), ('Caldwell Parish',), ('Sabine Parish',), ('La Salle Parish',), ('Desha County',), ('Drew County',), ('Hempstead County',), ('Little River County',), ('Nevada County',), ('Miller County',), ('Garland County',), ('Hot Spring County',), ('Faulkner County',), ('Lonoke County',), ('Woodruff County',), ('Prairie County',), ('Conway County',), ('Phillips County',), ('St. Francis County',), ('Poinsett County',), ('Cross County',), ('Craighead County',), ('Independence County',), ('Searcy County',), ('Baxter County',), ('Pope County',), ('Yell County',), ('Sebastian County',), ('Caddo County',), ('Canadian County',), ('McClain County',), ('Oklahoma County',), ('Comanche County',), ('Tillman County',), ('Washita County',), ('Beckham County',), ('Garfield County',), ('Woods County',), ('Woodward County',), ('Texas County',), ('Sherman County',), ('Osage County',), ('Wagoner County',), ('Rogers County',), ('Pawnee County',), ('Tulsa County',), ('Creek County',), ('Payne County',), ('Mayes County',), ('Craig County',), ('Muskogee County',), ('Pittsburg County',), ('Okmulgee County',), ('Haskell County',), ('Pushmataha County',), ('Coal County',), ('Latimer County',), ('Kay County',), ('Bryan County',), ('McCurtain County',), ('Choctaw County',), ('Le Flore County',), ('Sequoyah County',), ('Collin County',), ('Denton County',), ('Kaufman County',), ('Rockwall County',), ('Navarro County',), ('Tarrant County',), ('Hunt County',), ('Fannin County',), ('Lamar County',), ('Titus County',), ('Bowie County',), ('Gregg County',), ('Panola County',), ('Rusk County',), ('Smith County',), ('Nacogdoches County',), ('Freestone County',), ('Trinity County',), ('Angelina County',), ('Parker County',), ('Cooke County',), ('Wichita County',), ('Archer County',), ('Wilbarger County',), ('Erath County',), ('Eastland County',), ('Hood County',), ('Callahan County',), ('Milam County',), ('Coryell County',), ('Hill County',), ('Bosque County',), ('McLennan County',), ('Falls County',), ('Mclennan County',), ('San Saba County',), ('Concho County',), ('Tom Green County',), ('Coke County',), ('Harris County',), ('Matagorda County',), ('Colorado County',), ('Brazoria County',), ('Wharton County',), ('Waller County',), ('Fort Bend County',), ('Austin County',), ('Galveston County',), ('Brazos County',), ('Burleson County',), ('Grimes County',), ('Victoria County',), ('Refugio County',), ('Goliad County',), ('Lavaca County',), ('Kerr County',), ('Webb County',), ('Atascosa County',), ('Bexar County',), ('Bee County',), ('Guadalupe County',), ('Comal County',), ('Karnes County',), ('Jim Wells County',), ('Nueces County',), ('Kenedy County',), ('Live Oak County',), ('San Patricio County',), ('Aransas County',), ('Kleberg County',), ('Hidalgo County',), ('Cameron County',), ('Starr County',), ('Willacy County',), ('Gonzales County',), ('Hays County',), ('Travis County',), ('Uvalde County',), ('Dimmit County',), ('Val Verde County',), ('Maverick County',), ('Zavala County',), ('Gray County',), ('Wheeler County',), ('Oldham County',), ('Potter County',), ('Hale County',), ('Lipscomb County',), ('Deaf Smith County',), ('Ochiltree County',), ('Dallam County',), ('Parmer County',), ('Collingsworth County',), ('Randall County',), ('King County',), ('Cochran County',), ('Hockley County',), ('Lubbock County',), ('Lamb County',), ('Terry County',), ('Lynn County',), ('Scurry County',), ('Pecos County',), ('Loving County',), ('Ector County',), ('Reeves County',), ('Upton County',), ('Winkler County',), ('Brewster County',), ('Hudspeth County',), ('El Paso County',), ('Presidio County',), ('Culberson County',), ('Boulder County',), ('Broomfield County',), ('Arapahoe County',), ('Denver County',), ('Eagle County',), ('Gilpin County',), ('Clear Creek County',), ('Grand County',), ('Routt County',), ('Larimer County',), ('Weld County',), ('Teller County',), ('Cheyenne County',), ('Pueblo County',), ('Las Animas County',), ('Otero County',), ('Crowley County',), ('Bent County',), ('Prowers County',), ('Baca County',), ('Archuleta County',), ('Conejos County',), ('Costilla County',), ('Saguache County',), ('Rio Grande County',), ('Fremont County',), ('Gunnison County',), ('Chaffee County',), ('La Plata County',), ('Montezuma County',), ('Dolores County',), ('Montrose County',), ('San Miguel County',), ('Ouray County',), ('San Juan County',), ('Mesa County',), ('Pitkin County',), ('Moffat County',), ('Laramie County',), ('Goshen County',), ('Sweetwater County',), ('Hot Springs County',), ('Natrona County',), ('Uinta County',), ('Teton County',), ('Bannock County',), ('Bingham County',), ('Bear Lake County',), ('Twin Falls County',), ('Cassia County',), ('Camas County',), ('Minidoka County',), ('Bonneville County',), ('Lemhi County',), ('Idaho County',), ('Canyon County',), ('Gem County',), ('Ada County',), ('Latah County',), ('Kootenai County',), ('Bonner County',), ('Boundary County',), ('Clearwater County',), ('Shoshone County',), ('Benewah County',), ('Davis County',), ('Duchesne County',), ('Utah County',), ('Uintah County',), ('Salt Lake County',), ('Box Elder County',), ('Cache County',), ('Weber County',), ('Emery County',), ('Sanpete County',), ('Juab County',), ('Millard County',), ('Piute County',), ('Maricopa County',), ('Pinal County',), ('Gila County',), ('La Paz County',), ('Yavapai County',), ('Yuma County',), ('Pima County',), ('Mohave County',), ('Graham County',), ('Cochise County',), ('Santa Cruz County',), ('Navajo County',), ('Apache County',), ('Coconino County',), ('McKinley County',), ('Cibola County',), ('Bernalillo County',), ('Torrance County',), ('Valencia County',), ('Sandoval County',), ('Santa Fe County',), ('Rio Arriba County',), ('Taos County',), ('Colfax County',), ('Mora County',), ('Catron County',), ('Sierra County',), ('Do�a Ana County',), ('Doña Ana County',), ('Luna County',), ('Dona Ana County',), ('Curry County',), ('Roosevelt County',), ('Chaves County',), ('Eddy County',), ('Lea County',), ('Nye County',), ('Esmeralda County',), ('White Pine County',), ('Washoe County',), ('Humboldt County',), ('Churchill County',), ('Storey County',), ('Carson City',), ('Elko County',), ('Los Angeles County',), ('Ventura County',), ('San Bernardino County',), ('San Diego County',), ('Riverside County',), ('Imperial County',), ('Inyo County',), ('Santa Barbara County',), ('Tulare County',), ('Kern County',), ('San Luis Obispo County',), ('Mono County',), ('Fresno County',), ('Madera County',), ('Merced County',), ('Monterey County',), ('San Mateo County',), ('Santa Clara County',), ('San Francisco County',), ('Sacramento County',), ('Contra Costa County',), ('Alameda County',), ('Napa County',), ('Marin County',), ('Sonoma County',), ('San Benito County',), ('San Joaquin County',), ('Calaveras County',), ('Tuolumne County',), ('Mariposa County',), ('Stanislaus County',), ('Mendocino County',), ('Del Norte County',), ('Amador County',), ('Placer County',), ('El Dorado County',), ('Yolo County',), ('Solano County',), ('Alpine County',), ('Sutter County',), ('Glenn County',), ('Plumas County',), ('Butte County',), ('Colusa County',), ('Lassen County',), ('Shasta County',), ('Siskiyou County',), ('Modoc County',), ('Tehama County',), ('Kauai County',), ('Honolulu County',), ('Hawaii County',), ('Maui County',), ('Kalawao County',), ('Multnomah County',), ('Clackamas County',), ('Hood River County',), ('Wasco County',), ('Clatsop County',), ('Tillamook County',), ('Lane County',), ('Klamath County',), ('Josephine County',), ('Deschutes County',), ('Harney County',), ('Umatilla County',), ('Malheur County',), ('Snohomish County',), ('Kitsap County',), ('Kittitas County',), ('Whatcom County',), ('Skagit County',), ('Clallam County',), ('Thurston County',), ('Pacific County',), ('Grays Harbor County',), ('Klickitat County',), ('Skamania County',), ('Chelan County',), ('Okanogan County',), ('Yakima County',), ('Spokane County',), ('Whitman County',), ('Ferry County',), ('Stevens County',), ('Pend Oreille County',), ('Walla Walla County',), ('Municipality of Anchorage',), ('North Slope Borough',), ('Bethel Census Area',), ('Aleutians West Census Area',), ('Lake and Peninsula Borough',), ('Kodiak Island Borough',), ('Aleutians East Borough',), ('Wade Hampton Census Area',), ('Dillingham Census Area',), ('Yukon-Koyukuk Census Area',), ('Valdez-Cordova Census Area',), ('Anchorage Municipality',), ('Bristol Bay Borough',), ('Matanuska-Susitna Borough',), ('Kenai Peninsula Borough',), ('Nome Census Area',), ('Yakutat City and Borough',), ('Southeast Fairbanks Census Area',), ('Fairbanks North Star Borough',), ('Northwest Arctic Borough',), ('Denali Borough',), ('City and Borough of Juneau',), ('Hoonah-Angoon Census Area',), ('Petersburg Census Area',), ('Skagway Municipality',), ('Wrangell City and Borough',), ('Prince of Wales-Hyder Census Area',), ('Prince of Wales-Outer Ketchikan Borough',), ('Ketchikan Gateway Borough',)]",
    "table_infos": "df:\n|    |   zip_code | type   | city       | county         | state    | short_state   |\n|---:|-----------:|:-------|:-----------|:---------------|:---------|:--------------|\n|  0 |        501 | Unique | Holtsville | Suffolk County | New York | NY            |\n"
  },
  {
    "table_paths": [
      "datasets/BIRD_dev-student_club/event.csv",
      "datasets/BIRD_dev-student_club/budget.csv",
      "datasets/BIRD_dev-student_club/expense.csv"
    ],
    "query": "Find the name and date of events with expenses for pizza that were more than fifty dollars but less than a hundred dollars.",
    "cot": "\nWe need to join df1, df3 and df2 on the link_to_event and link_to_budget fields respectively. Then, we filter the data to get the events where the expense_description is 'Pizza' and the cost is between 50 and 100.\n",
    "code": "import numpy as np\nimport pandas as pd\n\n# Merge df1, df3 and df2 on the link_to_event and link_to_budget fields respectively\ndf = pd.merge(pd.merge(df1, df3, left_on='event_id', right_on='link_to_event'), df2, left_on='budget_id', right_on='link_to_budget')\n\n# Filter the data to get the events where the expense_description is 'Pizza' and the cost is between 50 and 100\nfinal_df = df[(df['expense_description'] == 'Pizza') & (df['cost'] > 50) & (df['cost'] < 100)][['event_name', 'event_date']]\n\n# Print the final result\nprint(final_df)",
    "observation": "KeyError: 'link_to_event'",
    "true_result": "[('September Meeting', '2019-09-10T12:00:00'), ('October Speaker', '2019-10-22T12:00:00'), ('November Speaker', '2019-11-19T12:00:00'), ('October Meeting', '2019-10-08T12:00:00')]",
    "table_infos": "df1:\n|    | event_id          | event_name                 | event_date          | type     | notes                                                         | location   | status   |\n|---:|:------------------|:---------------------------|:--------------------|:---------|:--------------------------------------------------------------|:-----------|:---------|\n|  0 | rec0Si5cQ4rJRVzd6 | March Meeting              | 2020-03-10T12:00:00 | Meeting  |                                                               | MU 215     | Open     |\n|  1 | rec0akZnLLpGUloLH | Officers meeting - January | 2020-01-14T09:30:00 | Meeting  |                                                               |            | Open     |\n|  2 | rec0dZPcWXF0QjNnE | Spring Elections           | 2019-11-24T09:00:00 | Election | All active members can vote for new officers between 4pm-8pm. | MU 215     | Open     |\ndf2:\n|    | budget_id         | category      |   spent |   remaining |   amount | event_status   | link_to_event     |\n|---:|:------------------|:--------------|--------:|------------:|---------:|:---------------|:------------------|\n|  0 | rec0QmEc3cSQFQ6V2 | Advertisement |   67.81 |        7.19 |       75 | Closed         | recI43CzsZ0Q625ma |\n|  1 | rec1bG6HSft7XIvTP | Food          |  121.14 |       28.86 |      150 | Closed         | recggMW2eyCYceNcy |\n|  2 | rec1z6ISJU2HdIsVm | Food          |   20.2  |       -0.2  |       20 | Closed         | recJ4Witp9tpjaugn |\ndf3:\n|    | expense_id        | expense_description   | expense_date   |   cost | approved   | link_to_member    | link_to_budget    |\n|---:|:------------------|:----------------------|:---------------|-------:|:-----------|:------------------|:------------------|\n|  0 | rec017x6R3hQqkLAo | Post Cards, Posters   | 2019-08-20     | 122.06 | true       | rec4BLdZHS2Blfp4v | recvKTAWAFKkVNnXQ |\n|  1 | rec1nIjoZKTYayqZ6 | Water, Cookies        | 2019-10-08     |  20.2  | true       | recro8T1MPMwRadVH | recy8KY5bUdzF81vv |\n|  2 | rec1oMgNFt7Y0G40x | Pizza                 | 2019-09-10     |  51.81 | true       | recD078PnS3x2doBe | recwXIiKoBMjXJsGZ |\nForeign keys:\ndf2.link_to_event = df1.event_id,df3.link_to_budget = df2.budget_id\n"
  },
  {
    "table_paths": [
      "datasets/BIRD_dev-student_club/expense.csv",
      "datasets/BIRD_dev-student_club/budget.csv"
    ],
    "query": "Which budget allowed the most money for water, chips, and cookies?",
    "cot": "\nWe need to find the budget that has the maximum remaining amount after subtracting the cost of water, chips, and cookies from it. We can do this by joining df1 and df2 on the link_to_budget column, grouping by budget_id, and then finding the maximum remaining amount.\n",
    "code": "import numpy as np\nimport pandas as pd\n\n# Load the data\n\n\n\n# Join df1 and df2 on link_to_budget\ndf = pd.merge(df1, df2, left_on='link_to_budget', right_on='budget_id', how='left')\n\n# Filter out the rows where expense_description is not 'Water, Chips, and Cookies'\ndf = df[df['expense_description'] == 'Water, Chips, and Cookies']\n\n# Group by budget_id and calculate the remaining amount\ndf = df.groupby('budget_id').agg({'cost': 'sum', 'spent': 'sum', 'remaining': 'sum'})\ndf['remaining_after_expense'] = df['remaining'] - df['cost']\n\n# Find the budget_id with the maximum remaining_after_expense\nbudget_id = df[df['remaining_after_expense'] == df['remaining_after_expense'].max()].index[0]\n\n# Print the budget_id\nprint(budget_id)",
    "observation": "IndexError: index 0 is out of bounds for axis 0 with size 0",
    "true_result": "[('rec1bG6HSft7XIvTP',)]",
    "table_infos": "df1:\n|    | expense_id        | expense_description   | expense_date   |   cost | approved   | link_to_member    | link_to_budget    |\n|---:|:------------------|:----------------------|:---------------|-------:|:-----------|:------------------|:------------------|\n|  0 | rec017x6R3hQqkLAo | Post Cards, Posters   | 2019-08-20     | 122.06 | true       | rec4BLdZHS2Blfp4v | recvKTAWAFKkVNnXQ |\n|  1 | rec1nIjoZKTYayqZ6 | Water, Cookies        | 2019-10-08     |  20.2  | true       | recro8T1MPMwRadVH | recy8KY5bUdzF81vv |\n|  2 | rec1oMgNFt7Y0G40x | Pizza                 | 2019-09-10     |  51.81 | true       | recD078PnS3x2doBe | recwXIiKoBMjXJsGZ |\ndf2:\n|    | budget_id         | category      |   spent |   remaining |   amount | event_status   | link_to_event     |\n|---:|:------------------|:--------------|--------:|------------:|---------:|:---------------|:------------------|\n|  0 | rec0QmEc3cSQFQ6V2 | Advertisement |   67.81 |        7.19 |       75 | Closed         | recI43CzsZ0Q625ma |\n|  1 | rec1bG6HSft7XIvTP | Food          |  121.14 |       28.86 |      150 | Closed         | recggMW2eyCYceNcy |\n|  2 | rec1z6ISJU2HdIsVm | Food          |   20.2  |       -0.2  |       20 | Closed         | recJ4Witp9tpjaugn |\nForeign keys:\ndf1.link_to_budget = df2.budget_id\n"
  },
  {
    "table_paths": [
      "datasets/BIRD_dev-student_club/expense.csv",
      "datasets/BIRD_dev-student_club/budget.csv",
      "datasets/BIRD_dev-student_club/member.csv"
    ],
    "query": "List the full name of the top five members who spend the most money in the descending order of spending.",
    "cot": "\nWe need to join df1 and df3 on link_to_member to get the full name of the members. Then, we need to group by member_id and sum the cost. Finally, we sort the result in descending order and select the top 5.\n",
    "code": "import numpy as np\nimport pandas as pd\n\n# Join df1 and df3 on link_to_member\ndf = pd.merge(df1, df3, left_on='link_to_member', right_on='member_id', how='left')\n\n# Group by member_id and sum the cost\ndf = df.groupby('member_id')['cost'].sum().reset_index()\n\n# Sort the result in descending order and select the top 5\ndf = df.sort_values('cost', ascending=False).head(5)\n\n# Print the result\nprint(df[['first_name', 'last_name', 'cost']])",
    "observation": "KeyError: \"['first_name', 'last_name'] not in index\"",
    "true_result": "[('Elijah', 'Allen'), ('Elijah', 'Allen'), ('Sacha', 'Harrison'), ('Elijah', 'Allen'), ('Sacha', 'Harrison')]",
    "table_infos": "df1:\n|    | expense_id        | expense_description   | expense_date   |   cost | approved   | link_to_member    | link_to_budget    |\n|---:|:------------------|:----------------------|:---------------|-------:|:-----------|:------------------|:------------------|\n|  0 | rec017x6R3hQqkLAo | Post Cards, Posters   | 2019-08-20     | 122.06 | true       | rec4BLdZHS2Blfp4v | recvKTAWAFKkVNnXQ |\n|  1 | rec1nIjoZKTYayqZ6 | Water, Cookies        | 2019-10-08     |  20.2  | true       | recro8T1MPMwRadVH | recy8KY5bUdzF81vv |\n|  2 | rec1oMgNFt7Y0G40x | Pizza                 | 2019-09-10     |  51.81 | true       | recD078PnS3x2doBe | recwXIiKoBMjXJsGZ |\ndf2:\n|    | budget_id         | category      |   spent |   remaining |   amount | event_status   | link_to_event     |\n|---:|:------------------|:--------------|--------:|------------:|---------:|:---------------|:------------------|\n|  0 | rec0QmEc3cSQFQ6V2 | Advertisement |   67.81 |        7.19 |       75 | Closed         | recI43CzsZ0Q625ma |\n|  1 | rec1bG6HSft7XIvTP | Food          |  121.14 |       28.86 |      150 | Closed         | recggMW2eyCYceNcy |\n|  2 | rec1z6ISJU2HdIsVm | Food          |   20.2  |       -0.2  |       20 | Closed         | recJ4Witp9tpjaugn |\ndf3:\n|    | member_id         | first_name   | last_name   | email                  | position   | t_shirt_size   | phone          |   zip | link_to_major     |\n|---:|:------------------|:-------------|:------------|:-----------------------|:-----------|:---------------|:---------------|------:|:------------------|\n|  0 | rec1x5zBFIqoOuPW8 | Angela       | Sanders     | angela.sanders@lpu.edu | Member     | Medium         | (651) 928-4507 | 55108 | recxK3MHQFbR9J5uO |\n|  1 | rec280Sk7o31iG0Tx | Grant        | Gilmour     | grant.gilmour@lpu.edu  | Member     | X-Large        | 403-555-1310   | 29440 | rec7BxKpjJ7bNph3O |\n|  2 | rec28ORZgcm1dtqBZ | Luisa        | Guidi       | luisa.guidi@lpu.edu    | Member     | Medium         | 442-555-5882   | 10002 | recdIBgeU38UbV2sy |\nForeign keys:\ndf1.link_to_member = df3.member_id,df1.link_to_budget = df2.budget_id\n"
  },
  {
    "table_paths": [
      "datasets/BIRD_dev-student_club/expense.csv",
      "datasets/BIRD_dev-student_club/budget.csv",
      "datasets/BIRD_dev-student_club/member.csv"
    ],
    "query": "Give the full name and contact number of members who had to spend more than average on each expense.",
    "cot": "\nFirst, we need to calculate the average amount spent on each expense. Then, we need to find the members who spent more than this average amount.\n",
    "code": "import numpy as np\nimport pandas as pd\n\n# Merge df1 and df2 on budget_id\ndf = pd.merge(df1, df2, left_on='link_to_budget', right_on='budget_id', how='inner')\n\n# Calculate the average amount spent on each expense\naverage_spent = df.groupby('expense_id')['spent'].mean().reset_index()\n\n# Merge df with average_spent on expense_id\ndf = pd.merge(df, average_spent, on='expense_id', how='inner')\n\n# Filter out the members who spent more than the average amount\ndf = df[df['spent'] > df['spent_y']]\n\n# Merge df with df3 on member_id\nfinal_df = pd.merge(df, df3, left_on='link_to_member', right_on='member_id', how='inner')\n\n# Select the full name and phone number of the members\nfinal_df = final_df[['first_name', 'last_name', 'phone']]\n\n# Print the final result\nprint(final_df)",
    "observation": "KeyError: 'spent'",
    "true_result": "[('Sacha', 'Harrison', '840-555-4781'), ('Phillip', 'Cullen', '905-555-5035'), ('Elijah', 'Allen', '724-555-5721')]",
    "table_infos": "df1:\n|    | expense_id        | expense_description   | expense_date   |   cost | approved   | link_to_member    | link_to_budget    |\n|---:|:------------------|:----------------------|:---------------|-------:|:-----------|:------------------|:------------------|\n|  0 | rec017x6R3hQqkLAo | Post Cards, Posters   | 2019-08-20     | 122.06 | true       | rec4BLdZHS2Blfp4v | recvKTAWAFKkVNnXQ |\n|  1 | rec1nIjoZKTYayqZ6 | Water, Cookies        | 2019-10-08     |  20.2  | true       | recro8T1MPMwRadVH | recy8KY5bUdzF81vv |\n|  2 | rec1oMgNFt7Y0G40x | Pizza                 | 2019-09-10     |  51.81 | true       | recD078PnS3x2doBe | recwXIiKoBMjXJsGZ |\ndf2:\n|    | budget_id         | category      |   spent |   remaining |   amount | event_status   | link_to_event     |\n|---:|:------------------|:--------------|--------:|------------:|---------:|:---------------|:------------------|\n|  0 | rec0QmEc3cSQFQ6V2 | Advertisement |   67.81 |        7.19 |       75 | Closed         | recI43CzsZ0Q625ma |\n|  1 | rec1bG6HSft7XIvTP | Food          |  121.14 |       28.86 |      150 | Closed         | recggMW2eyCYceNcy |\n|  2 | rec1z6ISJU2HdIsVm | Food          |   20.2  |       -0.2  |       20 | Closed         | recJ4Witp9tpjaugn |\ndf3:\n|    | member_id         | first_name   | last_name   | email                  | position   | t_shirt_size   | phone          |   zip | link_to_major     |\n|---:|:------------------|:-------------|:------------|:-----------------------|:-----------|:---------------|:---------------|------:|:------------------|\n|  0 | rec1x5zBFIqoOuPW8 | Angela       | Sanders     | angela.sanders@lpu.edu | Member     | Medium         | (651) 928-4507 | 55108 | recxK3MHQFbR9J5uO |\n|  1 | rec280Sk7o31iG0Tx | Grant        | Gilmour     | grant.gilmour@lpu.edu  | Member     | X-Large        | 403-555-1310   | 29440 | rec7BxKpjJ7bNph3O |\n|  2 | rec28ORZgcm1dtqBZ | Luisa        | Guidi       | luisa.guidi@lpu.edu    | Member     | Medium         | 442-555-5882   | 10002 | recdIBgeU38UbV2sy |\nForeign keys:\ndf1.link_to_member = df3.member_id,df1.link_to_budget = df2.budget_id\n"
  },
  {
    "table_paths": [
      "datasets/BIRD_dev-student_club/member.csv",
      "datasets/BIRD_dev-student_club/zip_code.csv"
    ],
    "query": "Calculate the difference in the percentage of members in Maine and Vermont.",
    "cot": "To calculate the difference in the percentage of members in Maine and Vermont, we need to first group the data by the 'state' column and then calculate the percentage of members in each state.\n",
    "code": "import numpy as np\nimport pandas as pd\n\n# Assuming df1 is the dataframe containing the member data and df2 is the dataframe containing the state data\n\n# Merge df1 and df2 on 'zip'\ndf = pd.merge(df1, df2, left_on='zip', right_on='zip_code', how='inner')\n\n# Group by 'state' and count the number of members\ngrouped = df.groupby('state').count()['member_id']\n\n# Calculate the total number of members\ntotal_members = df['member_id'].count()\n\n# Calculate the percentage of members in Maine and Vermont\npercentage_ME = (grouped['ME'] / total_members) * 100\npercentage_VT = (grouped['VT'] / total_members) * 100\n\n# Calculate the difference in percentage\ndifference = percentage_ME - percentage_VT\n\n# Print the result\nprint(f\"The difference in percentage of members in Maine and Vermont is {difference}%\")",
    "observation": "KeyError: 'ME'",
    "true_result": "[(0.0,)]",
    "table_infos": "df1:\n|    | member_id         | first_name   | last_name   | email                  | position   | t_shirt_size   | phone          |   zip | link_to_major     |\n|---:|:------------------|:-------------|:------------|:-----------------------|:-----------|:---------------|:---------------|------:|:------------------|\n|  0 | rec1x5zBFIqoOuPW8 | Angela       | Sanders     | angela.sanders@lpu.edu | Member     | Medium         | (651) 928-4507 | 55108 | recxK3MHQFbR9J5uO |\n|  1 | rec280Sk7o31iG0Tx | Grant        | Gilmour     | grant.gilmour@lpu.edu  | Member     | X-Large        | 403-555-1310   | 29440 | rec7BxKpjJ7bNph3O |\n|  2 | rec28ORZgcm1dtqBZ | Luisa        | Guidi       | luisa.guidi@lpu.edu    | Member     | Medium         | 442-555-5882   | 10002 | recdIBgeU38UbV2sy |\ndf2:\n|    |   zip_code | type     | city       | county             | state       | short_state   |\n|---:|-----------:|:---------|:-----------|:-------------------|:------------|:--------------|\n|  0 |        501 | Unique   | Holtsville | Suffolk County     | New York    | NY            |\n|  1 |        544 | Unique   | Holtsville | Suffolk County     | New York    | NY            |\n|  2 |        601 | Standard | Adjuntas   | Adjuntas Municipio | Puerto Rico | PR            |\nForeign keys:\ndf1.zip = df2.zip_code\n"
  },
  {
    "table_paths": [
      "datasets/BIRD_dev-student_club/budget.csv",
      "datasets/BIRD_dev-student_club/event.csv"
    ],
    "query": "Calculate the total amount spent on speaker gifts and list the name of the event they were spent on.",
    "cot": "\nTo solve this problem, we need to filter the data in df1 where the category is 'Speaker gifts'. Then, we need to join this filtered data with df2 using the link_to_event as the key. We then group the data by event_id and sum the spent column to get the total amount spent on speaker gifts. Finally, we need to rename the event_name column to 'Event Name' and the total_spent column to 'Total Spent'.\n",
    "code": "import numpy as np\nimport pandas as pd\n\n# Data Preparation\ndf1['category'] = df1['category'].str.lower()  # convert category to lower case\n\n# Data Processing\ndf1_speaker_gifts = df1[df1['category'] == 'speaker gifts']  # filter df1 for speaker gifts\ndf1_speaker_gifts = df1_speaker_gifts.merge(df2, left_on='link_to_event', right_on='event_id', how='left')  # join df1_speaker_gifts with df2\ndf1_speaker_gifts = df1_speaker_gifts.groupby('event_id')['spent'].sum().reset_index()  # group by event_id and sum spent\ndf1_speaker_gifts = df1_speaker_gifts.rename(columns={'event_id': 'Event ID', 'spent': 'Total Spent'})  # rename columns\ndf1_speaker_gifts = df1_speaker_gifts.merge(df2[['event_id', 'event_name']], on='Event ID', how='left')  # join df1_speaker_gifts with df2 to get event names\ndf1_speaker_gifts = df1_speaker_gifts.rename(columns={'event_name': 'Event Name'})  # rename column\n\n# Declare `final_df` Variable\nfinal_df = df1_speaker_gifts\n\n# Print the final result\nprint(final_df)",
    "observation": "KeyError: 'Event ID'",
    "true_result": "[(43.18, 'February Speaker')]",
    "table_infos": "df1:\n|    | budget_id         | category      |   spent |   remaining |   amount | event_status   | link_to_event     |\n|---:|:------------------|:--------------|--------:|------------:|---------:|:---------------|:------------------|\n|  0 | rec0QmEc3cSQFQ6V2 | Advertisement |   67.81 |        7.19 |       75 | Closed         | recI43CzsZ0Q625ma |\n|  1 | rec1bG6HSft7XIvTP | Food          |  121.14 |       28.86 |      150 | Closed         | recggMW2eyCYceNcy |\n|  2 | rec1z6ISJU2HdIsVm | Food          |   20.2  |       -0.2  |       20 | Closed         | recJ4Witp9tpjaugn |\ndf2:\n|    | event_id          | event_name                 | event_date          | type     | notes                                                         | location   | status   |\n|---:|:------------------|:---------------------------|:--------------------|:---------|:--------------------------------------------------------------|:-----------|:---------|\n|  0 | rec0Si5cQ4rJRVzd6 | March Meeting              | 2020-03-10T12:00:00 | Meeting  |                                                               | MU 215     | Open     |\n|  1 | rec0akZnLLpGUloLH | Officers meeting - January | 2020-01-14T09:30:00 | Meeting  |                                                               |            | Open     |\n|  2 | rec0dZPcWXF0QjNnE | Spring Elections           | 2019-11-24T09:00:00 | Election | All active members can vote for new officers between 4pm-8pm. | MU 215     | Open     |\nForeign keys:\ndf1.link_to_event = df2.event_id\n"
  },
  {
    "table_paths": [
      "datasets/BIRD_dev-student_club/member.csv",
      "datasets/BIRD_dev-student_club/zip_code.csv"
    ],
    "query": "Where is the hometown of Garrett Girke?",
    "cot": "\nTo find the hometown of Garrett Girke, we need to join df1 and df2 on the 'zip' column. Then, we can filter the dataframe to get the row where the 'first_name' is 'Garrett' and 'last_name' is 'Girke'. The 'city' and 'county' columns from the resulting dataframe will give us the hometown.\n",
    "code": "import numpy as np\nimport pandas as pd\n\n# Assuming df1 and df2 are the dataframes\nfinal_df = pd.merge(df1, df2, left_on='zip', right_on='zip_code')\nfinal_df = final_df[(final_df['first_name'] == 'Garrett') & (final_df['last_name'] == 'Girke')]\nhometown = final_df[['city', 'county']].values[0]\n\nprint(f\"The hometown of Garrett Girke is {hometown[0]}, {hometown[1]}\")",
    "observation": "IndexError: index 0 is out of bounds for axis 0 with size 0",
    "true_result": "[('Salisbury',)]",
    "table_infos": "df1:\n|    | member_id         | first_name   | last_name   | email                  | position   | t_shirt_size   | phone          |   zip | link_to_major     |\n|---:|:------------------|:-------------|:------------|:-----------------------|:-----------|:---------------|:---------------|------:|:------------------|\n|  0 | rec1x5zBFIqoOuPW8 | Angela       | Sanders     | angela.sanders@lpu.edu | Member     | Medium         | (651) 928-4507 | 55108 | recxK3MHQFbR9J5uO |\n|  1 | rec280Sk7o31iG0Tx | Grant        | Gilmour     | grant.gilmour@lpu.edu  | Member     | X-Large        | 403-555-1310   | 29440 | rec7BxKpjJ7bNph3O |\n|  2 | rec28ORZgcm1dtqBZ | Luisa        | Guidi       | luisa.guidi@lpu.edu    | Member     | Medium         | 442-555-5882   | 10002 | recdIBgeU38UbV2sy |\ndf2:\n|    |   zip_code | type     | city       | county             | state       | short_state   |\n|---:|-----------:|:---------|:-----------|:-------------------|:------------|:--------------|\n|  0 |        501 | Unique   | Holtsville | Suffolk County     | New York    | NY            |\n|  1 |        544 | Unique   | Holtsville | Suffolk County     | New York    | NY            |\n|  2 |        601 | Standard | Adjuntas   | Adjuntas Municipio | Puerto Rico | PR            |\nForeign keys:\ndf1.zip = df2.zip_code\n"
  },
  {
    "table_paths": ["datasets/BIRD_dev-debit_card_specializing/customers.csv"],
    "query": "What is the ratio of costumers who pay in EUR against customers who pay in CZK?",
    "cot": "\nTo solve this problem, we need to count the number of customers who pay in EUR and CZK and then calculate the ratio.\n",
    "code": "import numpy as np\nimport pandas as pd\n\n# Assuming df is the dataframe\n\n# Data Processing\n\n# Count the number of customers who pay in EUR and CZK\ncount_EUR = df[df['Currency'] == 'EUR'].shape[0]\ncount_CZK = df[df['Currency'] == 'CZK'].shape[0]\n\n# Calculate the ratio\nratio = count_EUR / count_CZK\n\n# Print the result\nprint('The ratio of costumers who pay in EUR against customers who pay in CZK is:', ratio)",
    "observation": "ZeroDivisionError: division by zero",
    "true_result": "[(0.06572769953051644,)]",
    "table_infos": "df:\n|    |   CustomerID | Segment   | Currency   |\n|---:|-------------:|:----------|:-----------|\n|  0 |            3 | SME       | EUR        |\n"
  },
  {
    "table_paths": ["datasets/BIRD_dev-debit_card_specializing/customers.csv"],
    "query": "Is it true that more SMEs pay in Czech koruna than in euros? If so, how many more?",
    "cot": "",
    "code": "import numpy as np\nimport pandas as pd\n\n# Assuming df is the dataframe containing the data\n\n# Data Preparation: Convert 'Currency' column to lower case for easier comparison\ndf['Currency'] = df['Currency'].str.lower()\n\n# Assuming exchange_rates is a dataframe containing the exchange rates for EUR and CZK for each year\n# The exchange_rates dataframe should have columns 'Year', 'EUR_to_CZK'\n\n# Merge df and exchange_rates on 'Year'\ndf = pd.merge(df, exchange_rates, on='Year')\n\n# Data Processing: Calculate the average 'EUR_to_CZK' for SMEs and non-SME customers\navg_czk_sme = df[df['Segment'] == 'SME']['EUR_to_CZK'].mean()\navg_czk_non_sme = df[df['Segment'] != 'SME']['EUR_to_CZK'].mean()\n\n# Calculate the difference\ndifference = avg_czk_sme - avg_czk_non_sme\n\n# Print the result\nprint(f\"The average exchange rate for SMEs is {difference} more than for non-SME customers.\")",
    "observation": "NameError: name 'exchange_rates' is not defined",
    "true_result": "[(23505,)]",
    "table_infos": "df:\n|    |   CustomerID | Segment   | Currency   |\n|---:|-------------:|:----------|:-----------|\n|  0 |            3 | SME       | EUR        |\n"
  },
  {
    "table_paths": [
      "datasets/BIRD_dev-debit_card_specializing/transactions_1k.csv"
    ],
    "query": "Which customer paid the most in 2012/8/25?",
    "cot": "",
    "code": "import numpy as np\nimport pandas as pd\n\n# Assuming df is your DataFrame\n\n# Convert Date column to datetime format\ndf['Date'] = pd.to_datetime(df['Date'])\n\n# Filter data for 2012-08-25\ndf = df[df['Date'].dt.date == pd.to_datetime('2012-08-25').date()]\n\n# Group by CustomerID and sum Price\ndf_grouped = df.groupby('CustomerID')['Price'].sum()\n\n# Find the customer who paid the most\nmost_valuable_customer = df_grouped.idxmax()\n\nprint(f\"The customer who paid the most in 2012/8/25 is CustomerID {most_valuable_customer}.\")",
    "observation": "ValueError: attempt to get argmax of an empty sequence",
    "true_result": "[(19182,)]",
    "table_infos": "df:\n|    |   TransactionID | Date       | Time     |   CustomerID |   CardID |   GasStationID |   ProductID |   Amount |   Price |\n|---:|----------------:|:-----------|:---------|-------------:|---------:|---------------:|------------:|---------:|--------:|\n|  0 |               1 | 2012-08-24 | 09:41:00 |        31543 |   486621 |           3704 |           2 |       28 |  672.64 |\n"
  },
  {
    "table_paths": [
      "datasets/BIRD_dev-debit_card_specializing/transactions_1k.csv",
      "datasets/BIRD_dev-debit_card_specializing/customers.csv"
    ],
    "query": "What segment did the customer have at 2012/8/23 21:20:00?",
    "cot": "\nWe need to join df1 and df2 on CustomerID. Then, we filter the transactions that happened at 2012/8/23 21:20:00.\n",
    "code": "import numpy as np\nimport pandas as pd\n\n# Assuming df1 and df2 are the dataframes\ndf1['Date_Time'] = pd.to_datetime(df1['Date'] + ' ' + df1['Time'])\ndf = pd.merge(df1, df2, on='CustomerID', how='left')\n\n# Filter transactions at 2012/8/23 21:20:00\ndf_filtered = df[df['Date_Time'] == '2012-08-24 21:20:00']\n\n# Print the segment of the customer at 2012/8/23 21:20:00\nprint(df_filtered['Segment'].values[0])",
    "observation": "IndexError: index 0 is out of bounds for axis 0 with size 0",
    "true_result": "[('KAM',)]",
    "table_infos": "df1:\n|    |   TransactionID | Date       | Time     |   CustomerID |   CardID |   GasStationID |   ProductID |   Amount |   Price |\n|---:|----------------:|:-----------|:---------|-------------:|---------:|---------------:|------------:|---------:|--------:|\n|  0 |               1 | 2012-08-24 | 09:41:00 |        31543 |   486621 |           3704 |           2 |       28 |  672.64 |\n|  1 |               2 | 2012-08-24 | 10:03:00 |        46707 |   550134 |           3704 |           2 |       18 |  430.72 |\n|  2 |               3 | 2012-08-24 | 10:03:00 |        46707 |   550134 |           3704 |          23 |        1 |  121.99 |\ndf2:\n|    |   CustomerID | Segment   | Currency   |\n|---:|-------------:|:----------|:-----------|\n|  0 |            3 | SME       | EUR        |\n|  1 |            5 | LAM       | EUR        |\n|  2 |            6 | SME       | EUR        |\nForeign keys:\n\n"
  },
  {
    "table_paths": [
      "datasets/BIRD_dev-debit_card_specializing/transactions_1k.csv",
      "datasets/BIRD_dev-debit_card_specializing/gasstations.csv"
    ],
    "query": "For the deal happened at 2012/8/24 12:42:00, which country was it?",
    "cot": "",
    "code": "import numpy as np\nimport pandas as pd\n\n# Assuming df1 and df2 are your dataframes\n\n# Convert 'Date' and 'Time' to datetime format\ndf1['DateTime'] = pd.to_datetime(df1['Date'] + ' ' + df1['Time'])\n\n# Set 'DateTime' as index\ndf1.set_index('DateTime', inplace=True)\n\n# Merge df1 and df2 on 'GasStationID'\ndf = pd.merge(df1, df2, on='GasStationID')\n\n# Filter for the deal happened at 2012/8/24 12:42:00\ndf_filtered = df[df.index.strftime('%Y-%m-%d %H:%M:%S') == '2012-08-24 12:42:00']\n\n# Get the country of the deal\ncountry = df_filtered['Country'].values[0]\n\nprint(f\"The deal happened at 2012/8/24 12:42:00 in {country}.\")",
    "observation": "AttributeError: 'RangeIndex' object has no attribute 'strftime'",
    "true_result": "[('CZE',), ('CZE',)]",
    "table_infos": "df1:\n|    |   TransactionID | Date       | Time     |   CustomerID |   CardID |   GasStationID |   ProductID |   Amount |   Price |\n|---:|----------------:|:-----------|:---------|-------------:|---------:|---------------:|------------:|---------:|--------:|\n|  0 |               1 | 2012-08-24 | 09:41:00 |        31543 |   486621 |           3704 |           2 |       28 |  672.64 |\n|  1 |               2 | 2012-08-24 | 10:03:00 |        46707 |   550134 |           3704 |           2 |       18 |  430.72 |\n|  2 |               3 | 2012-08-24 | 10:03:00 |        46707 |   550134 |           3704 |          23 |        1 |  121.99 |\ndf2:\n|    |   GasStationID |   ChainID | Country   | Segment         |\n|---:|---------------:|----------:|:----------|:----------------|\n|  0 |             44 |        13 | CZE       | Value for money |\n|  1 |             45 |         6 | CZE       | Premium         |\n|  2 |             46 |        23 | CZE       | Other           |\nForeign keys:\n\n"
  },
  {
    "table_paths": [
      "datasets/BIRD_dev-debit_card_specializing/gasstations.csv"
    ],
    "query": "What is the percentage of \"premium\" against the overall segment in \"SVK\"?",
    "cot": "To solve this problem, we first need to filter the dataframe to include only the rows where the country is \"SVK\" and the segment is \"premium\". Then, we can calculate the percentage of these rows against the total number of rows in the dataframe where the country is \"SVK\".\n",
    "code": "import numpy as np\nimport pandas as pd\n\n# Assuming df is your dataframe\n\n# Data Preparation\ndf['Country'] = df['Country'].astype(str)\ndf['Segment'] = df['Segment'].astype(str)\n\n# Data Processing\npremium_svk = df[(df['Country'] == 'SVK') & (df['Segment'] == 'premium')]\npercentage_premium_svk = len(premium_svk) / len(df[df['Country'] == 'SVK']) * 100\n\n# Declare `final_df` Variable\nfinal_df = premium_svk\n\n# Print the final result\nprint(f'The percentage of \"premium\" against the overall segment in \"SVK\" is {percentage_premium_svk}%')",
    "observation": "ZeroDivisionError: division by zero",
    "true_result": "[(35.68181818181818,)]",
    "table_infos": "df:\n|    |   GasStationID |   ChainID | Country   | Segment         |\n|---:|---------------:|----------:|:----------|:----------------|\n|  0 |             44 |        13 | CZE       | Value for money |\n"
  },
  {
    "table_paths": [
      "datasets/BIRD_dev-debit_card_specializing/transactions_1k.csv",
      "datasets/BIRD_dev-debit_card_specializing/gasstations.csv"
    ],
    "query": "Which country had the gas station that sold the most expensive product id No.2 for one unit?",
    "cot": "",
    "code": "import numpy as np\nimport pandas as pd\n\n# Assuming df1 and df2 are your dataframes\n\n# Merge the two dataframes on 'GasStationID'\nmerged_df = pd.merge(df1, df2, on='GasStationID')\n\n# Filter the dataframe to only include transactions where ProductID is 2\nfiltered_df = merged_df[merged_df['ProductID'] == 2]\n\n# Group the dataframe by 'Country' and 'ProductID', and calculate the sum of 'Price'\ngrouped_df = filtered_df.groupby(['Country', 'ProductID'])['Price'].sum()\n\n# Find the country with the maximum sum of 'Price'\nmax_price_country = grouped_df.idxmax()[0]\n\nprint(max_price_country)",
    "observation": "ValueError: attempt to get argmax of an empty sequence",
    "true_result": "[('CZE',)]",
    "table_infos": "df1:\n|    |   TransactionID | Date       | Time     |   CustomerID |   CardID |   GasStationID |   ProductID |   Amount |   Price |\n|---:|----------------:|:-----------|:---------|-------------:|---------:|---------------:|------------:|---------:|--------:|\n|  0 |               1 | 2012-08-24 | 09:41:00 |        31543 |   486621 |           3704 |           2 |       28 |  672.64 |\n|  1 |               2 | 2012-08-24 | 10:03:00 |        46707 |   550134 |           3704 |           2 |       18 |  430.72 |\n|  2 |               3 | 2012-08-24 | 10:03:00 |        46707 |   550134 |           3704 |          23 |        1 |  121.99 |\ndf2:\n|    |   GasStationID |   ChainID | Country   | Segment         |\n|---:|---------------:|----------:|:----------|:----------------|\n|  0 |             44 |        13 | CZE       | Value for money |\n|  1 |             45 |         6 | CZE       | Premium         |\n|  2 |             46 |        23 | CZE       | Other           |\nForeign keys:\n\n"
  },
  {
    "table_paths": [
      "datasets/SPIDER_dev-concert_singer/concert.csv",
      "datasets/SPIDER_dev-concert_singer/stadium.csv"
    ],
    "query": "For each stadium, how many concerts play there?",
    "cot": "We can use the pandas function `groupby` to group the data by `Stadium_ID` and then count the number of concerts in each group.\n",
    "code": "import numpy as np\nimport pandas as pd\n\n# Assuming df1 and df2 are the dataframes\n\n# Merge the two dataframes on Stadium_ID\ndf = pd.merge(df1, df2, on='Stadium_ID')\n\n# Group by Stadium_ID and count the number of concerts\ndf_grouped = df.groupby('Stadium_ID').count()['concert_ID']\n\n# Print the result\nprint(df_grouped)",
    "observation": "ValueError: You are trying to merge on object and int64 columns for key 'Stadium_ID'. If you wish to proceed you should use pd.concat",
    "true_result": "[(\"Stark's Park\", 1), ('Glebe Park', 1), ('Somerset Park', 2), ('Recreation Park', 1), ('Balmoor', 1)]",
    "table_infos": "df1:\n|    |   concert_ID | concert_Name   | Theme         |   Stadium_ID |   Year |\n|---:|-------------:|:---------------|:--------------|-------------:|-------:|\n|  0 |            1 | Auditions      | Free choice   |            1 |   2014 |\n|  1 |            2 | Super bootcamp | Free choice 2 |            2 |   2014 |\n|  2 |            3 | Home Visits    | Bleeding Love |            2 |   2015 |\ndf2:\n|    |   Stadium_ID | Location     | Name            |   Capacity |   Highest |   Lowest |   Average |\n|---:|-------------:|:-------------|:----------------|-----------:|----------:|---------:|----------:|\n|  0 |            1 | Raith Rovers | Stark's Park    |      10104 |      4812 |     1294 |      2106 |\n|  1 |            2 | Ayr United   | Somerset Park   |      11998 |      2363 |     1057 |      1477 |\n|  2 |            3 | East Fife    | Bayview Stadium |       2000 |      1980 |      533 |       864 |\nForeign keys:\ndf1.Stadium_ID = df2.Stadium_ID\n"
  },
  {
    "table_paths": [
      "datasets/SPIDER_dev-concert_singer/concert.csv",
      "datasets/SPIDER_dev-concert_singer/stadium.csv"
    ],
    "query": "Show the stadium name and capacity with most number of concerts in year 2014 or after.",
    "cot": "\nTo solve this problem, we need to join df1 and df2 on Stadium_ID, then group by Stadium_Name and Capacity, and count the number of concerts. We can then filter out the concerts that happened in 2014 or after.\n",
    "code": "import numpy as np\nimport pandas as pd\n\n# Assuming df1 and df2 are already defined\n\n# Merge df1 and df2 on Stadium_ID\ndf = pd.merge(df1, df2, on='Stadium_ID')\n\n# Filter out concerts that happened in 2014 or after\ndf = df[df['Year'] >= 2014]\n\n# Group by Stadium_Name and Capacity, and count the number of concerts\ndf = df.groupby(['Name', 'Capacity']).size().reset_index(name='count')\n\n# Find the stadium with the most number of concerts\ndf = df[df['count'] == df['count'].max()]\n\nfinal_df = df[['Name', 'Capacity']]\n\n# Print the final result\nprint(final_df)",
    "observation": "ValueError: You are trying to merge on object and int64 columns for key 'Stadium_ID'. If you wish to proceed you should use pd.concat",
    "true_result": "[('Somerset Park', 11998)]",
    "table_infos": "df1:\n|    |   concert_ID | concert_Name   | Theme         |   Stadium_ID |   Year |\n|---:|-------------:|:---------------|:--------------|-------------:|-------:|\n|  0 |            1 | Auditions      | Free choice   |            1 |   2014 |\n|  1 |            2 | Super bootcamp | Free choice 2 |            2 |   2014 |\n|  2 |            3 | Home Visits    | Bleeding Love |            2 |   2015 |\ndf2:\n|    |   Stadium_ID | Location     | Name            |   Capacity |   Highest |   Lowest |   Average |\n|---:|-------------:|:-------------|:----------------|-----------:|----------:|---------:|----------:|\n|  0 |            1 | Raith Rovers | Stark's Park    |      10104 |      4812 |     1294 |      2106 |\n|  1 |            2 | Ayr United   | Somerset Park   |      11998 |      2363 |     1057 |      1477 |\n|  2 |            3 | East Fife    | Bayview Stadium |       2000 |      1980 |      533 |       864 |\nForeign keys:\ndf1.Stadium_ID = df2.Stadium_ID\n"
  },
  {
    "table_paths": [
      "datasets/SPIDER_dev-concert_singer/concert.csv",
      "datasets/SPIDER_dev-concert_singer/stadium.csv"
    ],
    "query": "What is the name and capacity of the stadium with the most concerts after 2013 ?",
    "cot": "\nTo solve this problem, we need to join df1 and df2 on Stadium_ID, then group by Stadium_Name and Capacity, and count the number of concerts. We then filter for years after 2013 and get the stadium with the most concerts.\n",
    "code": "import numpy as np\nimport pandas as pd\n\n# Assuming df1 and df2 are the dataframes\n\n# Merge df1 and df2 on Stadium_ID\ndf = pd.merge(df1, df2, on='Stadium_ID')\n\n# Filter for years after 2013\ndf = df[df['Year'] > 2013]\n\n# Group by Stadium_Name and Capacity, and count the number of concerts\ndf = df.groupby(['Stadium_Name', 'Capacity']).size().reset_index(name='Concerts')\n\n# Get the stadium with the most concerts\ndf = df[df['Concerts'] == df['Concerts'].max()]\n\n# Print the result\nprint(df[['Stadium_Name', 'Capacity']])",
    "observation": "ValueError: You are trying to merge on object and int64 columns for key 'Stadium_ID'. If you wish to proceed you should use pd.concat",
    "true_result": "[('Somerset Park', 11998)]",
    "table_infos": "df1:\n|    |   concert_ID | concert_Name   | Theme         |   Stadium_ID |   Year |\n|---:|-------------:|:---------------|:--------------|-------------:|-------:|\n|  0 |            1 | Auditions      | Free choice   |            1 |   2014 |\n|  1 |            2 | Super bootcamp | Free choice 2 |            2 |   2014 |\n|  2 |            3 | Home Visits    | Bleeding Love |            2 |   2015 |\ndf2:\n|    |   Stadium_ID | Location     | Name            |   Capacity |   Highest |   Lowest |   Average |\n|---:|-------------:|:-------------|:----------------|-----------:|----------:|---------:|----------:|\n|  0 |            1 | Raith Rovers | Stark's Park    |      10104 |      4812 |     1294 |      2106 |\n|  1 |            2 | Ayr United   | Somerset Park   |      11998 |      2363 |     1057 |      1477 |\n|  2 |            3 | East Fife    | Bayview Stadium |       2000 |      1980 |      533 |       864 |\nForeign keys:\ndf1.Stadium_ID = df2.Stadium_ID\n"
  },
  {
    "table_paths": [
      "datasets/SPIDER_dev-concert_singer/singer_in_concert.csv",
      "datasets/SPIDER_dev-concert_singer/singer.csv"
    ],
    "query": "List singer names and number of concerts for each singer.",
    "cot": "\nTo solve this problem, we need to join df1 and df2 on Singer_ID and then group by Singer_ID and Name from df2. Then count the number of unique concert_IDs in df1.\n",
    "code": "import numpy as np\nimport pandas as pd\n\n# Assuming df1 and df2 are the dataframes\n\n# Join df1 and df2 on Singer_ID\ndf = pd.merge(df1, df2, on='Singer_ID')\n\n# Group by Singer_ID and Name from df2 and count the number of unique concert_IDs in df1\nfinal_df = df.groupby(['Singer_ID', 'Name']).concert_ID.nunique().reset_index()\n\n# Print the final result\nprint(final_df)",
    "observation": "ValueError: You are trying to merge on object and int64 columns for key 'Singer_ID'. If you wish to proceed you should use pd.concat",
    "true_result": "[('Timbaland', 2), ('Justin Brown', 3), ('Rose White', 1), ('John Nizinik', 2), ('Tribal King', 2)]",
    "table_infos": "df1:\n|    |   concert_ID |   Singer_ID |\n|---:|-------------:|------------:|\n|  0 |            1 |           2 |\n|  1 |            1 |           3 |\n|  2 |            1 |           5 |\ndf2:\n|    |   Singer_ID | Name         | Country       | Song_Name   |   Song_release_year |   Age | Is_male   |\n|---:|------------:|:-------------|:--------------|:------------|--------------------:|------:|:----------|\n|  0 |           1 | Joe Sharp    | Netherlands   | You         |                1992 |    52 | F         |\n|  1 |           2 | Timbaland    | United States | Dangerous   |                2008 |    32 | T         |\n|  2 |           3 | Justin Brown | France        | Hey Oh      |                2013 |    29 | T         |\nForeign keys:\ndf1.Singer_ID = df2.Singer_ID\n"
  },
  {
    "table_paths": [
      "datasets/SPIDER_dev-concert_singer/singer_in_concert.csv",
      "datasets/SPIDER_dev-concert_singer/singer.csv"
    ],
    "query": "What are the names of the singers and number of concerts for each person?",
    "cot": "\nWe need to join df1 and df2 on Singer_ID and then group by Name and concert_ID to get the count of concerts for each singer.\n",
    "code": "import numpy as np\nimport pandas as pd\n\n# Assuming df1 and df2 are the dataframes\ndf = pd.merge(df1, df2, on='Singer_ID')\nfinal_df = df.groupby('Name').concert_ID.nunique().reset_index(name='Number_of_concerts')\n\n# Print the final result\nprint(final_df)",
    "observation": "ValueError: You are trying to merge on object and int64 columns for key 'Singer_ID'. If you wish to proceed you should use pd.concat",
    "true_result": "[('Timbaland', 2), ('Justin Brown', 3), ('Rose White', 1), ('John Nizinik', 2), ('Tribal King', 2)]",
    "table_infos": "df1:\n|    |   concert_ID |   Singer_ID |\n|---:|-------------:|------------:|\n|  0 |            1 |           2 |\n|  1 |            1 |           3 |\n|  2 |            1 |           5 |\ndf2:\n|    |   Singer_ID | Name         | Country       | Song_Name   |   Song_release_year |   Age | Is_male   |\n|---:|------------:|:-------------|:--------------|:------------|--------------------:|------:|:----------|\n|  0 |           1 | Joe Sharp    | Netherlands   | You         |                1992 |    52 | F         |\n|  1 |           2 | Timbaland    | United States | Dangerous   |                2008 |    32 | T         |\n|  2 |           3 | Justin Brown | France        | Hey Oh      |                2013 |    29 | T         |\nForeign keys:\ndf1.Singer_ID = df2.Singer_ID\n"
  },
  {
    "table_paths": [
      "datasets/SPIDER_dev-concert_singer/singer_in_concert.csv",
      "datasets/SPIDER_dev-concert_singer/singer.csv",
      "datasets/SPIDER_dev-concert_singer/concert.csv"
    ],
    "query": "List all singer names in concerts in year 2014.",
    "cot": "\nTo solve this problem, we need to join df1, df2 and df3 on the Singer_ID and concert_ID columns respectively. Then, filter the dataframe to include only concerts in 2014. Finally, we will list all the singer names.\n",
    "code": "import numpy as np\nimport pandas as pd\n\n# Assuming df1, df2 and df3 are the dataframes given in the question\n\n# Joining df1 and df2 on Singer_ID\ndf = pd.merge(df1, df2, on='Singer_ID')\n\n# Joining df and df3 on concert_ID\ndf = pd.merge(df, df3, on='concert_ID')\n\n# Filtering dataframe to include only concerts in 2014\ndf = df[df['Year'] == 2014]\n\n# Listing all singer names in concerts in 2014\nsinger_names = df['Name'].tolist()\n\nprint(singer_names)",
    "observation": "ValueError: You are trying to merge on object and int64 columns for key 'Singer_ID'. If you wish to proceed you should use pd.concat",
    "true_result": "[('Timbaland',), ('Justin Brown',), ('John Nizinik',), ('Justin Brown',), ('Tribal King',), ('Rose White',)]",
    "table_infos": "df1:\n|    |   concert_ID |   Singer_ID |\n|---:|-------------:|------------:|\n|  0 |            1 |           2 |\n|  1 |            1 |           3 |\n|  2 |            1 |           5 |\ndf2:\n|    |   Singer_ID | Name         | Country       | Song_Name   |   Song_release_year |   Age | Is_male   |\n|---:|------------:|:-------------|:--------------|:------------|--------------------:|------:|:----------|\n|  0 |           1 | Joe Sharp    | Netherlands   | You         |                1992 |    52 | F         |\n|  1 |           2 | Timbaland    | United States | Dangerous   |                2008 |    32 | T         |\n|  2 |           3 | Justin Brown | France        | Hey Oh      |                2013 |    29 | T         |\ndf3:\n|    |   concert_ID | concert_Name   | Theme         |   Stadium_ID |   Year |\n|---:|-------------:|:---------------|:--------------|-------------:|-------:|\n|  0 |            1 | Auditions      | Free choice   |            1 |   2014 |\n|  1 |            2 | Super bootcamp | Free choice 2 |            2 |   2014 |\n|  2 |            3 | Home Visits    | Bleeding Love |            2 |   2015 |\nForeign keys:\ndf1.Singer_ID = df2.Singer_ID,df1.concert_ID = df3.concert_ID\n"
  },
  {
    "table_paths": [
      "datasets/SPIDER_dev-concert_singer/singer_in_concert.csv",
      "datasets/SPIDER_dev-concert_singer/singer.csv",
      "datasets/SPIDER_dev-concert_singer/concert.csv"
    ],
    "query": "What are the names of the singers who performed in a concert in 2014?",
    "cot": "\nWe need to join df1, df2 and df3 based on the foreign keys Singer_ID and concert_ID. Then, filter the dataframe to get the singers who performed in a concert in 2014.\n",
    "code": "import numpy as np\nimport pandas as pd\n\n# Assuming df1, df2 and df3 are the dataframes given in the question\n\n# Merge df1 and df2 on Singer_ID\ndf = pd.merge(df1, df2, on='Singer_ID')\n\n# Merge df and df3 on concert_ID\ndf = pd.merge(df, df3, on='concert_ID')\n\n# Filter the dataframe to get the singers who performed in a concert in 2014\ndf = df[df['Year'] == 2014]\n\n# Get the names of the singers\nsinger_names = df['Name']\n\n# Print the names of the singers\nprint(singer_names)",
    "observation": "ValueError: You are trying to merge on object and int64 columns for key 'Singer_ID'. If you wish to proceed you should use pd.concat",
    "true_result": "[('Timbaland',), ('Justin Brown',), ('John Nizinik',), ('Justin Brown',), ('Tribal King',), ('Rose White',)]",
    "table_infos": "df1:\n|    |   concert_ID |   Singer_ID |\n|---:|-------------:|------------:|\n|  0 |            1 |           2 |\n|  1 |            1 |           3 |\n|  2 |            1 |           5 |\ndf2:\n|    |   Singer_ID | Name         | Country       | Song_Name   |   Song_release_year |   Age | Is_male   |\n|---:|------------:|:-------------|:--------------|:------------|--------------------:|------:|:----------|\n|  0 |           1 | Joe Sharp    | Netherlands   | You         |                1992 |    52 | F         |\n|  1 |           2 | Timbaland    | United States | Dangerous   |                2008 |    32 | T         |\n|  2 |           3 | Justin Brown | France        | Hey Oh      |                2013 |    29 | T         |\ndf3:\n|    |   concert_ID | concert_Name   | Theme         |   Stadium_ID |   Year |\n|---:|-------------:|:---------------|:--------------|-------------:|-------:|\n|  0 |            1 | Auditions      | Free choice   |            1 |   2014 |\n|  1 |            2 | Super bootcamp | Free choice 2 |            2 |   2014 |\n|  2 |            3 | Home Visits    | Bleeding Love |            2 |   2015 |\nForeign keys:\ndf1.Singer_ID = df2.Singer_ID,df1.concert_ID = df3.concert_ID\n"
  },
  {
    "table_paths": [
      "datasets/SPIDER_dev-concert_singer/concert.csv",
      "datasets/SPIDER_dev-concert_singer/stadium.csv"
    ],
    "query": "Find the name and location of the stadiums which some concerts happened in the years of both 2014 and 2015.",
    "cot": "To solve this problem, we need to merge the two dataframes on the 'Stadium_ID' column and then filter the merged dataframe to include only the rows where the 'Year' is either 2014 or 2015. We can then group the filtered dataframe by 'Stadium_ID' and 'Location' and select the first row of each group.\n",
    "code": "import numpy as np\nimport pandas as pd\n\n# Assuming df1 and df2 are the dataframes\n\n# Merge df1 and df2 on 'Stadium_ID'\nmerged_df = pd.merge(df1, df2, on='Stadium_ID')\n\n# Filter merged_df to include only rows where 'Year' is either 2014 or 2015\nfiltered_df = merged_df[merged_df['Year'].isin([2014, 2015])]\n\n# Group filtered_df by 'Stadium_ID' and 'Location' and select the first row of each group\nfinal_df = filtered_df.groupby(['Stadium_ID', 'Location']).first().reset_index()\n\n# Print the final result\nprint(final_df[['Stadium_ID', 'Location']])",
    "observation": "ValueError: You are trying to merge on object and int64 columns for key 'Stadium_ID'. If you wish to proceed you should use pd.concat",
    "true_result": "[('Somerset Park', 'Ayr United')]",
    "table_infos": "df1:\n|    |   concert_ID | concert_Name   | Theme         |   Stadium_ID |   Year |\n|---:|-------------:|:---------------|:--------------|-------------:|-------:|\n|  0 |            1 | Auditions      | Free choice   |            1 |   2014 |\n|  1 |            2 | Super bootcamp | Free choice 2 |            2 |   2014 |\n|  2 |            3 | Home Visits    | Bleeding Love |            2 |   2015 |\ndf2:\n|    |   Stadium_ID | Location     | Name            |   Capacity |   Highest |   Lowest |   Average |\n|---:|-------------:|:-------------|:----------------|-----------:|----------:|---------:|----------:|\n|  0 |            1 | Raith Rovers | Stark's Park    |      10104 |      4812 |     1294 |      2106 |\n|  1 |            2 | Ayr United   | Somerset Park   |      11998 |      2363 |     1057 |      1477 |\n|  2 |            3 | East Fife    | Bayview Stadium |       2000 |      1980 |      533 |       864 |\nForeign keys:\ndf1.Stadium_ID = df2.Stadium_ID\n"
  },
  {
    "table_paths": [
      "datasets/SPIDER_dev-concert_singer/concert.csv",
      "datasets/SPIDER_dev-concert_singer/stadium.csv"
    ],
    "query": "What are the names and locations of the stadiums that had concerts that occurred in both 2014 and 2015?",
    "cot": "We can solve this problem by merging the two dataframes on the Stadium_ID column and then filtering the resultant dataframe to include only the stadiums that had concerts in both 2014 and 2015.\n",
    "code": "import numpy as np\nimport pandas as pd\n\n# Assuming df1 and df2 are the dataframes\n\n# Merge df1 and df2 on Stadium_ID\ndf = pd.merge(df1, df2, on='Stadium_ID')\n\n# Filter df to include only the stadiums that had concerts in both 2014 and 2015\ndf = df[(df['Year'] == 2014) & (df['Year_y'] == 2015)]\n\n# Select the columns of interest\nfinal_df = df[['Name', 'Location']]\n\n# Print the final result\nprint(final_df)",
    "observation": "ValueError: You are trying to merge on object and int64 columns for key 'Stadium_ID'. If you wish to proceed you should use pd.concat",
    "true_result": "[('Somerset Park', 'Ayr United')]",
    "table_infos": "df1:\n|    |   concert_ID | concert_Name   | Theme         |   Stadium_ID |   Year |\n|---:|-------------:|:---------------|:--------------|-------------:|-------:|\n|  0 |            1 | Auditions      | Free choice   |            1 |   2014 |\n|  1 |            2 | Super bootcamp | Free choice 2 |            2 |   2014 |\n|  2 |            3 | Home Visits    | Bleeding Love |            2 |   2015 |\ndf2:\n|    |   Stadium_ID | Location     | Name            |   Capacity |   Highest |   Lowest |   Average |\n|---:|-------------:|:-------------|:----------------|-----------:|----------:|---------:|----------:|\n|  0 |            1 | Raith Rovers | Stark's Park    |      10104 |      4812 |     1294 |      2106 |\n|  1 |            2 | Ayr United   | Somerset Park   |      11998 |      2363 |     1057 |      1477 |\n|  2 |            3 | East Fife    | Bayview Stadium |       2000 |      1980 |      533 |       864 |\nForeign keys:\ndf1.Stadium_ID = df2.Stadium_ID\n"
  },
  {
    "table_paths": ["datasets/SPIDER_dev-pets_1/pets.csv"],
    "query": "Find the weight of the youngest dog.",
    "cot": "To find the weight of the youngest dog, we need to filter the dataframe to include only rows where PetType is 'dog' and then find the minimum pet_age.\n",
    "code": "import numpy as np\nimport pandas as pd\n\n# Assuming df is the dataframe\n\n# Data Processing: Filter the dataframe to include only rows where PetType is 'dog'\ndf_dog = df[df['PetType'] == 'dog']\n\n# Find the minimum pet_age\nmin_age = df_dog['pet_age'].min()\n\n# Find the weight of the dog with the minimum age\nweight_min_age = df_dog[df_dog['pet_age'] == min_age]['weight'].values[0]\n\n# Print the result\nprint(f\"The weight of the youngest dog is {weight_min_age}\")",
    "observation": "IndexError: index 0 is out of bounds for axis 0 with size 0",
    "true_result": "[(9.3,)]",
    "table_infos": "df:\n|    |   PetID | PetType   |   pet_age |   weight |\n|---:|--------:|:----------|----------:|---------:|\n|  0 |    2001 | cat       |         3 |       12 |\n"
  },
  {
    "table_paths": [
      "datasets/SPIDER_dev-car_1/countries.csv",
      "datasets/SPIDER_dev-car_1/car_makers.csv"
    ],
    "query": "How many countries has more than 2 car makers ?",
    "cot": "To solve this problem, we need to join df1 and df2 on the CountryId column. Then, we group by CountryName and count the number of makers. Finally, we filter the countries that have more than 2 car makers.\n",
    "code": "import numpy as np\nimport pandas as pd\n\n# Assuming df1 and df2 are the given dataframes\ndf = pd.merge(df1, df2, left_on='CountryId', right_on='Country', how='left')\ndf = df.groupby('CountryName').Maker.nunique().reset_index()\ndf = df[df.Maker > 2]\n\n# Print the number of countries that have more than 2 car makers\nprint(len(df))",
    "observation": "ValueError: You are trying to merge on int64 and object columns for key 'CountryId'. If you wish to proceed you should use pd.concat",
    "true_result": "[(4,), (4,), (3,), (5,)]",
    "table_infos": "df1:\n|    |   CountryId | CountryName   |   Continent |\n|---:|------------:|:--------------|------------:|\n|  0 |           1 | usa           |           1 |\n|  1 |           2 | germany       |           2 |\n|  2 |           3 | france        |           2 |\ndf2:\n|    |   Id | Maker      | FullName               |   Country |\n|---:|-----:|:-----------|:-----------------------|----------:|\n|  0 |    1 | amc        | American Motor Company |         1 |\n|  1 |    2 | volkswagen | Volkswagen             |         2 |\n|  2 |    3 | bmw        | BMW                    |         2 |\nForeign keys:\ndf2.Country = df1.CountryId\n"
  },
  {
    "table_paths": [
      "datasets/SPIDER_dev-car_1/countries.csv",
      "datasets/SPIDER_dev-car_1/car_makers.csv"
    ],
    "query": "What is the number of countries with more than 2 car makers ?",
    "cot": "To solve this problem, we need to join df1 and df2 on the CountryId column, then group by CountryName and count the number of makers. Finally, we filter the countries with more than 2 car makers.\n",
    "code": "import numpy as np\nimport pandas as pd\n\n# Assuming df1 and df2 are already defined\n\n# Join df1 and df2 on CountryId\ndf = pd.merge(df1, df2, left_on='CountryId', right_on='Country', how='left')\n\n# Group by CountryName and count the number of makers\ndf = df.groupby('CountryName').Maker.count().reset_index()\n\n# Filter the countries with more than 2 car makers\ndf = df[df.Maker > 2]\n\n# Assign the result to final_df\nfinal_df = df\n\n# Print the final result\nprint(final_df)",
    "observation": "ValueError: You are trying to merge on int64 and object columns for key 'CountryId'. If you wish to proceed you should use pd.concat",
    "true_result": "[(4,), (4,), (3,), (5,)]",
    "table_infos": "df1:\n|    |   CountryId | CountryName   |   Continent |\n|---:|------------:|:--------------|------------:|\n|  0 |           1 | usa           |           1 |\n|  1 |           2 | germany       |           2 |\n|  2 |           3 | france        |           2 |\ndf2:\n|    |   Id | Maker      | FullName               |   Country |\n|---:|-----:|:-----------|:-----------------------|----------:|\n|  0 |    1 | amc        | American Motor Company |         1 |\n|  1 |    2 | volkswagen | Volkswagen             |         2 |\n|  2 |    3 | bmw        | BMW                    |         2 |\nForeign keys:\ndf2.Country = df1.CountryId\n"
  },
  {
    "table_paths": [
      "datasets/SPIDER_dev-car_1/car_makers.csv",
      "datasets/SPIDER_dev-car_1/model_list.csv",
      "datasets/SPIDER_dev-car_1/car_names.csv"
    ],
    "query": "Which are the car makers which produce at least 2 models and more than 3 car makers ? List the id and the maker .",
    "cot": "\nTo solve this problem, we need to join the three dataframes on the appropriate keys and then group by the maker. We can then filter the groups to only include those with at least 2 models and more than 3 car makers.\n",
    "code": "import numpy as np\nimport pandas as pd\n\n# Assuming df1, df2, df3 are the dataframes\n\n# Join df2 and df1 on Maker = Id\ndf = pd.merge(df2, df1, left_on='Maker', right_on='Id', how='left')\n\n# Join df3 and df2 on Model = MakeId\ndf = pd.merge(df3, df, left_on='Model', right_on='ModelId', how='left')\n\n# Group by Maker and count the number of unique ModelId\ndf = df.groupby('Maker').ModelId.nunique().reset_index()\n\n# Filter to only include makers with at least 2 models\ndf = df[df.ModelId >= 2]\n\n# Filter to only include makers with more than 3 car makers\ndf = df[df.Maker > 3]\n\n# Assign the prepared and processed data to final_df\nfinal_df = df\n\n# Print the final result\nprint(final_df)",
    "observation": "ValueError: You are trying to merge on object and int64 columns for key 'Model'. If you wish to proceed you should use pd.concat",
    "true_result": "[(2, 'volkswagen'), (4, 'gm'), (5, 'ford'), (6, 'chrysler'), (8, 'nissan'), (19, 'toyota')]",
    "table_infos": "df1:\n|    |   Id | Maker      | FullName               |   Country |\n|---:|-----:|:-----------|:-----------------------|----------:|\n|  0 |    1 | amc        | American Motor Company |         1 |\n|  1 |    2 | volkswagen | Volkswagen             |         2 |\n|  2 |    3 | bmw        | BMW                    |         2 |\ndf2:\n|    |   ModelId |   Maker | Model   |\n|---:|----------:|--------:|:--------|\n|  0 |         1 |       1 | amc     |\n|  1 |         2 |       2 | audi    |\n|  2 |         3 |       3 | bmw     |\ndf3:\n|    |   MakeId | Model     | Make                      |\n|---:|---------:|:----------|:--------------------------|\n|  0 |        1 | chevrolet | chevrolet chevelle malibu |\n|  1 |        2 | buick     | buick skylark 320         |\n|  2 |        3 | plymouth  | plymouth satellite        |\nForeign keys:\ndf2.Maker = df1.Id,df3.Model = df2.Model\n"
  },
  {
    "table_paths": [
      "datasets/SPIDER_dev-car_1/countries.csv",
      "datasets/SPIDER_dev-car_1/car_makers.csv",
      "datasets/SPIDER_dev-car_1/model_list.csv"
    ],
    "query": "What are the ids and names of all countries that either have more than 3 car makers or produce fiat model ?",
    "cot": "\nTo solve this problem, we need to join the three dataframes on the appropriate keys. Then, we can group by CountryId and Maker, and count the number of unique models for each group. We can then filter the results to only include countries that have more than 3 car makers or produce fiat models.\n",
    "code": "import numpy as np\nimport pandas as pd\n\n# Assuming df1, df2, df3 are the dataframes\n\n# Join df2 and df3 on Maker = Id\ndf = pd.merge(df2, df3, left_on='Id', right_on='Maker', how='inner')\n\n# Join df1 and df on CountryId = Country\ndf = pd.merge(df1, df, left_on='CountryId', right_on='Country', how='inner')\n\n# Group by CountryId and Maker, and count the number of unique models for each group\ndf = df.groupby(['CountryId', 'Maker']).ModelId.nunique().reset_index()\n\n# Filter the results to only include countries that have more than 3 car makers or produce fiat models\ndf = df[df.groupby('CountryId').ModelId.transform('max') > 3]\n\n# Get the ids and names of all countries that meet the criteria\nfinal_df = df1[df1.CountryId.isin(df.CountryId)][['CountryId', 'CountryName']]\n\n# Print the final result\nprint(final_df)",
    "observation": "ValueError: You are trying to merge on int64 and object columns for key 'CountryId'. If you wish to proceed you should use pd.concat",
    "true_result": "[(1, 'usa'), (2, 'germany'), (4, 'japan'), (5, 'italy')]",
    "table_infos": "df1:\n|    |   CountryId | CountryName   |   Continent |\n|---:|------------:|:--------------|------------:|\n|  0 |           1 | usa           |           1 |\n|  1 |           2 | germany       |           2 |\n|  2 |           3 | france        |           2 |\ndf2:\n|    |   Id | Maker      | FullName               |   Country |\n|---:|-----:|:-----------|:-----------------------|----------:|\n|  0 |    1 | amc        | American Motor Company |         1 |\n|  1 |    2 | volkswagen | Volkswagen             |         2 |\n|  2 |    3 | bmw        | BMW                    |         2 |\ndf3:\n|    |   ModelId |   Maker | Model   |\n|---:|----------:|--------:|:--------|\n|  0 |         1 |       1 | amc     |\n|  1 |         2 |       2 | audi    |\n|  2 |         3 |       3 | bmw     |\nForeign keys:\ndf2.Country = df1.CountryId,df3.Maker = df2.Id\n"
  },
  {
    "table_paths": [
      "datasets/SPIDER_dev-employee_hire_evaluation/employee.csv",
      "datasets/SPIDER_dev-employee_hire_evaluation/evaluation.csv"
    ],
    "query": "find the name of employee who was awarded the most times in the evaluation.",
    "cot": "To find the name of the employee who was awarded the most times, we need to group the data by 'Name' and 'Employee_ID' from df1 and count the number of times each 'Employee_ID' appears in df2. Then, we can find the maximum count and return the corresponding 'Name'.\n",
    "code": "import numpy as np\nimport pandas as pd\n\n# Assuming df1 and df2 are the dataframes\nmerged_df = pd.merge(df1, df2, on='Employee_ID')\ngrouped_df = merged_df.groupby('Name').count()['Employee_ID']\nmost_awards_employee = grouped_df.idxmax()\n\nprint(most_awards_employee)",
    "observation": "ValueError: You are trying to merge on int64 and object columns for key 'Employee_ID'. If you wish to proceed you should use pd.concat",
    "true_result": "[('George Chuter',)]",
    "table_infos": "df1:\n|    |   Employee_ID | Name          |   Age | City    |\n|---:|--------------:|:--------------|------:|:--------|\n|  0 |             1 | George Chuter |    23 | Bristol |\n|  1 |             2 | Lee Mears     |    29 | Bath    |\n|  2 |             3 | Mark Regan    |    43 | Bristol |\ndf2:\n|    |   Employee_ID |   Year_awarded |   Bonus |\n|---:|--------------:|---------------:|--------:|\n|  0 |             1 |           2011 |    3000 |\n|  1 |             2 |           2015 |    3200 |\n|  2 |             1 |           2016 |    2900 |\nForeign keys:\ndf2.Employee_ID = df1.Employee_ID\n"
  },
  {
    "table_paths": [
      "datasets/SPIDER_dev-employee_hire_evaluation/employee.csv",
      "datasets/SPIDER_dev-employee_hire_evaluation/evaluation.csv"
    ],
    "query": "Which employee received the most awards in evaluations? Give me the employee name.",
    "cot": "To solve this problem, we need to join df1 and df2 on Employee_ID, then group by Name and count the number of awards. The employee with the most awards will have the highest count.\n",
    "code": "import numpy as np\nimport pandas as pd\n\n# Assuming df1 and df2 are the dataframes\ndf = pd.merge(df1, df2, on='Employee_ID')\nmost_awards = df.groupby('Name')['Year_awarded'].count().idxmax()\n\nprint(most_awards)",
    "observation": "ValueError: You are trying to merge on int64 and object columns for key 'Employee_ID'. If you wish to proceed you should use pd.concat",
    "true_result": "[('George Chuter',)]",
    "table_infos": "df1:\n|    |   Employee_ID | Name          |   Age | City    |\n|---:|--------------:|:--------------|------:|:--------|\n|  0 |             1 | George Chuter |    23 | Bristol |\n|  1 |             2 | Lee Mears     |    29 | Bath    |\n|  2 |             3 | Mark Regan    |    43 | Bristol |\ndf2:\n|    |   Employee_ID |   Year_awarded |   Bonus |\n|---:|--------------:|---------------:|--------:|\n|  0 |             1 |           2011 |    3000 |\n|  1 |             2 |           2015 |    3200 |\n|  2 |             1 |           2016 |    2900 |\nForeign keys:\ndf2.Employee_ID = df1.Employee_ID\n"
  },
  {
    "table_paths": [
      "datasets/SPIDER_dev-employee_hire_evaluation/employee.csv",
      "datasets/SPIDER_dev-employee_hire_evaluation/evaluation.csv"
    ],
    "query": "Find the name of the employee who got the highest one time bonus.",
    "cot": "To find the name of the employee who got the highest one time bonus, we need to merge the two dataframes on the Employee_ID column, then group by the Name column and sum the Bonus column. After that, we can find the maximum value in the summed Bonus column and get the corresponding Name.\n",
    "code": "import numpy as np\nimport pandas as pd\n\n# Assuming df1 and df2 are the dataframes\n\n# Merge the two dataframes on the Employee_ID column\nmerged_df = pd.merge(df1, df2, on='Employee_ID')\n\n# Group by the Name column and sum the Bonus column\ngrouped_df = merged_df.groupby('Name')['Bonus'].sum()\n\n# Find the name of the employee who got the highest one time bonus\nemployee_name = grouped_df.idxmax()\n\n# Print the result\nprint(employee_name)",
    "observation": "ValueError: You are trying to merge on int64 and object columns for key 'Employee_ID'. If you wish to proceed you should use pd.concat",
    "true_result": "[('Louis Deacon',)]",
    "table_infos": "df1:\n|    |   Employee_ID | Name          |   Age | City    |\n|---:|--------------:|:--------------|------:|:--------|\n|  0 |             1 | George Chuter |    23 | Bristol |\n|  1 |             2 | Lee Mears     |    29 | Bath    |\n|  2 |             3 | Mark Regan    |    43 | Bristol |\ndf2:\n|    |   Employee_ID |   Year_awarded |   Bonus |\n|---:|--------------:|---------------:|--------:|\n|  0 |             1 |           2011 |    3000 |\n|  1 |             2 |           2015 |    3200 |\n|  2 |             1 |           2016 |    2900 |\nForeign keys:\ndf2.Employee_ID = df1.Employee_ID\n"
  },
  {
    "table_paths": [
      "datasets/SPIDER_dev-employee_hire_evaluation/employee.csv",
      "datasets/SPIDER_dev-employee_hire_evaluation/evaluation.csv"
    ],
    "query": "Which employee received the biggest bonus? Give me the employee name.",
    "cot": "\nTo solve this problem, we need to join df1 and df2 on the Employee_ID column. Then, we can find the employee with the biggest bonus.\n",
    "code": "import numpy as np\nimport pandas as pp\n\n# Assuming df1 and df2 are the dataframes\ndf = pd.merge(df1, df2, on='Employee_ID')\nmax_bonus_employee = df.loc[df['Bonus'].idxmax(), 'Name']\n\nprint(\"The employee with the biggest bonus is: \", max_bonus_employee)",
    "observation": "ValueError: You are trying to merge on int64 and object columns for key 'Employee_ID'. If you wish to proceed you should use pd.concat",
    "true_result": "[('Louis Deacon',)]",
    "table_infos": "df1:\n|    |   Employee_ID | Name          |   Age | City    |\n|---:|--------------:|:--------------|------:|:--------|\n|  0 |             1 | George Chuter |    23 | Bristol |\n|  1 |             2 | Lee Mears     |    29 | Bath    |\n|  2 |             3 | Mark Regan    |    43 | Bristol |\ndf2:\n|    |   Employee_ID |   Year_awarded |   Bonus |\n|---:|--------------:|---------------:|--------:|\n|  0 |             1 |           2011 |    3000 |\n|  1 |             2 |           2015 |    3200 |\n|  2 |             1 |           2016 |    2900 |\nForeign keys:\ndf2.Employee_ID = df1.Employee_ID\n"
  },
  {
    "table_paths": ["datasets/SPIDER_dev-employee_hire_evaluation/shop.csv"],
    "query": "Find the districts in which there are both shops selling less than 3000 products and shops selling more than 10000 products.",
    "cot": "\nTo solve this problem, we need to filter the dataframe based on the condition that the number of products sold by the shops in each district should be in the range of 3000 and 10000. We can use the pandas `groupby` function to group the data by 'District' and then filter the groups based on the condition.\n",
    "code": "import numpy as np\nimport pandas as p np\n\n# Load the data\n\n\n# Data Processing\ndistricts_with_shops_selling_less_than_3000 = df[df['Number_products'] < 3000]['District'].unique()\ndistricts_with_shops_selling_more_than_10000 = df[df['Number_products'] > 10000]['District'].unique()\n\ndistricts_with_shops_selling_both = set(districts_with_shops_selling_less_than_3000).intersection(districts_with_shops_selling_more_than_10000)\n\nprint(districts_with_shops_selling_both)",
    "observation": "SyntaxError: invalid syntax (<unknown>, line 2)",
    "true_result": "[]",
    "table_infos": "df:\n|    |   Shop_ID | Name    | Location    | District       |   Number_products | Manager_name   |\n|---:|----------:|:--------|:------------|:---------------|------------------:|:---------------|\n|  0 |         1 | FC Haka | Valkeakoski | Tehtaan kenttä |              3516 | Olli Huttunen  |\n"
  },
  {
    "table_paths": ["datasets/SPIDER_dev-museum_visit/museum.csv"],
    "query": "Find the average number of staff working for the museums that were open before 2009.",
    "cot": "",
    "code": "import numpy as np\nimport pandas as pd\n\n# Assuming df is the dataframe\n\n# Data Processing\nmuseums_before_2009 = df[df['Open_Year'] < 2009]\naverage_staff = np.mean(museums_before_2009['Num_of_Staff'])\n\n# Declare `final_df` Variable\nfinal_df = average_staff\n\n# Print the final result\nprint(final_df)",
    "observation": "TypeError: '<' not supported between instances of 'str' and 'int'",
    "true_result": "[(31.333333333333332,)]",
    "table_infos": "df:\n|    |   Museum_ID | Name         |   Num_of_Staff |   Open_Year |\n|---:|------------:|:-------------|---------------:|------------:|\n|  0 |           1 | Plaza Museum |             62 |        2000 |\n"
  },
  {
    "table_paths": [
      "datasets/SPIDER_dev-museum_visit/visitor.csv",
      "datasets/SPIDER_dev-museum_visit/visit.csv"
    ],
    "query": "find the id, name and age for visitors who visited some museums more than once.",
    "cot": "",
    "code": "import numpy as np\nimport pandas as pd\n\n# Assuming df1 and df2 are your dataframes\n\n# Merge df1 and df2 on 'ID'\ndf = pd.merge(df1, df2, left_on='ID', right_on='visitor_ID')\n\n# Group by 'ID' and 'Name' and count the number of unique 'Museum_ID'\ndf = df.groupby(['ID', 'Name']).Museum_ID.nunique().reset_index()\n\n# Filter out the visitors who visited more than once\ndf = df[df.Museum_ID > 1]\n\n# Merge df with df1 to get the age\ndf = pd.merge(df, df1, on='ID')\n\n# Print the final result\nprint(df[['ID', 'Name', 'Age']])",
    "observation": "KeyError: \"['Name'] not in index\"",
    "true_result": "[(3, 'Arjen Robben', 27), (5, 'Fernando Gago', 36), (6, 'Rafael van der Vaart', 25)]",
    "table_infos": "df1:\n|    |   ID | Name            |   Level_of_membership |   Age |\n|---:|-----:|:----------------|----------------------:|------:|\n|  0 |    1 | Gonzalo Higuaín |                     8 |    35 |\n|  1 |    2 | Guti Midfielder |                     5 |    28 |\n|  2 |    3 | Arjen Robben    |                     1 |    27 |\ndf2:\n|    |   Museum_ID |   visitor_ID |   Num_of_Ticket |   Total_spent |\n|---:|------------:|-------------:|----------------:|--------------:|\n|  0 |           1 |            5 |              20 |        320.14 |\n|  1 |           2 |            5 |               4 |         89.98 |\n|  2 |           4 |            3 |              10 |        320.44 |\nForeign keys:\ndf2.visitor_ID = df1.ID\n"
  },
  {
    "table_paths": [
      "datasets/SPIDER_dev-museum_visit/visitor.csv",
      "datasets/SPIDER_dev-museum_visit/visit.csv"
    ],
    "query": "Find the name and age of the visitor who bought the most tickets at once.",
    "cot": "\nTo find the visitor who bought the most tickets at once, we need to join df1 and df2 on the visitor_ID and then group by the Name and Age from df1 and sum the Num_of_Ticket from df2. The visitor with the highest sum of Num_of_Ticket will be the one who bought the most tickets at once.\n",
    "code": "import numpy as np\nimport pandas as pd\n\n# Assuming df1 and df2 are the dataframes\ndf = pd.merge(df1, df2, left_on='ID', right_on='visitor_ID', how='inner')\ndf_grouped = df.groupby(['Name', 'Age'])['Num_of_Ticket'].sum().reset_index()\nmost_tickets_visitor = df_grouped.loc[df_grouped['Num_of_Ticket'].idxmax()]\n\nfinal_df = most_tickets_visitor\n\n# Print the final result\nprint(final_df)",
    "observation": "ValueError: You are trying to merge on int64 and object columns for key 'ID'. If you wish to proceed you should use pd.concat",
    "true_result": "[('Arjen Robben', 27)]",
    "table_infos": "df1:\n|    |   ID | Name            |   Level_of_membership |   Age |\n|---:|-----:|:----------------|----------------------:|------:|\n|  0 |    1 | Gonzalo Higuaín |                     8 |    35 |\n|  1 |    2 | Guti Midfielder |                     5 |    28 |\n|  2 |    3 | Arjen Robben    |                     1 |    27 |\ndf2:\n|    |   Museum_ID |   visitor_ID |   Num_of_Ticket |   Total_spent |\n|---:|------------:|-------------:|----------------:|--------------:|\n|  0 |           1 |            5 |              20 |        320.14 |\n|  1 |           2 |            5 |               4 |         89.98 |\n|  2 |           4 |            3 |              10 |        320.44 |\nForeign keys:\ndf2.visitor_ID = df1.ID\n"
  },
  {
    "table_paths": [
      "datasets/SPIDER_dev-museum_visit/visitor.csv",
      "datasets/SPIDER_dev-museum_visit/visit.csv"
    ],
    "query": "What is the total ticket expense of the visitors whose membership level is 1?",
    "cot": "\nTo solve this problem, we need to join df1 and df2 on the visitor_ID and then filter the dataframe where the Level_of_membership is 1. Then, we can sum the Total_spent column to get the total ticket expense of the visitors whose membership level is 1.\n",
    "code": "import numpy as np\nimport pandas as pd\n\n# Assuming df1 and df2 are the dataframes given in the question\n\n# Join df1 and df2 on visitor_ID\ndf = pd.merge(df1, df2, left_on='ID', right_on='visitor_ID')\n\n# Filter the dataframe where the Level_of_membership is 1\ndf = df[df['Level_of_membership'] == 1]\n\n# Sum the Total_spent column\ntotal_expense = df['Total_spent'].sum()\n\nprint(\"The total ticket expense of the visitors whose membership level is 1 is: \", total_expense)",
    "observation": "ValueError: You are trying to merge on int64 and object columns for key 'ID'. If you wish to proceed you should use pd.concat",
    "true_result": "[(570.84,)]",
    "table_infos": "df1:\n|    |   ID | Name            |   Level_of_membership |   Age |\n|---:|-----:|:----------------|----------------------:|------:|\n|  0 |    1 | Gonzalo Higuaín |                     8 |    35 |\n|  1 |    2 | Guti Midfielder |                     5 |    28 |\n|  2 |    3 | Arjen Robben    |                     1 |    27 |\ndf2:\n|    |   Museum_ID |   visitor_ID |   Num_of_Ticket |   Total_spent |\n|---:|------------:|-------------:|----------------:|--------------:|\n|  0 |           1 |            5 |              20 |        320.14 |\n|  1 |           2 |            5 |               4 |         89.98 |\n|  2 |           4 |            3 |              10 |        320.44 |\nForeign keys:\ndf2.visitor_ID = df1.ID\n"
  },
  {
    "table_paths": [
      "datasets/SPIDER_dev-museum_visit/visitor.csv",
      "datasets/SPIDER_dev-museum_visit/visit.csv",
      "datasets/SPIDER_dev-museum_visit/museum.csv"
    ],
    "query": "What is the name of the visitor who visited both a museum opened before 2009 and a museum opened after 2011?",
    "cot": "\nTo solve this problem, we need to join the three dataframes on the appropriate keys and then filter the resulting dataframe based on the conditions given in the question.\n",
    "code": "# Data Preparation\ndf1.set_index('ID', inplace=True)\ndf2.set_index('visitor_ID', inplace=True)\ndf3.set_index('Museum_ID', inplace=True)\n\n# Data Processing\nmerged_df = pd.merge(df2, df1, left_index=True, right_index=True)\nmerged_df = pd.merge(merged_df, df3, left_on='Museum_ID', right_index=True)\n\n# Filter the dataframe based on the conditions\nfinal_df = merged_df[(merged_df['Open_Year'] < 2009) | (merged_df['Open_Year'] > 2011)]\n\n# Print the final result\nprint(final_df['Name'].values)",
    "observation": "KeyError: 'Name'",
    "true_result": "[('Fernando Gago',)]",
    "table_infos": "df1:\n|    |   ID | Name            |   Level_of_membership |   Age |\n|---:|-----:|:----------------|----------------------:|------:|\n|  0 |    1 | Gonzalo Higuaín |                     8 |    35 |\n|  1 |    2 | Guti Midfielder |                     5 |    28 |\n|  2 |    3 | Arjen Robben    |                     1 |    27 |\ndf2:\n|    |   Museum_ID |   visitor_ID |   Num_of_Ticket |   Total_spent |\n|---:|------------:|-------------:|----------------:|--------------:|\n|  0 |           1 |            5 |              20 |        320.14 |\n|  1 |           2 |            5 |               4 |         89.98 |\n|  2 |           4 |            3 |              10 |        320.44 |\ndf3:\n|    |   Museum_ID | Name                         |   Num_of_Staff |   Open_Year |\n|---:|------------:|:-----------------------------|---------------:|------------:|\n|  0 |           1 | Plaza Museum                 |             62 |        2000 |\n|  1 |           2 | Capital Plaza Museum         |             25 |        2012 |\n|  2 |           3 | Jefferson Development Museum |             18 |        2010 |\nForeign keys:\ndf2.visitor_ID = df1.ID,df2.Museum_ID = df3.Museum_ID\n"
  },
  {
    "table_paths": [
      "datasets/SPIDER_dev-battle_death/battle.csv",
      "datasets/SPIDER_dev-battle_death/ship.csv"
    ],
    "query": "What are the different ids and names of the battles that lost any 'Brig' type shipes?",
    "cot": "\nWe need to join df1 and df2 on the 'id' column and then filter the dataframe to include only the battles where the 'ship_type' is 'Brig'.\n",
    "code": "import numpy as np\nimport pandas as pd\n\n# Assuming df1 and df2 are the dataframes\n\n# Join df1 and df2 on 'id'\ndf = pd.merge(df1, df2, on='id')\n\n# Filter the dataframe to include only the battles where the 'ship_type' is 'Brig'\ndf = df[df['ship_type'] == 'Brig']\n\n# Get the unique 'id' and 'name' of the battles\nfinal_df = df[['id', 'name']].drop_duplicates()\n\n# Print the final result\nprint(final_df)",
    "observation": "KeyError: \"['name'] not in index\"",
    "true_result": "[(8, 'Siege of Constantinople'), (7, 'Battle of Philippopolis'), (6, 'Battle of Boruy'), (5, 'Battle of Messinopolis'), (4, 'Battle of Rodosto')]",
    "table_infos": "df1:\n|    |   id | name                 | date            | bulgarian_commander   | latin_commander    | result            |\n|---:|-----:|:---------------------|:----------------|:----------------------|:-------------------|:------------------|\n|  0 |    1 | Battle of Adrianople | 14 April 1205   | Kaloyan               | Baldwin I          | Bulgarian victory |\n|  1 |    2 | Battle of Serres     | June 1205       | Kaloyan               | Unknown            | Bulgarian victory |\n|  2 |    3 | Battle of Rusion     | 31 January 1206 | Kaloyan               | Thierry de Termond | Bulgarian victory |\ndf2:\n|    |   lost_in_battle |   id | name       | tonnage   | ship_type   | location        | disposition_of_ship   |\n|---:|-----------------:|-----:|:-----------|:----------|:------------|:----------------|:----------------------|\n|  0 |                8 |    1 | Lettice    | t         | Brig        | English Channel | Captured              |\n|  1 |                7 |    2 | Bon Accord | t         | Brig        | English Channel | Captured              |\n|  2 |                6 |    3 | Mary       | t         | Brig        | English Channel | Captured              |\nForeign keys:\ndf2.lost_in_battle = df1.id\n"
  },
  {
    "table_paths": [
      "datasets/SPIDER_dev-battle_death/battle.csv",
      "datasets/SPIDER_dev-battle_death/ship.csv",
      "datasets/SPIDER_dev-battle_death/death.csv"
    ],
    "query": "What are the ids and names of the battles that led to more than 10 people killed in total.",
    "cot": "\nTo solve this problem, we need to join the three dataframes on the id column. Then, we need to sum the killed and injured columns to get the total number of people killed in each battle. Finally, we filter the dataframe to get the battles with more than 10 people killed.\n",
    "code": "import numpy as np\nimport pandas as pd\n\n# Assuming df1, df2, df3 are the dataframes\n\n# Join df1 and df3 on caused_by_ship_id\ndf = pd.merge(df1, df3, left_on='id', right_on='caused_by_ship_id')\n\n# Join df2 to df on id\ndf = pd.merge(df, df2, on='id')\n\n# Create a new column total_killed by summing killed and injured\ndf['total_killed'] = df['killed'] + df['injured']\n\n# Filter the dataframe to get battles with more than 10 people killed\ndf = df[df['total_killed'] > 10]\n\n# Select the id and name columns\nfinal_df = df[['id', 'name']]\n\n# Print the final result\nprint(final_df)",
    "observation": "KeyError: 'id'",
    "true_result": "[(5, 'Battle of Messinopolis'), (6, 'Battle of Boruy'), (8, 'Siege of Constantinople')]",
    "table_infos": "df1:\n|    |   id | name                 | date            | bulgarian_commander   | latin_commander    | result            |\n|---:|-----:|:---------------------|:----------------|:----------------------|:-------------------|:------------------|\n|  0 |    1 | Battle of Adrianople | 14 April 1205   | Kaloyan               | Baldwin I          | Bulgarian victory |\n|  1 |    2 | Battle of Serres     | June 1205       | Kaloyan               | Unknown            | Bulgarian victory |\n|  2 |    3 | Battle of Rusion     | 31 January 1206 | Kaloyan               | Thierry de Termond | Bulgarian victory |\ndf2:\n|    |   lost_in_battle |   id | name       | tonnage   | ship_type   | location        | disposition_of_ship   |\n|---:|-----------------:|-----:|:-----------|:----------|:------------|:----------------|:----------------------|\n|  0 |                8 |    1 | Lettice    | t         | Brig        | English Channel | Captured              |\n|  1 |                7 |    2 | Bon Accord | t         | Brig        | English Channel | Captured              |\n|  2 |                6 |    3 | Mary       | t         | Brig        | English Channel | Captured              |\ndf3:\n|    |   caused_by_ship_id |   id | note                    |   killed |   injured |\n|---:|--------------------:|-----:|:------------------------|---------:|----------:|\n|  0 |                   1 |    1 | Dantewada, Chhattisgarh |        8 |         0 |\n|  1 |                   2 |    2 | Dantewada, Chhattisgarh |        3 |         0 |\n|  2 |                   3 |   13 | Erraboru, Chhattisgarh  |       25 |         0 |\nForeign keys:\ndf2.lost_in_battle = df1.id,df3.caused_by_ship_id = df2.id\n"
  },
  {
    "table_paths": ["datasets/SPIDER_dev-tvshow/cartoon.csv"],
    "query": "Find the production code and channel of the most recently aired cartoon .",
    "cot": "",
    "code": "import numpy as np\nimport pandas as p\n\n# Assuming df is your DataFrame\ndf['Original_air_date'] = pd.to_datetime(df['Original_air_date'])\n\n# Sort the DataFrame by 'Original_air_date' in descending order\ndf = df.sort_values('Original_air_date', ascending=False)\n\n# Reset the index\ndf = df.reset_index(drop=True)\n\n# Select the first row\nmost_recent_cartoon = df.iloc[0]\n\n# Print the production code and channel of the most recently aired cartoon\nprint(\"Production code: \", most_recent_cartoon['Production_code'])\nprint(\"Channel: \", most_recent_cartoon['Channel'])",
    "observation": "OutOfBoundsDatetime: Out of bounds nanosecond timestamp: November14,2008, at position 0",
    "true_result": "[(102.0, '701')]",
    "table_infos": "df:\n|    |   id | Title                        | Directed_by   | Written_by      | Original_air_date   |   Production_code |   Channel |\n|---:|-----:|:-----------------------------|:--------------|:----------------|:--------------------|------------------:|----------:|\n|  0 |    1 | The Rise of the Blue Beetle! | Ben Jones     | Michael Jelenic | November14,2008     |               101 |       700 |\n"
  },
  {
    "table_paths": ["datasets/SPIDER_dev-tvshow/cartoon.csv"],
    "query": "What is the produdction code and channel of the most recent cartoon ?",
    "cot": "",
    "code": "import numpy as np\nimport pandas as pd\n\n# Assuming df is your DataFrame\ndf['Original_air_date'] = pd.to_datetime(df['Original_air_date'])\n\n# Sort the DataFrame by 'Original_air_date' in descending order\ndf = df.sort_values('Original_air_date', ascending=False)\n\n# Reset the index\ndf = df.reset_index(drop=True)\n\n# Select the first row\nmost_recent_cartoon = df.iloc[0]\n\n# Print the production code and channel of the most recent cartoon\nprint(\"Production code: \", most_recent_cartoon['Production_code'])\nprint(\"Channel: \", most_recent_cartoon['Channel'])",
    "observation": "OutOfBoundsDatetime: Out of bounds nanosecond timestamp: November14,2008, at position 0",
    "true_result": "[(102.0, '701')]",
    "table_infos": "df:\n|    |   id | Title                        | Directed_by   | Written_by      | Original_air_date   |   Production_code |   Channel |\n|---:|-----:|:-----------------------------|:--------------|:----------------|:--------------------|------------------:|----------:|\n|  0 |    1 | The Rise of the Blue Beetle! | Ben Jones     | Michael Jelenic | November14,2008     |               101 |       700 |\n"
  },
  {
    "table_paths": ["datasets/SPIDER_dev-tvshow/tv_channel.csv"],
    "query": "What is the pixel aspect ratio and country of origin for all TV channels that do not use English?",
    "cot": "\nWe need to filter the dataframe based on the condition that the language is not English and the High Definition TV is 'no'. Then, we need to select the 'Pixel_aspect_ratio_PAR' and 'Country' columns.\n",
    "code": "import numpy as np\nimport pandas as p\n\n# Load the data\n\n\n# Filter the data\nfiltered_df = df[(df['Language'] != 'English') & (df['High_definition_TV'] == 'no')]\n\n# Select the columns\nfinal_df = filtered_df[['Pixel_aspect_ratio_PAR', 'Country']]\n\n# Print the final result\nprint(final_df)",
    "observation": "KeyError: 'High_definition_TV'",
    "true_result": "[('4:3', 'Italy'), ('4:3', 'Italy'), ('4:3 / 16:9', 'Italy'), ('16:9', 'Italy'), ('4:3', 'Italy'), ('16:9', 'Italy'), ('4:3', 'Italy'), ('16:9', 'Italy'), ('4:3 / 16:9', 'Italy'), ('4:3 / 16:9', 'Italy'), ('4:3', 'Italy'), ('4:3', 'Italy')]",
    "table_infos": "df:\n|    |   id | series_name   | Country   | Language   | Content   | Pixel_aspect_ratio_PAR   | Hight_definition_TV   | Pay_per_view_PPV   | Package_Option   |\n|---:|-----:|:--------------|:----------|:-----------|:----------|:-------------------------|:----------------------|:-------------------|:-----------------|\n|  0 |  700 | Sky Radio     | Italy     | Italian    | music     | 4:3                      | no                    | no                 | Sky Famiglia     |\n"
  },
  {
    "table_paths": [
      "datasets/SPIDER_dev-voter_1/contestants.csv",
      "datasets/SPIDER_dev-voter_1/votes.csv",
      "datasets/SPIDER_dev-voter_1/area_code_state.csv"
    ],
    "query": "List the area codes in which voters voted both for the contestant 'Tabatha Gehling' and the contestant 'Kelly Clauss'.",
    "cot": "\nWe need to find the area codes where both 'Tabatha Gehling' and 'Kelly Clauss' have received votes. We can achieve this by merging the three dataframes on the 'contestant_number' column, then grouping by 'area_code' and checking if both contestants are in the 'contestant_name' column.\n",
    "code": "import numpy as np\nimport pandas as pd\n\n# Assuming df1, df2, df3 are the dataframes given\n\n# Merge df2 and df1 on 'contestant_number'\ndf = pd.merge(df2, df1, on='contestant_number')\n\n# Merge df with df3 on 'state'\ndf = pd.merge(df, df3, on='state')\n\n# Filter df to only include rows where 'contestant_name' is either 'Tabatha Gehling' or 'Kelly Clauss'\ndf = df[df['contestant_name'].isin(['Tabatha Gehling', 'Kelly Clauss'])]\n\n# Group by 'area_code' and 'contestant_name', and count the number of unique 'vote_id's\ndf = df.groupby(['area_code', 'contestant_name']).nunique()['vote_id'].reset_index()\n\n# Filter df to only include rows where both 'Tabatha Gehling' and 'Kelly Clauss' have received votes\ndf = df[df['contestant_name'].value_counts() == 2]\n\n# Declare `final_df` Variable\nfinal_df = df['area_code']\n\n# Print the final result\nprint(final_df)",
    "observation": "IndexingError: Unalignable boolean Series provided as indexer (index of the boolean Series and of the indexed object do not match).",
    "true_result": "[(212,), (315,), (347,), (516,), (518,), (585,), (607,), (631,), (646,), (716,), (718,), (845,), (914,), (917,)]",
    "table_infos": "df1:\n|    |   contestant_number | contestant_name   |\n|---:|--------------------:|:------------------|\n|  0 |                   1 | Edwina Burnam     |\n|  1 |                   2 | Tabatha Gehling   |\n|  2 |                   3 | Kelly Clauss      |\ndf2:\n|    |   vote_id |   phone_number | state   |   contestant_number | created             |\n|---:|----------:|---------------:|:--------|--------------------:|:--------------------|\n|  0 |         1 |     7182887233 | NY      |                   2 | 2018-03-09 19:03:21 |\n|  1 |         2 |     7148407040 | NY      |                   3 | 2018-03-09 19:03:36 |\n|  2 |         3 |     6209222712 | CA      |                   3 | 2018-03-09 19:03:39 |\ndf3:\n|    |   area_code | state   |\n|---:|------------:|:--------|\n|  0 |         201 | NJ      |\n|  1 |         202 | DC      |\n|  2 |         203 | CT      |\nForeign keys:\n\n"
  },
  {
    "table_paths": [
      "datasets/SPIDER_dev-world_1/country.csv",
      "datasets/SPIDER_dev-world_1/city.csv",
      "datasets/SPIDER_dev-world_1/countrylanguage.csv"
    ],
    "query": "What are the names of cities in Europe for which English is not the official language?",
    "cot": "\nWe need to join df1, df2 and df3 on CountryCode. Then filter the data where Continent is Europe and Language is English and IsOfficial is not 'T'.\n",
    "code": "import numpy as np\nimport pandas as ppy\n\n# Merge df1, df2 and df3 on CountryCode\ndf = pd.merge(df1, df2, on='Code', how='left')\ndf = pd.merge(df, df3, on='Code', how='left')\n\n# Filter the data where Continent is Europe and Language is English and IsOfficial is not 'T'\ndf = df[(df['Continent'] == 'Europe') & (df['Language'] == 'English') & (df['IsOfficial'] != 'T')]\n\n# Assign the names of cities to `final_df`\nfinal_df = df['Name']\n\n# Print the final result\nprint(final_df)",
    "observation": "KeyError: 'Code'",
    "true_result": "[('Amsterdam',), ('Rotterdam',), ('Haag',), ('Utrecht',), ('Eindhoven',), ('Tilburg',), ('Groningen',), ('Breda',), ('Apeldoorn',), ('Nijmegen',), ('Enschede',), ('Haarlem',), ('Almere',), ('Arnhem',), ('Zaanstad',), ('´s-Hertogenbosch',), ('Amersfoort',), ('Maastricht',), ('Dordrecht',), ('Leiden',), ('Haarlemmermeer',), ('Zoetermeer',), ('Emmen',), ('Zwolle',), ('Ede',), ('Delft',), ('Heerlen',), ('Alkmaar',), ('Tirana',), ('Andorra la Vella',), ('Antwerpen',), ('Gent',), ('Charleroi',), ('Liège',), ('Bruxelles [Brussel]',), ('Brugge',), ('Schaerbeek',), ('Namur',), ('Mons',), ('Sarajevo',), ('Banja Luka',), ('Zenica',), ('Sofija',), ('Plovdiv',), ('Varna',), ('Burgas',), ('Ruse',), ('Stara Zagora',), ('Pleven',), ('Sliven',), ('Dobric',), ('Šumen',), ('Madrid',), ('Barcelona',), ('Valencia',), ('Sevilla',), ('Zaragoza',), ('Málaga',), ('Bilbao',), ('Las Palmas de Gran Canaria',), ('Murcia',), ('Palma de Mallorca',), ('Valladolid',), ('Córdoba',), ('Vigo',), ('Alicante [Alacant]',), ('Gijón',), ('L´Hospitalet de Llobregat',), ('Granada',), ('A Coruña (La Coruña)',), ('Vitoria-Gasteiz',), ('Santa Cruz de Tenerife',), ('Badalona',), ('Oviedo',), ('Móstoles',), ('Elche [Elx]',), ('Sabadell',), ('Santander',), ('Jerez de la Frontera',), ('Pamplona [Iruña]',), ('Donostia-San Sebastián',), ('Cartagena',), ('Leganés',), ('Fuenlabrada',), ('Almería',), ('Terrassa',), ('Alcalá de Henares',), ('Burgos',), ('Salamanca',), ('Albacete',), ('Getafe',), ('Cádiz',), ('Alcorcón',), ('Huelva',), ('León',), ('Castellón de la Plana [Castell',), ('Badajoz',), ('[San Cristóbal de] la Laguna',), ('Logroño',), ('Santa Coloma de Gramenet',), ('Tarragona',), ('Lleida (Lérida)',), ('Jaén',), ('Ourense (Orense)',), ('Mataró',), ('Algeciras',), ('Marbella',), ('Barakaldo',), ('Dos Hermanas',), ('Santiago de Compostela',), ('Torrejón de Ardoz',), ('Tórshavn',), ('Longyearbyen',), ('Reykjavík',), ('Roma',), ('Milano',), ('Napoli',), ('Torino',), ('Palermo',), ('Genova',), ('Bologna',), ('Firenze',), ('Catania',), ('Bari',), ('Venezia',), ('Messina',), ('Verona',), ('Trieste',), ('Padova',), ('Taranto',), ('Brescia',), ('Reggio di Calabria',), ('Modena',), ('Prato',), ('Parma',), ('Cagliari',), ('Livorno',), ('Perugia',), ('Foggia',), ('Reggio nell´ Emilia',), ('Salerno',), ('Ravenna',), ('Ferrara',), ('Rimini',), ('Syrakusa',), ('Sassari',), ('Monza',), ('Bergamo',), ('Pescara',), ('Latina',), ('Vicenza',), ('Terni',), ('Forlì',), ('Trento',), ('Novara',), ('Piacenza',), ('Ancona',), ('Lecce',), ('Bolzano',), ('Catanzaro',), ('La Spezia',), ('Udine',), ('Torre del Greco',), ('Andria',), ('Brindisi',), ('Giugliano in Campania',), ('Pisa',), ('Barletta',), ('Arezzo',), ('Alessandria',), ('Cesena',), ('Pesaro',), ('Wien',), ('Graz',), ('Linz',), ('Salzburg',), ('Innsbruck',), ('Klagenfurt',), ('Beograd',), ('Novi Sad',), ('Niš',), ('Priština',), ('Kragujevac',), ('Podgorica',), ('Subotica',), ('Prizren',), ('Athenai',), ('Thessaloniki',), ('Pireus',), ('Patras',), ('Peristerion',), ('Herakleion',), ('Kallithea',), ('Larisa',), ('Zagreb',), ('Split',), ('Rijeka',), ('Osijek',), ('Riga',), ('Daugavpils',), ('Liepaja',), ('Schaan',), ('Vaduz',), ('Vilnius',), ('Kaunas',), ('Klaipeda',), ('Šiauliai',), ('Panevezys',), ('Luxembourg [Luxemburg/Lëtzebuerg]',), ('Skopje',), ('Chisinau',), ('Tiraspol',), ('Balti',), ('Bender (Tîghina)',), ('Monte-Carlo',), ('Monaco-Ville',), ('Oslo',), ('Bergen',), ('Trondheim',), ('Stavanger',), ('Bærum',), ('Lisboa',), ('Porto',), ('Amadora',), ('Coímbra',), ('Braga',), ('Warszawa',), ('Lódz',), ('Kraków',), ('Wroclaw',), ('Poznan',), ('Gdansk',), ('Szczecin',), ('Bydgoszcz',), ('Lublin',), ('Katowice',), ('Bialystok',), ('Czestochowa',), ('Gdynia',), ('Sosnowiec',), ('Radom',), ('Kielce',), ('Gliwice',), ('Torun',), ('Bytom',), ('Zabrze',), ('Bielsko-Biala',), ('Olsztyn',), ('Rzeszów',), ('Ruda Slaska',), ('Rybnik',), ('Walbrzych',), ('Tychy',), ('Dabrowa Górnicza',), ('Plock',), ('Elblag',), ('Opole',), ('Gorzów Wielkopolski',), ('Wloclawek',), ('Chorzów',), ('Tarnów',), ('Zielona Góra',), ('Koszalin',), ('Legnica',), ('Kalisz',), ('Grudziadz',), ('Slupsk',), ('Jastrzebie-Zdrój',), ('Jaworzno',), ('Jelenia Góra',), ('Paris',), ('Marseille',), ('Lyon',), ('Toulouse',), ('Nice',), ('Nantes',), ('Strasbourg',), ('Montpellier',), ('Bordeaux',), ('Rennes',), ('Le Havre',), ('Reims',), ('Lille',), ('St-Étienne',), ('Toulon',), ('Grenoble',), ('Angers',), ('Dijon',), ('Brest',), ('Le Mans',), ('Clermont-Ferrand',), ('Amiens',), ('Aix-en-Provence',), ('Limoges',), ('Nîmes',), ('Tours',), ('Villeurbanne',), ('Metz',), ('Besançon',), ('Caen',), ('Orléans',), ('Mulhouse',), ('Rouen',), ('Boulogne-Billancourt',), ('Perpignan',), ('Nancy',), ('Roubaix',), ('Argenteuil',), ('Tourcoing',), ('Montreuil',), ('Bucuresti',), ('Iasi',), ('Constanta',), ('Cluj-Napoca',), ('Galati',), ('Timisoara',), ('Brasov',), ('Craiova',), ('Ploiesti',), ('Braila',), ('Oradea',), ('Bacau',), ('Pitesti',), ('Arad',), ('Sibiu',), ('Târgu Mures',), ('Baia Mare',), ('Buzau',), ('Satu Mare',), ('Botosani',), ('Piatra Neamt',), ('Râmnicu Vâlcea',), ('Suceava',), ('Drobeta-Turnu Severin',), ('Târgoviste',), ('Focsani',), ('Târgu Jiu',), ('Tulcea',), ('Resita',), ('Stockholm',), ('Gothenburg [Göteborg]',), ('Malmö',), ('Uppsala',), ('Linköping',), ('Västerås',), ('Örebro',), ('Norrköping',), ('Helsingborg',), ('Jönköping',), ('Umeå',), ('Lund',), ('Borås',), ('Sundsvall',), ('Gävle',), ('Berlin',), ('Hamburg',), ('Munich [München]',), ('Köln',), ('Frankfurt am Main',), ('Essen',), ('Dortmund',), ('Stuttgart',), ('Düsseldorf',), ('Bremen',), ('Duisburg',), ('Hannover',), ('Leipzig',), ('Nürnberg',), ('Dresden',), ('Bochum',), ('Wuppertal',), ('Bielefeld',), ('Mannheim',), ('Bonn',), ('Gelsenkirchen',), ('Karlsruhe',), ('Wiesbaden',), ('Münster',), ('Mönchengladbach',), ('Chemnitz',), ('Augsburg',), ('Halle/Saale',), ('Braunschweig',), ('Aachen',), ('Krefeld',), ('Magdeburg',), ('Kiel',), ('Oberhausen',), ('Lübeck',), ('Hagen',), ('Rostock',), ('Freiburg im Breisgau',), ('Erfurt',), ('Kassel',), ('Saarbrücken',), ('Mainz',), ('Hamm',), ('Herne',), ('Mülheim an der Ruhr',), ('Solingen',), ('Osnabrück',), ('Ludwigshafen am Rhein',), ('Leverkusen',), ('Oldenburg',), ('Neuss',), ('Heidelberg',), ('Darmstadt',), ('Paderborn',), ('Potsdam',), ('Würzburg',), ('Regensburg',), ('Recklinghausen',), ('Göttingen',), ('Bremerhaven',), ('Wolfsburg',), ('Bottrop',), ('Remscheid',), ('Heilbronn',), ('Pforzheim',), ('Offenbach am Main',), ('Ulm',), ('Ingolstadt',), ('Gera',), ('Salzgitter',), ('Cottbus',), ('Reutlingen',), ('Fürth',), ('Siegen',), ('Koblenz',), ('Moers',), ('Bergisch Gladbach',), ('Zwickau',), ('Hildesheim',), ('Witten',), ('Schwerin',), ('Erlangen',), ('Kaiserslautern',), ('Trier',), ('Jena',), ('Iserlohn',), ('Gütersloh',), ('Marl',), ('Lünen',), ('Düren',), ('Ratingen',), ('Velbert',), ('Esslingen am Neckar',), ('Serravalle',), ('San Marino',), ('Bratislava',), ('Košice',), ('Prešov',), ('Ljubljana',), ('Maribor',), ('Helsinki [Helsingfors]',), ('Espoo',), ('Tampere',), ('Vantaa',), ('Turku [Åbo]',), ('Oulu',), ('Lahti',), ('Zürich',), ('Geneve',), ('Basel',), ('Bern',), ('Lausanne',), ('København',), ('Århus',), ('Odense',), ('Aalborg',), ('Frederiksberg',), ('Praha',), ('Brno',), ('Ostrava',), ('Plzen',), ('Olomouc',), ('Liberec',), ('Ceské Budejovice',), ('Hradec Králové',), ('Ústí nad Labem',), ('Pardubice',), ('Kyiv',), ('Harkova [Harkiv]',), ('Dnipropetrovsk',), ('Donetsk',), ('Odesa',), ('Zaporizzja',), ('Lviv',), ('Kryvyi Rig',), ('Mykolajiv',), ('Mariupol',), ('Lugansk',), ('Vinnytsja',), ('Makijivka',), ('Herson',), ('Sevastopol',), ('Simferopol',), ('Pultava [Poltava]',), ('Tšernigiv',), ('Tšerkasy',), ('Gorlivka',), ('Zytomyr',), ('Sumy',), ('Dniprodzerzynsk',), ('Kirovograd',), ('Hmelnytskyi',), ('Tšernivtsi',), ('Rivne',), ('Krementšuk',), ('Ivano-Frankivsk',), ('Ternopil',), ('Lutsk',), ('Bila Tserkva',), ('Kramatorsk',), ('Melitopol',), ('Kertš',), ('Nikopol',), ('Berdjansk',), ('Pavlograd',), ('Sjeverodonetsk',), ('Slovjansk',), ('Uzgorod',), ('Altševsk',), ('Lysytšansk',), ('Jevpatorija',), ('Kamjanets-Podilskyi',), ('Jenakijeve',), ('Krasnyi Lutš',), ('Stahanov',), ('Oleksandrija',), ('Konotop',), ('Kostjantynivka',), ('Berdytšiv',), ('Izmajil',), ('Šostka',), ('Uman',), ('Brovary',), ('Mukatševe',), ('Budapest',), ('Debrecen',), ('Miskolc',), ('Szeged',), ('Pécs',), ('Györ',), ('Nyiregyháza',), ('Kecskemét',), ('Székesfehérvár',), ('Minsk',), ('Gomel',), ('Mogiljov',), ('Vitebsk',), ('Grodno',), ('Bobruisk',), ('Baranovitši',), ('Borisov',), ('Pinsk',), ('Orša',), ('Mozyr',), ('Novopolotsk',), ('Lida',), ('Soligorsk',), ('Molodetšno',), ('Città del Vaticano',), ('Moscow',), ('St Petersburg',), ('Novosibirsk',), ('Nizni Novgorod',), ('Jekaterinburg',), ('Samara',), ('Omsk',), ('Kazan',), ('Ufa',), ('Tšeljabinsk',), ('Rostov-na-Donu',), ('Perm',), ('Volgograd',), ('Voronez',), ('Krasnojarsk',), ('Saratov',), ('Toljatti',), ('Uljanovsk',), ('Izevsk',), ('Krasnodar',), ('Jaroslavl',), ('Habarovsk',), ('Vladivostok',), ('Irkutsk',), ('Barnaul',), ('Novokuznetsk',), ('Penza',), ('Rjazan',), ('Orenburg',), ('Lipetsk',), ('Nabereznyje Tšelny',), ('Tula',), ('Tjumen',), ('Kemerovo',), ('Astrahan',), ('Tomsk',), ('Kirov',), ('Ivanovo',), ('Tšeboksary',), ('Brjansk',), ('Tver',), ('Kursk',), ('Magnitogorsk',), ('Kaliningrad',), ('Nizni Tagil',), ('Murmansk',), ('Ulan-Ude',), ('Kurgan',), ('Arkangeli',), ('Sotši',), ('Smolensk',), ('Orjol',), ('Stavropol',), ('Belgorod',), ('Kaluga',), ('Vladimir',), ('Mahatškala',), ('Tšerepovets',), ('Saransk',), ('Tambov',), ('Vladikavkaz',), ('Tšita',), ('Vologda',), ('Veliki Novgorod',), ('Komsomolsk-na-Amure',), ('Kostroma',), ('Volzski',), ('Taganrog',), ('Petroskoi',), ('Bratsk',), ('Dzerzinsk',), ('Surgut',), ('Orsk',), ('Sterlitamak',), ('Angarsk',), ('Joškar-Ola',), ('Rybinsk',), ('Prokopjevsk',), ('Niznevartovsk',), ('Naltšik',), ('Syktyvkar',), ('Severodvinsk',), ('Bijsk',), ('Niznekamsk',), ('Blagoveštšensk',), ('Šahty',), ('Staryi Oskol',), ('Zelenograd',), ('Balakovo',), ('Novorossijsk',), ('Pihkova',), ('Zlatoust',), ('Jakutsk',), ('Podolsk',), ('Petropavlovsk-Kamtšatski',), ('Kamensk-Uralski',), ('Engels',), ('Syzran',), ('Grozny',), ('Novotšerkassk',), ('Berezniki',), ('Juzno-Sahalinsk',), ('Volgodonsk',), ('Abakan',), ('Maikop',), ('Miass',), ('Armavir',), ('Ljubertsy',), ('Rubtsovsk',), ('Kovrov',), ('Nahodka',), ('Ussurijsk',), ('Salavat',), ('Mytištši',), ('Kolomna',), ('Elektrostal',), ('Murom',), ('Kolpino',), ('Norilsk',), ('Almetjevsk',), ('Novomoskovsk',), ('Dimitrovgrad',), ('Pervouralsk',), ('Himki',), ('Balašiha',), ('Nevinnomyssk',), ('Pjatigorsk',), ('Korolev',), ('Serpuhov',), ('Odintsovo',), ('Orehovo-Zujevo',), ('Kamyšin',), ('Novotšeboksarsk',), ('Tšerkessk',), ('Atšinsk',), ('Magadan',), ('Mitšurinsk',), ('Kislovodsk',), ('Jelets',), ('Seversk',), ('Noginsk',), ('Velikije Luki',), ('Novokuibyševsk',), ('Neftekamsk',), ('Leninsk-Kuznetski',), ('Oktjabrski',), ('Sergijev Posad',), ('Arzamas',), ('Kiseljovsk',), ('Novotroitsk',), ('Obninsk',), ('Kansk',), ('Glazov',), ('Solikamsk',), ('Sarapul',), ('Ust-Ilimsk',), ('Štšolkovo',), ('Mezduretšensk',), ('Usolje-Sibirskoje',), ('Elista',), ('Novošahtinsk',), ('Votkinsk',), ('Kyzyl',), ('Serov',), ('Zelenodolsk',), ('Zeleznodoroznyi',), ('Kinešma',), ('Kuznetsk',), ('Uhta',), ('Jessentuki',), ('Tobolsk',), ('Neftejugansk',), ('Bataisk',), ('Nojabrsk',), ('Balašov',), ('Zeleznogorsk',), ('Zukovski',), ('Anzero-Sudzensk',), ('Bugulma',), ('Novouralsk',), ('Puškin',), ('Vorkuta',), ('Derbent',), ('Kirovo-Tšepetsk',), ('Krasnogorsk',), ('Klin',), ('Tšaikovski',), ('Novyi Urengoi',), ('Tallinn',), ('Tartu',)]",
    "table_infos": "df1:\n|    | Code   | Name        | Continent     | Region                    |     SurfaceArea |   IndepYear |   Population |   LifeExpectancy |   GNP |   GNPOld | LocalName             | GovernmentForm                               | HeadOfState             |   Capital | Code2   |\n|---:|:-------|:------------|:--------------|:--------------------------|----------------:|------------:|-------------:|-----------------:|------:|---------:|:----------------------|:---------------------------------------------|:------------------------|----------:|:--------|\n|  0 | ABW    | Aruba       | North America | Caribbean                 |    193          |         nan |       103000 |             78.4 |   828 |      793 | Aruba                 | Nonmetropolitan Territory of The Netherlands | Beatrix                 |       129 | AW      |\n|  1 | AFG    | Afghanistan | Asia          | Southern and Central Asia | 652090          |        1919 |     22720000 |             45.9 |  5976 |      nan | Afganistan/Afqanestan | Islamic Emirate                              | Mohammad Omar           |         1 | AF      |\n|  2 | AGO    | Angola      | Africa        | Central Africa            |      1.2467e+06 |        1975 |     12878000 |             38.3 |  6648 |     7984 | Angola                | Republic                                     | José Eduardo dos Santos |        56 | AO      |\ndf2:\n|    |   ID | Name     | CountryCode   | District   |   Population |\n|---:|-----:|:---------|:--------------|:-----------|-------------:|\n|  0 |    1 | Kabul    | AFG           | Kabol      |      1780000 |\n|  1 |    2 | Qandahar | AFG           | Qandahar   |       237500 |\n|  2 |    3 | Herat    | AFG           | Herat      |       186800 |\ndf3:\n|    | CountryCode   | Language   | IsOfficial   |   Percentage |\n|---:|:--------------|:-----------|:-------------|-------------:|\n|  0 | ABW           | Dutch      | T            |          5.3 |\n|  1 | ABW           | English    | F            |          9.5 |\n|  2 | ABW           | Papiamento | F            |         76.7 |\nForeign keys:\ndf2.CountryCode = df1.Code,df3.CountryCode = df1.Code\n"
  },
  {
    "table_paths": ["datasets/SPIDER_dev-dog_kennels/professionals.csv"],
    "query": "Find the role, street, city and state of the professionals living in a city that contains the substring 'West'.",
    "cot": "We will filter the dataframe based on the condition that the city contains the substring 'West'. We will then select the columns 'role_code', 'street', 'city', 'state' from the filtered dataframe.\n",
    "code": "import numpy as np\nimport pandas as p np\n\n# Assuming df is the dataframe\n\n# Data Processing\nfiltered_df = df[df['city'].str.contains('West')]\n\n# Declare `final_df` Variable\nfinal_df = filtered_df[['role_code', 'street', 'city', 'state']]\n\n# Print the final result\nprint(final_df)",
    "observation": "SyntaxError: invalid syntax (<unknown>, line 2)",
    "true_result": "[('Employee', '6915 Oberbrunner Point Suite 491\\nGleasonville, LA ', 'West Heidi', 'Indiana')]",
    "table_infos": "df:\n|    |   professional_id | role_code   | first_name   | street                           | city       | state   |   zip_code | last_name   | email_address               | home_phone       | cell_number         |\n|---:|------------------:|:------------|:-------------|:---------------------------------|:-----------|:--------|-----------:|:------------|:----------------------------|:-----------------|:--------------------|\n|  0 |                 1 | Employee    | Taryn        | 6915 Oberbrunner Point Suite 491 | West Heidi | Indiana |      06646 | Braun       | deanna.schuster@example.com | +71(6)2898266914 | (275)939-2435x80863 |\n|    |                   |             |              | Gleasonville, LA                 |            |         |            |             |                             |                  |                     |\n"
  },
  {
    "table_paths": ["datasets/SPIDER_dev-dog_kennels/professionals.csv"],
    "query": "List the email, cell phone and home phone of all the professionals.",
    "cot": "\nWe will use pandas to manipulate the data. We will select the columns 'email_address', 'home_phone' and 'cell_number' from the dataframe.\n",
    "code": "import numpy as np\nimport pandas as pd\n\n# Assuming df is the dataframe2898266914'],\n    'cell_number': ['(275)939-2435x80863']\n})\n\n# Data Processing: Select the columns 'email_address', 'home_phone' and 'cell_number'\nfinal_df = df[['email_address', 'home_phone', 'cell_number']]\n\n# Print the final result\nprint(final_df)",
    "observation": "SyntaxError: leading zeros in decimal integer literals are not permitted; use an 0o prefix for octal integers (<unknown>, line 12)",
    "true_result": "[('deanna.schuster@example.com', '(275)939-2435x80863', '+71(6)2898266914'), ('lucile.shanahan@example.org', '889-940-2676', '+02(1)0259033559'), ('uboehm@example.org', '(369)908-7311x065', '325-155-0801x7005'), ('lourdes.lowe@example.net', '00230569697', '312.216.3352'), ('mekhi.little@example.org', '011.193.9081x3186', '1-609-566-2752x25197'), ('jacynthe.mclaughlin@example.net', '139-321-7313', '+43(5)1132733868'), ('lambert62@example.org', '499-434-0215x1628', '022.529.0550x1319'), ('goyette.roosevelt@example.net', '328.842.3792', '891.475.2256'), ('schneider.kathryne@example.org', '962-983-8109x3509', '320-508-6023'), ('jerrod.bahringer@example.org', '461-801-2600', '(230)338-3342x585'), ('west.eula@example.net', '609-405-2990', '(920)304-4499x59146'), ('marquardt.furman@example.org', '1-181-670-9466', '246-951-0080x76716'), ('delphine29@example.com', '880-659-7577x736', '346.594.3739'), ('cole.margarita@example.org', '1-185-137-1945x409', '971.048.3763x9404'), ('jeichmann@example.com', '1-258-285-4707x8020', '1-138-287-3775')]",
    "table_infos": "df:\n|    |   professional_id | role_code   | first_name   | street                           | city       | state   |   zip_code | last_name   | email_address               | home_phone       | cell_number         |\n|---:|------------------:|:------------|:-------------|:---------------------------------|:-----------|:--------|-----------:|:------------|:----------------------------|:-----------------|:--------------------|\n|  0 |                 1 | Employee    | Taryn        | 6915 Oberbrunner Point Suite 491 | West Heidi | Indiana |      06646 | Braun       | deanna.schuster@example.com | +71(6)2898266914 | (275)939-2435x80863 |\n|    |                   |             |              | Gleasonville, LA                 |            |         |            |             |                             |                  |                     |\n"
  }
]
